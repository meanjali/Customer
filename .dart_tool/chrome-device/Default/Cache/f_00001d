define([], (function load__dart_sdk() {
  'use strict';
  const _library = Object.create(null);
  const dart = Object.create(_library);
  dart.library = _library;
  var _debugger = Object.create(dart.library);
  var _foreign_helper = Object.create(dart.library);
  var _interceptors = Object.create(dart.library);
  var _internal = Object.create(dart.library);
  var _isolate_helper = Object.create(dart.library);
  var _js_helper = Object.create(dart.library);
  var _js_primitives = Object.create(dart.library);
  var _metadata = Object.create(dart.library);
  var _native_typed_data = Object.create(dart.library);
  var async = Object.create(dart.library);
  var collection = Object.create(dart.library);
  var convert = Object.create(dart.library);
  var developer = Object.create(dart.library);
  var io = Object.create(dart.library);
  var isolate$ = Object.create(dart.library);
  var js = Object.create(dart.library);
  var js_util = Object.create(dart.library);
  var math = Object.create(dart.library);
  var typed_data = Object.create(dart.library);
  var indexed_db = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var html_common = Object.create(dart.library);
  var svg$ = Object.create(dart.library);
  var web_audio = Object.create(dart.library);
  var web_gl = Object.create(dart.library);
  var web_sql = Object.create(dart.library);
  var core = Object.create(dart.library);
  var ui = Object.create(dart.library);
  var _engine = Object.create(dart.library);
  var _http = Object.create(dart.library);
  var _js_annotations = Object.create(dart.library);
  var dartx = Object.create(dart.library);
  const _privateNames = Symbol("_privateNames");
  dart.privateName = function(library, name) {
    let names = library[_privateNames];
    if (names == null) names = library[_privateNames] = new Map();
    let symbol = names.get(name);
    if (symbol == null) names.set(name, symbol = Symbol(name));
    return symbol;
  };
  var $hashCode = dartx.hashCode = Symbol("dartx.hashCode");
  var $isNotEmpty = dartx.isNotEmpty = Symbol("dartx.isNotEmpty");
  var $where = dartx.where = Symbol("dartx.where");
  var $join = dartx.join = Symbol("dartx.join");
  var $length = dartx.length = Symbol("dartx.length");
  var $_equals = dartx._equals = Symbol("dartx._equals");
  var $toString = dartx.toString = Symbol("dartx.toString");
  var $noSuchMethod = dartx.noSuchMethod = Symbol("dartx.noSuchMethod");
  var $cast = dartx.cast = Symbol("dartx.cast");
  var $addAll = dartx.addAll = Symbol("dartx.addAll");
  var $_set = dartx._set = Symbol("dartx._set");
  var $_get = dartx._get = Symbol("dartx._get");
  var $clear = dartx.clear = Symbol("dartx.clear");
  var $contains = dartx.contains = Symbol("dartx.contains");
  var $indexOf = dartx.indexOf = Symbol("dartx.indexOf");
  var $add = dartx.add = Symbol("dartx.add");
  var $isEmpty = dartx.isEmpty = Symbol("dartx.isEmpty");
  var $map = dartx.map = Symbol("dartx.map");
  var $toList = dartx.toList = Symbol("dartx.toList");
  var $sublist = dartx.sublist = Symbol("dartx.sublist");
  var $substring = dartx.substring = Symbol("dartx.substring");
  var $split = dartx.split = Symbol("dartx.split");
  var $trim = dartx.trim = Symbol("dartx.trim");
  var $runtimeType = dartx.runtimeType = Symbol("dartx.runtimeType");
  var $containsKey = dartx.containsKey = Symbol("dartx.containsKey");
  var $any = dartx.any = Symbol("dartx.any");
  var $keys = dartx.keys = Symbol("dartx.keys");
  var $remove = dartx.remove = Symbol("dartx.remove");
  var $values = dartx.values = Symbol("dartx.values");
  var $entries = dartx.entries = Symbol("dartx.entries");
  var $dartStack = dartx.dartStack = Symbol("dartx.dartStack");
  var $truncate = dartx.truncate = Symbol("dartx.truncate");
  var $toInt = dartx.toInt = Symbol("dartx.toInt");
  var $skip = dartx.skip = Symbol("dartx.skip");
  var $take = dartx.take = Symbol("dartx.take");
  var $asMap = dartx.asMap = Symbol("dartx.asMap");
  var $forEach = dartx.forEach = Symbol("dartx.forEach");
  var $elementAt = dartx.elementAt = Symbol("dartx.elementAt");
  var $last = dartx.last = Symbol("dartx.last");
  var $firstWhere = dartx.firstWhere = Symbol("dartx.firstWhere");
  var $replaceFirst = dartx.replaceFirst = Symbol("dartx.replaceFirst");
  var $startsWith = dartx.startsWith = Symbol("dartx.startsWith");
  var $compareTo = dartx.compareTo = Symbol("dartx.compareTo");
  var $sort = dartx.sort = Symbol("dartx.sort");
  var $putIfAbsent = dartx.putIfAbsent = Symbol("dartx.putIfAbsent");
  var $round = dartx.round = Symbol("dartx.round");
  var $bitAnd = dartx['&'] = Symbol("dartx.&");
  var $bitOr = dartx['|'] = Symbol("dartx.|");
  var $bitXor = dartx['^'] = Symbol("dartx.^");
  var $stackTrace = dartx.stackTrace = Symbol("dartx.stackTrace");
  var $invalidValue = dartx.invalidValue = Symbol("dartx.invalidValue");
  var $name = dartx.name = Symbol("dartx.name");
  var $message = dartx.message = Symbol("dartx.message");
  var $checkMutable = dartx.checkMutable = Symbol("dartx.checkMutable");
  var $checkGrowable = dartx.checkGrowable = Symbol("dartx.checkGrowable");
  var $removeAt = dartx.removeAt = Symbol("dartx.removeAt");
  var $insert = dartx.insert = Symbol("dartx.insert");
  var $setRange = dartx.setRange = Symbol("dartx.setRange");
  var $insertAll = dartx.insertAll = Symbol("dartx.insertAll");
  var $setAll = dartx.setAll = Symbol("dartx.setAll");
  var $removeLast = dartx.removeLast = Symbol("dartx.removeLast");
  var $removeWhere = dartx.removeWhere = Symbol("dartx.removeWhere");
  var $retainWhere = dartx.retainWhere = Symbol("dartx.retainWhere");
  var $expand = dartx.expand = Symbol("dartx.expand");
  var $takeWhile = dartx.takeWhile = Symbol("dartx.takeWhile");
  var $skipWhile = dartx.skipWhile = Symbol("dartx.skipWhile");
  var $reduce = dartx.reduce = Symbol("dartx.reduce");
  var $fold = dartx.fold = Symbol("dartx.fold");
  var $lastWhere = dartx.lastWhere = Symbol("dartx.lastWhere");
  var $singleWhere = dartx.singleWhere = Symbol("dartx.singleWhere");
  var $getRange = dartx.getRange = Symbol("dartx.getRange");
  var $first = dartx.first = Symbol("dartx.first");
  var $single = dartx.single = Symbol("dartx.single");
  var $removeRange = dartx.removeRange = Symbol("dartx.removeRange");
  var $fillRange = dartx.fillRange = Symbol("dartx.fillRange");
  var $replaceRange = dartx.replaceRange = Symbol("dartx.replaceRange");
  var $every = dartx.every = Symbol("dartx.every");
  var $reversed = dartx.reversed = Symbol("dartx.reversed");
  var $shuffle = dartx.shuffle = Symbol("dartx.shuffle");
  var $lastIndexOf = dartx.lastIndexOf = Symbol("dartx.lastIndexOf");
  var $toSet = dartx.toSet = Symbol("dartx.toSet");
  var $iterator = dartx.iterator = Symbol("dartx.iterator");
  var $followedBy = dartx.followedBy = Symbol("dartx.followedBy");
  var $whereType = dartx.whereType = Symbol("dartx.whereType");
  var $plus = dartx['+'] = Symbol("dartx.+");
  var $indexWhere = dartx.indexWhere = Symbol("dartx.indexWhere");
  var $lastIndexWhere = dartx.lastIndexWhere = Symbol("dartx.lastIndexWhere");
  var $isNegative = dartx.isNegative = Symbol("dartx.isNegative");
  var $isNaN = dartx.isNaN = Symbol("dartx.isNaN");
  var $isInfinite = dartx.isInfinite = Symbol("dartx.isInfinite");
  var $isFinite = dartx.isFinite = Symbol("dartx.isFinite");
  var $remainder = dartx.remainder = Symbol("dartx.remainder");
  var $abs = dartx.abs = Symbol("dartx.abs");
  var $sign = dartx.sign = Symbol("dartx.sign");
  var $truncateToDouble = dartx.truncateToDouble = Symbol("dartx.truncateToDouble");
  var $ceilToDouble = dartx.ceilToDouble = Symbol("dartx.ceilToDouble");
  var $ceil = dartx.ceil = Symbol("dartx.ceil");
  var $floorToDouble = dartx.floorToDouble = Symbol("dartx.floorToDouble");
  var $floor = dartx.floor = Symbol("dartx.floor");
  var $roundToDouble = dartx.roundToDouble = Symbol("dartx.roundToDouble");
  var $clamp = dartx.clamp = Symbol("dartx.clamp");
  var $toDouble = dartx.toDouble = Symbol("dartx.toDouble");
  var $toStringAsFixed = dartx.toStringAsFixed = Symbol("dartx.toStringAsFixed");
  var $toStringAsExponential = dartx.toStringAsExponential = Symbol("dartx.toStringAsExponential");
  var $toStringAsPrecision = dartx.toStringAsPrecision = Symbol("dartx.toStringAsPrecision");
  var $codeUnitAt = dartx.codeUnitAt = Symbol("dartx.codeUnitAt");
  var $toRadixString = dartx.toRadixString = Symbol("dartx.toRadixString");
  var $times = dartx['*'] = Symbol("dartx.*");
  var $_negate = dartx._negate = Symbol("dartx._negate");
  var $minus = dartx['-'] = Symbol("dartx.-");
  var $divide = dartx['/'] = Symbol("dartx./");
  var $modulo = dartx['%'] = Symbol("dartx.%");
  var $floorDivide = dartx['~/'] = Symbol("dartx.~/");
  var $leftShift = dartx['<<'] = Symbol("dartx.<<");
  var $rightShift = dartx['>>'] = Symbol("dartx.>>");
  var $lessThan = dartx['<'] = Symbol("dartx.<");
  var $greaterThan = dartx['>'] = Symbol("dartx.>");
  var $lessOrEquals = dartx['<='] = Symbol("dartx.<=");
  var $greaterOrEquals = dartx['>='] = Symbol("dartx.>=");
  var $isEven = dartx.isEven = Symbol("dartx.isEven");
  var $isOdd = dartx.isOdd = Symbol("dartx.isOdd");
  var $toUnsigned = dartx.toUnsigned = Symbol("dartx.toUnsigned");
  var $toSigned = dartx.toSigned = Symbol("dartx.toSigned");
  var $bitLength = dartx.bitLength = Symbol("dartx.bitLength");
  var $modPow = dartx.modPow = Symbol("dartx.modPow");
  var $modInverse = dartx.modInverse = Symbol("dartx.modInverse");
  var $gcd = dartx.gcd = Symbol("dartx.gcd");
  var $bitNot = dartx['~'] = Symbol("dartx.~");
  var $allMatches = dartx.allMatches = Symbol("dartx.allMatches");
  var $matchAsPrefix = dartx.matchAsPrefix = Symbol("dartx.matchAsPrefix");
  var $endsWith = dartx.endsWith = Symbol("dartx.endsWith");
  var $replaceAll = dartx.replaceAll = Symbol("dartx.replaceAll");
  var $splitMapJoin = dartx.splitMapJoin = Symbol("dartx.splitMapJoin");
  var $replaceAllMapped = dartx.replaceAllMapped = Symbol("dartx.replaceAllMapped");
  var $replaceFirstMapped = dartx.replaceFirstMapped = Symbol("dartx.replaceFirstMapped");
  var $toLowerCase = dartx.toLowerCase = Symbol("dartx.toLowerCase");
  var $toUpperCase = dartx.toUpperCase = Symbol("dartx.toUpperCase");
  var $trimLeft = dartx.trimLeft = Symbol("dartx.trimLeft");
  var $trimRight = dartx.trimRight = Symbol("dartx.trimRight");
  var $padLeft = dartx.padLeft = Symbol("dartx.padLeft");
  var $padRight = dartx.padRight = Symbol("dartx.padRight");
  var $codeUnits = dartx.codeUnits = Symbol("dartx.codeUnits");
  var $runes = dartx.runes = Symbol("dartx.runes");
  var $buffer = dartx.buffer = Symbol("dartx.buffer");
  var $offsetInBytes = dartx.offsetInBytes = Symbol("dartx.offsetInBytes");
  var $containsValue = dartx.containsValue = Symbol("dartx.containsValue");
  var $update = dartx.update = Symbol("dartx.update");
  var $updateAll = dartx.updateAll = Symbol("dartx.updateAll");
  var $addEntries = dartx.addEntries = Symbol("dartx.addEntries");
  var $lengthInBytes = dartx.lengthInBytes = Symbol("dartx.lengthInBytes");
  var $asUint8List = dartx.asUint8List = Symbol("dartx.asUint8List");
  var $asInt8List = dartx.asInt8List = Symbol("dartx.asInt8List");
  var $asUint8ClampedList = dartx.asUint8ClampedList = Symbol("dartx.asUint8ClampedList");
  var $asUint16List = dartx.asUint16List = Symbol("dartx.asUint16List");
  var $asInt16List = dartx.asInt16List = Symbol("dartx.asInt16List");
  var $asUint32List = dartx.asUint32List = Symbol("dartx.asUint32List");
  var $asInt32List = dartx.asInt32List = Symbol("dartx.asInt32List");
  var $asUint64List = dartx.asUint64List = Symbol("dartx.asUint64List");
  var $asInt64List = dartx.asInt64List = Symbol("dartx.asInt64List");
  var $asInt32x4List = dartx.asInt32x4List = Symbol("dartx.asInt32x4List");
  var $asFloat32List = dartx.asFloat32List = Symbol("dartx.asFloat32List");
  var $asFloat64List = dartx.asFloat64List = Symbol("dartx.asFloat64List");
  var $asFloat32x4List = dartx.asFloat32x4List = Symbol("dartx.asFloat32x4List");
  var $asFloat64x2List = dartx.asFloat64x2List = Symbol("dartx.asFloat64x2List");
  var $asByteData = dartx.asByteData = Symbol("dartx.asByteData");
  var $elementSizeInBytes = dartx.elementSizeInBytes = Symbol("dartx.elementSizeInBytes");
  var $getFloat32 = dartx.getFloat32 = Symbol("dartx.getFloat32");
  var $getFloat64 = dartx.getFloat64 = Symbol("dartx.getFloat64");
  var $getInt16 = dartx.getInt16 = Symbol("dartx.getInt16");
  var $getInt32 = dartx.getInt32 = Symbol("dartx.getInt32");
  var $getInt64 = dartx.getInt64 = Symbol("dartx.getInt64");
  var $getInt8 = dartx.getInt8 = Symbol("dartx.getInt8");
  var $getUint16 = dartx.getUint16 = Symbol("dartx.getUint16");
  var $getUint32 = dartx.getUint32 = Symbol("dartx.getUint32");
  var $getUint64 = dartx.getUint64 = Symbol("dartx.getUint64");
  var $getUint8 = dartx.getUint8 = Symbol("dartx.getUint8");
  var $setFloat32 = dartx.setFloat32 = Symbol("dartx.setFloat32");
  var $setFloat64 = dartx.setFloat64 = Symbol("dartx.setFloat64");
  var $setInt16 = dartx.setInt16 = Symbol("dartx.setInt16");
  var $setInt32 = dartx.setInt32 = Symbol("dartx.setInt32");
  var $setInt64 = dartx.setInt64 = Symbol("dartx.setInt64");
  var $setInt8 = dartx.setInt8 = Symbol("dartx.setInt8");
  var $setUint16 = dartx.setUint16 = Symbol("dartx.setUint16");
  var $setUint32 = dartx.setUint32 = Symbol("dartx.setUint32");
  var $setUint64 = dartx.setUint64 = Symbol("dartx.setUint64");
  var $setUint8 = dartx.setUint8 = Symbol("dartx.setUint8");
  var $left = dartx.left = Symbol("dartx.left");
  var $width = dartx.width = Symbol("dartx.width");
  var $top = dartx.top = Symbol("dartx.top");
  var $height = dartx.height = Symbol("dartx.height");
  var $right = dartx.right = Symbol("dartx.right");
  var $bottom = dartx.bottom = Symbol("dartx.bottom");
  var $intersection = dartx.intersection = Symbol("dartx.intersection");
  var $intersects = dartx.intersects = Symbol("dartx.intersects");
  var $boundingBox = dartx.boundingBox = Symbol("dartx.boundingBox");
  var $containsRectangle = dartx.containsRectangle = Symbol("dartx.containsRectangle");
  var $containsPoint = dartx.containsPoint = Symbol("dartx.containsPoint");
  var $topLeft = dartx.topLeft = Symbol("dartx.topLeft");
  var $topRight = dartx.topRight = Symbol("dartx.topRight");
  var $bottomRight = dartx.bottomRight = Symbol("dartx.bottomRight");
  var $bottomLeft = dartx.bottomLeft = Symbol("dartx.bottomLeft");
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    IdentityMapOfString$ListNOfString: () => (T$.IdentityMapOfString$ListNOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListNOfString())))(),
    JSArrayOfTypeVariable: () => (T$.JSArrayOfTypeVariable = dart.constFn(_interceptors.JSArray$(dart.TypeVariable)))(),
    ExpandoOfFunction: () => (T$.ExpandoOfFunction = dart.constFn(core.Expando$(core.Function)))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    IdentityMapOfTypeVariable$int: () => (T$.IdentityMapOfTypeVariable$int = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.int)))(),
    IdentityMapOfTypeVariable$Object: () => (T$.IdentityMapOfTypeVariable$Object = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.Object)))(),
    LinkedHashMapOfTypeVariable$TypeConstraint: () => (T$.LinkedHashMapOfTypeVariable$TypeConstraint = dart.constFn(collection.LinkedHashMap$(dart.TypeVariable, dart.TypeConstraint)))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    ListOfType: () => (T$.ListOfType = dart.constFn(core.List$(core.Type)))(),
    SymbolL: () => (T$.SymbolL = dart.constFn(dart.legacy(core.Symbol)))(),
    MapOfSymbol$dynamic: () => (T$.MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))(),
    TypeL: () => (T$.TypeL = dart.constFn(dart.legacy(core.Type)))(),
    JSArrayOfNameValuePair: () => (T$.JSArrayOfNameValuePair = dart.constFn(_interceptors.JSArray$(_debugger.NameValuePair)))(),
    intAnddynamicTovoid: () => (T$.intAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.int, dart.dynamic])))(),
    JSArrayOfFormatter: () => (T$.JSArrayOfFormatter = dart.constFn(_interceptors.JSArray$(_debugger.Formatter)))(),
    _HashSetOfNameValuePair: () => (T$._HashSetOfNameValuePair = dart.constFn(collection._HashSet$(_debugger.NameValuePair)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    ListOfNameValuePair: () => (T$.ListOfNameValuePair = dart.constFn(core.List$(_debugger.NameValuePair)))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    StringToNameValuePair: () => (T$.StringToNameValuePair = dart.constFn(dart.fnType(_debugger.NameValuePair, [core.String])))(),
    NameValuePairAndNameValuePairToint: () => (T$.NameValuePairAndNameValuePairToint = dart.constFn(dart.fnType(core.int, [_debugger.NameValuePair, _debugger.NameValuePair])))(),
    LinkedHashMapOfdynamic$ObjectN: () => (T$.LinkedHashMapOfdynamic$ObjectN = dart.constFn(collection.LinkedHashMap$(dart.dynamic, T$.ObjectN())))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicToObjectN: () => (T$.dynamicToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [dart.dynamic])))(),
    IdentityMapOfString$_MethodStats: () => (T$.IdentityMapOfString$_MethodStats = dart.constFn(_js_helper.IdentityMap$(core.String, _debugger._MethodStats)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidTo_MethodStats: () => (T$.VoidTo_MethodStats = dart.constFn(dart.fnType(_debugger._MethodStats, [])))(),
    StringAndStringToint: () => (T$.StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))(),
    JSArrayOfListOfObject: () => (T$.JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(T$.ListOfObject())))(),
    JSArrayOf_CallMethodRecord: () => (T$.JSArrayOf_CallMethodRecord = dart.constFn(_interceptors.JSArray$(_debugger._CallMethodRecord)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    InvocationN: () => (T$.InvocationN = dart.constFn(dart.nullable(core.Invocation)))(),
    MapNOfSymbol$dynamic: () => (T$.MapNOfSymbol$dynamic = dart.constFn(dart.nullable(T$.MapOfSymbol$dynamic())))(),
    ObjectNAndObjectNToint: () => (T$.ObjectNAndObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN(), T$.ObjectN()])))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    _FutureOfNull: () => (T$._FutureOfNull = dart.constFn(async._Future$(core.Null)))(),
    VoidTo_FutureOfNull: () => (T$.VoidTo_FutureOfNull = dart.constFn(dart.fnType(T$._FutureOfNull(), [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureNOfNull: () => (T$.FutureNOfNull = dart.constFn(dart.nullable(T$.FutureOfNull())))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    _FutureOfString: () => (T$._FutureOfString = dart.constFn(async._Future$(core.String)))(),
    _FutureOfbool: () => (T$._FutureOfbool = dart.constFn(async._Future$(core.bool)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    boolToNull: () => (T$.boolToNull = dart.constFn(dart.fnType(core.Null, [core.bool])))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    _FutureOfint: () => (T$._FutureOfint = dart.constFn(async._Future$(core.int)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ObjectTovoid: () => (T$.ObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.Object])))(),
    EventSinkTo_ConverterStreamEventSink: () => (T$.EventSinkTo_ConverterStreamEventSink = dart.constFn(dart.fnType(convert._ConverterStreamEventSink, [async.EventSink])))(),
    JSArrayOfUint8List: () => (T$.JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), T$.ObjectN()])))(),
    ObjectNToObjectN: () => (T$.ObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN()])))(),
    EmptyIteratorOfNeverL: () => (T$.EmptyIteratorOfNeverL = dart.constFn(_internal.EmptyIterator$(dart.legacy(dart.Never))))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfStringN: () => (T$.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T$.StringN())))(),
    SubListIterableOfString: () => (T$.SubListIterableOfString = dart.constFn(_internal.SubListIterable$(core.String)))(),
    EmptyIterableOfString: () => (T$.EmptyIterableOfString = dart.constFn(_internal.EmptyIterable$(core.String)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    IterableOfdouble: () => (T$.IterableOfdouble = dart.constFn(core.Iterable$(core.double)))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    ObjectNTovoid$1: () => (T$.ObjectNTovoid$1 = dart.constFn(dart.fnType(dart.void, [], [T$.ObjectN()])))(),
    _FutureOfObjectN: () => (T$._FutureOfObjectN = dart.constFn(async._Future$(T$.ObjectN())))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    _FutureOfvoid: () => (T$._FutureOfvoid = dart.constFn(async._Future$(dart.void)))(),
    VoidToObject: () => (T$.VoidToObject = dart.constFn(dart.fnType(core.Object, [])))(),
    ObjectTodynamic: () => (T$.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    VoidToStackTrace: () => (T$.VoidToStackTrace = dart.constFn(dart.fnType(core.StackTrace, [])))(),
    StackTraceTodynamic: () => (T$.StackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.StackTrace])))(),
    ObjectNTobool: () => (T$.ObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN()])))(),
    FutureOrOfbool: () => (T$.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    VoidToFutureOrOfbool: () => (T$.VoidToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [])))(),
    boolTovoid: () => (T$.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    VoidToFn: () => (T$.VoidToFn = dart.constFn(dart.fnType(T$.boolTovoid(), [])))(),
    FnTodynamic: () => (T$.FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.boolTovoid()])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    ObjectTobool: () => (T$.ObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object])))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    ObjectAndStackTraceTodynamic: () => (T$.ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))(),
    _FutureListenerOfObject$Object: () => (T$._FutureListenerOfObject$Object = dart.constFn(async._FutureListener$(core.Object, core.Object)))(),
    _FutureListenerNOfObject$Object: () => (T$._FutureListenerNOfObject$Object = dart.constFn(dart.nullable(T$._FutureListenerOfObject$Object())))(),
    JSArrayOfFunction: () => (T$.JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))(),
    _FutureListenerN: () => (T$._FutureListenerN = dart.constFn(dart.nullable(async._FutureListener)))(),
    dynamicTo_Future: () => (T$.dynamicTo_Future = dart.constFn(dart.fnType(async._Future, [dart.dynamic])))(),
    _StreamControllerAddStreamStateOfObjectN: () => (T$._StreamControllerAddStreamStateOfObjectN = dart.constFn(async._StreamControllerAddStreamState$(T$.ObjectN())))(),
    FunctionN: () => (T$.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    AsyncErrorN: () => (T$.AsyncErrorN = dart.constFn(dart.nullable(async.AsyncError)))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, T$.StackTraceN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN())))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid())))(),
    ZoneAndZoneDelegateAndZone__ToTimer: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer())))(),
    TimerTovoid: () => (T$.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    ZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.TimerTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer$1())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$1())))(),
    ZoneSpecificationN: () => (T$.ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    ZoneAndZoneDelegateAndZone__ToZone: () => (T$.ZoneAndZoneDelegateAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToZone())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$2())))(),
    ZoneN: () => (T$.ZoneN = dart.constFn(dart.nullable(async.Zone)))(),
    ZoneDelegateN: () => (T$.ZoneDelegateN = dart.constFn(dart.nullable(async.ZoneDelegate)))(),
    ZoneNAndZoneDelegateNAndZone__ToR: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR = dart.constFn(dart.gFnType(R => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$1: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$1 = dart.constFn(dart.gFnType((R, T) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T]), T]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$2: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$2 = dart.constFn(dart.gFnType((R, T1, T2) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn: () => (T$.ZoneAndZoneDelegateAndZone__ToFn = dart.constFn(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$1: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$1 = dart.constFn(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$2: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$2 = dart.constFn(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneL: () => (T$.ZoneL = dart.constFn(dart.legacy(async.Zone)))(),
    ZoneDelegateL: () => (T$.ZoneDelegateL = dart.constFn(dart.legacy(async.ZoneDelegate)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN())))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.VoidTovoid()])))(),
    TimerL: () => (T$.TimerL = dart.constFn(dart.legacy(async.Timer)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL())))(),
    TimerLTovoid: () => (T$.TimerLTovoid = dart.constFn(dart.fnType(dart.void, [T$.TimerL()])))(),
    TimerLToLvoid: () => (T$.TimerLToLvoid = dart.constFn(dart.legacy(T$.TimerLTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1 = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.TimerLToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.StringL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL = dart.constFn(dart.fnType(T$.ZoneL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL())))(),
    ZoneNAndZoneDelegateNAndZone__ToZone: () => (T$.ZoneNAndZoneDelegateNAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid$1: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, core.Object, core.StackTrace])))(),
    NeverAndNeverTodynamic: () => (T$.NeverAndNeverTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.Never, dart.Never])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    HashMapOfObjectN$ObjectN: () => (T$.HashMapOfObjectN$ObjectN = dart.constFn(collection.HashMap$(T$.ObjectN(), T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ObjectNToint: () => (T$.ObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN()])))(),
    ObjectNAndObjectNTobool: () => (T$.ObjectNAndObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN(), T$.ObjectN()])))(),
    LinkedListEntryOfLinkedListEntry: () => (T$.LinkedListEntryOfLinkedListEntry = dart.constFn(collection.LinkedListEntry$(collection.LinkedListEntry)))()
  };
  var T$0 = {
    dynamicTobool: () => (T$0.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    ComparableAndComparableToint: () => (T$0.ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))(),
    MappedIterableOfString$dynamic: () => (T$0.MappedIterableOfString$dynamic = dart.constFn(_internal.MappedIterable$(core.String, dart.dynamic)))(),
    ObjectNTodynamic: () => (T$0.ObjectNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ObjectN()])))(),
    MapOfString$dynamic: () => (T$0.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    StringAnddynamicTovoid: () => (T$0.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    IdentityMapOfString$dynamic: () => (T$0.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ListOfint: () => (T$0.ListOfint = dart.constFn(core.List$(core.int)))(),
    StringBufferAndStringToStringBuffer: () => (T$0.StringBufferAndStringToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, core.String])))(),
    StringBufferToString: () => (T$0.StringBufferToString = dart.constFn(dart.fnType(core.String, [core.StringBuffer])))(),
    IdentityMapOfString$Encoding: () => (T$0.IdentityMapOfString$Encoding = dart.constFn(_js_helper.IdentityMap$(core.String, convert.Encoding)))(),
    SinkOfListOfint: () => (T$0.SinkOfListOfint = dart.constFn(core.Sink$(T$0.ListOfint())))(),
    StreamOfString: () => (T$0.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    StreamOfListOfint: () => (T$0.StreamOfListOfint = dart.constFn(async.Stream$(T$0.ListOfint())))(),
    SinkOfString: () => (T$0.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    intL: () => (T$0.intL = dart.constFn(dart.legacy(core.int)))(),
    StreamOfObjectN: () => (T$0.StreamOfObjectN = dart.constFn(async.Stream$(T$.ObjectN())))(),
    JSArrayOfListOfint: () => (T$0.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$0.ListOfint())))(),
    Uint8ListAndintAndintTovoid: () => (T$0.Uint8ListAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])))(),
    SyncIterableOfString: () => (T$0.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))(),
    EventSinkOfString: () => (T$0.EventSinkOfString = dart.constFn(async.EventSink$(core.String)))(),
    EventSinkOfStringTo_LineSplitterEventSink: () => (T$0.EventSinkOfStringTo_LineSplitterEventSink = dart.constFn(dart.fnType(convert._LineSplitterEventSink, [T$0.EventSinkOfString()])))(),
    VoidToObjectN: () => (T$0.VoidToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [])))(),
    IdentityMapOfString$_FakeUserTag: () => (T$0.IdentityMapOfString$_FakeUserTag = dart.constFn(_js_helper.IdentityMap$(core.String, developer._FakeUserTag)))(),
    LinkedMapOfString$Metric: () => (T$0.LinkedMapOfString$Metric = dart.constFn(_js_helper.LinkedMap$(core.String, developer.Metric)))(),
    UriN: () => (T$0.UriN = dart.constFn(dart.nullable(core.Uri)))(),
    CompleterOfUriN: () => (T$0.CompleterOfUriN = dart.constFn(async.Completer$(T$0.UriN())))(),
    UriNTovoid: () => (T$0.UriNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.UriN()])))(),
    CompleterOfUri: () => (T$0.CompleterOfUri = dart.constFn(async.Completer$(core.Uri)))(),
    UriTovoid: () => (T$0.UriTovoid = dart.constFn(dart.fnType(dart.void, [core.Uri])))(),
    _SyncBlockN: () => (T$0._SyncBlockN = dart.constFn(dart.nullable(developer._SyncBlock)))(),
    JSArrayOf_SyncBlockN: () => (T$0.JSArrayOf_SyncBlockN = dart.constFn(_interceptors.JSArray$(T$0._SyncBlockN())))(),
    JSArrayOf_AsyncBlock: () => (T$0.JSArrayOf_AsyncBlock = dart.constFn(_interceptors.JSArray$(developer._AsyncBlock)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$0.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    FutureOfServiceExtensionResponse: () => (T$0.FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))(),
    MapOfString$String: () => (T$0.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [core.String, T$0.MapOfString$String()])))(),
    IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse())))(),
    VoidToUint8List: () => (T$0.VoidToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [])))(),
    Uint8ListTodynamic: () => (T$0.Uint8ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [typed_data.Uint8List])))(),
    FutureOfDirectory: () => (T$0.FutureOfDirectory = dart.constFn(async.Future$(io.Directory)))(),
    DirectoryToFutureOfDirectory: () => (T$0.DirectoryToFutureOfDirectory = dart.constFn(dart.fnType(T$0.FutureOfDirectory(), [io.Directory])))(),
    FutureOrOfDirectory: () => (T$0.FutureOrOfDirectory = dart.constFn(async.FutureOr$(io.Directory)))(),
    boolToFutureOrOfDirectory: () => (T$0.boolToFutureOrOfDirectory = dart.constFn(dart.fnType(T$0.FutureOrOfDirectory(), [core.bool])))(),
    dynamicTo_Directory: () => (T$0.dynamicTo_Directory = dart.constFn(dart.fnType(io._Directory, [dart.dynamic])))(),
    dynamicToDirectory: () => (T$0.dynamicToDirectory = dart.constFn(dart.fnType(io.Directory, [dart.dynamic])))(),
    JSArrayOfFileSystemEntity: () => (T$0.JSArrayOfFileSystemEntity = dart.constFn(_interceptors.JSArray$(io.FileSystemEntity)))(),
    FutureOrOfString: () => (T$0.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    dynamicToFutureOrOfString: () => (T$0.dynamicToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [dart.dynamic])))(),
    dynamicToFutureOrOfbool: () => (T$0.dynamicToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [dart.dynamic])))(),
    FileSystemEntityTypeTobool: () => (T$0.FileSystemEntityTypeTobool = dart.constFn(dart.fnType(core.bool, [io.FileSystemEntityType])))(),
    dynamicToFileSystemEntityType: () => (T$0.dynamicToFileSystemEntityType = dart.constFn(dart.fnType(io.FileSystemEntityType, [dart.dynamic])))(),
    StreamControllerOfFileSystemEntity: () => (T$0.StreamControllerOfFileSystemEntity = dart.constFn(async.StreamController$(io.FileSystemEntity)))(),
    StreamControllerOfUint8List: () => (T$0.StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))(),
    VoidToFuture: () => (T$0.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    Uint8ListToNull: () => (T$0.Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))(),
    RandomAccessFileTovoid: () => (T$0.RandomAccessFileTovoid = dart.constFn(dart.fnType(dart.void, [io.RandomAccessFile])))(),
    FutureOfRandomAccessFile: () => (T$0.FutureOfRandomAccessFile = dart.constFn(async.Future$(io.RandomAccessFile)))(),
    FileN: () => (T$0.FileN = dart.constFn(dart.nullable(io.File)))(),
    CompleterOfFileN: () => (T$0.CompleterOfFileN = dart.constFn(async.Completer$(T$0.FileN())))(),
    StreamSubscriptionOfListOfint: () => (T$0.StreamSubscriptionOfListOfint = dart.constFn(async.StreamSubscription$(T$0.ListOfint())))(),
    VoidToStreamSubscriptionOfListOfint: () => (T$0.VoidToStreamSubscriptionOfListOfint = dart.constFn(dart.fnType(T$0.StreamSubscriptionOfListOfint(), [])))(),
    StreamSubscriptionOfListOfintTodynamic: () => (T$0.StreamSubscriptionOfListOfintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.StreamSubscriptionOfListOfint()])))(),
    dynamicAndStackTraceTovoid: () => (T$0.dynamicAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.StackTrace])))(),
    ListOfintTovoid: () => (T$0.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint()])))(),
    RandomAccessFileToNull: () => (T$0.RandomAccessFileToNull = dart.constFn(dart.fnType(core.Null, [io.RandomAccessFile])))(),
    RandomAccessFileToFutureOfvoid: () => (T$0.RandomAccessFileToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [io.RandomAccessFile])))(),
    voidToFileN: () => (T$0.voidToFileN = dart.constFn(dart.fnType(T$0.FileN(), [dart.void])))(),
    DirectoryN: () => (T$0.DirectoryN = dart.constFn(dart.nullable(io.Directory)))(),
    DirectoryNToFuture: () => (T$0.DirectoryNToFuture = dart.constFn(dart.fnType(async.Future, [T$0.DirectoryN()])))(),
    dynamicTo_File: () => (T$0.dynamicTo_File = dart.constFn(dart.fnType(io._File, [dart.dynamic])))(),
    FileSystemEntityTo_File: () => (T$0.FileSystemEntityTo_File = dart.constFn(dart.fnType(io._File, [io.FileSystemEntity])))(),
    dynamicToFile: () => (T$0.dynamicToFile = dart.constFn(dart.fnType(io.File, [dart.dynamic])))(),
    dynamicTo_RandomAccessFile: () => (T$0.dynamicTo_RandomAccessFile = dart.constFn(dart.fnType(io._RandomAccessFile, [dart.dynamic])))(),
    FutureOrOfint: () => (T$0.FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))(),
    dynamicToFutureOrOfint: () => (T$0.dynamicToFutureOrOfint = dart.constFn(dart.fnType(T$0.FutureOrOfint(), [dart.dynamic])))(),
    dynamicToDateTime: () => (T$0.dynamicToDateTime = dart.constFn(dart.fnType(core.DateTime, [dart.dynamic])))(),
    CompleterOfUint8List: () => (T$0.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    FutureOfUint8List: () => (T$0.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    RandomAccessFileToFutureOfUint8List: () => (T$0.RandomAccessFileToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [io.RandomAccessFile])))(),
    intToFutureOfUint8List: () => (T$0.intToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [core.int])))(),
    FutureOfString: () => (T$0.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    Uint8ListToFutureOrOfString: () => (T$0.Uint8ListToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [typed_data.Uint8List])))(),
    RandomAccessFileTo_File: () => (T$0.RandomAccessFileTo_File = dart.constFn(dart.fnType(io._File, [io.RandomAccessFile])))(),
    FutureOrOfFile: () => (T$0.FutureOrOfFile = dart.constFn(async.FutureOr$(io.File)))(),
    RandomAccessFileToFutureOrOfFile: () => (T$0.RandomAccessFileToFutureOrOfFile = dart.constFn(dart.fnType(T$0.FutureOrOfFile(), [io.RandomAccessFile])))(),
    FutureOfFile: () => (T$0.FutureOfFile = dart.constFn(async.Future$(io.File)))(),
    RandomAccessFileToFutureOfFile: () => (T$0.RandomAccessFileToFutureOfFile = dart.constFn(dart.fnType(T$0.FutureOfFile(), [io.RandomAccessFile])))(),
    dynamicAnddynamicToFutureOfServiceExtensionResponse: () => (T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [dart.dynamic, dart.dynamic])))(),
    dynamicToUint8List: () => (T$0.dynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic])))(),
    FutureOfint: () => (T$0.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    dynamicToint: () => (T$0.dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))(),
    FileSystemEntityTypeL: () => (T$0.FileSystemEntityTypeL = dart.constFn(dart.legacy(io.FileSystemEntityType)))(),
    dynamicToFileStat: () => (T$0.dynamicToFileStat = dart.constFn(dart.fnType(io.FileStat, [dart.dynamic])))(),
    ListOfMapOfString$dynamic: () => (T$0.ListOfMapOfString$dynamic = dart.constFn(core.List$(T$0.MapOfString$dynamic())))(),
    _FileResourceInfoToMapOfString$dynamic: () => (T$0._FileResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._FileResourceInfo])))(),
    IdentityMapOfint$_FileResourceInfo: () => (T$0.IdentityMapOfint$_FileResourceInfo = dart.constFn(_js_helper.IdentityMap$(core.int, io._FileResourceInfo)))(),
    _SpawnedProcessResourceInfoToMapOfString$dynamic: () => (T$0._SpawnedProcessResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SpawnedProcessResourceInfo])))(),
    LinkedMapOfint$_SpawnedProcessResourceInfo: () => (T$0.LinkedMapOfint$_SpawnedProcessResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._SpawnedProcessResourceInfo)))(),
    dynamicTo_Link: () => (T$0.dynamicTo_Link = dart.constFn(dart.fnType(io._Link, [dart.dynamic])))(),
    FutureOfLink: () => (T$0.FutureOfLink = dart.constFn(async.Future$(io.Link)))(),
    FileSystemEntityToFutureOfLink: () => (T$0.FileSystemEntityToFutureOfLink = dart.constFn(dart.fnType(T$0.FutureOfLink(), [io.FileSystemEntity])))(),
    FileSystemEntityTo_Link: () => (T$0.FileSystemEntityTo_Link = dart.constFn(dart.fnType(io._Link, [io.FileSystemEntity])))(),
    dynamicToLink: () => (T$0.dynamicToLink = dart.constFn(dart.fnType(io.Link, [dart.dynamic])))(),
    _SocketStatisticToMapOfString$dynamic: () => (T$0._SocketStatisticToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SocketStatistic])))(),
    IdentityMapOfint$_SocketStatistic: () => (T$0.IdentityMapOfint$_SocketStatistic = dart.constFn(_js_helper.IdentityMap$(core.int, io._SocketStatistic)))(),
    _SocketProfileTypeL: () => (T$0._SocketProfileTypeL = dart.constFn(dart.legacy(io._SocketProfileType)))(),
    IOOverridesN: () => (T$0.IOOverridesN = dart.constFn(dart.nullable(io.IOOverrides)))(),
    _CaseInsensitiveStringMapOfString: () => (T$0._CaseInsensitiveStringMapOfString = dart.constFn(io._CaseInsensitiveStringMap$(core.String)))(),
    LinkedMapOfString$String: () => (T$0.LinkedMapOfString$String = dart.constFn(_js_helper.LinkedMap$(core.String, core.String)))(),
    UnmodifiableMapViewOfString$String: () => (T$0.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    ProcessStartModeL: () => (T$0.ProcessStartModeL = dart.constFn(dart.legacy(io.ProcessStartMode)))(),
    RawSecureServerSocketToSecureServerSocket: () => (T$0.RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(io.SecureServerSocket, [io.RawSecureServerSocket])))(),
    RawSecureSocketToSecureSocket: () => (T$0.RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(io.SecureSocket, [io.RawSecureSocket])))(),
    ConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfSecureSocket = dart.constFn(io.ConnectionTask$(io.SecureSocket)))(),
    ConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocket = dart.constFn(io.ConnectionTask$(io.RawSecureSocket)))(),
    ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfSecureSocket(), [T$0.ConnectionTaskOfRawSecureSocket()])))(),
    StreamSubscriptionOfRawSocketEvent: () => (T$0.StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(io.RawSocketEvent)))(),
    StreamSubscriptionNOfRawSocketEvent: () => (T$0.StreamSubscriptionNOfRawSocketEvent = dart.constFn(dart.nullable(T$0.StreamSubscriptionOfRawSocketEvent())))(),
    FutureOfRawSecureSocket: () => (T$0.FutureOfRawSecureSocket = dart.constFn(async.Future$(io.RawSecureSocket)))(),
    dynamicToFutureOfRawSecureSocket: () => (T$0.dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [dart.dynamic])))(),
    StreamControllerOfRawSecureSocket: () => (T$0.StreamControllerOfRawSecureSocket = dart.constFn(async.StreamController$(io.RawSecureSocket)))(),
    RawServerSocketToRawSecureServerSocket: () => (T$0.RawServerSocketToRawSecureServerSocket = dart.constFn(dart.fnType(io.RawSecureServerSocket, [io.RawServerSocket])))(),
    RawSecureSocketToNull: () => (T$0.RawSecureSocketToNull = dart.constFn(dart.fnType(core.Null, [io.RawSecureSocket])))(),
    RawSocketToFutureOfRawSecureSocket: () => (T$0.RawSocketToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [io.RawSocket])))(),
    ConnectionTaskOfRawSocket: () => (T$0.ConnectionTaskOfRawSocket = dart.constFn(io.ConnectionTask$(io.RawSocket)))(),
    ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfRawSecureSocket(), [T$0.ConnectionTaskOfRawSocket()])))(),
    CompleterOf_RawSecureSocket: () => (T$0.CompleterOf_RawSecureSocket = dart.constFn(async.Completer$(io._RawSecureSocket)))(),
    StreamControllerOfRawSocketEvent: () => (T$0.StreamControllerOfRawSocketEvent = dart.constFn(async.StreamController$(io.RawSocketEvent)))(),
    CompleterOfRawSecureSocket: () => (T$0.CompleterOfRawSecureSocket = dart.constFn(async.Completer$(io.RawSecureSocket)))(),
    intToint: () => (T$0.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ListOfintAndStringTovoid: () => (T$0.ListOfintAndStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint(), core.String])))(),
    _RawSocketOptionsL: () => (T$0._RawSocketOptionsL = dart.constFn(dart.legacy(io._RawSocketOptions)))(),
    JSArrayOf_DomainNetworkPolicy: () => (T$0.JSArrayOf_DomainNetworkPolicy = dart.constFn(_interceptors.JSArray$(io._DomainNetworkPolicy)))(),
    StdoutN: () => (T$0.StdoutN = dart.constFn(dart.nullable(io.Stdout)))(),
    Fn__ToR: () => (T$0.Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: T$.FunctionN(), zoneSpecification: T$.ZoneSpecificationN(), zoneValues: T$.MapNOfObjectN$ObjectN()}, {}], R => [T$.ObjectN()])))(),
    LinkedMapOfSymbol$dynamic: () => (T$0.LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))(),
    ObjectToObject: () => (T$0.ObjectToObject = dart.constFn(dart.fnType(core.Object, [core.Object])))(),
    ObjectTo_DartObject: () => (T$0.ObjectTo_DartObject = dart.constFn(dart.fnType(js._DartObject, [core.Object])))(),
    ObjectToJsObject: () => (T$0.ObjectToJsObject = dart.constFn(dart.fnType(js.JsObject, [core.Object])))(),
    PointOfnum: () => (T$0.PointOfnum = dart.constFn(math.Point$(core.num)))(),
    RectangleOfnum: () => (T$0.RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))(),
    EventL: () => (T$0.EventL = dart.constFn(dart.legacy(html$.Event)))(),
    EventStreamProviderOfEventL: () => (T$0.EventStreamProviderOfEventL = dart.constFn(html$.EventStreamProvider$(T$0.EventL())))(),
    VersionChangeEventL: () => (T$0.VersionChangeEventL = dart.constFn(dart.legacy(indexed_db.VersionChangeEvent)))(),
    EventStreamProviderOfVersionChangeEventL: () => (T$0.EventStreamProviderOfVersionChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.VersionChangeEventL())))(),
    FutureOfDatabase: () => (T$0.FutureOfDatabase = dart.constFn(async.Future$(indexed_db.Database)))(),
    CompleterOfIdbFactory: () => (T$0.CompleterOfIdbFactory = dart.constFn(async.Completer$(indexed_db.IdbFactory)))(),
    EventTovoid: () => (T$0.EventTovoid = dart.constFn(dart.fnType(dart.void, [html$.Event])))(),
    FutureOfIdbFactory: () => (T$0.FutureOfIdbFactory = dart.constFn(async.Future$(indexed_db.IdbFactory)))(),
    ObserverChangesTovoid: () => (T$0.ObserverChangesTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.ObserverChanges])))(),
    CompleterOfDatabase: () => (T$0.CompleterOfDatabase = dart.constFn(async.Completer$(indexed_db.Database)))(),
    EventToNull: () => (T$0.EventToNull = dart.constFn(dart.fnType(core.Null, [html$.Event])))(),
    ElementN: () => (T$0.ElementN = dart.constFn(dart.nullable(html$.Element)))(),
    JSArrayOfEventTarget: () => (T$0.JSArrayOfEventTarget = dart.constFn(_interceptors.JSArray$(html$.EventTarget)))(),
    NodeTobool: () => (T$0.NodeTobool = dart.constFn(dart.fnType(core.bool, [html$.Node])))(),
    CompleterOfScrollState: () => (T$0.CompleterOfScrollState = dart.constFn(async.Completer$(html$.ScrollState)))(),
    ScrollStateTovoid: () => (T$0.ScrollStateTovoid = dart.constFn(dart.fnType(dart.void, [html$.ScrollState])))(),
    MapOfString$dynamicTobool: () => (T$0.MapOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [T$0.MapOfString$dynamic()])))(),
    MapN: () => (T$0.MapN = dart.constFn(dart.nullable(core.Map)))(),
    ObjectNToNvoid: () => (T$0.ObjectNToNvoid = dart.constFn(dart.nullable(T$.ObjectNTovoid())))(),
    MapNAndFnTodynamic: () => (T$0.MapNAndFnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.MapN()], [T$0.ObjectNToNvoid()])))(),
    WheelEventL: () => (T$0.WheelEventL = dart.constFn(dart.legacy(html$.WheelEvent)))(),
    _CustomEventStreamProviderOfWheelEventL: () => (T$0._CustomEventStreamProviderOfWheelEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.WheelEventL())))(),
    EventTargetToString: () => (T$0.EventTargetToString = dart.constFn(dart.fnType(core.String, [html$.EventTarget])))(),
    TransitionEventL: () => (T$0.TransitionEventL = dart.constFn(dart.legacy(html$.TransitionEvent)))(),
    _CustomEventStreamProviderOfTransitionEventL: () => (T$0._CustomEventStreamProviderOfTransitionEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.TransitionEventL())))(),
    MouseEventL: () => (T$0.MouseEventL = dart.constFn(dart.legacy(html$.MouseEvent)))(),
    EventStreamProviderOfMouseEventL: () => (T$0.EventStreamProviderOfMouseEventL = dart.constFn(html$.EventStreamProvider$(T$0.MouseEventL())))(),
    ClipboardEventL: () => (T$0.ClipboardEventL = dart.constFn(dart.legacy(html$.ClipboardEvent)))(),
    EventStreamProviderOfClipboardEventL: () => (T$0.EventStreamProviderOfClipboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.ClipboardEventL())))(),
    KeyboardEventL: () => (T$0.KeyboardEventL = dart.constFn(dart.legacy(html$.KeyboardEvent)))(),
    EventStreamProviderOfKeyboardEventL: () => (T$0.EventStreamProviderOfKeyboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.KeyboardEventL())))(),
    TouchEventL: () => (T$0.TouchEventL = dart.constFn(dart.legacy(html$.TouchEvent)))(),
    EventStreamProviderOfTouchEventL: () => (T$0.EventStreamProviderOfTouchEventL = dart.constFn(html$.EventStreamProvider$(T$0.TouchEventL())))(),
    EventStreamProviderOfWheelEventL: () => (T$0.EventStreamProviderOfWheelEventL = dart.constFn(html$.EventStreamProvider$(T$0.WheelEventL())))(),
    ProgressEventL: () => (T$0.ProgressEventL = dart.constFn(dart.legacy(html$.ProgressEvent)))(),
    EventStreamProviderOfProgressEventL: () => (T$0.EventStreamProviderOfProgressEventL = dart.constFn(html$.EventStreamProvider$(T$0.ProgressEventL())))(),
    MessageEventL: () => (T$0.MessageEventL = dart.constFn(dart.legacy(html$.MessageEvent)))(),
    EventStreamProviderOfMessageEventL: () => (T$0.EventStreamProviderOfMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MessageEventL())))(),
    PopStateEventL: () => (T$0.PopStateEventL = dart.constFn(dart.legacy(html$.PopStateEvent)))(),
    EventStreamProviderOfPopStateEventL: () => (T$0.EventStreamProviderOfPopStateEventL = dart.constFn(html$.EventStreamProvider$(T$0.PopStateEventL())))(),
    StorageEventL: () => (T$0.StorageEventL = dart.constFn(dart.legacy(html$.StorageEvent)))(),
    EventStreamProviderOfStorageEventL: () => (T$0.EventStreamProviderOfStorageEventL = dart.constFn(html$.EventStreamProvider$(T$0.StorageEventL())))(),
    CompleterOfBlob: () => (T$0.CompleterOfBlob = dart.constFn(async.Completer$(html$.Blob)))(),
    BlobN: () => (T$0.BlobN = dart.constFn(dart.nullable(html$.Blob)))(),
    BlobNTovoid: () => (T$0.BlobNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.BlobN()])))(),
    ContextEventL: () => (T$0.ContextEventL = dart.constFn(dart.legacy(web_gl.ContextEvent)))(),
    EventStreamProviderOfContextEventL: () => (T$0.EventStreamProviderOfContextEventL = dart.constFn(html$.EventStreamProvider$(T$0.ContextEventL())))(),
    JSArrayOfnum: () => (T$0.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    dynamicToCssStyleDeclaration: () => (T$0.dynamicToCssStyleDeclaration = dart.constFn(dart.fnType(html$.CssStyleDeclaration, [dart.dynamic])))(),
    CssStyleDeclarationTovoid: () => (T$0.CssStyleDeclarationTovoid = dart.constFn(dart.fnType(dart.void, [html$.CssStyleDeclaration])))(),
    ListOfCssTransformComponent: () => (T$0.ListOfCssTransformComponent = dart.constFn(core.List$(html$.CssTransformComponent)))(),
    CompleterOfEntry: () => (T$0.CompleterOfEntry = dart.constFn(async.Completer$(html$.Entry)))(),
    EntryTovoid: () => (T$0.EntryTovoid = dart.constFn(dart.fnType(dart.void, [html$.Entry])))(),
    DomExceptionTovoid: () => (T$0.DomExceptionTovoid = dart.constFn(dart.fnType(dart.void, [html$.DomException])))(),
    CompleterOfMetadata: () => (T$0.CompleterOfMetadata = dart.constFn(async.Completer$(html$.Metadata)))(),
    MetadataTovoid: () => (T$0.MetadataTovoid = dart.constFn(dart.fnType(dart.void, [html$.Metadata])))(),
    ListOfEntry: () => (T$0.ListOfEntry = dart.constFn(core.List$(html$.Entry)))(),
    CompleterOfListOfEntry: () => (T$0.CompleterOfListOfEntry = dart.constFn(async.Completer$(T$0.ListOfEntry())))(),
    ListTovoid: () => (T$0.ListTovoid = dart.constFn(dart.fnType(dart.void, [core.List])))(),
    SecurityPolicyViolationEventL: () => (T$0.SecurityPolicyViolationEventL = dart.constFn(dart.legacy(html$.SecurityPolicyViolationEvent)))(),
    EventStreamProviderOfSecurityPolicyViolationEventL: () => (T$0.EventStreamProviderOfSecurityPolicyViolationEventL = dart.constFn(html$.EventStreamProvider$(T$0.SecurityPolicyViolationEventL())))(),
    IterableOfElement: () => (T$0.IterableOfElement = dart.constFn(core.Iterable$(html$.Element)))(),
    ListOfElement: () => (T$0.ListOfElement = dart.constFn(core.List$(html$.Element)))(),
    ElementTobool: () => (T$0.ElementTobool = dart.constFn(dart.fnType(core.bool, [html$.Element])))(),
    _EventStreamOfEvent: () => (T$0._EventStreamOfEvent = dart.constFn(html$._EventStream$(html$.Event)))(),
    _ElementEventStreamImplOfEvent: () => (T$0._ElementEventStreamImplOfEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.Event)))(),
    CompleterOfFileWriter: () => (T$0.CompleterOfFileWriter = dart.constFn(async.Completer$(html$.FileWriter)))(),
    FileWriterTovoid: () => (T$0.FileWriterTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileWriter])))(),
    CompleterOfFile: () => (T$0.CompleterOfFile = dart.constFn(async.Completer$(html$.File)))(),
    FileN$1: () => (T$0.FileN$1 = dart.constFn(dart.nullable(html$.File)))(),
    FileNTovoid: () => (T$0.FileNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.FileN$1()])))(),
    FontFaceSetLoadEventL: () => (T$0.FontFaceSetLoadEventL = dart.constFn(dart.legacy(html$.FontFaceSetLoadEvent)))(),
    EventStreamProviderOfFontFaceSetLoadEventL: () => (T$0.EventStreamProviderOfFontFaceSetLoadEventL = dart.constFn(html$.EventStreamProvider$(T$0.FontFaceSetLoadEventL())))(),
    CompleterOfGeoposition: () => (T$0.CompleterOfGeoposition = dart.constFn(async.Completer$(html$.Geoposition)))(),
    GeopositionTovoid: () => (T$0.GeopositionTovoid = dart.constFn(dart.fnType(dart.void, [html$.Geoposition])))(),
    PositionErrorTovoid: () => (T$0.PositionErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.PositionError])))(),
    StreamControllerOfGeoposition: () => (T$0.StreamControllerOfGeoposition = dart.constFn(async.StreamController$(html$.Geoposition)))(),
    _CustomEventStreamProviderOfEventL: () => (T$0._CustomEventStreamProviderOfEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.EventL())))(),
    HttpRequestToString: () => (T$0.HttpRequestToString = dart.constFn(dart.fnType(core.String, [html$.HttpRequest])))(),
    StringAndStringTovoid: () => (T$0.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    CompleterOfHttpRequest: () => (T$0.CompleterOfHttpRequest = dart.constFn(async.Completer$(html$.HttpRequest)))(),
    ProgressEventTovoid: () => (T$0.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.ProgressEvent])))(),
    CompleterOfString: () => (T$0.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    FutureOrNOfString: () => (T$0.FutureOrNOfString = dart.constFn(dart.nullable(T$0.FutureOrOfString())))(),
    ListAndIntersectionObserverTovoid: () => (T$0.ListAndIntersectionObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.IntersectionObserver])))(),
    ListOfMediaStreamTrack: () => (T$0.ListOfMediaStreamTrack = dart.constFn(core.List$(html$.MediaStreamTrack)))(),
    MessagePortL: () => (T$0.MessagePortL = dart.constFn(dart.legacy(html$.MessagePort)))(),
    MidiMessageEventL: () => (T$0.MidiMessageEventL = dart.constFn(dart.legacy(html$.MidiMessageEvent)))(),
    EventStreamProviderOfMidiMessageEventL: () => (T$0.EventStreamProviderOfMidiMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MidiMessageEventL())))(),
    MapTobool: () => (T$0.MapTobool = dart.constFn(dart.fnType(core.bool, [core.Map])))(),
    JSArrayOfMap: () => (T$0.JSArrayOfMap = dart.constFn(_interceptors.JSArray$(core.Map)))(),
    ListAndMutationObserverTovoid: () => (T$0.ListAndMutationObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.MutationObserver])))(),
    ListAndMutationObserverToNvoid: () => (T$0.ListAndMutationObserverToNvoid = dart.constFn(dart.nullable(T$0.ListAndMutationObserverTovoid())))(),
    boolL: () => (T$0.boolL = dart.constFn(dart.legacy(core.bool)))(),
    CompleterOfMediaStream: () => (T$0.CompleterOfMediaStream = dart.constFn(async.Completer$(html$.MediaStream)))(),
    MediaStreamTovoid: () => (T$0.MediaStreamTovoid = dart.constFn(dart.fnType(dart.void, [html$.MediaStream])))(),
    NavigatorUserMediaErrorTovoid: () => (T$0.NavigatorUserMediaErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.NavigatorUserMediaError])))(),
    IterableOfNode: () => (T$0.IterableOfNode = dart.constFn(core.Iterable$(html$.Node)))(),
    NodeN$1: () => (T$0.NodeN$1 = dart.constFn(dart.nullable(html$.Node)))(),
    PerformanceObserverEntryListAndPerformanceObserverTovoid: () => (T$0.PerformanceObserverEntryListAndPerformanceObserverTovoid = dart.constFn(dart.fnType(dart.void, [html$.PerformanceObserverEntryList, html$.PerformanceObserver])))(),
    ListAndReportingObserverTovoid: () => (T$0.ListAndReportingObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ReportingObserver])))(),
    ListAndResizeObserverTovoid: () => (T$0.ListAndResizeObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ResizeObserver])))(),
    RtcDtmfToneChangeEventL: () => (T$0.RtcDtmfToneChangeEventL = dart.constFn(dart.legacy(html$.RtcDtmfToneChangeEvent)))(),
    EventStreamProviderOfRtcDtmfToneChangeEventL: () => (T$0.EventStreamProviderOfRtcDtmfToneChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDtmfToneChangeEventL())))(),
    JSArrayOfMapOfString$String: () => (T$0.JSArrayOfMapOfString$String = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$String())))(),
    CompleterOfRtcStatsResponse: () => (T$0.CompleterOfRtcStatsResponse = dart.constFn(async.Completer$(html$.RtcStatsResponse)))(),
    RtcStatsResponseTovoid: () => (T$0.RtcStatsResponseTovoid = dart.constFn(dart.fnType(dart.void, [html$.RtcStatsResponse])))(),
    MediaStreamEventL: () => (T$0.MediaStreamEventL = dart.constFn(dart.legacy(html$.MediaStreamEvent)))(),
    EventStreamProviderOfMediaStreamEventL: () => (T$0.EventStreamProviderOfMediaStreamEventL = dart.constFn(html$.EventStreamProvider$(T$0.MediaStreamEventL())))(),
    RtcDataChannelEventL: () => (T$0.RtcDataChannelEventL = dart.constFn(dart.legacy(html$.RtcDataChannelEvent)))(),
    EventStreamProviderOfRtcDataChannelEventL: () => (T$0.EventStreamProviderOfRtcDataChannelEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDataChannelEventL())))(),
    RtcPeerConnectionIceEventL: () => (T$0.RtcPeerConnectionIceEventL = dart.constFn(dart.legacy(html$.RtcPeerConnectionIceEvent)))(),
    EventStreamProviderOfRtcPeerConnectionIceEventL: () => (T$0.EventStreamProviderOfRtcPeerConnectionIceEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcPeerConnectionIceEventL())))(),
    RtcTrackEventL: () => (T$0.RtcTrackEventL = dart.constFn(dart.legacy(html$.RtcTrackEvent)))(),
    EventStreamProviderOfRtcTrackEventL: () => (T$0.EventStreamProviderOfRtcTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcTrackEventL())))(),
    UnmodifiableListViewOfOptionElement: () => (T$0.UnmodifiableListViewOfOptionElement = dart.constFn(collection.UnmodifiableListView$(html$.OptionElement)))(),
    IterableOfOptionElement: () => (T$0.IterableOfOptionElement = dart.constFn(core.Iterable$(html$.OptionElement)))(),
    OptionElementTobool: () => (T$0.OptionElementTobool = dart.constFn(dart.fnType(core.bool, [html$.OptionElement])))(),
    JSArrayOfOptionElement: () => (T$0.JSArrayOfOptionElement = dart.constFn(_interceptors.JSArray$(html$.OptionElement)))(),
    ForeignFetchEventL: () => (T$0.ForeignFetchEventL = dart.constFn(dart.legacy(html$.ForeignFetchEvent)))(),
    EventStreamProviderOfForeignFetchEventL: () => (T$0.EventStreamProviderOfForeignFetchEventL = dart.constFn(html$.EventStreamProvider$(T$0.ForeignFetchEventL())))(),
    SpeechRecognitionErrorL: () => (T$0.SpeechRecognitionErrorL = dart.constFn(dart.legacy(html$.SpeechRecognitionError)))(),
    EventStreamProviderOfSpeechRecognitionErrorL: () => (T$0.EventStreamProviderOfSpeechRecognitionErrorL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionErrorL())))(),
    SpeechRecognitionEventL: () => (T$0.SpeechRecognitionEventL = dart.constFn(dart.legacy(html$.SpeechRecognitionEvent)))(),
    EventStreamProviderOfSpeechRecognitionEventL: () => (T$0.EventStreamProviderOfSpeechRecognitionEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionEventL())))(),
    SpeechSynthesisEventL: () => (T$0.SpeechSynthesisEventL = dart.constFn(dart.legacy(html$.SpeechSynthesisEvent)))(),
    EventStreamProviderOfSpeechSynthesisEventL: () => (T$0.EventStreamProviderOfSpeechSynthesisEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechSynthesisEventL())))(),
    _WrappedListOfTableSectionElement: () => (T$0._WrappedListOfTableSectionElement = dart.constFn(html$._WrappedList$(html$.TableSectionElement)))(),
    _WrappedListOfTableRowElement: () => (T$0._WrappedListOfTableRowElement = dart.constFn(html$._WrappedList$(html$.TableRowElement)))(),
    _WrappedListOfTableCellElement: () => (T$0._WrappedListOfTableCellElement = dart.constFn(html$._WrappedList$(html$.TableCellElement)))(),
    TrackEventL: () => (T$0.TrackEventL = dart.constFn(dart.legacy(html$.TrackEvent)))(),
    EventStreamProviderOfTrackEventL: () => (T$0.EventStreamProviderOfTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.TrackEventL())))(),
    CloseEventL: () => (T$0.CloseEventL = dart.constFn(dart.legacy(html$.CloseEvent)))(),
    EventStreamProviderOfCloseEventL: () => (T$0.EventStreamProviderOfCloseEventL = dart.constFn(html$.EventStreamProvider$(T$0.CloseEventL())))(),
    CompleterOfnum: () => (T$0.CompleterOfnum = dart.constFn(async.Completer$(core.num)))(),
    numTovoid: () => (T$0.numTovoid = dart.constFn(dart.fnType(dart.void, [core.num])))(),
    IdleDeadlineTovoid: () => (T$0.IdleDeadlineTovoid = dart.constFn(dart.fnType(dart.void, [html$.IdleDeadline])))(),
    CompleterOfFileSystem: () => (T$0.CompleterOfFileSystem = dart.constFn(async.Completer$(html$.FileSystem)))(),
    FileSystemTovoid: () => (T$0.FileSystemTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileSystem])))(),
    DeviceMotionEventL: () => (T$0.DeviceMotionEventL = dart.constFn(dart.legacy(html$.DeviceMotionEvent)))(),
    EventStreamProviderOfDeviceMotionEventL: () => (T$0.EventStreamProviderOfDeviceMotionEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceMotionEventL())))(),
    DeviceOrientationEventL: () => (T$0.DeviceOrientationEventL = dart.constFn(dart.legacy(html$.DeviceOrientationEvent)))(),
    EventStreamProviderOfDeviceOrientationEventL: () => (T$0.EventStreamProviderOfDeviceOrientationEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceOrientationEventL())))(),
    AnimationEventL: () => (T$0.AnimationEventL = dart.constFn(dart.legacy(html$.AnimationEvent)))(),
    EventStreamProviderOfAnimationEventL: () => (T$0.EventStreamProviderOfAnimationEventL = dart.constFn(html$.EventStreamProvider$(T$0.AnimationEventL())))(),
    ListOfNode: () => (T$0.ListOfNode = dart.constFn(core.List$(html$.Node)))(),
    _EventStreamOfBeforeUnloadEvent: () => (T$0._EventStreamOfBeforeUnloadEvent = dart.constFn(html$._EventStream$(html$.BeforeUnloadEvent)))(),
    StreamControllerOfBeforeUnloadEvent: () => (T$0.StreamControllerOfBeforeUnloadEvent = dart.constFn(async.StreamController$(html$.BeforeUnloadEvent)))(),
    BeforeUnloadEventTovoid: () => (T$0.BeforeUnloadEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.BeforeUnloadEvent])))(),
    _ElementEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    _ElementListEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementListEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementListEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    GamepadN: () => (T$0.GamepadN = dart.constFn(dart.nullable(html$.Gamepad)))(),
    ElementTovoid: () => (T$0.ElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.Element])))(),
    ListOfCssClassSetImpl: () => (T$0.ListOfCssClassSetImpl = dart.constFn(core.List$(html_common.CssClassSetImpl)))(),
    ElementToCssClassSet: () => (T$0.ElementToCssClassSet = dart.constFn(dart.fnType(html$.CssClassSet, [html$.Element])))(),
    _IdentityHashSetOfString: () => (T$0._IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))(),
    CssClassSetImplTovoid: () => (T$0.CssClassSetImplTovoid = dart.constFn(dart.fnType(dart.void, [html_common.CssClassSetImpl])))(),
    boolAndCssClassSetImplTobool: () => (T$0.boolAndCssClassSetImplTobool = dart.constFn(dart.fnType(core.bool, [core.bool, html_common.CssClassSetImpl])))(),
    StringAndStringToString: () => (T$0.StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))(),
    SetOfString: () => (T$0.SetOfString = dart.constFn(core.Set$(core.String)))(),
    SetOfStringTobool: () => (T$0.SetOfStringTobool = dart.constFn(dart.fnType(core.bool, [T$0.SetOfString()])))(),
    IterableOfString: () => (T$0.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    SetOfStringTovoid: () => (T$0.SetOfStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.SetOfString()])))(),
    VoidToNString: () => (T$0.VoidToNString = dart.constFn(dart.nullable(T$.VoidToString())))(),
    EventTargetN: () => (T$0.EventTargetN = dart.constFn(dart.nullable(html$.EventTarget)))(),
    ElementAndStringAndString__Tobool: () => (T$0.ElementAndStringAndString__Tobool = dart.constFn(dart.fnType(core.bool, [html$.Element, core.String, core.String, html$._Html5NodeValidator])))(),
    LinkedHashSetOfString: () => (T$0.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    IdentityMapOfString$Function: () => (T$0.IdentityMapOfString$Function = dart.constFn(_js_helper.IdentityMap$(core.String, core.Function)))(),
    JSArrayOfKeyEvent: () => (T$0.JSArrayOfKeyEvent = dart.constFn(_interceptors.JSArray$(html$.KeyEvent)))(),
    KeyEventTobool: () => (T$0.KeyEventTobool = dart.constFn(dart.fnType(core.bool, [html$.KeyEvent])))(),
    JSArrayOfNodeValidator: () => (T$0.JSArrayOfNodeValidator = dart.constFn(_interceptors.JSArray$(html$.NodeValidator)))(),
    NodeValidatorTobool: () => (T$0.NodeValidatorTobool = dart.constFn(dart.fnType(core.bool, [html$.NodeValidator])))(),
    NodeAndNodeToint: () => (T$0.NodeAndNodeToint = dart.constFn(dart.fnType(core.int, [html$.Node, html$.Node])))(),
    NodeAndNodeNTovoid: () => (T$0.NodeAndNodeNTovoid = dart.constFn(dart.fnType(dart.void, [html$.Node, T$0.NodeN$1()])))(),
    MapNOfString$dynamic: () => (T$0.MapNOfString$dynamic = dart.constFn(dart.nullable(T$0.MapOfString$dynamic())))(),
    dynamicToMapNOfString$dynamic: () => (T$0.dynamicToMapNOfString$dynamic = dart.constFn(dart.fnType(T$0.MapNOfString$dynamic(), [dart.dynamic])))(),
    TypeN: () => (T$0.TypeN = dart.constFn(dart.nullable(core.Type)))(),
    dynamicAnddynamicTodynamic: () => (T$0.dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))(),
    NodeToElement: () => (T$0.NodeToElement = dart.constFn(dart.fnType(html$.Element, [html$.Node])))(),
    CompleterOfAudioBuffer: () => (T$0.CompleterOfAudioBuffer = dart.constFn(async.Completer$(web_audio.AudioBuffer)))(),
    AudioBufferTovoid: () => (T$0.AudioBufferTovoid = dart.constFn(dart.fnType(dart.void, [web_audio.AudioBuffer])))(),
    AudioProcessingEventL: () => (T$0.AudioProcessingEventL = dart.constFn(dart.legacy(web_audio.AudioProcessingEvent)))(),
    EventStreamProviderOfAudioProcessingEventL: () => (T$0.EventStreamProviderOfAudioProcessingEventL = dart.constFn(html$.EventStreamProvider$(T$0.AudioProcessingEventL())))(),
    TypedDataN: () => (T$0.TypedDataN = dart.constFn(dart.nullable(typed_data.TypedData)))(),
    CompleterOfSqlTransaction: () => (T$0.CompleterOfSqlTransaction = dart.constFn(async.Completer$(web_sql.SqlTransaction)))(),
    SqlTransactionTovoid: () => (T$0.SqlTransactionTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction])))(),
    SqlErrorTovoid: () => (T$0.SqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlError])))(),
    CompleterOfSqlResultSet: () => (T$0.CompleterOfSqlResultSet = dart.constFn(async.Completer$(web_sql.SqlResultSet)))(),
    SqlTransactionAndSqlResultSetTovoid: () => (T$0.SqlTransactionAndSqlResultSetTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlResultSet])))(),
    SqlTransactionAndSqlErrorTovoid: () => (T$0.SqlTransactionAndSqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlError])))(),
    intAndintToint: () => (T$0.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    StringNToint: () => (T$0.StringNToint = dart.constFn(dart.fnType(core.int, [T$.StringN()])))(),
    intToString: () => (T$0.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    SymbolAnddynamicTovoid: () => (T$0.SymbolAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.Symbol, dart.dynamic])))(),
    MapOfSymbol$ObjectN: () => (T$0.MapOfSymbol$ObjectN = dart.constFn(core.Map$(core.Symbol, T$.ObjectN())))(),
    MapOfString$StringAndStringToMapOfString$String: () => (T$0.MapOfString$StringAndStringToMapOfString$String = dart.constFn(dart.fnType(T$0.MapOfString$String(), [T$0.MapOfString$String(), core.String])))(),
    StringAndintTovoid: () => (T$0.StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))(),
    StringAnddynamicTovoid$1: () => (T$0.StringAnddynamicTovoid$1 = dart.constFn(dart.fnType(dart.void, [core.String], [dart.dynamic])))(),
    ListOfStringL: () => (T$0.ListOfStringL = dart.constFn(core.List$(T$.StringL())))(),
    ListLOfStringL: () => (T$0.ListLOfStringL = dart.constFn(dart.legacy(T$0.ListOfStringL())))(),
    StringAndListOfStringToListOfString: () => (T$0.StringAndListOfStringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String, T$.ListOfString()])))(),
    MapOfString$ListOfString: () => (T$0.MapOfString$ListOfString = dart.constFn(core.Map$(core.String, T$.ListOfString())))(),
    StringAndStringNTovoid: () => (T$0.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.StringN()])))(),
    IdentityMapOfString$ListOfString: () => (T$0.IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfString())))(),
    VoidToListOfString: () => (T$0.VoidToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [])))(),
    intAndintAndintTovoid: () => (T$0.intAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.int])))(),
    _StringSinkConversionSinkOfStringSink: () => (T$0._StringSinkConversionSinkOfStringSink = dart.constFn(convert._StringSinkConversionSink$(core.StringSink)))(),
    ListOfUint8List: () => (T$0.ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))(),
    intToUint8List: () => (T$0.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))(),
    dynamicAnddynamicToUint8List: () => (T$0.dynamicAnddynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic, dart.dynamic])))(),
    Uint8ListAndStringAndintTovoid: () => (T$0.Uint8ListAndStringAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.String, core.int])))(),
    intToElement: () => (T$0.intToElement = dart.constFn(dart.fnType(html$.Element, [core.int])))(),
    IdentityMapOfString$intToElement: () => (T$0.IdentityMapOfString$intToElement = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.intToElement())))(),
    IdentityMapOfint$Element: () => (T$0.IdentityMapOfint$Element = dart.constFn(_js_helper.IdentityMap$(core.int, html$.Element)))(),
    PointModeL: () => (T$0.PointModeL = dart.constFn(dart.legacy(ui.PointMode)))(),
    ClipOpL: () => (T$0.ClipOpL = dart.constFn(dart.legacy(ui.ClipOp)))(),
    VertexModeL: () => (T$0.VertexModeL = dart.constFn(dart.legacy(ui.VertexMode)))(),
    PathFillTypeL: () => (T$0.PathFillTypeL = dart.constFn(dart.legacy(ui.PathFillType)))(),
    PathOperationL: () => (T$0.PathOperationL = dart.constFn(dart.legacy(ui.PathOperation)))(),
    ByteDataN: () => (T$0.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),
    ByteDataNTovoid: () => (T$0.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ByteDataN()])))(),
    ListQueueOf_StoredMessage: () => (T$0.ListQueueOf_StoredMessage = dart.constFn(collection.ListQueue$(ui._StoredMessage)))(),
    IdentityMapOfString$_Channel: () => (T$0.IdentityMapOfString$_Channel = dart.constFn(_js_helper.IdentityMap$(core.String, ui._Channel)))(),
    VoidTo_Channel: () => (T$0.VoidTo_Channel = dart.constFn(dart.fnType(ui._Channel, [])))(),
    StrokeCapL: () => (T$0.StrokeCapL = dart.constFn(dart.legacy(ui.StrokeCap)))(),
    StrokeJoinL: () => (T$0.StrokeJoinL = dart.constFn(dart.legacy(ui.StrokeJoin)))(),
    PaintingStyleL: () => (T$0.PaintingStyleL = dart.constFn(dart.legacy(ui.PaintingStyle)))(),
    BlendModeL: () => (T$0.BlendModeL = dart.constFn(dart.legacy(ui.BlendMode)))(),
    ClipL: () => (T$0.ClipL = dart.constFn(dart.legacy(ui.Clip)))(),
    BlurStyleL: () => (T$0.BlurStyleL = dart.constFn(dart.legacy(ui.BlurStyle)))(),
    FilterQualityL: () => (T$0.FilterQualityL = dart.constFn(dart.legacy(ui.FilterQuality)))(),
    ImageByteFormatL: () => (T$0.ImageByteFormatL = dart.constFn(dart.legacy(ui.ImageByteFormat)))(),
    PixelFormatL: () => (T$0.PixelFormatL = dart.constFn(dart.legacy(ui.PixelFormat)))(),
    JSArrayOfShadow: () => (T$0.JSArrayOfShadow = dart.constFn(_interceptors.JSArray$(ui.Shadow)))(),
    LocaleL: () => (T$0.LocaleL = dart.constFn(dart.legacy(ui.Locale)))(),
    FramePhaseL: () => (T$0.FramePhaseL = dart.constFn(dart.legacy(ui.FramePhase)))(),
    AppLifecycleStateL: () => (T$0.AppLifecycleStateL = dart.constFn(dart.legacy(ui.AppLifecycleState)))(),
    PointerChangeL: () => (T$0.PointerChangeL = dart.constFn(dart.legacy(ui.PointerChange)))(),
    PointerDeviceKindL: () => (T$0.PointerDeviceKindL = dart.constFn(dart.legacy(ui.PointerDeviceKind)))(),
    PointerSignalKindL: () => (T$0.PointerSignalKindL = dart.constFn(dart.legacy(ui.PointerSignalKind)))(),
    PointerDataL: () => (T$0.PointerDataL = dart.constFn(dart.legacy(ui.PointerData)))(),
    SemanticsActionL: () => (T$0.SemanticsActionL = dart.constFn(dart.legacy(ui.SemanticsAction)))(),
    SemanticsFlagL: () => (T$0.SemanticsFlagL = dart.constFn(dart.legacy(ui.SemanticsFlag)))(),
    JSArrayOfSemanticsNodeUpdate: () => (T$0.JSArrayOfSemanticsNodeUpdate = dart.constFn(_interceptors.JSArray$(_engine.SemanticsNodeUpdate)))(),
    FontStyleL: () => (T$0.FontStyleL = dart.constFn(dart.legacy(ui.FontStyle)))(),
    PlaceholderAlignmentL: () => (T$0.PlaceholderAlignmentL = dart.constFn(dart.legacy(ui.PlaceholderAlignment)))(),
    FontWeightL: () => (T$0.FontWeightL = dart.constFn(dart.legacy(ui.FontWeight)))(),
    TextAlignL: () => (T$0.TextAlignL = dart.constFn(dart.legacy(ui.TextAlign)))(),
    TextBaselineL: () => (T$0.TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))(),
    TextDecorationStyleL: () => (T$0.TextDecorationStyleL = dart.constFn(dart.legacy(ui.TextDecorationStyle)))(),
    CkPaintN: () => (T$0.CkPaintN = dart.constFn(dart.nullable(_engine.CkPaint)))(),
    TextDirectionL: () => (T$0.TextDirectionL = dart.constFn(dart.legacy(ui.TextDirection)))(),
    TextAffinityL: () => (T$0.TextAffinityL = dart.constFn(dart.legacy(ui.TextAffinity)))(),
    BoxHeightStyleL: () => (T$0.BoxHeightStyleL = dart.constFn(dart.legacy(ui.BoxHeightStyle)))(),
    BoxWidthStyleL: () => (T$0.BoxWidthStyleL = dart.constFn(dart.legacy(ui.BoxWidthStyle)))(),
    TileModeL: () => (T$0.TileModeL = dart.constFn(dart.legacy(ui.TileMode)))(),
    BrightnessL: () => (T$0.BrightnessL = dart.constFn(dart.legacy(ui.Brightness)))(),
    CodecTovoid: () => (T$0.CodecTovoid = dart.constFn(dart.fnType(dart.void, [ui.Codec])))(),
    FnToStringN: () => (T$0.FnToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$0.CodecTovoid()])))(),
    boolTodynamic: () => (T$0.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    FrameInfoToNull: () => (T$0.FrameInfoToNull = dart.constFn(dart.fnType(core.Null, [ui.FrameInfo])))(),
    voidTodynamic: () => (T$0.voidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.void])))(),
    voidToFutureOrOfvoid: () => (T$0.voidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    MetaElementN: () => (T$0.MetaElementN = dart.constFn(dart.nullable(html$.MetaElement)))(),
    FutureOfByteData: () => (T$0.FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))(),
    JSArrayOfElement: () => (T$0.JSArrayOfElement = dart.constFn(_interceptors.JSArray$(html$.Element)))(),
    ImageElementN: () => (T$0.ImageElementN = dart.constFn(dart.nullable(html$.ImageElement)))(),
    HtmlElementTovoid: () => (T$0.HtmlElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.HtmlElement])))()
  };
  var T$1 = {
    EngineColorFilterN: () => (T$1.EngineColorFilterN = dart.constFn(dart.nullable(_engine.EngineColorFilter)))(),
    BrowserEngineL: () => (T$1.BrowserEngineL = dart.constFn(dart.legacy(_engine.BrowserEngine)))(),
    OperatingSystemL: () => (T$1.OperatingSystemL = dart.constFn(dart.legacy(_engine.OperatingSystem)))(),
    _CkManagedSkImageFilterConvertibleOfObject: () => (T$1._CkManagedSkImageFilterConvertibleOfObject = dart.constFn(_engine._CkManagedSkImageFilterConvertible$(core.Object)))(),
    JSArrayOfCkPaintCommand: () => (T$1.JSArrayOfCkPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.CkPaintCommand)))(),
    JSArrayOfSkDeletable: () => (T$1.JSArrayOfSkDeletable = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkDeletable"))))(),
    SkDeletableToNull: () => (T$1.SkDeletableToNull = dart.constFn(dart.fnType(core.Null, [dart.anonymousJSType("SkDeletable")])))(),
    IdentityMapOfint$CkPictureRecorder: () => (T$1.IdentityMapOfint$CkPictureRecorder = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.CkPictureRecorder)))(),
    IdentityMapOfint$EmbeddedViewParams: () => (T$1.IdentityMapOfint$EmbeddedViewParams = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.EmbeddedViewParams)))(),
    IdentityMapOfintN$Element: () => (T$1.IdentityMapOfintN$Element = dart.constFn(_js_helper.IdentityMap$(T$.intN(), html$.Element)))(),
    IdentityMapOfintN$ElementN: () => (T$1.IdentityMapOfintN$ElementN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$0.ElementN())))(),
    IdentityMapOfint$Surface: () => (T$1.IdentityMapOfint$Surface = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.Surface)))(),
    LinkedHashSetOfint: () => (T$1.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    IdentityMapOfint$int: () => (T$1.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    CkCanvasN: () => (T$1.CkCanvasN = dart.constFn(dart.nullable(_engine.CkCanvas)))(),
    JSArrayOfCkCanvasN: () => (T$1.JSArrayOfCkCanvasN = dart.constFn(_interceptors.JSArray$(T$1.CkCanvasN())))(),
    JSArrayOfSurface: () => (T$1.JSArrayOfSurface = dart.constFn(_interceptors.JSArray$(_engine.Surface)))(),
    MutatorTypeL: () => (T$1.MutatorTypeL = dart.constFn(dart.legacy(_engine.MutatorType)))(),
    JSArrayOfMutator: () => (T$1.JSArrayOfMutator = dart.constFn(_interceptors.JSArray$(_engine.Mutator)))(),
    ListOfMutator: () => (T$1.ListOfMutator = dart.constFn(core.List$(_engine.Mutator)))(),
    _RegisteredFontN: () => (T$1._RegisteredFontN = dart.constFn(dart.nullable(_engine._RegisteredFont)))(),
    FutureOf_RegisteredFontN: () => (T$1.FutureOf_RegisteredFontN = dart.constFn(async.Future$(T$1._RegisteredFontN())))(),
    JSArrayOfFutureOf_RegisteredFontN: () => (T$1.JSArrayOfFutureOf_RegisteredFontN = dart.constFn(_interceptors.JSArray$(T$1.FutureOf_RegisteredFontN())))(),
    JSArrayOf_RegisteredFont: () => (T$1.JSArrayOf_RegisteredFont = dart.constFn(_interceptors.JSArray$(_engine._RegisteredFont)))(),
    ListOfSkTypeface: () => (T$1.ListOfSkTypeface = dart.constFn(core.List$(dart.anonymousJSType("SkTypeface"))))(),
    IdentityMapOfString$ListOfSkTypeface: () => (T$1.IdentityMapOfString$ListOfSkTypeface = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.ListOfSkTypeface())))(),
    JSArrayOfSkTypeface: () => (T$1.JSArrayOfSkTypeface = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTypeface"))))(),
    VoidToListOfSkTypeface: () => (T$1.VoidToListOfSkTypeface = dart.constFn(dart.fnType(T$1.ListOfSkTypeface(), [])))(),
    dynamicToByteBuffer: () => (T$1.dynamicToByteBuffer = dart.constFn(dart.fnType(typed_data.ByteBuffer, [dart.dynamic])))(),
    FutureOfByteBuffer: () => (T$1.FutureOfByteBuffer = dart.constFn(async.Future$(typed_data.ByteBuffer)))(),
    IdentityMapOfString$int: () => (T$1.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    ListOfCodeunitRange: () => (T$1.ListOfCodeunitRange = dart.constFn(core.List$(_engine.CodeunitRange)))(),
    LinkedMapOfNotoFont$ListOfCodeunitRange: () => (T$1.LinkedMapOfNotoFont$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine.NotoFont, T$1.ListOfCodeunitRange())))(),
    JSArrayOfCodeunitRange: () => (T$1.JSArrayOfCodeunitRange = dart.constFn(_interceptors.JSArray$(_engine.CodeunitRange)))(),
    VoidToListOfCodeunitRange: () => (T$1.VoidToListOfCodeunitRange = dart.constFn(dart.fnType(T$1.ListOfCodeunitRange(), [])))(),
    IntervalTreeOfNotoFont: () => (T$1.IntervalTreeOfNotoFont = dart.constFn(_engine.IntervalTree$(_engine.NotoFont)))(),
    CompleterOfvoid: () => (T$1.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    LinkedHashSetOf_ResolvedNotoSubset: () => (T$1.LinkedHashSetOf_ResolvedNotoSubset = dart.constFn(collection.LinkedHashSet$(_engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$_ResolvedNotoSubset: () => (T$1.IdentityMapOfString$_ResolvedNotoSubset = dart.constFn(_js_helper.IdentityMap$(core.String, _engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$FutureOfvoid: () => (T$1.IdentityMapOfString$FutureOfvoid = dart.constFn(_js_helper.IdentityMap$(core.String, T$.FutureOfvoid())))(),
    IdentityMapOfString$Uint8List: () => (T$1.IdentityMapOfString$Uint8List = dart.constFn(_js_helper.IdentityMap$(core.String, typed_data.Uint8List)))(),
    FutureOrOfByteBuffer: () => (T$1.FutureOrOfByteBuffer = dart.constFn(async.FutureOr$(typed_data.ByteBuffer)))(),
    dynamicToFutureOrOfByteBuffer: () => (T$1.dynamicToFutureOrOfByteBuffer = dart.constFn(dart.fnType(T$1.FutureOrOfByteBuffer(), [dart.dynamic])))(),
    FutureOfFrameInfo: () => (T$1.FutureOfFrameInfo = dart.constFn(async.Future$(ui.FrameInfo)))(),
    SkiaObjectBoxOfCkImage$SkImage: () => (T$1.SkiaObjectBoxOfCkImage$SkImage = dart.constFn(_engine.SkiaObjectBox$(_engine.CkImage, dart.anonymousJSType("SkImage"))))(),
    VoidToSkImage: () => (T$1.VoidToSkImage = dart.constFn(dart.fnType(dart.anonymousJSType("SkImage"), [])))(),
    JSArrayOfLayer: () => (T$1.JSArrayOfLayer = dart.constFn(_interceptors.JSArray$(_engine.Layer)))(),
    CkShaderN: () => (T$1.CkShaderN = dart.constFn(dart.nullable(_engine.CkShader)))(),
    _CkManagedSkImageFilterConvertibleNOfObject: () => (T$1._CkManagedSkImageFilterConvertibleNOfObject = dart.constFn(dart.nullable(T$1._CkManagedSkImageFilterConvertibleOfObject())))(),
    JSArrayOfVoidTovoid: () => (T$1.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    SkiaObjectOfObject: () => (T$1.SkiaObjectOfObject = dart.constFn(_engine.SkiaObject$(core.Object)))(),
    DoubleLinkedQueueOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueue$(T$1.SkiaObjectOfObject())))(),
    DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueueEntry$(T$1.SkiaObjectOfObject())))(),
    LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(_js_helper.LinkedMap$(T$1.SkiaObjectOfObject(), T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject())))(),
    ManagedSkiaObjectOfObject: () => (T$1.ManagedSkiaObjectOfObject = dart.constFn(_engine.ManagedSkiaObject$(core.Object)))(),
    JSArrayOfManagedSkiaObjectOfObject: () => (T$1.JSArrayOfManagedSkiaObjectOfObject = dart.constFn(_interceptors.JSArray$(T$1.ManagedSkiaObjectOfObject())))(),
    JSArrayOfSkiaObjectCache: () => (T$1.JSArrayOfSkiaObjectCache = dart.constFn(_interceptors.JSArray$(_engine.SkiaObjectCache)))(),
    SurfaceFrameAndCkCanvasTobool: () => (T$1.SurfaceFrameAndCkCanvasTobool = dart.constFn(dart.fnType(core.bool, [_engine.SurfaceFrame, _engine.CkCanvas])))(),
    JSArrayOfSkTextShadow: () => (T$1.JSArrayOfSkTextShadow = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTextShadow"))))(),
    JSArrayOfSkFontFeature: () => (T$1.JSArrayOfSkFontFeature = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkFontFeature"))))(),
    VoidToSkTextStyle: () => (T$1.VoidToSkTextStyle = dart.constFn(dart.fnType(dart.lazyJSType(() => dart.global.SkTextStyle, "SkTextStyle"), [])))(),
    TextBoxL: () => (T$1.TextBoxL = dart.constFn(dart.legacy(ui.TextBox)))(),
    JSArrayOfTextBox: () => (T$1.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    JSArrayOf_ParagraphCommand: () => (T$1.JSArrayOf_ParagraphCommand = dart.constFn(_interceptors.JSArray$(_engine._ParagraphCommand)))(),
    JSArrayOfdouble: () => (T$1.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    JSArrayOfCkTextStyle: () => (T$1.JSArrayOfCkTextStyle = dart.constFn(_interceptors.JSArray$(_engine.CkTextStyle)))(),
    ListOfbool: () => (T$1.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    boolTobool: () => (T$1.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    intTobool: () => (T$1.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    _ParagraphCommandTypeL: () => (T$1._ParagraphCommandTypeL = dart.constFn(dart.legacy(_engine._ParagraphCommandType)))(),
    JSArrayOfCanvasElement: () => (T$1.JSArrayOfCanvasElement = dart.constFn(_interceptors.JSArray$(html$.CanvasElement)))(),
    JSArrayOf_SaveStackEntry: () => (T$1.JSArrayOf_SaveStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveStackEntry)))(),
    ListOf_SaveClipEntry: () => (T$1.ListOf_SaveClipEntry = dart.constFn(core.List$(_engine._SaveClipEntry)))(),
    JSArrayOf_SaveClipEntry: () => (T$1.JSArrayOf_SaveClipEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveClipEntry)))(),
    StringToNull: () => (T$1.StringToNull = dart.constFn(dart.fnType(core.Null, [core.String])))(),
    JSArrayOf_SaveElementStackEntry: () => (T$1.JSArrayOf_SaveElementStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveElementStackEntry)))(),
    ListOfElementN: () => (T$1.ListOfElementN = dart.constFn(core.List$(T$0.ElementN())))(),
    ListNOfElementN: () => (T$1.ListNOfElementN = dart.constFn(dart.nullable(T$1.ListOfElementN())))(),
    JSArrayOfElementN: () => (T$1.JSArrayOfElementN = dart.constFn(_interceptors.JSArray$(T$0.ElementN())))(),
    CompleterOfbool: () => (T$1.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    EventTodynamic: () => (T$1.EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.Event])))(),
    IdentityMapOfString$bool: () => (T$1.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    VoidToFn$1: () => (T$1.VoidToFn$1 = dart.constFn(dart.fnType(T$.VoidTovoid(), [])))(),
    FnTodynamic$1: () => (T$1.FnTodynamic$1 = dart.constFn(dart.fnType(dart.dynamic, [T$.VoidTovoid()])))(),
    JSArrayOfPersistedSurface: () => (T$1.JSArrayOfPersistedSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedSurface)))(),
    PersistedContainerSurfaceN: () => (T$1.PersistedContainerSurfaceN = dart.constFn(dart.nullable(_engine.PersistedContainerSurface)))(),
    PersistedSurfaceN: () => (T$1.PersistedSurfaceN = dart.constFn(dart.nullable(_engine.PersistedSurface)))(),
    JSArrayOfPersistedSurfaceN: () => (T$1.JSArrayOfPersistedSurfaceN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceN())))(),
    PersistedSurfaceL: () => (T$1.PersistedSurfaceL = dart.constFn(dart.legacy(_engine.PersistedSurface)))(),
    JSArrayOf_PersistedSurfaceMatch: () => (T$1.JSArrayOf_PersistedSurfaceMatch = dart.constFn(_interceptors.JSArray$(_engine._PersistedSurfaceMatch)))(),
    _PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint: () => (T$1._PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint = dart.constFn(dart.fnType(core.int, [_engine._PersistedSurfaceMatch, _engine._PersistedSurfaceMatch])))(),
    LinkedMapOfPersistedSurfaceN$PersistedSurface: () => (T$1.LinkedMapOfPersistedSurfaceN$PersistedSurface = dart.constFn(_js_helper.LinkedMap$(T$1.PersistedSurfaceN(), _engine.PersistedSurface)))(),
    LinkedHashSetOfPersistedSurface: () => (T$1.LinkedHashSetOfPersistedSurface = dart.constFn(collection.LinkedHashSet$(_engine.PersistedSurface)))(),
    FrameReferenceOfPersistedSurface: () => (T$1.FrameReferenceOfPersistedSurface = dart.constFn(_engine.FrameReference$(_engine.PersistedSurface)))(),
    JSArrayOfOffset: () => (T$1.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    OffsetL: () => (T$1.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    JSArrayOfConic: () => (T$1.JSArrayOfConic = dart.constFn(_interceptors.JSArray$(_engine.Conic)))(),
    JSArrayOf_PathContourMeasure: () => (T$1.JSArrayOf_PathContourMeasure = dart.constFn(_interceptors.JSArray$(_engine._PathContourMeasure)))(),
    JSArrayOf_PathSegment: () => (T$1.JSArrayOf_PathSegment = dart.constFn(_interceptors.JSArray$(_engine._PathSegment)))(),
    doubleAnddoubleAnddouble__ToNull: () => (T$1.doubleAnddoubleAnddouble__ToNull = dart.constFn(dart.fnType(core.Null, [core.double, core.double, core.double, core.double])))(),
    JSArrayOfRadius: () => (T$1.JSArrayOfRadius = dart.constFn(_interceptors.JSArray$(ui.Radius)))(),
    DirChangeL: () => (T$1.DirChangeL = dart.constFn(dart.legacy(_engine.DirChange)))(),
    CrossFrameCacheOfHtmlElement: () => (T$1.CrossFrameCacheOfHtmlElement = dart.constFn(_engine.CrossFrameCache$(html$.HtmlElement)))(),
    BitmapCanvasN: () => (T$1.BitmapCanvasN = dart.constFn(dart.nullable(_engine.BitmapCanvas)))(),
    JSArrayOfPaintCommand: () => (T$1.JSArrayOfPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.PaintCommand)))(),
    JSArrayOfPathCommand: () => (T$1.JSArrayOfPathCommand = dart.constFn(_interceptors.JSArray$(_engine.PathCommand)))(),
    JSArrayOfMatrix4: () => (T$1.JSArrayOfMatrix4 = dart.constFn(_interceptors.JSArray$(_engine.Matrix4)))(),
    RectN: () => (T$1.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    JSArrayOfRectN: () => (T$1.JSArrayOfRectN = dart.constFn(_interceptors.JSArray$(T$1.RectN())))(),
    _GlProgramN: () => (T$1._GlProgramN = dart.constFn(dart.nullable(_engine._GlProgram)))(),
    IdentityMapOfString$_GlProgramN: () => (T$1.IdentityMapOfString$_GlProgramN = dart.constFn(_js_helper.IdentityMap$(core.String, T$1._GlProgramN())))(),
    JSArrayOfPersistedContainerSurface: () => (T$1.JSArrayOfPersistedContainerSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedContainerSurface)))(),
    PersistedOffsetN: () => (T$1.PersistedOffsetN = dart.constFn(dart.nullable(_engine.PersistedOffset)))(),
    PersistedTransformN: () => (T$1.PersistedTransformN = dart.constFn(dart.nullable(_engine.PersistedTransform)))(),
    PersistedClipRectN: () => (T$1.PersistedClipRectN = dart.constFn(dart.nullable(_engine.PersistedClipRect)))(),
    PersistedClipPathN: () => (T$1.PersistedClipPathN = dart.constFn(dart.nullable(_engine.PersistedClipPath)))(),
    PersistedOpacityN: () => (T$1.PersistedOpacityN = dart.constFn(dart.nullable(_engine.PersistedOpacity)))(),
    PersistedColorFilterN: () => (T$1.PersistedColorFilterN = dart.constFn(dart.nullable(_engine.PersistedColorFilter)))(),
    PersistedImageFilterN: () => (T$1.PersistedImageFilterN = dart.constFn(dart.nullable(_engine.PersistedImageFilter)))(),
    PersistedBackdropFilterN: () => (T$1.PersistedBackdropFilterN = dart.constFn(dart.nullable(_engine.PersistedBackdropFilter)))(),
    PersistedPhysicalShapeN: () => (T$1.PersistedPhysicalShapeN = dart.constFn(dart.nullable(_engine.PersistedPhysicalShape)))(),
    VoidToSurfaceScene: () => (T$1.VoidToSurfaceScene = dart.constFn(dart.fnType(_engine.SurfaceScene, [])))(),
    JSArrayOfShaderDeclaration: () => (T$1.JSArrayOfShaderDeclaration = dart.constFn(_interceptors.JSArray$(_engine.ShaderDeclaration)))(),
    JSArrayOfShaderMethod: () => (T$1.JSArrayOfShaderMethod = dart.constFn(_interceptors.JSArray$(_engine.ShaderMethod)))(),
    PersistedSurfaceStateL: () => (T$1.PersistedSurfaceStateL = dart.constFn(dart.legacy(_engine.PersistedSurfaceState)))(),
    CompleterOfFrameInfo: () => (T$1.CompleterOfFrameInfo = dart.constFn(async.Completer$(ui.FrameInfo)))(),
    StreamSubscriptionOfEvent: () => (T$1.StreamSubscriptionOfEvent = dart.constFn(async.StreamSubscription$(html$.Event)))(),
    VoidToStreamSubscriptionOfEvent: () => (T$1.VoidToStreamSubscriptionOfEvent = dart.constFn(dart.fnType(T$1.StreamSubscriptionOfEvent(), [])))(),
    StreamSubscriptionOfEventTodynamic: () => (T$1.StreamSubscriptionOfEventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$1.StreamSubscriptionOfEvent()])))(),
    FutureOfByteDataN: () => (T$1.FutureOfByteDataN = dart.constFn(async.Future$(T$0.ByteDataN())))(),
    IdentityMapOfString$Timer: () => (T$1.IdentityMapOfString$Timer = dart.constFn(_js_helper.IdentityMap$(core.String, async.Timer)))(),
    CompleterOfImage: () => (T$1.CompleterOfImage = dart.constFn(async.Completer$(ui.Image)))(),
    LinkedMapOfObject$FlutterWindow: () => (T$1.LinkedMapOfObject$FlutterWindow = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.FlutterWindow)))(),
    LinkedMapOfObject$ViewConfiguration: () => (T$1.LinkedMapOfObject$ViewConfiguration = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.ViewConfiguration)))(),
    ListOfFrameTiming: () => (T$1.ListOfFrameTiming = dart.constFn(core.List$(ui.FrameTiming)))(),
    ByteDataToNull: () => (T$1.ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))(),
    JSArrayOfLocale: () => (T$1.JSArrayOfLocale = dart.constFn(_interceptors.JSArray$(ui.Locale)))(),
    StringAndFnTovoid: () => (T$1.StringAndFnTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$1.EventTodynamic()])))(),
    IdentityMapOfString$EventTodynamic: () => (T$1.IdentityMapOfString$EventTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.EventTodynamic())))(),
    JSArrayOfPointerData: () => (T$1.JSArrayOfPointerData = dart.constFn(_interceptors.JSArray$(ui.PointerData)))(),
    IdentityMapOfint$_ButtonSanitizer: () => (T$1.IdentityMapOfint$_ButtonSanitizer = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._ButtonSanitizer)))(),
    VoidTo_ButtonSanitizer: () => (T$1.VoidTo_ButtonSanitizer = dart.constFn(dart.fnType(_engine._ButtonSanitizer, [])))(),
    PointerEventToNull: () => (T$1.PointerEventToNull = dart.constFn(dart.fnType(core.Null, [html$.PointerEvent])))(),
    PointerEventTo_SanitizedDetails: () => (T$1.PointerEventTo_SanitizedDetails = dart.constFn(dart.fnType(_engine._SanitizedDetails, [html$.PointerEvent])))(),
    JSArrayOfPointerEvent: () => (T$1.JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(html$.PointerEvent)))(),
    TouchEventToNull: () => (T$1.TouchEventToNull = dart.constFn(dart.fnType(core.Null, [html$.TouchEvent])))(),
    MouseEventToNull: () => (T$1.MouseEventToNull = dart.constFn(dart.fnType(core.Null, [html$.MouseEvent])))(),
    IdentityMapOfint$_PointerState: () => (T$1.IdentityMapOfint$_PointerState = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._PointerState)))(),
    VoidTo_PointerState: () => (T$1.VoidTo_PointerState = dart.constFn(dart.fnType(_engine._PointerState, [])))(),
    StringAnddoubleTovoid: () => (T$1.StringAnddoubleTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.double])))(),
    StringAnddoubleToNvoid: () => (T$1.StringAnddoubleToNvoid = dart.constFn(dart.nullable(T$1.StringAnddoubleTovoid())))(),
    MapEntryOfString$int: () => (T$1.MapEntryOfString$int = dart.constFn(core.MapEntry$(core.String, core.int)))(),
    MapEntryOfString$intAndMapEntryOfString$intToint: () => (T$1.MapEntryOfString$intAndMapEntryOfString$intToint = dart.constFn(dart.fnType(core.int, [T$1.MapEntryOfString$int(), T$1.MapEntryOfString$int()])))(),
    _CheckableKindL: () => (T$1._CheckableKindL = dart.constFn(dart.legacy(_engine._CheckableKind)))(),
    GestureModeTovoid: () => (T$1.GestureModeTovoid = dart.constFn(dart.fnType(dart.void, [_engine.GestureMode])))(),
    RoleL: () => (T$1.RoleL = dart.constFn(dart.legacy(_engine.Role)))(),
    RoleManagerN: () => (T$1.RoleManagerN = dart.constFn(dart.nullable(_engine.RoleManager)))(),
    LinkedMapOfRole$RoleManagerN: () => (T$1.LinkedMapOfRole$RoleManagerN = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.RoleManagerN())))(),
    VoidToMatrix4: () => (T$1.VoidToMatrix4 = dart.constFn(dart.fnType(_engine.Matrix4, [])))(),
    Matrix4Todynamic: () => (T$1.Matrix4Todynamic = dart.constFn(dart.fnType(dart.dynamic, [_engine.Matrix4])))(),
    AccessibilityModeL: () => (T$1.AccessibilityModeL = dart.constFn(dart.legacy(_engine.AccessibilityMode)))(),
    GestureModeL: () => (T$1.GestureModeL = dart.constFn(dart.legacy(_engine.GestureMode)))(),
    SemanticsObjectN: () => (T$1.SemanticsObjectN = dart.constFn(dart.nullable(_engine.SemanticsObject)))(),
    IdentityMapOfintN$SemanticsObjectN: () => (T$1.IdentityMapOfintN$SemanticsObjectN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$1.SemanticsObjectN())))(),
    IdentityMapOfintN$SemanticsObject: () => (T$1.IdentityMapOfintN$SemanticsObject = dart.constFn(_js_helper.IdentityMap$(T$.intN(), _engine.SemanticsObject)))(),
    JSArrayOfSemanticsObjectN: () => (T$1.JSArrayOfSemanticsObjectN = dart.constFn(_interceptors.JSArray$(T$1.SemanticsObjectN())))(),
    VoidToDateTime: () => (T$1.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    GestureModeToNvoid: () => (T$1.GestureModeToNvoid = dart.constFn(dart.nullable(T$1.GestureModeTovoid())))(),
    JSArrayOfGestureModeToNvoid: () => (T$1.JSArrayOfGestureModeToNvoid = dart.constFn(_interceptors.JSArray$(T$1.GestureModeToNvoid())))(),
    intNAndSemanticsObjectNTovoid: () => (T$1.intNAndSemanticsObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.intN(), T$1.SemanticsObjectN()])))(),
    EnabledStateL: () => (T$1.EnabledStateL = dart.constFn(dart.legacy(_engine.EnabledState)))(),
    JSArrayOfStreamSubscriptionOfEvent: () => (T$1.JSArrayOfStreamSubscriptionOfEvent = dart.constFn(_interceptors.JSArray$(T$1.StreamSubscriptionOfEvent())))(),
    MouseEventTovoid: () => (T$1.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.MouseEvent])))(),
    JSArrayOfEventTodynamic: () => (T$1.JSArrayOfEventTodynamic = dart.constFn(_interceptors.JSArray$(T$1.EventTodynamic())))(),
    JSArrayOfTestHistoryEntry: () => (T$1.JSArrayOfTestHistoryEntry = dart.constFn(_interceptors.JSArray$(_engine.TestHistoryEntry)))(),
    voidTovoid: () => (T$1.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    JSArrayOfFutureOfvoid: () => (T$1.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    FontFaceToNull: () => (T$1.FontFaceToNull = dart.constFn(dart.fnType(core.Null, [html$.FontFace])))(),
    dynamicToNever: () => (T$1.dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))(),
    DateTimeTodynamic: () => (T$1.DateTimeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.DateTime])))(),
    IdentityMapOfString$StringN: () => (T$1.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    JSArrayOfEngineLineMetrics: () => (T$1.JSArrayOfEngineLineMetrics = dart.constFn(_interceptors.JSArray$(_engine.EngineLineMetrics)))(),
    JSArrayOfLineSegment: () => (T$1.JSArrayOfLineSegment = dart.constFn(_interceptors.JSArray$(_engine.LineSegment)))(),
    JSArrayOfRangeBox: () => (T$1.JSArrayOfRangeBox = dart.constFn(_interceptors.JSArray$(_engine.RangeBox)))(),
    TextHeightStyleAndTextHeightRulerTovoid: () => (T$1.TextHeightStyleAndTextHeightRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.TextHeightStyle, _engine.TextHeightRuler])))(),
    LinkedMapOfTextHeightStyle$TextHeightRuler: () => (T$1.LinkedMapOfTextHeightStyle$TextHeightRuler = dart.constFn(_js_helper.LinkedMap$(_engine.TextHeightStyle, _engine.TextHeightRuler)))(),
    LineCharPropertyL: () => (T$1.LineCharPropertyL = dart.constFn(dart.legacy(_engine.LineCharProperty)))(),
    LineBreakTypeL: () => (T$1.LineBreakTypeL = dart.constFn(dart.legacy(_engine.LineBreakType)))(),
    LinkedMapOfParagraphGeometricStyle$ParagraphRuler: () => (T$1.LinkedMapOfParagraphGeometricStyle$ParagraphRuler = dart.constFn(_js_helper.LinkedMap$(_engine.ParagraphGeometricStyle, _engine.ParagraphRuler)))(),
    ParagraphGeometricStyleAndParagraphRulerTovoid: () => (T$1.ParagraphGeometricStyleAndParagraphRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.ParagraphGeometricStyle, _engine.ParagraphRuler])))(),
    ParagraphRulerAndParagraphRulerToint: () => (T$1.ParagraphRulerAndParagraphRulerToint = dart.constFn(dart.fnType(core.int, [_engine.ParagraphRuler, _engine.ParagraphRuler])))(),
    SurfacePaintN: () => (T$1.SurfacePaintN = dart.constFn(dart.nullable(_engine.SurfacePaint)))(),
    VoidToStopwatch: () => (T$1.VoidToStopwatch = dart.constFn(dart.fnType(core.Stopwatch, [])))(),
    StopwatchTodynamic: () => (T$1.StopwatchTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Stopwatch])))(),
    EngineStrutStyleN: () => (T$1.EngineStrutStyleN = dart.constFn(dart.nullable(_engine.EngineStrutStyle)))(),
    VoidToHtmlElement: () => (T$1.VoidToHtmlElement = dart.constFn(dart.fnType(html$.HtmlElement, [])))(),
    HtmlElementTodynamic: () => (T$1.HtmlElementTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.HtmlElement])))(),
    JSArrayOfParagraphSpan: () => (T$1.JSArrayOfParagraphSpan = dart.constFn(_interceptors.JSArray$(_engine.ParagraphSpan)))(),
    JSArrayOfStyleNode: () => (T$1.JSArrayOfStyleNode = dart.constFn(_interceptors.JSArray$(_engine.StyleNode)))(),
    MeasurementResultN: () => (T$1.MeasurementResultN = dart.constFn(dart.nullable(_engine.MeasurementResult)))(),
    ListOfMeasurementResultN: () => (T$1.ListOfMeasurementResultN = dart.constFn(core.List$(T$1.MeasurementResultN())))(),
    IdentityMapOfStringN$ListOfMeasurementResultN: () => (T$1.IdentityMapOfStringN$ListOfMeasurementResultN = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$1.ListOfMeasurementResultN())))(),
    JSArrayOfNode$1: () => (T$1.JSArrayOfNode$1 = dart.constFn(_interceptors.JSArray$(html$.Node)))(),
    JSArrayOfMeasurementResultN: () => (T$1.JSArrayOfMeasurementResultN = dart.constFn(_interceptors.JSArray$(T$1.MeasurementResultN())))(),
    _ComparisonResultL: () => (T$1._ComparisonResultL = dart.constFn(dart.legacy(_engine._ComparisonResult)))(),
    WordCharPropertyL: () => (T$1.WordCharPropertyL = dart.constFn(dart.legacy(_engine.WordCharProperty)))(),
    TextCapitalizationL: () => (T$1.TextCapitalizationL = dart.constFn(dart.legacy(_engine.TextCapitalization)))(),
    IdentityMapOfString$HtmlElement: () => (T$1.IdentityMapOfString$HtmlElement = dart.constFn(_js_helper.IdentityMap$(core.String, html$.HtmlElement)))(),
    IdentityMapOfString$AutofillInfo: () => (T$1.IdentityMapOfString$AutofillInfo = dart.constFn(_js_helper.IdentityMap$(core.String, _engine.AutofillInfo)))(),
    HtmlElementN: () => (T$1.HtmlElementN = dart.constFn(dart.nullable(html$.HtmlElement)))(),
    IdentityMapOfStringN$dynamic: () => (T$1.IdentityMapOfStringN$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), dart.dynamic)))(),
    KeyboardEventTovoid: () => (T$1.KeyboardEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.KeyboardEvent])))(),
    StringAndFormElementTovoid: () => (T$1.StringAndFormElementTovoid = dart.constFn(dart.fnType(dart.void, [core.String, html$.FormElement])))(),
    EditingStateN: () => (T$1.EditingStateN = dart.constFn(dart.nullable(_engine.EditingState)))(),
    EditingStateNTovoid: () => (T$1.EditingStateNTovoid = dart.constFn(dart.fnType(dart.void, [T$1.EditingStateN()])))(),
    StringNTovoid: () => (T$1.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN()])))(),
    doubleN: () => (T$1.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListOfdouble: () => (T$1.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    TransformKindL: () => (T$1.TransformKindL = dart.constFn(dart.legacy(_engine.TransformKind)))(),
    JsUrlStrategyNTovoid: () => (T$1.JsUrlStrategyNTovoid = dart.constFn(dart.fnType(dart.void, [dart.nullable(dart.anonymousJSType("JsUrlStrategy"))])))(),
    LinkedHashSetOfNotoFont: () => (T$1.LinkedHashSetOfNotoFont = dart.constFn(collection.LinkedHashSet$(_engine.NotoFont)))(),
    JSArrayOf_ResolvedNotoSubset: () => (T$1.JSArrayOf_ResolvedNotoSubset = dart.constFn(_interceptors.JSArray$(_engine._ResolvedNotoSubset)))(),
    LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange: () => (T$1.LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine._ResolvedNotoSubset, T$1.ListOfCodeunitRange())))(),
    IntervalTreeOf_ResolvedNotoSubset: () => (T$1.IntervalTreeOf_ResolvedNotoSubset = dart.constFn(_engine.IntervalTree$(_engine._ResolvedNotoSubset)))(),
    StringToStringN: () => (T$1.StringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.String])))(),
    CodeunitRangeL: () => (T$1.CodeunitRangeL = dart.constFn(dart.legacy(_engine.CodeunitRange)))(),
    JSArrayOfNotoFont: () => (T$1.JSArrayOfNotoFont = dart.constFn(_interceptors.JSArray$(_engine.NotoFont)))(),
    NotoFontTobool: () => (T$1.NotoFontTobool = dart.constFn(dart.fnType(core.bool, [_engine.NotoFont])))(),
    VoidToHttpRequest: () => (T$1.VoidToHttpRequest = dart.constFn(dart.fnType(html$.HttpRequest, [])))(),
    CompleterOfCodec: () => (T$1.CompleterOfCodec = dart.constFn(async.Completer$(ui.Codec)))(),
    CanvasKitTovoid: () => (T$1.CanvasKitTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("CanvasKit")])))(),
    _PaintRequestAnd_PaintRequestToint: () => (T$1._PaintRequestAnd_PaintRequestToint = dart.constFn(dart.fnType(core.int, [_engine._PaintRequest, _engine._PaintRequest])))(),
    JSArrayOf_PaintRequest: () => (T$1.JSArrayOf_PaintRequest = dart.constFn(_interceptors.JSArray$(_engine._PaintRequest)))(),
    JSArrayOfFrameReference: () => (T$1.JSArrayOfFrameReference = dart.constFn(_interceptors.JSArray$(_engine.FrameReference)))(),
    LinkedMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.LinkedMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_js_helper.LinkedMap$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    PersistedSurfaceStateN: () => (T$1.PersistedSurfaceStateN = dart.constFn(dart.nullable(_engine.PersistedSurfaceState)))(),
    JSArrayOfPersistedSurfaceStateN: () => (T$1.JSArrayOfPersistedSurfaceStateN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceStateN())))(),
    VoidTo_DebugSurfaceStats: () => (T$1.VoidTo_DebugSurfaceStats = dart.constFn(dart.fnType(_engine._DebugSurfaceStats, [])))(),
    PersistedSurfaceTovoid: () => (T$1.PersistedSurfaceTovoid = dart.constFn(dart.fnType(dart.void, [_engine.PersistedSurface])))(),
    CanvasElementToint: () => (T$1.CanvasElementToint = dart.constFn(dart.fnType(core.int, [html$.CanvasElement])))(),
    JSArrayOfFrameTiming: () => (T$1.JSArrayOfFrameTiming = dart.constFn(_interceptors.JSArray$(ui.FrameTiming)))(),
    VoidToNever: () => (T$1.VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))(),
    JSArrayOfSkFontSlant: () => (T$1.JSArrayOfSkFontSlant = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.window.flutterCanvasKit.FontSlant, "window.flutterCanvasKit.FontSlant"))))(),
    JSArrayOfSkFontWeight: () => (T$1.JSArrayOfSkFontWeight = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFontWeight, "SkFontWeight"))))(),
    JSArrayOfSkAffinity: () => (T$1.JSArrayOfSkAffinity = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkAffinity, "SkAffinity"))))(),
    JSArrayOfSkTextDirection: () => (T$1.JSArrayOfSkTextDirection = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDirection, "SkTextDirection"))))(),
    JSArrayOfSkTextAlign: () => (T$1.JSArrayOfSkTextAlign = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextAlign, "SkTextAlign"))))(),
    JSArrayOfSkRectHeightStyle: () => (T$1.JSArrayOfSkRectHeightStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectHeightStyle, "SkRectHeightStyle"))))(),
    JSArrayOfSkRectWidthStyle: () => (T$1.JSArrayOfSkRectWidthStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectWidthStyle, "SkRectWidthStyle"))))(),
    JSArrayOfSkVertexMode: () => (T$1.JSArrayOfSkVertexMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkVertexMode, "SkVertexMode"))))(),
    JSArrayOfSkPointMode: () => (T$1.JSArrayOfSkPointMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPointMode, "SkPointMode"))))(),
    JSArrayOfSkClipOp: () => (T$1.JSArrayOfSkClipOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkClipOp, "SkClipOp"))))(),
    JSArrayOfSkFillType: () => (T$1.JSArrayOfSkFillType = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFillType, "SkFillType"))))(),
    JSArrayOfSkPathOp: () => (T$1.JSArrayOfSkPathOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPathOp, "SkPathOp"))))(),
    JSArrayOfSkBlurStyle: () => (T$1.JSArrayOfSkBlurStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlurStyle, "SkBlurStyle"))))(),
    JSArrayOfSkStrokeCap: () => (T$1.JSArrayOfSkStrokeCap = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeCap, "SkStrokeCap"))))(),
    JSArrayOfSkPaintStyle: () => (T$1.JSArrayOfSkPaintStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPaintStyle, "SkPaintStyle"))))(),
    JSArrayOfSkBlendMode: () => (T$1.JSArrayOfSkBlendMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlendMode, "SkBlendMode"))))(),
    JSArrayOfSkStrokeJoin: () => (T$1.JSArrayOfSkStrokeJoin = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeJoin, "SkStrokeJoin"))))(),
    JSArrayOfSkFilterQuality: () => (T$1.JSArrayOfSkFilterQuality = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFilterQuality, "SkFilterQuality"))))(),
    JSArrayOfSkTileMode: () => (T$1.JSArrayOfSkTileMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTileMode, "SkTileMode"))))(),
    JSArrayOfSkTextDecorationStyle: () => (T$1.JSArrayOfSkTextDecorationStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDecorationStyle, "SkTextDecorationStyle"))))(),
    JSArrayOfSkTextBaseline: () => (T$1.JSArrayOfSkTextBaseline = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextBaseline, "SkTextBaseline"))))(),
    JSArrayOfSkPlaceholderAlignment: () => (T$1.JSArrayOfSkPlaceholderAlignment = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPlaceholderAlignment, "SkPlaceholderAlignment"))))(),
    JSArrayOfBitmapCanvas: () => (T$1.JSArrayOfBitmapCanvas = dart.constFn(_interceptors.JSArray$(_engine.BitmapCanvas)))(),
    MapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.MapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(core.Map$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_interceptors.JSArray$(T$1.MapOfPersistedSurface$_DebugSurfaceStats())))(),
    JSArrayOf_LogMessage: () => (T$1.JSArrayOf_LogMessage = dart.constFn(_interceptors.JSArray$(_engine._LogMessage)))(),
    SemanticsObjectToIncrementable: () => (T$1.SemanticsObjectToIncrementable = dart.constFn(dart.fnType(_engine.Incrementable, [_engine.SemanticsObject])))(),
    SemanticsObjectToScrollable: () => (T$1.SemanticsObjectToScrollable = dart.constFn(dart.fnType(_engine.Scrollable, [_engine.SemanticsObject])))(),
    SemanticsObjectToLabelAndValue: () => (T$1.SemanticsObjectToLabelAndValue = dart.constFn(dart.fnType(_engine.LabelAndValue, [_engine.SemanticsObject])))(),
    SemanticsObjectToTappable: () => (T$1.SemanticsObjectToTappable = dart.constFn(dart.fnType(_engine.Tappable, [_engine.SemanticsObject])))(),
    SemanticsObjectToTextField: () => (T$1.SemanticsObjectToTextField = dart.constFn(dart.fnType(_engine.TextField, [_engine.SemanticsObject])))(),
    SemanticsObjectToCheckable: () => (T$1.SemanticsObjectToCheckable = dart.constFn(dart.fnType(_engine.Checkable, [_engine.SemanticsObject])))(),
    SemanticsObjectToImageRoleManager: () => (T$1.SemanticsObjectToImageRoleManager = dart.constFn(dart.fnType(_engine.ImageRoleManager, [_engine.SemanticsObject])))(),
    SemanticsObjectToLiveRegion: () => (T$1.SemanticsObjectToLiveRegion = dart.constFn(dart.fnType(_engine.LiveRegion, [_engine.SemanticsObject])))(),
    SemanticsObjectToRoleManager: () => (T$1.SemanticsObjectToRoleManager = dart.constFn(dart.fnType(_engine.RoleManager, [_engine.SemanticsObject])))(),
    LinkedMapOfRole$SemanticsObjectToRoleManager: () => (T$1.LinkedMapOfRole$SemanticsObjectToRoleManager = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.SemanticsObjectToRoleManager())))(),
    UnicodePropertyLookupOfLineCharProperty: () => (T$1.UnicodePropertyLookupOfLineCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.LineCharProperty)))(),
    UnicodePropertyLookupOfWordCharProperty: () => (T$1.UnicodePropertyLookupOfWordCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.WordCharProperty)))(),
    LinkedMapOfString$FormElement: () => (T$1.LinkedMapOfString$FormElement = dart.constFn(_js_helper.LinkedMap$(core.String, html$.FormElement)))(),
    HttpClientResponseCompressionStateL: () => (T$1.HttpClientResponseCompressionStateL = dart.constFn(dart.legacy(_http.HttpClientResponseCompressionState)))(),
    StringToint: () => (T$1.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringAndListOfStringTovoid: () => (T$1.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ListOfString()])))(),
    JSArrayOfCookie: () => (T$1.JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(_http.Cookie)))(),
    HashMapOfString$StringN: () => (T$1.HashMapOfString$StringN = dart.constFn(collection.HashMap$(core.String, T$.StringN())))(),
    UnmodifiableMapViewOfString$StringN: () => (T$1.UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, T$.StringN())))(),
    StringNToString: () => (T$1.StringNToString = dart.constFn(dart.fnType(core.String, [T$.StringN()])))(),
    CookieTobool: () => (T$1.CookieTobool = dart.constFn(dart.fnType(core.bool, [_http.Cookie])))(),
    CookieToString: () => (T$1.CookieToString = dart.constFn(dart.fnType(core.String, [_http.Cookie])))(),
    FutureOfHttpClientResponse: () => (T$1.FutureOfHttpClientResponse = dart.constFn(async.Future$(_http.HttpClientResponse)))(),
    _HttpClientRequestToFutureOfHttpClientResponse: () => (T$1._HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http._HttpClientRequest])))(),
    _EmptyStreamOfUint8List: () => (T$1._EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))(),
    Uint8ListToUint8List: () => (T$1.Uint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List])))(),
    dynamicToFutureOfHttpClientResponse: () => (T$1.dynamicToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [dart.dynamic])))(),
    VoidToFutureOfHttpClientResponse: () => (T$1.VoidToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [])))(),
    VoidToListNOfString: () => (T$1.VoidToListNOfString = dart.constFn(dart.fnType(T$.ListNOfString(), [])))(),
    _CredentialsN: () => (T$1._CredentialsN = dart.constFn(dart.nullable(_http._Credentials)))(),
    _AuthenticationSchemeTo_CredentialsN: () => (T$1._AuthenticationSchemeTo_CredentialsN = dart.constFn(dart.fnType(T$1._CredentialsN(), [_http._AuthenticationScheme])))(),
    _CredentialsTovoid: () => (T$1._CredentialsTovoid = dart.constFn(dart.fnType(dart.void, [_http._Credentials])))(),
    _AuthenticationSchemeAndStringNToFutureOfbool: () => (T$1._AuthenticationSchemeAndStringNToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [_http._AuthenticationScheme, T$.StringN()])))(),
    FutureOrOfHttpClientResponse: () => (T$1.FutureOrOfHttpClientResponse = dart.constFn(async.FutureOr$(_http.HttpClientResponse)))(),
    boolToFutureOrOfHttpClientResponse: () => (T$1.boolToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.bool])))(),
    SinkOfUint8List: () => (T$1.SinkOfUint8List = dart.constFn(core.Sink$(typed_data.Uint8List)))(),
    EncodingN: () => (T$1.EncodingN = dart.constFn(dart.nullable(convert.Encoding)))(),
    ListOfintToListOfint: () => (T$1.ListOfintToListOfint = dart.constFn(dart.fnType(T$0.ListOfint(), [T$0.ListOfint()])))(),
    CookieTovoid: () => (T$1.CookieTovoid = dart.constFn(dart.fnType(dart.void, [_http.Cookie])))(),
    CompleterOfHttpClientResponse: () => (T$1.CompleterOfHttpClientResponse = dart.constFn(async.Completer$(_http.HttpClientResponse)))(),
    JSArrayOfRedirectInfo: () => (T$1.JSArrayOfRedirectInfo = dart.constFn(_interceptors.JSArray$(_http.RedirectInfo)))(),
    VoidToMap: () => (T$1.VoidToMap = dart.constFn(dart.fnType(core.Map, [])))(),
    JSArrayOfMapOfString$dynamic: () => (T$1.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$dynamic())))(),
    VoidToListOfMapOfString$dynamic: () => (T$1.VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(T$0.ListOfMapOfString$dynamic(), [])))(),
    HttpClientResponseToNull: () => (T$1.HttpClientResponseToNull = dart.constFn(dart.fnType(core.Null, [_http.HttpClientResponse])))(),
    JSArrayOfFuture: () => (T$1.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    ListToFutureOrOfHttpClientResponse: () => (T$1.ListToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.List])))(),
    CompleterOfSocket: () => (T$1.CompleterOfSocket = dart.constFn(async.Completer$(io.Socket)))(),
    StringToListOfString: () => (T$1.StringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String])))(),
    voidToFuture: () => (T$1.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    StreamControllerOfListOfint: () => (T$1.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$0.ListOfint())))(),
    _HttpOutboundMessageN: () => (T$1._HttpOutboundMessageN = dart.constFn(dart.nullable(_http._HttpOutboundMessage)))(),
    dynamicTo_HttpOutboundMessageN: () => (T$1.dynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessageN: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic, dart.dynamic])))(),
    dynamicTo_HttpOutboundMessage: () => (T$1.dynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessage: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic, dart.dynamic])))(),
    dynamicAndStackTraceToNull: () => (T$1.dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))(),
    _HttpIncomingTovoid: () => (T$1._HttpIncomingTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpIncoming])))(),
    CompleterOf_HttpIncoming: () => (T$1.CompleterOf_HttpIncoming = dart.constFn(async.Completer$(_http._HttpIncoming)))(),
    _HttpIncomingToNull: () => (T$1._HttpIncomingToNull = dart.constFn(dart.fnType(core.Null, [_http._HttpIncoming])))(),
    SocketToSocket: () => (T$1.SocketToSocket = dart.constFn(dart.fnType(io.Socket, [io.Socket])))(),
    SocketN: () => (T$1.SocketN = dart.constFn(dart.nullable(io.Socket)))(),
    FutureOfSocketN: () => (T$1.FutureOfSocketN = dart.constFn(async.Future$(T$1.SocketN())))(),
    SocketTo_DetachedSocket: () => (T$1.SocketTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [io.Socket])))(),
    SocketTovoid: () => (T$1.SocketTovoid = dart.constFn(dart.fnType(dart.void, [io.Socket])))(),
    FutureOfSecureSocket: () => (T$1.FutureOfSecureSocket = dart.constFn(async.Future$(io.SecureSocket)))(),
    HttpClientResponseToFutureOfSecureSocket: () => (T$1.HttpClientResponseToFutureOfSecureSocket = dart.constFn(dart.fnType(T$1.FutureOfSecureSocket(), [_http.HttpClientResponse])))(),
    SecureSocketTo_HttpClientConnection: () => (T$1.SecureSocketTo_HttpClientConnection = dart.constFn(dart.fnType(_http._HttpClientConnection, [io.SecureSocket])))(),
    _HashSetOf_HttpClientConnection: () => (T$1._HashSetOf_HttpClientConnection = dart.constFn(collection._HashSet$(_http._HttpClientConnection)))(),
    _HashSetOfConnectionTask: () => (T$1._HashSetOfConnectionTask = dart.constFn(collection._HashSet$(io.ConnectionTask)))(),
    FutureOf_ConnectionInfo: () => (T$1.FutureOf_ConnectionInfo = dart.constFn(async.Future$(_http._ConnectionInfo)))(),
    CompleterOf_ConnectionInfo: () => (T$1.CompleterOf_ConnectionInfo = dart.constFn(async.Completer$(_http._ConnectionInfo)))(),
    X509CertificateTobool: () => (T$1.X509CertificateTobool = dart.constFn(dart.fnType(core.bool, [io.X509Certificate])))(),
    _HttpClientConnectionTo_ConnectionInfo: () => (T$1._HttpClientConnectionTo_ConnectionInfo = dart.constFn(dart.fnType(_http._ConnectionInfo, [_http._HttpClientConnection])))(),
    FutureOrOf_ConnectionInfo: () => (T$1.FutureOrOf_ConnectionInfo = dart.constFn(async.FutureOr$(_http._ConnectionInfo)))(),
    dynamicToFutureOrOf_ConnectionInfo: () => (T$1.dynamicToFutureOrOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOrOf_ConnectionInfo(), [dart.dynamic])))(),
    ConnectionTaskToFutureOf_ConnectionInfo: () => (T$1.ConnectionTaskToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [io.ConnectionTask])))(),
    IdentityMapOfString$_ConnectionTarget: () => (T$1.IdentityMapOfString$_ConnectionTarget = dart.constFn(_js_helper.IdentityMap$(core.String, _http._ConnectionTarget)))(),
    JSArrayOf_Credentials: () => (T$1.JSArrayOf_Credentials = dart.constFn(_interceptors.JSArray$(_http._Credentials)))(),
    JSArrayOf_ProxyCredentials: () => (T$1.JSArrayOf_ProxyCredentials = dart.constFn(_interceptors.JSArray$(_http._ProxyCredentials)))(),
    MapNOfString$String: () => (T$1.MapNOfString$String = dart.constFn(dart.nullable(T$0.MapOfString$String())))(),
    Uri__ToString: () => (T$1.Uri__ToString = dart.constFn(dart.fnType(core.String, [core.Uri], {environment: T$1.MapNOfString$String()}, {})))(),
    _ConnectionTargetTobool: () => (T$1._ConnectionTargetTobool = dart.constFn(dart.fnType(core.bool, [_http._ConnectionTarget])))(),
    _ProxyL: () => (T$1._ProxyL = dart.constFn(dart.legacy(_http._Proxy)))(),
    FutureOf_HttpClientRequest: () => (T$1.FutureOf_HttpClientRequest = dart.constFn(async.Future$(_http._HttpClientRequest)))(),
    _ConnectionInfoTo_HttpClientRequest: () => (T$1._ConnectionInfoTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._ConnectionInfo])))(),
    FutureOrOf_HttpClientRequest: () => (T$1.FutureOrOf_HttpClientRequest = dart.constFn(async.FutureOr$(_http._HttpClientRequest)))(),
    _ConnectionInfoToFutureOrOf_HttpClientRequest: () => (T$1._ConnectionInfoToFutureOrOf_HttpClientRequest = dart.constFn(dart.fnType(T$1.FutureOrOf_HttpClientRequest(), [_http._ConnectionInfo])))(),
    _HttpClientRequestTo_HttpClientRequest: () => (T$1._HttpClientRequestTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._HttpClientRequest])))(),
    VoidTo_ConnectionTarget: () => (T$1.VoidTo_ConnectionTarget = dart.constFn(dart.fnType(_http._ConnectionTarget, [])))(),
    dynamicToFutureOf_ConnectionInfo: () => (T$1.dynamicToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [dart.dynamic])))(),
    _SiteCredentialsN: () => (T$1._SiteCredentialsN = dart.constFn(dart.nullable(_http._SiteCredentials)))(),
    _SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN: () => (T$1._SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN = dart.constFn(dart.fnType(T$1._SiteCredentialsN(), [T$1._SiteCredentialsN(), _http._Credentials])))(),
    StringNToStringN: () => (T$1.StringNToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$.StringN()])))(),
    StreamOfUint8List: () => (T$1.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    SocketToNull: () => (T$1.SocketToNull = dart.constFn(dart.fnType(core.Null, [io.Socket])))(),
    dynamicTo_DetachedSocket: () => (T$1.dynamicTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [dart.dynamic])))(),
    IdentityMapOfint$_HttpConnection: () => (T$1.IdentityMapOfint$_HttpConnection = dart.constFn(_js_helper.IdentityMap$(core.int, _http._HttpConnection)))(),
    LinkedListOf_HttpConnection: () => (T$1.LinkedListOf_HttpConnection = dart.constFn(collection.LinkedList$(_http._HttpConnection)))(),
    StreamControllerOfHttpRequest: () => (T$1.StreamControllerOfHttpRequest = dart.constFn(async.StreamController$(_http.HttpRequest)))(),
    ServerSocketTo_HttpServer: () => (T$1.ServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.ServerSocket])))(),
    SecureServerSocketTo_HttpServer: () => (T$1.SecureServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.SecureServerSocket])))(),
    _HttpConnectionTovoid: () => (T$1._HttpConnectionTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpConnection])))(),
    _HttpConnectionToMap: () => (T$1._HttpConnectionToMap = dart.constFn(dart.fnType(core.Map, [_http._HttpConnection])))(),
    LinkedMapOfint$_HttpServer: () => (T$1.LinkedMapOfint$_HttpServer = dart.constFn(_js_helper.LinkedMap$(core.int, _http._HttpServer)))(),
    JSArrayOf_Proxy: () => (T$1.JSArrayOf_Proxy = dart.constFn(_interceptors.JSArray$(_http._Proxy)))(),
    StreamControllerOf_HttpIncoming: () => (T$1.StreamControllerOf_HttpIncoming = dart.constFn(async.StreamController$(_http._HttpIncoming)))(),
    IterableOfMapEntry: () => (T$1.IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))(),
    VoidToNdynamic: () => (T$1.VoidToNdynamic = dart.constFn(dart.nullable(T$.VoidTodynamic())))(),
    IdentityMapOfString$_HttpSession: () => (T$1.IdentityMapOfString$_HttpSession = dart.constFn(_js_helper.IdentityMap$(core.String, _http._HttpSession)))(),
    HttpOverridesN: () => (T$1.HttpOverridesN = dart.constFn(dart.nullable(_http.HttpOverrides)))(),
    EventSinkTo_WebSocketProtocolTransformer: () => (T$1.EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(_http._WebSocketProtocolTransformer, [async.EventSink])))(),
    StreamControllerOfWebSocket: () => (T$1.StreamControllerOfWebSocket = dart.constFn(async.StreamController$(_http.WebSocket)))(),
    StreamOfHttpRequest: () => (T$1.StreamOfHttpRequest = dart.constFn(async.Stream$(_http.HttpRequest)))(),
    WebSocketTovoid: () => (T$1.WebSocketTovoid = dart.constFn(dart.fnType(dart.void, [_http.WebSocket])))(),
    HttpRequestTovoid: () => (T$1.HttpRequestTovoid = dart.constFn(dart.fnType(dart.void, [_http.HttpRequest])))(),
    FutureOfWebSocket: () => (T$1.FutureOfWebSocket = dart.constFn(async.Future$(_http.WebSocket)))(),
    SocketTo_WebSocketImpl: () => (T$1.SocketTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [io.Socket])))(),
    StringNToFutureOfWebSocket: () => (T$1.StringNToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [T$.StringN()])))(),
    VoidToFutureOrOfString: () => (T$1.VoidToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [])))(),
    EventSinkOfListOfint: () => (T$1.EventSinkOfListOfint = dart.constFn(async.EventSink$(T$0.ListOfint())))(),
    EventSinkOfListOfintTo_WebSocketOutgoingTransformer: () => (T$1.EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(_http._WebSocketOutgoingTransformer, [T$1.EventSinkOfListOfint()])))(),
    CompleterOfWebSocket: () => (T$1.CompleterOfWebSocket = dart.constFn(async.Completer$(_http.WebSocket)))(),
    dynamicTo_WebSocketImpl: () => (T$1.dynamicTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [dart.dynamic])))(),
    HttpClientRequestToFutureOfHttpClientResponse: () => (T$1.HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http.HttpClientRequest])))(),
    StringToNever: () => (T$1.StringToNever = dart.constFn(dart.fnType(dart.Never, [core.String])))(),
    HttpClientResponseToFutureOfWebSocket: () => (T$1.HttpClientResponseToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [_http.HttpClientResponse])))(),
    dynamicToMap: () => (T$1.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    LinkedMapOfint$_WebSocketImpl: () => (T$1.LinkedMapOfint$_WebSocketImpl = dart.constFn(_js_helper.LinkedMap$(core.int, _http._WebSocketImpl)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$, T$0, T$1);
  var S = {
    _delete$1: dart.privateName(indexed_db, "_delete"),
    $delete: dartx.delete = Symbol("dartx.delete"),
    _update: dart.privateName(indexed_db, "_update"),
    $next: dartx.next = Symbol("dartx.next"),
    $direction: dartx.direction = Symbol("dartx.direction"),
    $key: dartx.key = Symbol("dartx.key"),
    $primaryKey: dartx.primaryKey = Symbol("dartx.primaryKey"),
    $source: dartx.source = Symbol("dartx.source"),
    $advance: dartx.advance = Symbol("dartx.advance"),
    $continuePrimaryKey: dartx.continuePrimaryKey = Symbol("dartx.continuePrimaryKey"),
    _update_1: dart.privateName(indexed_db, "_update_1"),
    _get_value: dart.privateName(indexed_db, "_get_value"),
    $value: dartx.value = Symbol("dartx.value"),
    _createObjectStore: dart.privateName(indexed_db, "_createObjectStore"),
    $createObjectStore: dartx.createObjectStore = Symbol("dartx.createObjectStore"),
    _transaction: dart.privateName(indexed_db, "_transaction"),
    $transaction: dartx.transaction = Symbol("dartx.transaction"),
    $transactionStore: dartx.transactionStore = Symbol("dartx.transactionStore"),
    $transactionList: dartx.transactionList = Symbol("dartx.transactionList"),
    $transactionStores: dartx.transactionStores = Symbol("dartx.transactionStores"),
    $objectStoreNames: dartx.objectStoreNames = Symbol("dartx.objectStoreNames"),
    $version: dartx.version = Symbol("dartx.version"),
    $close: dartx.close = Symbol("dartx.close"),
    _createObjectStore_1: dart.privateName(indexed_db, "_createObjectStore_1"),
    _createObjectStore_2: dart.privateName(indexed_db, "_createObjectStore_2"),
    $deleteObjectStore: dartx.deleteObjectStore = Symbol("dartx.deleteObjectStore"),
    $onAbort: dartx.onAbort = Symbol("dartx.onAbort"),
    $onClose: dartx.onClose = Symbol("dartx.onClose"),
    $onError: dartx.onError = Symbol("dartx.onError"),
    $onVersionChange: dartx.onVersionChange = Symbol("dartx.onVersionChange"),
    $on: dartx.on = Symbol("dartx.on"),
    _addEventListener: dart.privateName(html$, "_addEventListener"),
    $addEventListener: dartx.addEventListener = Symbol("dartx.addEventListener"),
    _removeEventListener: dart.privateName(html$, "_removeEventListener"),
    $removeEventListener: dartx.removeEventListener = Symbol("dartx.removeEventListener"),
    $dispatchEvent: dartx.dispatchEvent = Symbol("dartx.dispatchEvent"),
    EventStreamProvider__eventType: dart.privateName(html$, "EventStreamProvider._eventType"),
    _open: dart.privateName(indexed_db, "_open"),
    $onUpgradeNeeded: dartx.onUpgradeNeeded = Symbol("dartx.onUpgradeNeeded"),
    $onBlocked: dartx.onBlocked = Symbol("dartx.onBlocked"),
    $open: dartx.open = Symbol("dartx.open"),
    _deleteDatabase: dart.privateName(indexed_db, "_deleteDatabase"),
    $onSuccess: dartx.onSuccess = Symbol("dartx.onSuccess"),
    $deleteDatabase: dartx.deleteDatabase = Symbol("dartx.deleteDatabase"),
    $supportsDatabaseNames: dartx.supportsDatabaseNames = Symbol("dartx.supportsDatabaseNames"),
    $cmp: dartx.cmp = Symbol("dartx.cmp"),
    _count$2: dart.privateName(indexed_db, "_count"),
    $count: dartx.count = Symbol("dartx.count"),
    _get: dart.privateName(indexed_db, "_get"),
    $get: dartx.get = Symbol("dartx.get"),
    _getKey: dart.privateName(indexed_db, "_getKey"),
    $getKey: dartx.getKey = Symbol("dartx.getKey"),
    _openCursor: dart.privateName(indexed_db, "_openCursor"),
    $openCursor: dartx.openCursor = Symbol("dartx.openCursor"),
    _openKeyCursor: dart.privateName(indexed_db, "_openKeyCursor"),
    $openKeyCursor: dartx.openKeyCursor = Symbol("dartx.openKeyCursor"),
    $keyPath: dartx.keyPath = Symbol("dartx.keyPath"),
    $multiEntry: dartx.multiEntry = Symbol("dartx.multiEntry"),
    $objectStore: dartx.objectStore = Symbol("dartx.objectStore"),
    $unique: dartx.unique = Symbol("dartx.unique"),
    $getAll: dartx.getAll = Symbol("dartx.getAll"),
    $getAllKeys: dartx.getAllKeys = Symbol("dartx.getAllKeys"),
    $lower: dartx.lower = Symbol("dartx.lower"),
    $lowerOpen: dartx.lowerOpen = Symbol("dartx.lowerOpen"),
    $upper: dartx.upper = Symbol("dartx.upper"),
    $upperOpen: dartx.upperOpen = Symbol("dartx.upperOpen"),
    $includes: dartx.includes = Symbol("dartx.includes"),
    _add$3: dart.privateName(indexed_db, "_add"),
    _clear$2: dart.privateName(indexed_db, "_clear"),
    _put: dart.privateName(indexed_db, "_put"),
    $put: dartx.put = Symbol("dartx.put"),
    $getObject: dartx.getObject = Symbol("dartx.getObject"),
    _createIndex: dart.privateName(indexed_db, "_createIndex"),
    $createIndex: dartx.createIndex = Symbol("dartx.createIndex"),
    $autoIncrement: dartx.autoIncrement = Symbol("dartx.autoIncrement"),
    $indexNames: dartx.indexNames = Symbol("dartx.indexNames"),
    _add_1: dart.privateName(indexed_db, "_add_1"),
    _add_2: dart.privateName(indexed_db, "_add_2"),
    _createIndex_1: dart.privateName(indexed_db, "_createIndex_1"),
    _createIndex_2: dart.privateName(indexed_db, "_createIndex_2"),
    $deleteIndex: dartx.deleteIndex = Symbol("dartx.deleteIndex"),
    $index: dartx.index = Symbol("dartx.index"),
    _put_1: dart.privateName(indexed_db, "_put_1"),
    _put_2: dart.privateName(indexed_db, "_put_2"),
    $result: dartx.result = Symbol("dartx.result"),
    $type: dartx.type = Symbol("dartx.type"),
    _observe_1: dart.privateName(indexed_db, "_observe_1"),
    $observe: dartx.observe = Symbol("dartx.observe"),
    $unobserve: dartx.unobserve = Symbol("dartx.unobserve"),
    $database: dartx.database = Symbol("dartx.database"),
    $records: dartx.records = Symbol("dartx.records"),
    $error: dartx.error = Symbol("dartx.error"),
    $readyState: dartx.readyState = Symbol("dartx.readyState"),
    _get_result: dart.privateName(indexed_db, "_get_result"),
    $onComplete: dartx.onComplete = Symbol("dartx.onComplete"),
    $completed: dartx.completed = Symbol("dartx.completed"),
    $db: dartx.db = Symbol("dartx.db"),
    $mode: dartx.mode = Symbol("dartx.mode"),
    $abort: dartx.abort = Symbol("dartx.abort"),
    $dataLoss: dartx.dataLoss = Symbol("dartx.dataLoss"),
    $dataLossMessage: dartx.dataLossMessage = Symbol("dartx.dataLossMessage"),
    $newVersion: dartx.newVersion = Symbol("dartx.newVersion"),
    $oldVersion: dartx.oldVersion = Symbol("dartx.oldVersion"),
    $target: dartx.target = Symbol("dartx.target"),
    _createEvent: dart.privateName(html$, "_createEvent"),
    _initEvent: dart.privateName(html$, "_initEvent"),
    _selector: dart.privateName(html$, "_selector"),
    $currentTarget: dartx.currentTarget = Symbol("dartx.currentTarget"),
    $matches: dartx.matches = Symbol("dartx.matches"),
    $parent: dartx.parent = Symbol("dartx.parent"),
    $matchingTarget: dartx.matchingTarget = Symbol("dartx.matchingTarget"),
    $path: dartx.path = Symbol("dartx.path"),
    $bubbles: dartx.bubbles = Symbol("dartx.bubbles"),
    $cancelable: dartx.cancelable = Symbol("dartx.cancelable"),
    $composed: dartx.composed = Symbol("dartx.composed"),
    _get_currentTarget: dart.privateName(html$, "_get_currentTarget"),
    $defaultPrevented: dartx.defaultPrevented = Symbol("dartx.defaultPrevented"),
    $eventPhase: dartx.eventPhase = Symbol("dartx.eventPhase"),
    $isTrusted: dartx.isTrusted = Symbol("dartx.isTrusted"),
    _get_target: dart.privateName(html$, "_get_target"),
    $timeStamp: dartx.timeStamp = Symbol("dartx.timeStamp"),
    $composedPath: dartx.composedPath = Symbol("dartx.composedPath"),
    $preventDefault: dartx.preventDefault = Symbol("dartx.preventDefault"),
    $stopImmediatePropagation: dartx.stopImmediatePropagation = Symbol("dartx.stopImmediatePropagation"),
    $stopPropagation: dartx.stopPropagation = Symbol("dartx.stopPropagation"),
    $nonce: dartx.nonce = Symbol("dartx.nonce"),
    $createFragment: dartx.createFragment = Symbol("dartx.createFragment"),
    $nodes: dartx.nodes = Symbol("dartx.nodes"),
    $attributes: dartx.attributes = Symbol("dartx.attributes"),
    _getAttribute: dart.privateName(html$, "_getAttribute"),
    $getAttribute: dartx.getAttribute = Symbol("dartx.getAttribute"),
    _getAttributeNS: dart.privateName(html$, "_getAttributeNS"),
    $getAttributeNS: dartx.getAttributeNS = Symbol("dartx.getAttributeNS"),
    _hasAttribute: dart.privateName(html$, "_hasAttribute"),
    $hasAttribute: dartx.hasAttribute = Symbol("dartx.hasAttribute"),
    _hasAttributeNS: dart.privateName(html$, "_hasAttributeNS"),
    $hasAttributeNS: dartx.hasAttributeNS = Symbol("dartx.hasAttributeNS"),
    _removeAttribute: dart.privateName(html$, "_removeAttribute"),
    $removeAttribute: dartx.removeAttribute = Symbol("dartx.removeAttribute"),
    _removeAttributeNS: dart.privateName(html$, "_removeAttributeNS"),
    $removeAttributeNS: dartx.removeAttributeNS = Symbol("dartx.removeAttributeNS"),
    _setAttribute: dart.privateName(html$, "_setAttribute"),
    $setAttribute: dartx.setAttribute = Symbol("dartx.setAttribute"),
    _setAttributeNS: dart.privateName(html$, "_setAttributeNS"),
    $setAttributeNS: dartx.setAttributeNS = Symbol("dartx.setAttributeNS"),
    $children: dartx.children = Symbol("dartx.children"),
    _children: dart.privateName(html$, "_children"),
    _querySelectorAll: dart.privateName(html$, "_querySelectorAll"),
    $querySelectorAll: dartx.querySelectorAll = Symbol("dartx.querySelectorAll"),
    _setApplyScroll: dart.privateName(html$, "_setApplyScroll"),
    $setApplyScroll: dartx.setApplyScroll = Symbol("dartx.setApplyScroll"),
    _setDistributeScroll: dart.privateName(html$, "_setDistributeScroll"),
    $setDistributeScroll: dartx.setDistributeScroll = Symbol("dartx.setDistributeScroll"),
    $classes: dartx.classes = Symbol("dartx.classes"),
    $dataset: dartx.dataset = Symbol("dartx.dataset"),
    $getNamespacedAttributes: dartx.getNamespacedAttributes = Symbol("dartx.getNamespacedAttributes"),
    _getComputedStyle: dart.privateName(html$, "_getComputedStyle"),
    $getComputedStyle: dartx.getComputedStyle = Symbol("dartx.getComputedStyle"),
    $client: dartx.client = Symbol("dartx.client"),
    $offsetLeft: dartx.offsetLeft = Symbol("dartx.offsetLeft"),
    $offsetTop: dartx.offsetTop = Symbol("dartx.offsetTop"),
    $offsetWidth: dartx.offsetWidth = Symbol("dartx.offsetWidth"),
    $offsetHeight: dartx.offsetHeight = Symbol("dartx.offsetHeight"),
    $offset: dartx.offset = Symbol("dartx.offset"),
    $append: dartx.append = Symbol("dartx.append"),
    $appendText: dartx.appendText = Symbol("dartx.appendText"),
    $insertAdjacentHtml: dartx.insertAdjacentHtml = Symbol("dartx.insertAdjacentHtml"),
    $appendHtml: dartx.appendHtml = Symbol("dartx.appendHtml"),
    $enteredView: dartx.enteredView = Symbol("dartx.enteredView"),
    $attached: dartx.attached = Symbol("dartx.attached"),
    $leftView: dartx.leftView = Symbol("dartx.leftView"),
    $detached: dartx.detached = Symbol("dartx.detached"),
    _getClientRects: dart.privateName(html$, "_getClientRects"),
    $getClientRects: dartx.getClientRects = Symbol("dartx.getClientRects"),
    _animate: dart.privateName(html$, "_animate"),
    $animate: dartx.animate = Symbol("dartx.animate"),
    $attributeChanged: dartx.attributeChanged = Symbol("dartx.attributeChanged"),
    _localName: dart.privateName(html$, "_localName"),
    $localName: dartx.localName = Symbol("dartx.localName"),
    _namespaceUri: dart.privateName(html$, "_namespaceUri"),
    $namespaceUri: dartx.namespaceUri = Symbol("dartx.namespaceUri"),
    _scrollIntoView: dart.privateName(html$, "_scrollIntoView"),
    _scrollIntoViewIfNeeded: dart.privateName(html$, "_scrollIntoViewIfNeeded"),
    $scrollIntoView: dartx.scrollIntoView = Symbol("dartx.scrollIntoView"),
    _insertAdjacentText: dart.privateName(html$, "_insertAdjacentText"),
    _insertAdjacentNode: dart.privateName(html$, "_insertAdjacentNode"),
    $insertAdjacentText: dartx.insertAdjacentText = Symbol("dartx.insertAdjacentText"),
    _insertAdjacentHtml: dart.privateName(html$, "_insertAdjacentHtml"),
    _insertAdjacentElement: dart.privateName(html$, "_insertAdjacentElement"),
    $insertAdjacentElement: dartx.insertAdjacentElement = Symbol("dartx.insertAdjacentElement"),
    $nextNode: dartx.nextNode = Symbol("dartx.nextNode"),
    $matchesWithAncestors: dartx.matchesWithAncestors = Symbol("dartx.matchesWithAncestors"),
    $createShadowRoot: dartx.createShadowRoot = Symbol("dartx.createShadowRoot"),
    $shadowRoot: dartx.shadowRoot = Symbol("dartx.shadowRoot"),
    $contentEdge: dartx.contentEdge = Symbol("dartx.contentEdge"),
    $paddingEdge: dartx.paddingEdge = Symbol("dartx.paddingEdge"),
    $borderEdge: dartx.borderEdge = Symbol("dartx.borderEdge"),
    $marginEdge: dartx.marginEdge = Symbol("dartx.marginEdge"),
    $offsetTo: dartx.offsetTo = Symbol("dartx.offsetTo"),
    $documentOffset: dartx.documentOffset = Symbol("dartx.documentOffset"),
    $createHtmlDocument: dartx.createHtmlDocument = Symbol("dartx.createHtmlDocument"),
    $createElement: dartx.createElement = Symbol("dartx.createElement"),
    $baseUri: dartx.baseUri = Symbol("dartx.baseUri"),
    $head: dartx.head = Symbol("dartx.head"),
    _canBeUsedToCreateContextualFragment: dart.privateName(html$, "_canBeUsedToCreateContextualFragment"),
    _innerHtml: dart.privateName(html$, "_innerHtml"),
    _cannotBeUsedToCreateContextualFragment: dart.privateName(html$, "_cannotBeUsedToCreateContextualFragment"),
    $setInnerHtml: dartx.setInnerHtml = Symbol("dartx.setInnerHtml"),
    $innerHtml: dartx.innerHtml = Symbol("dartx.innerHtml"),
    $text: dartx.text = Symbol("dartx.text"),
    $innerText: dartx.innerText = Symbol("dartx.innerText"),
    $offsetParent: dartx.offsetParent = Symbol("dartx.offsetParent"),
    $scrollHeight: dartx.scrollHeight = Symbol("dartx.scrollHeight"),
    $scrollLeft: dartx.scrollLeft = Symbol("dartx.scrollLeft"),
    $scrollTop: dartx.scrollTop = Symbol("dartx.scrollTop"),
    $scrollWidth: dartx.scrollWidth = Symbol("dartx.scrollWidth"),
    $contentEditable: dartx.contentEditable = Symbol("dartx.contentEditable"),
    $dir: dartx.dir = Symbol("dartx.dir"),
    $draggable: dartx.draggable = Symbol("dartx.draggable"),
    $hidden: dartx.hidden = Symbol("dartx.hidden"),
    $inert: dartx.inert = Symbol("dartx.inert"),
    $inputMode: dartx.inputMode = Symbol("dartx.inputMode"),
    $isContentEditable: dartx.isContentEditable = Symbol("dartx.isContentEditable"),
    $lang: dartx.lang = Symbol("dartx.lang"),
    $spellcheck: dartx.spellcheck = Symbol("dartx.spellcheck"),
    $style: dartx.style = Symbol("dartx.style"),
    $tabIndex: dartx.tabIndex = Symbol("dartx.tabIndex"),
    $title: dartx.title = Symbol("dartx.title"),
    $translate: dartx.translate = Symbol("dartx.translate"),
    $blur: dartx.blur = Symbol("dartx.blur"),
    $click: dartx.click = Symbol("dartx.click"),
    $focus: dartx.focus = Symbol("dartx.focus"),
    $accessibleNode: dartx.accessibleNode = Symbol("dartx.accessibleNode"),
    $assignedSlot: dartx.assignedSlot = Symbol("dartx.assignedSlot"),
    _attributes$1: dart.privateName(html$, "_attributes"),
    $className: dartx.className = Symbol("dartx.className"),
    $clientHeight: dartx.clientHeight = Symbol("dartx.clientHeight"),
    $clientLeft: dartx.clientLeft = Symbol("dartx.clientLeft"),
    $clientTop: dartx.clientTop = Symbol("dartx.clientTop"),
    $clientWidth: dartx.clientWidth = Symbol("dartx.clientWidth"),
    $computedName: dartx.computedName = Symbol("dartx.computedName"),
    $computedRole: dartx.computedRole = Symbol("dartx.computedRole"),
    $id: dartx.id = Symbol("dartx.id"),
    $outerHtml: dartx.outerHtml = Symbol("dartx.outerHtml"),
    _scrollHeight: dart.privateName(html$, "_scrollHeight"),
    _scrollLeft: dart.privateName(html$, "_scrollLeft"),
    _scrollTop: dart.privateName(html$, "_scrollTop"),
    _scrollWidth: dart.privateName(html$, "_scrollWidth"),
    $slot: dartx.slot = Symbol("dartx.slot"),
    $styleMap: dartx.styleMap = Symbol("dartx.styleMap"),
    $tagName: dartx.tagName = Symbol("dartx.tagName"),
    _attachShadow_1: dart.privateName(html$, "_attachShadow_1"),
    $attachShadow: dartx.attachShadow = Symbol("dartx.attachShadow"),
    $closest: dartx.closest = Symbol("dartx.closest"),
    $getAnimations: dartx.getAnimations = Symbol("dartx.getAnimations"),
    $getAttributeNames: dartx.getAttributeNames = Symbol("dartx.getAttributeNames"),
    $getBoundingClientRect: dartx.getBoundingClientRect = Symbol("dartx.getBoundingClientRect"),
    $getDestinationInsertionPoints: dartx.getDestinationInsertionPoints = Symbol("dartx.getDestinationInsertionPoints"),
    $getElementsByClassName: dartx.getElementsByClassName = Symbol("dartx.getElementsByClassName"),
    _getElementsByTagName: dart.privateName(html$, "_getElementsByTagName"),
    $hasPointerCapture: dartx.hasPointerCapture = Symbol("dartx.hasPointerCapture"),
    $releasePointerCapture: dartx.releasePointerCapture = Symbol("dartx.releasePointerCapture"),
    $requestPointerLock: dartx.requestPointerLock = Symbol("dartx.requestPointerLock"),
    _scroll_1: dart.privateName(html$, "_scroll_1"),
    _scroll_2: dart.privateName(html$, "_scroll_2"),
    _scroll_3: dart.privateName(html$, "_scroll_3"),
    $scroll: dartx.scroll = Symbol("dartx.scroll"),
    _scrollBy_1: dart.privateName(html$, "_scrollBy_1"),
    _scrollBy_2: dart.privateName(html$, "_scrollBy_2"),
    _scrollBy_3: dart.privateName(html$, "_scrollBy_3"),
    $scrollBy: dartx.scrollBy = Symbol("dartx.scrollBy"),
    _scrollTo_1: dart.privateName(html$, "_scrollTo_1"),
    _scrollTo_2: dart.privateName(html$, "_scrollTo_2"),
    _scrollTo_3: dart.privateName(html$, "_scrollTo_3"),
    $scrollTo: dartx.scrollTo = Symbol("dartx.scrollTo"),
    $setPointerCapture: dartx.setPointerCapture = Symbol("dartx.setPointerCapture"),
    $requestFullscreen: dartx.requestFullscreen = Symbol("dartx.requestFullscreen"),
    $after: dartx.after = Symbol("dartx.after"),
    $before: dartx.before = Symbol("dartx.before"),
    $nextElementSibling: dartx.nextElementSibling = Symbol("dartx.nextElementSibling"),
    $previousElementSibling: dartx.previousElementSibling = Symbol("dartx.previousElementSibling"),
    _childElementCount: dart.privateName(html$, "_childElementCount"),
    _firstElementChild: dart.privateName(html$, "_firstElementChild"),
    _lastElementChild: dart.privateName(html$, "_lastElementChild"),
    $querySelector: dartx.querySelector = Symbol("dartx.querySelector"),
    $onBeforeCopy: dartx.onBeforeCopy = Symbol("dartx.onBeforeCopy"),
    $onBeforeCut: dartx.onBeforeCut = Symbol("dartx.onBeforeCut"),
    $onBeforePaste: dartx.onBeforePaste = Symbol("dartx.onBeforePaste"),
    $onBlur: dartx.onBlur = Symbol("dartx.onBlur"),
    $onCanPlay: dartx.onCanPlay = Symbol("dartx.onCanPlay"),
    $onCanPlayThrough: dartx.onCanPlayThrough = Symbol("dartx.onCanPlayThrough"),
    $onChange: dartx.onChange = Symbol("dartx.onChange"),
    $onClick: dartx.onClick = Symbol("dartx.onClick"),
    $onContextMenu: dartx.onContextMenu = Symbol("dartx.onContextMenu"),
    $onCopy: dartx.onCopy = Symbol("dartx.onCopy"),
    $onCut: dartx.onCut = Symbol("dartx.onCut"),
    $onDoubleClick: dartx.onDoubleClick = Symbol("dartx.onDoubleClick"),
    $onDrag: dartx.onDrag = Symbol("dartx.onDrag"),
    $onDragEnd: dartx.onDragEnd = Symbol("dartx.onDragEnd"),
    $onDragEnter: dartx.onDragEnter = Symbol("dartx.onDragEnter"),
    $onDragLeave: dartx.onDragLeave = Symbol("dartx.onDragLeave"),
    $onDragOver: dartx.onDragOver = Symbol("dartx.onDragOver"),
    $onDragStart: dartx.onDragStart = Symbol("dartx.onDragStart"),
    $onDrop: dartx.onDrop = Symbol("dartx.onDrop"),
    $onDurationChange: dartx.onDurationChange = Symbol("dartx.onDurationChange"),
    $onEmptied: dartx.onEmptied = Symbol("dartx.onEmptied"),
    $onEnded: dartx.onEnded = Symbol("dartx.onEnded"),
    $onFocus: dartx.onFocus = Symbol("dartx.onFocus"),
    $onInput: dartx.onInput = Symbol("dartx.onInput"),
    $onInvalid: dartx.onInvalid = Symbol("dartx.onInvalid"),
    $onKeyDown: dartx.onKeyDown = Symbol("dartx.onKeyDown"),
    $onKeyPress: dartx.onKeyPress = Symbol("dartx.onKeyPress"),
    $onKeyUp: dartx.onKeyUp = Symbol("dartx.onKeyUp"),
    $onLoad: dartx.onLoad = Symbol("dartx.onLoad"),
    $onLoadedData: dartx.onLoadedData = Symbol("dartx.onLoadedData"),
    $onLoadedMetadata: dartx.onLoadedMetadata = Symbol("dartx.onLoadedMetadata"),
    $onMouseDown: dartx.onMouseDown = Symbol("dartx.onMouseDown"),
    $onMouseEnter: dartx.onMouseEnter = Symbol("dartx.onMouseEnter"),
    $onMouseLeave: dartx.onMouseLeave = Symbol("dartx.onMouseLeave"),
    $onMouseMove: dartx.onMouseMove = Symbol("dartx.onMouseMove"),
    $onMouseOut: dartx.onMouseOut = Symbol("dartx.onMouseOut"),
    $onMouseOver: dartx.onMouseOver = Symbol("dartx.onMouseOver"),
    $onMouseUp: dartx.onMouseUp = Symbol("dartx.onMouseUp"),
    $onMouseWheel: dartx.onMouseWheel = Symbol("dartx.onMouseWheel"),
    $onPaste: dartx.onPaste = Symbol("dartx.onPaste"),
    $onPause: dartx.onPause = Symbol("dartx.onPause"),
    $onPlay: dartx.onPlay = Symbol("dartx.onPlay"),
    $onPlaying: dartx.onPlaying = Symbol("dartx.onPlaying"),
    $onRateChange: dartx.onRateChange = Symbol("dartx.onRateChange"),
    $onReset: dartx.onReset = Symbol("dartx.onReset"),
    $onResize: dartx.onResize = Symbol("dartx.onResize"),
    $onScroll: dartx.onScroll = Symbol("dartx.onScroll"),
    $onSearch: dartx.onSearch = Symbol("dartx.onSearch"),
    $onSeeked: dartx.onSeeked = Symbol("dartx.onSeeked"),
    $onSeeking: dartx.onSeeking = Symbol("dartx.onSeeking"),
    $onSelect: dartx.onSelect = Symbol("dartx.onSelect"),
    $onSelectStart: dartx.onSelectStart = Symbol("dartx.onSelectStart"),
    $onStalled: dartx.onStalled = Symbol("dartx.onStalled"),
    $onSubmit: dartx.onSubmit = Symbol("dartx.onSubmit"),
    $onSuspend: dartx.onSuspend = Symbol("dartx.onSuspend"),
    $onTimeUpdate: dartx.onTimeUpdate = Symbol("dartx.onTimeUpdate"),
    $onTouchCancel: dartx.onTouchCancel = Symbol("dartx.onTouchCancel"),
    $onTouchEnd: dartx.onTouchEnd = Symbol("dartx.onTouchEnd"),
    $onTouchEnter: dartx.onTouchEnter = Symbol("dartx.onTouchEnter"),
    $onTouchLeave: dartx.onTouchLeave = Symbol("dartx.onTouchLeave")
  };
  var S$ = {
    $onTouchMove: dartx.onTouchMove = Symbol("dartx.onTouchMove"),
    $onTouchStart: dartx.onTouchStart = Symbol("dartx.onTouchStart"),
    $onTransitionEnd: dartx.onTransitionEnd = Symbol("dartx.onTransitionEnd"),
    $onVolumeChange: dartx.onVolumeChange = Symbol("dartx.onVolumeChange"),
    $onWaiting: dartx.onWaiting = Symbol("dartx.onWaiting"),
    $onFullscreenChange: dartx.onFullscreenChange = Symbol("dartx.onFullscreenChange"),
    $onFullscreenError: dartx.onFullscreenError = Symbol("dartx.onFullscreenError"),
    $onWheel: dartx.onWheel = Symbol("dartx.onWheel"),
    _removeChild: dart.privateName(html$, "_removeChild"),
    _replaceChild: dart.privateName(html$, "_replaceChild"),
    $replaceWith: dartx.replaceWith = Symbol("dartx.replaceWith"),
    _this: dart.privateName(html$, "_this"),
    $insertAllBefore: dartx.insertAllBefore = Symbol("dartx.insertAllBefore"),
    _clearChildren: dart.privateName(html$, "_clearChildren"),
    $childNodes: dartx.childNodes = Symbol("dartx.childNodes"),
    $firstChild: dartx.firstChild = Symbol("dartx.firstChild"),
    $isConnected: dartx.isConnected = Symbol("dartx.isConnected"),
    $lastChild: dartx.lastChild = Symbol("dartx.lastChild"),
    $nodeName: dartx.nodeName = Symbol("dartx.nodeName"),
    $nodeType: dartx.nodeType = Symbol("dartx.nodeType"),
    $nodeValue: dartx.nodeValue = Symbol("dartx.nodeValue"),
    $ownerDocument: dartx.ownerDocument = Symbol("dartx.ownerDocument"),
    $parentNode: dartx.parentNode = Symbol("dartx.parentNode"),
    $previousNode: dartx.previousNode = Symbol("dartx.previousNode"),
    $clone: dartx.clone = Symbol("dartx.clone"),
    _getRootNode_1: dart.privateName(html$, "_getRootNode_1"),
    _getRootNode_2: dart.privateName(html$, "_getRootNode_2"),
    $getRootNode: dartx.getRootNode = Symbol("dartx.getRootNode"),
    $hasChildNodes: dartx.hasChildNodes = Symbol("dartx.hasChildNodes"),
    $insertBefore: dartx.insertBefore = Symbol("dartx.insertBefore"),
    _CustomEventStreamProvider__eventTypeGetter: dart.privateName(html$, "_CustomEventStreamProvider._eventTypeGetter"),
    $respondWith: dartx.respondWith = Symbol("dartx.respondWith"),
    $waitUntil: dartx.waitUntil = Symbol("dartx.waitUntil"),
    $quaternion: dartx.quaternion = Symbol("dartx.quaternion"),
    $populateMatrix: dartx.populateMatrix = Symbol("dartx.populateMatrix"),
    $activated: dartx.activated = Symbol("dartx.activated"),
    $hasReading: dartx.hasReading = Symbol("dartx.hasReading"),
    $timestamp: dartx.timestamp = Symbol("dartx.timestamp"),
    $start: dartx.start = Symbol("dartx.start"),
    $stop: dartx.stop = Symbol("dartx.stop"),
    $x: dartx.x = Symbol("dartx.x"),
    $y: dartx.y = Symbol("dartx.y"),
    $z: dartx.z = Symbol("dartx.z"),
    $activeDescendant: dartx.activeDescendant = Symbol("dartx.activeDescendant"),
    $atomic: dartx.atomic = Symbol("dartx.atomic"),
    $autocomplete: dartx.autocomplete = Symbol("dartx.autocomplete"),
    $busy: dartx.busy = Symbol("dartx.busy"),
    $checked: dartx.checked = Symbol("dartx.checked"),
    $colCount: dartx.colCount = Symbol("dartx.colCount"),
    $colIndex: dartx.colIndex = Symbol("dartx.colIndex"),
    $colSpan: dartx.colSpan = Symbol("dartx.colSpan"),
    $controls: dartx.controls = Symbol("dartx.controls"),
    $current: dartx.current = Symbol("dartx.current"),
    $describedBy: dartx.describedBy = Symbol("dartx.describedBy"),
    $details: dartx.details = Symbol("dartx.details"),
    $disabled: dartx.disabled = Symbol("dartx.disabled"),
    $errorMessage: dartx.errorMessage = Symbol("dartx.errorMessage"),
    $expanded: dartx.expanded = Symbol("dartx.expanded"),
    $flowTo: dartx.flowTo = Symbol("dartx.flowTo"),
    $hasPopUp: dartx.hasPopUp = Symbol("dartx.hasPopUp"),
    $invalid: dartx.invalid = Symbol("dartx.invalid"),
    $keyShortcuts: dartx.keyShortcuts = Symbol("dartx.keyShortcuts"),
    $label: dartx.label = Symbol("dartx.label"),
    $labeledBy: dartx.labeledBy = Symbol("dartx.labeledBy"),
    $level: dartx.level = Symbol("dartx.level"),
    $live: dartx.live = Symbol("dartx.live"),
    $modal: dartx.modal = Symbol("dartx.modal"),
    $multiline: dartx.multiline = Symbol("dartx.multiline"),
    $multiselectable: dartx.multiselectable = Symbol("dartx.multiselectable"),
    $orientation: dartx.orientation = Symbol("dartx.orientation"),
    $owns: dartx.owns = Symbol("dartx.owns"),
    $placeholder: dartx.placeholder = Symbol("dartx.placeholder"),
    $posInSet: dartx.posInSet = Symbol("dartx.posInSet"),
    $pressed: dartx.pressed = Symbol("dartx.pressed"),
    $readOnly: dartx.readOnly = Symbol("dartx.readOnly"),
    $relevant: dartx.relevant = Symbol("dartx.relevant"),
    $required: dartx.required = Symbol("dartx.required"),
    $role: dartx.role = Symbol("dartx.role"),
    $roleDescription: dartx.roleDescription = Symbol("dartx.roleDescription"),
    $rowCount: dartx.rowCount = Symbol("dartx.rowCount"),
    $rowIndex: dartx.rowIndex = Symbol("dartx.rowIndex"),
    $rowSpan: dartx.rowSpan = Symbol("dartx.rowSpan"),
    $selected: dartx.selected = Symbol("dartx.selected"),
    $setSize: dartx.setSize = Symbol("dartx.setSize"),
    $valueMax: dartx.valueMax = Symbol("dartx.valueMax"),
    $valueMin: dartx.valueMin = Symbol("dartx.valueMin"),
    $valueNow: dartx.valueNow = Symbol("dartx.valueNow"),
    $valueText: dartx.valueText = Symbol("dartx.valueText"),
    $appendChild: dartx.appendChild = Symbol("dartx.appendChild"),
    $onAccessibleClick: dartx.onAccessibleClick = Symbol("dartx.onAccessibleClick"),
    $onAccessibleContextMenu: dartx.onAccessibleContextMenu = Symbol("dartx.onAccessibleContextMenu"),
    $onAccessibleDecrement: dartx.onAccessibleDecrement = Symbol("dartx.onAccessibleDecrement"),
    $onAccessibleFocus: dartx.onAccessibleFocus = Symbol("dartx.onAccessibleFocus"),
    $onAccessibleIncrement: dartx.onAccessibleIncrement = Symbol("dartx.onAccessibleIncrement"),
    $onAccessibleScrollIntoView: dartx.onAccessibleScrollIntoView = Symbol("dartx.onAccessibleScrollIntoView"),
    __setter__: dart.privateName(html$, "__setter__"),
    $item: dartx.item = Symbol("dartx.item"),
    $illuminance: dartx.illuminance = Symbol("dartx.illuminance"),
    $download: dartx.download = Symbol("dartx.download"),
    $hreflang: dartx.hreflang = Symbol("dartx.hreflang"),
    $referrerPolicy: dartx.referrerPolicy = Symbol("dartx.referrerPolicy"),
    $rel: dartx.rel = Symbol("dartx.rel"),
    $hash: dartx.hash = Symbol("dartx.hash"),
    $host: dartx.host = Symbol("dartx.host"),
    $hostname: dartx.hostname = Symbol("dartx.hostname"),
    $href: dartx.href = Symbol("dartx.href"),
    $origin: dartx.origin = Symbol("dartx.origin"),
    $password: dartx.password = Symbol("dartx.password"),
    $pathname: dartx.pathname = Symbol("dartx.pathname"),
    $port: dartx.port = Symbol("dartx.port"),
    $protocol: dartx.protocol = Symbol("dartx.protocol"),
    $search: dartx.search = Symbol("dartx.search"),
    $username: dartx.username = Symbol("dartx.username"),
    $currentTime: dartx.currentTime = Symbol("dartx.currentTime"),
    $effect: dartx.effect = Symbol("dartx.effect"),
    $finished: dartx.finished = Symbol("dartx.finished"),
    $playState: dartx.playState = Symbol("dartx.playState"),
    $playbackRate: dartx.playbackRate = Symbol("dartx.playbackRate"),
    $ready: dartx.ready = Symbol("dartx.ready"),
    $startTime: dartx.startTime = Symbol("dartx.startTime"),
    $timeline: dartx.timeline = Symbol("dartx.timeline"),
    $cancel: dartx.cancel = Symbol("dartx.cancel"),
    $finish: dartx.finish = Symbol("dartx.finish"),
    $pause: dartx.pause = Symbol("dartx.pause"),
    $play: dartx.play = Symbol("dartx.play"),
    $reverse: dartx.reverse = Symbol("dartx.reverse"),
    $onCancel: dartx.onCancel = Symbol("dartx.onCancel"),
    $onFinish: dartx.onFinish = Symbol("dartx.onFinish"),
    $timing: dartx.timing = Symbol("dartx.timing"),
    _getComputedTiming_1: dart.privateName(html$, "_getComputedTiming_1"),
    $getComputedTiming: dartx.getComputedTiming = Symbol("dartx.getComputedTiming"),
    $delay: dartx.delay = Symbol("dartx.delay"),
    $duration: dartx.duration = Symbol("dartx.duration"),
    $easing: dartx.easing = Symbol("dartx.easing"),
    $endDelay: dartx.endDelay = Symbol("dartx.endDelay"),
    $fill: dartx.fill = Symbol("dartx.fill"),
    $iterationStart: dartx.iterationStart = Symbol("dartx.iterationStart"),
    $iterations: dartx.iterations = Symbol("dartx.iterations"),
    $animationName: dartx.animationName = Symbol("dartx.animationName"),
    $elapsedTime: dartx.elapsedTime = Symbol("dartx.elapsedTime"),
    $timelineTime: dartx.timelineTime = Symbol("dartx.timelineTime"),
    $registerAnimator: dartx.registerAnimator = Symbol("dartx.registerAnimator"),
    $status: dartx.status = Symbol("dartx.status"),
    $swapCache: dartx.swapCache = Symbol("dartx.swapCache"),
    $onCached: dartx.onCached = Symbol("dartx.onCached"),
    $onChecking: dartx.onChecking = Symbol("dartx.onChecking"),
    $onDownloading: dartx.onDownloading = Symbol("dartx.onDownloading"),
    $onNoUpdate: dartx.onNoUpdate = Symbol("dartx.onNoUpdate"),
    $onObsolete: dartx.onObsolete = Symbol("dartx.onObsolete"),
    $onProgress: dartx.onProgress = Symbol("dartx.onProgress"),
    $onUpdateReady: dartx.onUpdateReady = Symbol("dartx.onUpdateReady"),
    $reason: dartx.reason = Symbol("dartx.reason"),
    $url: dartx.url = Symbol("dartx.url"),
    $alt: dartx.alt = Symbol("dartx.alt"),
    $coords: dartx.coords = Symbol("dartx.coords"),
    $shape: dartx.shape = Symbol("dartx.shape"),
    $audioTracks: dartx.audioTracks = Symbol("dartx.audioTracks"),
    $autoplay: dartx.autoplay = Symbol("dartx.autoplay"),
    $buffered: dartx.buffered = Symbol("dartx.buffered"),
    $controlsList: dartx.controlsList = Symbol("dartx.controlsList"),
    $crossOrigin: dartx.crossOrigin = Symbol("dartx.crossOrigin"),
    $currentSrc: dartx.currentSrc = Symbol("dartx.currentSrc"),
    $defaultMuted: dartx.defaultMuted = Symbol("dartx.defaultMuted"),
    $defaultPlaybackRate: dartx.defaultPlaybackRate = Symbol("dartx.defaultPlaybackRate"),
    $disableRemotePlayback: dartx.disableRemotePlayback = Symbol("dartx.disableRemotePlayback"),
    $ended: dartx.ended = Symbol("dartx.ended"),
    $loop: dartx.loop = Symbol("dartx.loop"),
    $mediaKeys: dartx.mediaKeys = Symbol("dartx.mediaKeys"),
    $muted: dartx.muted = Symbol("dartx.muted"),
    $networkState: dartx.networkState = Symbol("dartx.networkState"),
    $paused: dartx.paused = Symbol("dartx.paused"),
    $played: dartx.played = Symbol("dartx.played"),
    $preload: dartx.preload = Symbol("dartx.preload"),
    $remote: dartx.remote = Symbol("dartx.remote"),
    $seekable: dartx.seekable = Symbol("dartx.seekable"),
    $seeking: dartx.seeking = Symbol("dartx.seeking"),
    $sinkId: dartx.sinkId = Symbol("dartx.sinkId"),
    $src: dartx.src = Symbol("dartx.src"),
    $srcObject: dartx.srcObject = Symbol("dartx.srcObject"),
    $textTracks: dartx.textTracks = Symbol("dartx.textTracks"),
    $videoTracks: dartx.videoTracks = Symbol("dartx.videoTracks"),
    $volume: dartx.volume = Symbol("dartx.volume"),
    $audioDecodedByteCount: dartx.audioDecodedByteCount = Symbol("dartx.audioDecodedByteCount"),
    $videoDecodedByteCount: dartx.videoDecodedByteCount = Symbol("dartx.videoDecodedByteCount"),
    $addTextTrack: dartx.addTextTrack = Symbol("dartx.addTextTrack"),
    $canPlayType: dartx.canPlayType = Symbol("dartx.canPlayType"),
    $captureStream: dartx.captureStream = Symbol("dartx.captureStream"),
    $load: dartx.load = Symbol("dartx.load"),
    $setMediaKeys: dartx.setMediaKeys = Symbol("dartx.setMediaKeys"),
    $setSinkId: dartx.setSinkId = Symbol("dartx.setSinkId"),
    $authenticatorData: dartx.authenticatorData = Symbol("dartx.authenticatorData"),
    $signature: dartx.signature = Symbol("dartx.signature"),
    $clientDataJson: dartx.clientDataJson = Symbol("dartx.clientDataJson"),
    $attestationObject: dartx.attestationObject = Symbol("dartx.attestationObject"),
    $state: dartx.state = Symbol("dartx.state"),
    $fetches: dartx.fetches = Symbol("dartx.fetches"),
    $request: dartx.request = Symbol("dartx.request"),
    $fetch: dartx.fetch = Symbol("dartx.fetch"),
    $getIds: dartx.getIds = Symbol("dartx.getIds"),
    $downloadTotal: dartx.downloadTotal = Symbol("dartx.downloadTotal"),
    $downloaded: dartx.downloaded = Symbol("dartx.downloaded"),
    $totalDownloadSize: dartx.totalDownloadSize = Symbol("dartx.totalDownloadSize"),
    $uploadTotal: dartx.uploadTotal = Symbol("dartx.uploadTotal"),
    $uploaded: dartx.uploaded = Symbol("dartx.uploaded"),
    $response: dartx.response = Symbol("dartx.response"),
    $updateUI: dartx.updateUI = Symbol("dartx.updateUI"),
    $visible: dartx.visible = Symbol("dartx.visible"),
    $detect: dartx.detect = Symbol("dartx.detect"),
    $charging: dartx.charging = Symbol("dartx.charging"),
    $chargingTime: dartx.chargingTime = Symbol("dartx.chargingTime"),
    $dischargingTime: dartx.dischargingTime = Symbol("dartx.dischargingTime"),
    $platforms: dartx.platforms = Symbol("dartx.platforms"),
    $userChoice: dartx.userChoice = Symbol("dartx.userChoice"),
    $prompt: dartx.prompt = Symbol("dartx.prompt"),
    $returnValue: dartx.returnValue = Symbol("dartx.returnValue"),
    $size: dartx.size = Symbol("dartx.size"),
    $slice: dartx.slice = Symbol("dartx.slice"),
    $data: dartx.data = Symbol("dartx.data"),
    $timecode: dartx.timecode = Symbol("dartx.timecode"),
    $characteristic: dartx.characteristic = Symbol("dartx.characteristic"),
    $uuid: dartx.uuid = Symbol("dartx.uuid"),
    $readValue: dartx.readValue = Symbol("dartx.readValue"),
    $writeValue: dartx.writeValue = Symbol("dartx.writeValue"),
    $bodyUsed: dartx.bodyUsed = Symbol("dartx.bodyUsed"),
    $arrayBuffer: dartx.arrayBuffer = Symbol("dartx.arrayBuffer"),
    $blob: dartx.blob = Symbol("dartx.blob"),
    $formData: dartx.formData = Symbol("dartx.formData"),
    $json: dartx.json = Symbol("dartx.json"),
    $onHashChange: dartx.onHashChange = Symbol("dartx.onHashChange"),
    $onMessage: dartx.onMessage = Symbol("dartx.onMessage"),
    $onOffline: dartx.onOffline = Symbol("dartx.onOffline"),
    $onOnline: dartx.onOnline = Symbol("dartx.onOnline"),
    $onPopState: dartx.onPopState = Symbol("dartx.onPopState"),
    $onStorage: dartx.onStorage = Symbol("dartx.onStorage"),
    $onUnload: dartx.onUnload = Symbol("dartx.onUnload"),
    $postMessage: dartx.postMessage = Symbol("dartx.postMessage"),
    $budgetAt: dartx.budgetAt = Symbol("dartx.budgetAt"),
    $time: dartx.time = Symbol("dartx.time"),
    $autofocus: dartx.autofocus = Symbol("dartx.autofocus"),
    $form: dartx.form = Symbol("dartx.form"),
    $formAction: dartx.formAction = Symbol("dartx.formAction"),
    $formEnctype: dartx.formEnctype = Symbol("dartx.formEnctype"),
    $formMethod: dartx.formMethod = Symbol("dartx.formMethod"),
    $formNoValidate: dartx.formNoValidate = Symbol("dartx.formNoValidate"),
    $formTarget: dartx.formTarget = Symbol("dartx.formTarget"),
    $labels: dartx.labels = Symbol("dartx.labels"),
    $validationMessage: dartx.validationMessage = Symbol("dartx.validationMessage"),
    $validity: dartx.validity = Symbol("dartx.validity"),
    $willValidate: dartx.willValidate = Symbol("dartx.willValidate"),
    $checkValidity: dartx.checkValidity = Symbol("dartx.checkValidity"),
    $reportValidity: dartx.reportValidity = Symbol("dartx.reportValidity"),
    $setCustomValidity: dartx.setCustomValidity = Symbol("dartx.setCustomValidity"),
    $wholeText: dartx.wholeText = Symbol("dartx.wholeText"),
    $splitText: dartx.splitText = Symbol("dartx.splitText"),
    $appendData: dartx.appendData = Symbol("dartx.appendData"),
    $deleteData: dartx.deleteData = Symbol("dartx.deleteData"),
    $insertData: dartx.insertData = Symbol("dartx.insertData"),
    $replaceData: dartx.replaceData = Symbol("dartx.replaceData"),
    $substringData: dartx.substringData = Symbol("dartx.substringData"),
    $has: dartx.has = Symbol("dartx.has"),
    $match: dartx.match = Symbol("dartx.match"),
    $methodData: dartx.methodData = Symbol("dartx.methodData"),
    $modifiers: dartx.modifiers = Symbol("dartx.modifiers"),
    $paymentRequestOrigin: dartx.paymentRequestOrigin = Symbol("dartx.paymentRequestOrigin"),
    $topLevelOrigin: dartx.topLevelOrigin = Symbol("dartx.topLevelOrigin"),
    $canvas: dartx.canvas = Symbol("dartx.canvas"),
    $requestFrame: dartx.requestFrame = Symbol("dartx.requestFrame"),
    $contentHint: dartx.contentHint = Symbol("dartx.contentHint"),
    $enabled: dartx.enabled = Symbol("dartx.enabled"),
    $kind: dartx.kind = Symbol("dartx.kind"),
    $applyConstraints: dartx.applyConstraints = Symbol("dartx.applyConstraints"),
    _getCapabilities_1: dart.privateName(html$, "_getCapabilities_1"),
    $getCapabilities: dartx.getCapabilities = Symbol("dartx.getCapabilities"),
    _getConstraints_1: dart.privateName(html$, "_getConstraints_1"),
    $getConstraints: dartx.getConstraints = Symbol("dartx.getConstraints"),
    _getSettings_1: dart.privateName(html$, "_getSettings_1"),
    $getSettings: dartx.getSettings = Symbol("dartx.getSettings"),
    $onMute: dartx.onMute = Symbol("dartx.onMute"),
    $onUnmute: dartx.onUnmute = Symbol("dartx.onUnmute"),
    _getContext_1: dart.privateName(html$, "_getContext_1"),
    _getContext_2: dart.privateName(html$, "_getContext_2"),
    $getContext: dartx.getContext = Symbol("dartx.getContext"),
    _toDataUrl: dart.privateName(html$, "_toDataUrl"),
    $transferControlToOffscreen: dartx.transferControlToOffscreen = Symbol("dartx.transferControlToOffscreen"),
    $onWebGlContextLost: dartx.onWebGlContextLost = Symbol("dartx.onWebGlContextLost"),
    $onWebGlContextRestored: dartx.onWebGlContextRestored = Symbol("dartx.onWebGlContextRestored"),
    $context2D: dartx.context2D = Symbol("dartx.context2D"),
    $getContext3d: dartx.getContext3d = Symbol("dartx.getContext3d"),
    $toDataUrl: dartx.toDataUrl = Symbol("dartx.toDataUrl"),
    _toBlob: dart.privateName(html$, "_toBlob"),
    $toBlob: dartx.toBlob = Symbol("dartx.toBlob"),
    $addColorStop: dartx.addColorStop = Symbol("dartx.addColorStop"),
    $setTransform: dartx.setTransform = Symbol("dartx.setTransform"),
    $currentTransform: dartx.currentTransform = Symbol("dartx.currentTransform"),
    $fillStyle: dartx.fillStyle = Symbol("dartx.fillStyle"),
    $filter: dartx.filter = Symbol("dartx.filter"),
    $font: dartx.font = Symbol("dartx.font"),
    $globalAlpha: dartx.globalAlpha = Symbol("dartx.globalAlpha"),
    $globalCompositeOperation: dartx.globalCompositeOperation = Symbol("dartx.globalCompositeOperation"),
    $imageSmoothingEnabled: dartx.imageSmoothingEnabled = Symbol("dartx.imageSmoothingEnabled"),
    $imageSmoothingQuality: dartx.imageSmoothingQuality = Symbol("dartx.imageSmoothingQuality"),
    $lineCap: dartx.lineCap = Symbol("dartx.lineCap"),
    $lineJoin: dartx.lineJoin = Symbol("dartx.lineJoin"),
    $lineWidth: dartx.lineWidth = Symbol("dartx.lineWidth"),
    $miterLimit: dartx.miterLimit = Symbol("dartx.miterLimit"),
    $shadowBlur: dartx.shadowBlur = Symbol("dartx.shadowBlur"),
    $shadowColor: dartx.shadowColor = Symbol("dartx.shadowColor"),
    $shadowOffsetX: dartx.shadowOffsetX = Symbol("dartx.shadowOffsetX"),
    $shadowOffsetY: dartx.shadowOffsetY = Symbol("dartx.shadowOffsetY"),
    $strokeStyle: dartx.strokeStyle = Symbol("dartx.strokeStyle"),
    $textAlign: dartx.textAlign = Symbol("dartx.textAlign"),
    $textBaseline: dartx.textBaseline = Symbol("dartx.textBaseline"),
    _addHitRegion_1: dart.privateName(html$, "_addHitRegion_1"),
    _addHitRegion_2: dart.privateName(html$, "_addHitRegion_2"),
    $addHitRegion: dartx.addHitRegion = Symbol("dartx.addHitRegion"),
    $beginPath: dartx.beginPath = Symbol("dartx.beginPath"),
    $clearHitRegions: dartx.clearHitRegions = Symbol("dartx.clearHitRegions"),
    $clearRect: dartx.clearRect = Symbol("dartx.clearRect"),
    $clip: dartx.clip = Symbol("dartx.clip"),
    _createImageData_1: dart.privateName(html$, "_createImageData_1"),
    _createImageData_2: dart.privateName(html$, "_createImageData_2"),
    _createImageData_3: dart.privateName(html$, "_createImageData_3"),
    _createImageData_4: dart.privateName(html$, "_createImageData_4"),
    _createImageData_5: dart.privateName(html$, "_createImageData_5"),
    $createImageData: dartx.createImageData = Symbol("dartx.createImageData"),
    $createLinearGradient: dartx.createLinearGradient = Symbol("dartx.createLinearGradient"),
    $createPattern: dartx.createPattern = Symbol("dartx.createPattern"),
    $createRadialGradient: dartx.createRadialGradient = Symbol("dartx.createRadialGradient"),
    $drawFocusIfNeeded: dartx.drawFocusIfNeeded = Symbol("dartx.drawFocusIfNeeded"),
    $fillRect: dartx.fillRect = Symbol("dartx.fillRect"),
    _getContextAttributes_1: dart.privateName(html$, "_getContextAttributes_1"),
    $getContextAttributes: dartx.getContextAttributes = Symbol("dartx.getContextAttributes"),
    _getImageData_1: dart.privateName(html$, "_getImageData_1"),
    $getImageData: dartx.getImageData = Symbol("dartx.getImageData"),
    _getLineDash: dart.privateName(html$, "_getLineDash"),
    $isContextLost: dartx.isContextLost = Symbol("dartx.isContextLost"),
    $isPointInPath: dartx.isPointInPath = Symbol("dartx.isPointInPath"),
    $isPointInStroke: dartx.isPointInStroke = Symbol("dartx.isPointInStroke"),
    $measureText: dartx.measureText = Symbol("dartx.measureText"),
    _putImageData_1: dart.privateName(html$, "_putImageData_1"),
    _putImageData_2: dart.privateName(html$, "_putImageData_2"),
    $putImageData: dartx.putImageData = Symbol("dartx.putImageData"),
    $removeHitRegion: dartx.removeHitRegion = Symbol("dartx.removeHitRegion"),
    $resetTransform: dartx.resetTransform = Symbol("dartx.resetTransform"),
    $restore: dartx.restore = Symbol("dartx.restore"),
    $rotate: dartx.rotate = Symbol("dartx.rotate"),
    $save: dartx.save = Symbol("dartx.save"),
    $scale: dartx.scale = Symbol("dartx.scale"),
    $scrollPathIntoView: dartx.scrollPathIntoView = Symbol("dartx.scrollPathIntoView"),
    $stroke: dartx.stroke = Symbol("dartx.stroke"),
    $strokeRect: dartx.strokeRect = Symbol("dartx.strokeRect"),
    $strokeText: dartx.strokeText = Symbol("dartx.strokeText"),
    $transform: dartx.transform = Symbol("dartx.transform"),
    _arc: dart.privateName(html$, "_arc"),
    $arcTo: dartx.arcTo = Symbol("dartx.arcTo"),
    $bezierCurveTo: dartx.bezierCurveTo = Symbol("dartx.bezierCurveTo"),
    $closePath: dartx.closePath = Symbol("dartx.closePath"),
    $ellipse: dartx.ellipse = Symbol("dartx.ellipse"),
    $lineTo: dartx.lineTo = Symbol("dartx.lineTo"),
    $moveTo: dartx.moveTo = Symbol("dartx.moveTo"),
    $quadraticCurveTo: dartx.quadraticCurveTo = Symbol("dartx.quadraticCurveTo"),
    $rect: dartx.rect = Symbol("dartx.rect"),
    $createImageDataFromImageData: dartx.createImageDataFromImageData = Symbol("dartx.createImageDataFromImageData"),
    $setFillColorRgb: dartx.setFillColorRgb = Symbol("dartx.setFillColorRgb"),
    $setFillColorHsl: dartx.setFillColorHsl = Symbol("dartx.setFillColorHsl"),
    $setStrokeColorRgb: dartx.setStrokeColorRgb = Symbol("dartx.setStrokeColorRgb"),
    $setStrokeColorHsl: dartx.setStrokeColorHsl = Symbol("dartx.setStrokeColorHsl"),
    $arc: dartx.arc = Symbol("dartx.arc"),
    $createPatternFromImage: dartx.createPatternFromImage = Symbol("dartx.createPatternFromImage"),
    $drawImageScaled: dartx.drawImageScaled = Symbol("dartx.drawImageScaled"),
    $drawImageScaledFromSource: dartx.drawImageScaledFromSource = Symbol("dartx.drawImageScaledFromSource"),
    $drawImageToRect: dartx.drawImageToRect = Symbol("dartx.drawImageToRect"),
    $drawImage: dartx.drawImage = Symbol("dartx.drawImage"),
    $lineDashOffset: dartx.lineDashOffset = Symbol("dartx.lineDashOffset"),
    $getLineDash: dartx.getLineDash = Symbol("dartx.getLineDash"),
    $setLineDash: dartx.setLineDash = Symbol("dartx.setLineDash"),
    $fillText: dartx.fillText = Symbol("dartx.fillText"),
    $backingStorePixelRatio: dartx.backingStorePixelRatio = Symbol("dartx.backingStorePixelRatio"),
    $frameType: dartx.frameType = Symbol("dartx.frameType"),
    $claim: dartx.claim = Symbol("dartx.claim"),
    $matchAll: dartx.matchAll = Symbol("dartx.matchAll"),
    $openWindow: dartx.openWindow = Symbol("dartx.openWindow"),
    $clipboardData: dartx.clipboardData = Symbol("dartx.clipboardData"),
    $code: dartx.code = Symbol("dartx.code"),
    $wasClean: dartx.wasClean = Symbol("dartx.wasClean"),
    _initCompositionEvent: dart.privateName(html$, "_initCompositionEvent"),
    _initUIEvent: dart.privateName(html$, "_initUIEvent"),
    $detail: dartx.detail = Symbol("dartx.detail"),
    $sourceCapabilities: dartx.sourceCapabilities = Symbol("dartx.sourceCapabilities"),
    _get_view: dart.privateName(html$, "_get_view"),
    $view: dartx.view = Symbol("dartx.view"),
    _which: dart.privateName(html$, "_which"),
    $select: dartx.select = Symbol("dartx.select"),
    $getDistributedNodes: dartx.getDistributedNodes = Symbol("dartx.getDistributedNodes"),
    $set: dartx.set = Symbol("dartx.set"),
    $accuracy: dartx.accuracy = Symbol("dartx.accuracy"),
    $altitude: dartx.altitude = Symbol("dartx.altitude"),
    $altitudeAccuracy: dartx.altitudeAccuracy = Symbol("dartx.altitudeAccuracy"),
    $heading: dartx.heading = Symbol("dartx.heading"),
    $latitude: dartx.latitude = Symbol("dartx.latitude"),
    $longitude: dartx.longitude = Symbol("dartx.longitude"),
    $speed: dartx.speed = Symbol("dartx.speed"),
    $iconUrl: dartx.iconUrl = Symbol("dartx.iconUrl"),
    $create: dartx.create = Symbol("dartx.create"),
    $preventSilentAccess: dartx.preventSilentAccess = Symbol("dartx.preventSilentAccess"),
    $requireUserMediation: dartx.requireUserMediation = Symbol("dartx.requireUserMediation"),
    $store: dartx.store = Symbol("dartx.store"),
    _getRandomValues: dart.privateName(html$, "_getRandomValues"),
    $getRandomValues: dartx.getRandomValues = Symbol("dartx.getRandomValues"),
    $subtle: dartx.subtle = Symbol("dartx.subtle"),
    $algorithm: dartx.algorithm = Symbol("dartx.algorithm"),
    $extractable: dartx.extractable = Symbol("dartx.extractable"),
    $usages: dartx.usages = Symbol("dartx.usages"),
    $encoding: dartx.encoding = Symbol("dartx.encoding"),
    $cssText: dartx.cssText = Symbol("dartx.cssText"),
    $parentRule: dartx.parentRule = Symbol("dartx.parentRule"),
    $parentStyleSheet: dartx.parentStyleSheet = Symbol("dartx.parentStyleSheet"),
    $conditionText: dartx.conditionText = Symbol("dartx.conditionText"),
    $cssRules: dartx.cssRules = Symbol("dartx.cssRules"),
    $deleteRule: dartx.deleteRule = Symbol("dartx.deleteRule"),
    $insertRule: dartx.insertRule = Symbol("dartx.insertRule"),
    $intrinsicHeight: dartx.intrinsicHeight = Symbol("dartx.intrinsicHeight"),
    $intrinsicRatio: dartx.intrinsicRatio = Symbol("dartx.intrinsicRatio"),
    $intrinsicWidth: dartx.intrinsicWidth = Symbol("dartx.intrinsicWidth"),
    $media: dartx.media = Symbol("dartx.media"),
    $styleSheet: dartx.styleSheet = Symbol("dartx.styleSheet"),
    $keyText: dartx.keyText = Symbol("dartx.keyText"),
    __getter__: dart.privateName(html$, "__getter__"),
    $appendRule: dartx.appendRule = Symbol("dartx.appendRule"),
    $findRule: dartx.findRule = Symbol("dartx.findRule"),
    $matrix: dartx.matrix = Symbol("dartx.matrix"),
    $is2D: dartx.is2D = Symbol("dartx.is2D"),
    $prefix: dartx.prefix = Symbol("dartx.prefix"),
    $div: dartx.div = Symbol("dartx.div"),
    $mul: dartx.mul = Symbol("dartx.mul"),
    $sub: dartx.sub = Symbol("dartx.sub"),
    $to: dartx.to = Symbol("dartx.to"),
    $selectorText: dartx.selectorText = Symbol("dartx.selectorText"),
    $angle: dartx.angle = Symbol("dartx.angle"),
    $ax: dartx.ax = Symbol("dartx.ax"),
    $ay: dartx.ay = Symbol("dartx.ay"),
    _getPropertyValueHelper: dart.privateName(html$, "_getPropertyValueHelper"),
    $getPropertyValue: dartx.getPropertyValue = Symbol("dartx.getPropertyValue"),
    _browserPropertyName: dart.privateName(html$, "_browserPropertyName"),
    _getPropertyValue: dart.privateName(html$, "_getPropertyValue"),
    _supportsProperty: dart.privateName(html$, "_supportsProperty"),
    $supportsProperty: dartx.supportsProperty = Symbol("dartx.supportsProperty"),
    _setPropertyHelper: dart.privateName(html$, "_setPropertyHelper"),
    $setProperty: dartx.setProperty = Symbol("dartx.setProperty"),
    _supportedBrowserPropertyName: dart.privateName(html$, "_supportedBrowserPropertyName"),
    $cssFloat: dartx.cssFloat = Symbol("dartx.cssFloat"),
    $getPropertyPriority: dartx.getPropertyPriority = Symbol("dartx.getPropertyPriority"),
    $removeProperty: dartx.removeProperty = Symbol("dartx.removeProperty"),
    _background: dart.privateName(html$, "_background"),
    $background: dartx.background = Symbol("dartx.background"),
    _backgroundAttachment: dart.privateName(html$, "_backgroundAttachment"),
    $backgroundAttachment: dartx.backgroundAttachment = Symbol("dartx.backgroundAttachment"),
    _backgroundColor: dart.privateName(html$, "_backgroundColor"),
    $backgroundColor: dartx.backgroundColor = Symbol("dartx.backgroundColor"),
    _backgroundImage: dart.privateName(html$, "_backgroundImage"),
    $backgroundImage: dartx.backgroundImage = Symbol("dartx.backgroundImage"),
    _backgroundPosition: dart.privateName(html$, "_backgroundPosition"),
    $backgroundPosition: dartx.backgroundPosition = Symbol("dartx.backgroundPosition"),
    _backgroundRepeat: dart.privateName(html$, "_backgroundRepeat"),
    $backgroundRepeat: dartx.backgroundRepeat = Symbol("dartx.backgroundRepeat"),
    _border: dart.privateName(html$, "_border"),
    $border: dartx.border = Symbol("dartx.border"),
    _borderBottom: dart.privateName(html$, "_borderBottom"),
    $borderBottom: dartx.borderBottom = Symbol("dartx.borderBottom"),
    _borderBottomColor: dart.privateName(html$, "_borderBottomColor"),
    $borderBottomColor: dartx.borderBottomColor = Symbol("dartx.borderBottomColor"),
    _borderBottomStyle: dart.privateName(html$, "_borderBottomStyle"),
    $borderBottomStyle: dartx.borderBottomStyle = Symbol("dartx.borderBottomStyle"),
    _borderBottomWidth: dart.privateName(html$, "_borderBottomWidth"),
    $borderBottomWidth: dartx.borderBottomWidth = Symbol("dartx.borderBottomWidth"),
    _borderCollapse: dart.privateName(html$, "_borderCollapse"),
    $borderCollapse: dartx.borderCollapse = Symbol("dartx.borderCollapse"),
    _borderColor: dart.privateName(html$, "_borderColor"),
    $borderColor: dartx.borderColor = Symbol("dartx.borderColor"),
    _borderLeft: dart.privateName(html$, "_borderLeft"),
    $borderLeft: dartx.borderLeft = Symbol("dartx.borderLeft"),
    _borderLeftColor: dart.privateName(html$, "_borderLeftColor"),
    $borderLeftColor: dartx.borderLeftColor = Symbol("dartx.borderLeftColor"),
    _borderLeftStyle: dart.privateName(html$, "_borderLeftStyle"),
    $borderLeftStyle: dartx.borderLeftStyle = Symbol("dartx.borderLeftStyle"),
    _borderLeftWidth: dart.privateName(html$, "_borderLeftWidth"),
    $borderLeftWidth: dartx.borderLeftWidth = Symbol("dartx.borderLeftWidth"),
    _borderRight: dart.privateName(html$, "_borderRight"),
    $borderRight: dartx.borderRight = Symbol("dartx.borderRight"),
    _borderRightColor: dart.privateName(html$, "_borderRightColor"),
    $borderRightColor: dartx.borderRightColor = Symbol("dartx.borderRightColor"),
    _borderRightStyle: dart.privateName(html$, "_borderRightStyle"),
    $borderRightStyle: dartx.borderRightStyle = Symbol("dartx.borderRightStyle"),
    _borderRightWidth: dart.privateName(html$, "_borderRightWidth"),
    $borderRightWidth: dartx.borderRightWidth = Symbol("dartx.borderRightWidth"),
    _borderSpacing: dart.privateName(html$, "_borderSpacing"),
    $borderSpacing: dartx.borderSpacing = Symbol("dartx.borderSpacing"),
    _borderStyle: dart.privateName(html$, "_borderStyle"),
    $borderStyle: dartx.borderStyle = Symbol("dartx.borderStyle"),
    _borderTop: dart.privateName(html$, "_borderTop")
  };
  var S$0 = {
    $borderTop: dartx.borderTop = Symbol("dartx.borderTop"),
    _borderTopColor: dart.privateName(html$, "_borderTopColor"),
    $borderTopColor: dartx.borderTopColor = Symbol("dartx.borderTopColor"),
    _borderTopStyle: dart.privateName(html$, "_borderTopStyle"),
    $borderTopStyle: dartx.borderTopStyle = Symbol("dartx.borderTopStyle"),
    _borderTopWidth: dart.privateName(html$, "_borderTopWidth"),
    $borderTopWidth: dartx.borderTopWidth = Symbol("dartx.borderTopWidth"),
    _borderWidth: dart.privateName(html$, "_borderWidth"),
    $borderWidth: dartx.borderWidth = Symbol("dartx.borderWidth"),
    _bottom: dart.privateName(html$, "_bottom"),
    _captionSide: dart.privateName(html$, "_captionSide"),
    $captionSide: dartx.captionSide = Symbol("dartx.captionSide"),
    _clear$3: dart.privateName(html$, "_clear"),
    _clip: dart.privateName(html$, "_clip"),
    _color: dart.privateName(html$, "_color"),
    $color: dartx.color = Symbol("dartx.color"),
    _content: dart.privateName(html$, "_content"),
    $content: dartx.content = Symbol("dartx.content"),
    _cursor: dart.privateName(html$, "_cursor"),
    $cursor: dartx.cursor = Symbol("dartx.cursor"),
    _direction: dart.privateName(html$, "_direction"),
    _display: dart.privateName(html$, "_display"),
    $display: dartx.display = Symbol("dartx.display"),
    _emptyCells: dart.privateName(html$, "_emptyCells"),
    $emptyCells: dartx.emptyCells = Symbol("dartx.emptyCells"),
    _font: dart.privateName(html$, "_font"),
    _fontFamily: dart.privateName(html$, "_fontFamily"),
    $fontFamily: dartx.fontFamily = Symbol("dartx.fontFamily"),
    _fontSize: dart.privateName(html$, "_fontSize"),
    $fontSize: dartx.fontSize = Symbol("dartx.fontSize"),
    _fontStyle: dart.privateName(html$, "_fontStyle"),
    $fontStyle: dartx.fontStyle = Symbol("dartx.fontStyle"),
    _fontVariant: dart.privateName(html$, "_fontVariant"),
    $fontVariant: dartx.fontVariant = Symbol("dartx.fontVariant"),
    _fontWeight: dart.privateName(html$, "_fontWeight"),
    $fontWeight: dartx.fontWeight = Symbol("dartx.fontWeight"),
    _height$1: dart.privateName(html$, "_height"),
    _left: dart.privateName(html$, "_left"),
    _letterSpacing: dart.privateName(html$, "_letterSpacing"),
    $letterSpacing: dartx.letterSpacing = Symbol("dartx.letterSpacing"),
    _lineHeight: dart.privateName(html$, "_lineHeight"),
    $lineHeight: dartx.lineHeight = Symbol("dartx.lineHeight"),
    _listStyle: dart.privateName(html$, "_listStyle"),
    $listStyle: dartx.listStyle = Symbol("dartx.listStyle"),
    _listStyleImage: dart.privateName(html$, "_listStyleImage"),
    $listStyleImage: dartx.listStyleImage = Symbol("dartx.listStyleImage"),
    _listStylePosition: dart.privateName(html$, "_listStylePosition"),
    $listStylePosition: dartx.listStylePosition = Symbol("dartx.listStylePosition"),
    _listStyleType: dart.privateName(html$, "_listStyleType"),
    $listStyleType: dartx.listStyleType = Symbol("dartx.listStyleType"),
    _margin: dart.privateName(html$, "_margin"),
    $margin: dartx.margin = Symbol("dartx.margin"),
    _marginBottom: dart.privateName(html$, "_marginBottom"),
    $marginBottom: dartx.marginBottom = Symbol("dartx.marginBottom"),
    _marginLeft: dart.privateName(html$, "_marginLeft"),
    $marginLeft: dartx.marginLeft = Symbol("dartx.marginLeft"),
    _marginRight: dart.privateName(html$, "_marginRight"),
    $marginRight: dartx.marginRight = Symbol("dartx.marginRight"),
    _marginTop: dart.privateName(html$, "_marginTop"),
    $marginTop: dartx.marginTop = Symbol("dartx.marginTop"),
    _maxHeight: dart.privateName(html$, "_maxHeight"),
    $maxHeight: dartx.maxHeight = Symbol("dartx.maxHeight"),
    _maxWidth: dart.privateName(html$, "_maxWidth"),
    $maxWidth: dartx.maxWidth = Symbol("dartx.maxWidth"),
    _minHeight: dart.privateName(html$, "_minHeight"),
    $minHeight: dartx.minHeight = Symbol("dartx.minHeight"),
    _minWidth: dart.privateName(html$, "_minWidth"),
    $minWidth: dartx.minWidth = Symbol("dartx.minWidth"),
    _outline: dart.privateName(html$, "_outline"),
    $outline: dartx.outline = Symbol("dartx.outline"),
    _outlineColor: dart.privateName(html$, "_outlineColor"),
    $outlineColor: dartx.outlineColor = Symbol("dartx.outlineColor"),
    _outlineStyle: dart.privateName(html$, "_outlineStyle"),
    $outlineStyle: dartx.outlineStyle = Symbol("dartx.outlineStyle"),
    _outlineWidth: dart.privateName(html$, "_outlineWidth"),
    $outlineWidth: dartx.outlineWidth = Symbol("dartx.outlineWidth"),
    _overflow: dart.privateName(html$, "_overflow"),
    $overflow: dartx.overflow = Symbol("dartx.overflow"),
    _padding: dart.privateName(html$, "_padding"),
    $padding: dartx.padding = Symbol("dartx.padding"),
    _paddingBottom: dart.privateName(html$, "_paddingBottom"),
    $paddingBottom: dartx.paddingBottom = Symbol("dartx.paddingBottom"),
    _paddingLeft: dart.privateName(html$, "_paddingLeft"),
    $paddingLeft: dartx.paddingLeft = Symbol("dartx.paddingLeft"),
    _paddingRight: dart.privateName(html$, "_paddingRight"),
    $paddingRight: dartx.paddingRight = Symbol("dartx.paddingRight"),
    _paddingTop: dart.privateName(html$, "_paddingTop"),
    $paddingTop: dartx.paddingTop = Symbol("dartx.paddingTop"),
    _pageBreakAfter: dart.privateName(html$, "_pageBreakAfter"),
    $pageBreakAfter: dartx.pageBreakAfter = Symbol("dartx.pageBreakAfter"),
    _pageBreakBefore: dart.privateName(html$, "_pageBreakBefore"),
    $pageBreakBefore: dartx.pageBreakBefore = Symbol("dartx.pageBreakBefore"),
    _pageBreakInside: dart.privateName(html$, "_pageBreakInside"),
    $pageBreakInside: dartx.pageBreakInside = Symbol("dartx.pageBreakInside"),
    _position$2: dart.privateName(html$, "_position"),
    $position: dartx.position = Symbol("dartx.position"),
    _quotes: dart.privateName(html$, "_quotes"),
    $quotes: dartx.quotes = Symbol("dartx.quotes"),
    _right: dart.privateName(html$, "_right"),
    _tableLayout: dart.privateName(html$, "_tableLayout"),
    $tableLayout: dartx.tableLayout = Symbol("dartx.tableLayout"),
    _textAlign: dart.privateName(html$, "_textAlign"),
    _textDecoration: dart.privateName(html$, "_textDecoration"),
    $textDecoration: dartx.textDecoration = Symbol("dartx.textDecoration"),
    _textIndent: dart.privateName(html$, "_textIndent"),
    $textIndent: dartx.textIndent = Symbol("dartx.textIndent"),
    _textTransform: dart.privateName(html$, "_textTransform"),
    $textTransform: dartx.textTransform = Symbol("dartx.textTransform"),
    _top: dart.privateName(html$, "_top"),
    _unicodeBidi: dart.privateName(html$, "_unicodeBidi"),
    $unicodeBidi: dartx.unicodeBidi = Symbol("dartx.unicodeBidi"),
    _verticalAlign: dart.privateName(html$, "_verticalAlign"),
    $verticalAlign: dartx.verticalAlign = Symbol("dartx.verticalAlign"),
    _visibility: dart.privateName(html$, "_visibility"),
    $visibility: dartx.visibility = Symbol("dartx.visibility"),
    _whiteSpace: dart.privateName(html$, "_whiteSpace"),
    $whiteSpace: dartx.whiteSpace = Symbol("dartx.whiteSpace"),
    _width$1: dart.privateName(html$, "_width"),
    _wordSpacing: dart.privateName(html$, "_wordSpacing"),
    $wordSpacing: dartx.wordSpacing = Symbol("dartx.wordSpacing"),
    _zIndex: dart.privateName(html$, "_zIndex"),
    $zIndex: dartx.zIndex = Symbol("dartx.zIndex"),
    $alignContent: dartx.alignContent = Symbol("dartx.alignContent"),
    $alignItems: dartx.alignItems = Symbol("dartx.alignItems"),
    $alignSelf: dartx.alignSelf = Symbol("dartx.alignSelf"),
    $animation: dartx.animation = Symbol("dartx.animation"),
    $animationDelay: dartx.animationDelay = Symbol("dartx.animationDelay"),
    $animationDirection: dartx.animationDirection = Symbol("dartx.animationDirection"),
    $animationDuration: dartx.animationDuration = Symbol("dartx.animationDuration"),
    $animationFillMode: dartx.animationFillMode = Symbol("dartx.animationFillMode"),
    $animationIterationCount: dartx.animationIterationCount = Symbol("dartx.animationIterationCount"),
    $animationPlayState: dartx.animationPlayState = Symbol("dartx.animationPlayState"),
    $animationTimingFunction: dartx.animationTimingFunction = Symbol("dartx.animationTimingFunction"),
    $appRegion: dartx.appRegion = Symbol("dartx.appRegion"),
    $appearance: dartx.appearance = Symbol("dartx.appearance"),
    $aspectRatio: dartx.aspectRatio = Symbol("dartx.aspectRatio"),
    $backfaceVisibility: dartx.backfaceVisibility = Symbol("dartx.backfaceVisibility"),
    $backgroundBlendMode: dartx.backgroundBlendMode = Symbol("dartx.backgroundBlendMode"),
    $backgroundClip: dartx.backgroundClip = Symbol("dartx.backgroundClip"),
    $backgroundComposite: dartx.backgroundComposite = Symbol("dartx.backgroundComposite"),
    $backgroundOrigin: dartx.backgroundOrigin = Symbol("dartx.backgroundOrigin"),
    $backgroundPositionX: dartx.backgroundPositionX = Symbol("dartx.backgroundPositionX"),
    $backgroundPositionY: dartx.backgroundPositionY = Symbol("dartx.backgroundPositionY"),
    $backgroundRepeatX: dartx.backgroundRepeatX = Symbol("dartx.backgroundRepeatX"),
    $backgroundRepeatY: dartx.backgroundRepeatY = Symbol("dartx.backgroundRepeatY"),
    $backgroundSize: dartx.backgroundSize = Symbol("dartx.backgroundSize"),
    $borderAfter: dartx.borderAfter = Symbol("dartx.borderAfter"),
    $borderAfterColor: dartx.borderAfterColor = Symbol("dartx.borderAfterColor"),
    $borderAfterStyle: dartx.borderAfterStyle = Symbol("dartx.borderAfterStyle"),
    $borderAfterWidth: dartx.borderAfterWidth = Symbol("dartx.borderAfterWidth"),
    $borderBefore: dartx.borderBefore = Symbol("dartx.borderBefore"),
    $borderBeforeColor: dartx.borderBeforeColor = Symbol("dartx.borderBeforeColor"),
    $borderBeforeStyle: dartx.borderBeforeStyle = Symbol("dartx.borderBeforeStyle"),
    $borderBeforeWidth: dartx.borderBeforeWidth = Symbol("dartx.borderBeforeWidth"),
    $borderBottomLeftRadius: dartx.borderBottomLeftRadius = Symbol("dartx.borderBottomLeftRadius"),
    $borderBottomRightRadius: dartx.borderBottomRightRadius = Symbol("dartx.borderBottomRightRadius"),
    $borderEnd: dartx.borderEnd = Symbol("dartx.borderEnd"),
    $borderEndColor: dartx.borderEndColor = Symbol("dartx.borderEndColor"),
    $borderEndStyle: dartx.borderEndStyle = Symbol("dartx.borderEndStyle"),
    $borderEndWidth: dartx.borderEndWidth = Symbol("dartx.borderEndWidth"),
    $borderFit: dartx.borderFit = Symbol("dartx.borderFit"),
    $borderHorizontalSpacing: dartx.borderHorizontalSpacing = Symbol("dartx.borderHorizontalSpacing"),
    $borderImage: dartx.borderImage = Symbol("dartx.borderImage"),
    $borderImageOutset: dartx.borderImageOutset = Symbol("dartx.borderImageOutset"),
    $borderImageRepeat: dartx.borderImageRepeat = Symbol("dartx.borderImageRepeat"),
    $borderImageSlice: dartx.borderImageSlice = Symbol("dartx.borderImageSlice"),
    $borderImageSource: dartx.borderImageSource = Symbol("dartx.borderImageSource"),
    $borderImageWidth: dartx.borderImageWidth = Symbol("dartx.borderImageWidth"),
    $borderRadius: dartx.borderRadius = Symbol("dartx.borderRadius"),
    $borderStart: dartx.borderStart = Symbol("dartx.borderStart"),
    $borderStartColor: dartx.borderStartColor = Symbol("dartx.borderStartColor"),
    $borderStartStyle: dartx.borderStartStyle = Symbol("dartx.borderStartStyle"),
    $borderStartWidth: dartx.borderStartWidth = Symbol("dartx.borderStartWidth"),
    $borderTopLeftRadius: dartx.borderTopLeftRadius = Symbol("dartx.borderTopLeftRadius"),
    $borderTopRightRadius: dartx.borderTopRightRadius = Symbol("dartx.borderTopRightRadius"),
    $borderVerticalSpacing: dartx.borderVerticalSpacing = Symbol("dartx.borderVerticalSpacing"),
    $boxAlign: dartx.boxAlign = Symbol("dartx.boxAlign"),
    $boxDecorationBreak: dartx.boxDecorationBreak = Symbol("dartx.boxDecorationBreak"),
    $boxDirection: dartx.boxDirection = Symbol("dartx.boxDirection"),
    $boxFlex: dartx.boxFlex = Symbol("dartx.boxFlex"),
    $boxFlexGroup: dartx.boxFlexGroup = Symbol("dartx.boxFlexGroup"),
    $boxLines: dartx.boxLines = Symbol("dartx.boxLines"),
    $boxOrdinalGroup: dartx.boxOrdinalGroup = Symbol("dartx.boxOrdinalGroup"),
    $boxOrient: dartx.boxOrient = Symbol("dartx.boxOrient"),
    $boxPack: dartx.boxPack = Symbol("dartx.boxPack"),
    $boxReflect: dartx.boxReflect = Symbol("dartx.boxReflect"),
    $boxShadow: dartx.boxShadow = Symbol("dartx.boxShadow"),
    $boxSizing: dartx.boxSizing = Symbol("dartx.boxSizing"),
    $clipPath: dartx.clipPath = Symbol("dartx.clipPath"),
    $columnBreakAfter: dartx.columnBreakAfter = Symbol("dartx.columnBreakAfter"),
    $columnBreakBefore: dartx.columnBreakBefore = Symbol("dartx.columnBreakBefore"),
    $columnBreakInside: dartx.columnBreakInside = Symbol("dartx.columnBreakInside"),
    $columnCount: dartx.columnCount = Symbol("dartx.columnCount"),
    $columnFill: dartx.columnFill = Symbol("dartx.columnFill"),
    $columnGap: dartx.columnGap = Symbol("dartx.columnGap"),
    $columnRule: dartx.columnRule = Symbol("dartx.columnRule"),
    $columnRuleColor: dartx.columnRuleColor = Symbol("dartx.columnRuleColor"),
    $columnRuleStyle: dartx.columnRuleStyle = Symbol("dartx.columnRuleStyle"),
    $columnRuleWidth: dartx.columnRuleWidth = Symbol("dartx.columnRuleWidth"),
    $columnSpan: dartx.columnSpan = Symbol("dartx.columnSpan"),
    $columnWidth: dartx.columnWidth = Symbol("dartx.columnWidth"),
    $columns: dartx.columns = Symbol("dartx.columns"),
    $counterIncrement: dartx.counterIncrement = Symbol("dartx.counterIncrement"),
    $counterReset: dartx.counterReset = Symbol("dartx.counterReset"),
    $flex: dartx.flex = Symbol("dartx.flex"),
    $flexBasis: dartx.flexBasis = Symbol("dartx.flexBasis"),
    $flexDirection: dartx.flexDirection = Symbol("dartx.flexDirection"),
    $flexFlow: dartx.flexFlow = Symbol("dartx.flexFlow"),
    $flexGrow: dartx.flexGrow = Symbol("dartx.flexGrow"),
    $flexShrink: dartx.flexShrink = Symbol("dartx.flexShrink"),
    $flexWrap: dartx.flexWrap = Symbol("dartx.flexWrap"),
    $float: dartx.float = Symbol("dartx.float"),
    $fontFeatureSettings: dartx.fontFeatureSettings = Symbol("dartx.fontFeatureSettings"),
    $fontKerning: dartx.fontKerning = Symbol("dartx.fontKerning"),
    $fontSizeDelta: dartx.fontSizeDelta = Symbol("dartx.fontSizeDelta"),
    $fontSmoothing: dartx.fontSmoothing = Symbol("dartx.fontSmoothing"),
    $fontStretch: dartx.fontStretch = Symbol("dartx.fontStretch"),
    $fontVariantLigatures: dartx.fontVariantLigatures = Symbol("dartx.fontVariantLigatures"),
    $grid: dartx.grid = Symbol("dartx.grid"),
    $gridArea: dartx.gridArea = Symbol("dartx.gridArea"),
    $gridAutoColumns: dartx.gridAutoColumns = Symbol("dartx.gridAutoColumns"),
    $gridAutoFlow: dartx.gridAutoFlow = Symbol("dartx.gridAutoFlow"),
    $gridAutoRows: dartx.gridAutoRows = Symbol("dartx.gridAutoRows"),
    $gridColumn: dartx.gridColumn = Symbol("dartx.gridColumn"),
    $gridColumnEnd: dartx.gridColumnEnd = Symbol("dartx.gridColumnEnd"),
    $gridColumnStart: dartx.gridColumnStart = Symbol("dartx.gridColumnStart"),
    $gridRow: dartx.gridRow = Symbol("dartx.gridRow"),
    $gridRowEnd: dartx.gridRowEnd = Symbol("dartx.gridRowEnd"),
    $gridRowStart: dartx.gridRowStart = Symbol("dartx.gridRowStart"),
    $gridTemplate: dartx.gridTemplate = Symbol("dartx.gridTemplate"),
    $gridTemplateAreas: dartx.gridTemplateAreas = Symbol("dartx.gridTemplateAreas"),
    $gridTemplateColumns: dartx.gridTemplateColumns = Symbol("dartx.gridTemplateColumns"),
    $gridTemplateRows: dartx.gridTemplateRows = Symbol("dartx.gridTemplateRows"),
    $highlight: dartx.highlight = Symbol("dartx.highlight"),
    $hyphenateCharacter: dartx.hyphenateCharacter = Symbol("dartx.hyphenateCharacter"),
    $imageRendering: dartx.imageRendering = Symbol("dartx.imageRendering"),
    $isolation: dartx.isolation = Symbol("dartx.isolation"),
    $justifyContent: dartx.justifyContent = Symbol("dartx.justifyContent"),
    $justifySelf: dartx.justifySelf = Symbol("dartx.justifySelf"),
    $lineBoxContain: dartx.lineBoxContain = Symbol("dartx.lineBoxContain"),
    $lineBreak: dartx.lineBreak = Symbol("dartx.lineBreak"),
    $lineClamp: dartx.lineClamp = Symbol("dartx.lineClamp"),
    $locale: dartx.locale = Symbol("dartx.locale"),
    $logicalHeight: dartx.logicalHeight = Symbol("dartx.logicalHeight"),
    $logicalWidth: dartx.logicalWidth = Symbol("dartx.logicalWidth"),
    $marginAfter: dartx.marginAfter = Symbol("dartx.marginAfter"),
    $marginAfterCollapse: dartx.marginAfterCollapse = Symbol("dartx.marginAfterCollapse"),
    $marginBefore: dartx.marginBefore = Symbol("dartx.marginBefore"),
    $marginBeforeCollapse: dartx.marginBeforeCollapse = Symbol("dartx.marginBeforeCollapse"),
    $marginBottomCollapse: dartx.marginBottomCollapse = Symbol("dartx.marginBottomCollapse"),
    $marginCollapse: dartx.marginCollapse = Symbol("dartx.marginCollapse"),
    $marginEnd: dartx.marginEnd = Symbol("dartx.marginEnd"),
    $marginStart: dartx.marginStart = Symbol("dartx.marginStart"),
    $marginTopCollapse: dartx.marginTopCollapse = Symbol("dartx.marginTopCollapse"),
    $mask: dartx.mask = Symbol("dartx.mask"),
    $maskBoxImage: dartx.maskBoxImage = Symbol("dartx.maskBoxImage"),
    $maskBoxImageOutset: dartx.maskBoxImageOutset = Symbol("dartx.maskBoxImageOutset"),
    $maskBoxImageRepeat: dartx.maskBoxImageRepeat = Symbol("dartx.maskBoxImageRepeat"),
    $maskBoxImageSlice: dartx.maskBoxImageSlice = Symbol("dartx.maskBoxImageSlice"),
    $maskBoxImageSource: dartx.maskBoxImageSource = Symbol("dartx.maskBoxImageSource"),
    $maskBoxImageWidth: dartx.maskBoxImageWidth = Symbol("dartx.maskBoxImageWidth"),
    $maskClip: dartx.maskClip = Symbol("dartx.maskClip"),
    $maskComposite: dartx.maskComposite = Symbol("dartx.maskComposite"),
    $maskImage: dartx.maskImage = Symbol("dartx.maskImage"),
    $maskOrigin: dartx.maskOrigin = Symbol("dartx.maskOrigin"),
    $maskPosition: dartx.maskPosition = Symbol("dartx.maskPosition"),
    $maskPositionX: dartx.maskPositionX = Symbol("dartx.maskPositionX"),
    $maskPositionY: dartx.maskPositionY = Symbol("dartx.maskPositionY"),
    $maskRepeat: dartx.maskRepeat = Symbol("dartx.maskRepeat"),
    $maskRepeatX: dartx.maskRepeatX = Symbol("dartx.maskRepeatX"),
    $maskRepeatY: dartx.maskRepeatY = Symbol("dartx.maskRepeatY"),
    $maskSize: dartx.maskSize = Symbol("dartx.maskSize"),
    $maskSourceType: dartx.maskSourceType = Symbol("dartx.maskSourceType"),
    $maxLogicalHeight: dartx.maxLogicalHeight = Symbol("dartx.maxLogicalHeight"),
    $maxLogicalWidth: dartx.maxLogicalWidth = Symbol("dartx.maxLogicalWidth"),
    $maxZoom: dartx.maxZoom = Symbol("dartx.maxZoom"),
    $minLogicalHeight: dartx.minLogicalHeight = Symbol("dartx.minLogicalHeight"),
    $minLogicalWidth: dartx.minLogicalWidth = Symbol("dartx.minLogicalWidth"),
    $minZoom: dartx.minZoom = Symbol("dartx.minZoom"),
    $mixBlendMode: dartx.mixBlendMode = Symbol("dartx.mixBlendMode"),
    $objectFit: dartx.objectFit = Symbol("dartx.objectFit"),
    $objectPosition: dartx.objectPosition = Symbol("dartx.objectPosition"),
    $opacity: dartx.opacity = Symbol("dartx.opacity"),
    $order: dartx.order = Symbol("dartx.order"),
    $orphans: dartx.orphans = Symbol("dartx.orphans"),
    $outlineOffset: dartx.outlineOffset = Symbol("dartx.outlineOffset"),
    $overflowWrap: dartx.overflowWrap = Symbol("dartx.overflowWrap"),
    $overflowX: dartx.overflowX = Symbol("dartx.overflowX"),
    $overflowY: dartx.overflowY = Symbol("dartx.overflowY"),
    $paddingAfter: dartx.paddingAfter = Symbol("dartx.paddingAfter"),
    $paddingBefore: dartx.paddingBefore = Symbol("dartx.paddingBefore"),
    $paddingEnd: dartx.paddingEnd = Symbol("dartx.paddingEnd"),
    $paddingStart: dartx.paddingStart = Symbol("dartx.paddingStart"),
    $page: dartx.page = Symbol("dartx.page"),
    $perspective: dartx.perspective = Symbol("dartx.perspective"),
    $perspectiveOrigin: dartx.perspectiveOrigin = Symbol("dartx.perspectiveOrigin"),
    $perspectiveOriginX: dartx.perspectiveOriginX = Symbol("dartx.perspectiveOriginX"),
    $perspectiveOriginY: dartx.perspectiveOriginY = Symbol("dartx.perspectiveOriginY"),
    $pointerEvents: dartx.pointerEvents = Symbol("dartx.pointerEvents"),
    $printColorAdjust: dartx.printColorAdjust = Symbol("dartx.printColorAdjust"),
    $resize: dartx.resize = Symbol("dartx.resize"),
    $rtlOrdering: dartx.rtlOrdering = Symbol("dartx.rtlOrdering"),
    $rubyPosition: dartx.rubyPosition = Symbol("dartx.rubyPosition"),
    $scrollBehavior: dartx.scrollBehavior = Symbol("dartx.scrollBehavior"),
    $shapeImageThreshold: dartx.shapeImageThreshold = Symbol("dartx.shapeImageThreshold"),
    $shapeMargin: dartx.shapeMargin = Symbol("dartx.shapeMargin"),
    $shapeOutside: dartx.shapeOutside = Symbol("dartx.shapeOutside"),
    $speak: dartx.speak = Symbol("dartx.speak"),
    $tabSize: dartx.tabSize = Symbol("dartx.tabSize"),
    $tapHighlightColor: dartx.tapHighlightColor = Symbol("dartx.tapHighlightColor"),
    $textAlignLast: dartx.textAlignLast = Symbol("dartx.textAlignLast"),
    $textCombine: dartx.textCombine = Symbol("dartx.textCombine"),
    $textDecorationColor: dartx.textDecorationColor = Symbol("dartx.textDecorationColor"),
    $textDecorationLine: dartx.textDecorationLine = Symbol("dartx.textDecorationLine"),
    $textDecorationStyle: dartx.textDecorationStyle = Symbol("dartx.textDecorationStyle"),
    $textDecorationsInEffect: dartx.textDecorationsInEffect = Symbol("dartx.textDecorationsInEffect"),
    $textEmphasis: dartx.textEmphasis = Symbol("dartx.textEmphasis"),
    $textEmphasisColor: dartx.textEmphasisColor = Symbol("dartx.textEmphasisColor"),
    $textEmphasisPosition: dartx.textEmphasisPosition = Symbol("dartx.textEmphasisPosition"),
    $textEmphasisStyle: dartx.textEmphasisStyle = Symbol("dartx.textEmphasisStyle"),
    $textFillColor: dartx.textFillColor = Symbol("dartx.textFillColor"),
    $textJustify: dartx.textJustify = Symbol("dartx.textJustify"),
    $textLineThroughColor: dartx.textLineThroughColor = Symbol("dartx.textLineThroughColor"),
    $textLineThroughMode: dartx.textLineThroughMode = Symbol("dartx.textLineThroughMode"),
    $textLineThroughStyle: dartx.textLineThroughStyle = Symbol("dartx.textLineThroughStyle"),
    $textLineThroughWidth: dartx.textLineThroughWidth = Symbol("dartx.textLineThroughWidth"),
    $textOrientation: dartx.textOrientation = Symbol("dartx.textOrientation"),
    $textOverflow: dartx.textOverflow = Symbol("dartx.textOverflow"),
    $textOverlineColor: dartx.textOverlineColor = Symbol("dartx.textOverlineColor"),
    $textOverlineMode: dartx.textOverlineMode = Symbol("dartx.textOverlineMode"),
    $textOverlineStyle: dartx.textOverlineStyle = Symbol("dartx.textOverlineStyle"),
    $textOverlineWidth: dartx.textOverlineWidth = Symbol("dartx.textOverlineWidth"),
    $textRendering: dartx.textRendering = Symbol("dartx.textRendering"),
    $textSecurity: dartx.textSecurity = Symbol("dartx.textSecurity"),
    $textShadow: dartx.textShadow = Symbol("dartx.textShadow"),
    $textStroke: dartx.textStroke = Symbol("dartx.textStroke"),
    $textStrokeColor: dartx.textStrokeColor = Symbol("dartx.textStrokeColor"),
    $textStrokeWidth: dartx.textStrokeWidth = Symbol("dartx.textStrokeWidth"),
    $textUnderlineColor: dartx.textUnderlineColor = Symbol("dartx.textUnderlineColor"),
    $textUnderlineMode: dartx.textUnderlineMode = Symbol("dartx.textUnderlineMode"),
    $textUnderlinePosition: dartx.textUnderlinePosition = Symbol("dartx.textUnderlinePosition"),
    $textUnderlineStyle: dartx.textUnderlineStyle = Symbol("dartx.textUnderlineStyle"),
    $textUnderlineWidth: dartx.textUnderlineWidth = Symbol("dartx.textUnderlineWidth"),
    $touchAction: dartx.touchAction = Symbol("dartx.touchAction"),
    $touchActionDelay: dartx.touchActionDelay = Symbol("dartx.touchActionDelay"),
    $transformOrigin: dartx.transformOrigin = Symbol("dartx.transformOrigin"),
    $transformOriginX: dartx.transformOriginX = Symbol("dartx.transformOriginX"),
    $transformOriginY: dartx.transformOriginY = Symbol("dartx.transformOriginY"),
    $transformOriginZ: dartx.transformOriginZ = Symbol("dartx.transformOriginZ"),
    $transformStyle: dartx.transformStyle = Symbol("dartx.transformStyle"),
    $transition: dartx.transition = Symbol("dartx.transition"),
    $transitionDelay: dartx.transitionDelay = Symbol("dartx.transitionDelay"),
    $transitionDuration: dartx.transitionDuration = Symbol("dartx.transitionDuration"),
    $transitionProperty: dartx.transitionProperty = Symbol("dartx.transitionProperty"),
    $transitionTimingFunction: dartx.transitionTimingFunction = Symbol("dartx.transitionTimingFunction"),
    $unicodeRange: dartx.unicodeRange = Symbol("dartx.unicodeRange"),
    $userDrag: dartx.userDrag = Symbol("dartx.userDrag"),
    $userModify: dartx.userModify = Symbol("dartx.userModify"),
    $userSelect: dartx.userSelect = Symbol("dartx.userSelect"),
    $userZoom: dartx.userZoom = Symbol("dartx.userZoom"),
    $widows: dartx.widows = Symbol("dartx.widows"),
    $willChange: dartx.willChange = Symbol("dartx.willChange"),
    $wordBreak: dartx.wordBreak = Symbol("dartx.wordBreak"),
    $wordWrap: dartx.wordWrap = Symbol("dartx.wordWrap"),
    $wrapFlow: dartx.wrapFlow = Symbol("dartx.wrapFlow"),
    $wrapThrough: dartx.wrapThrough = Symbol("dartx.wrapThrough"),
    $writingMode: dartx.writingMode = Symbol("dartx.writingMode"),
    $zoom: dartx.zoom = Symbol("dartx.zoom"),
    _elementCssStyleDeclarationSetIterable: dart.privateName(html$, "_elementCssStyleDeclarationSetIterable"),
    _elementIterable: dart.privateName(html$, "_elementIterable"),
    _setAll: dart.privateName(html$, "_setAll"),
    $ownerRule: dartx.ownerRule = Symbol("dartx.ownerRule"),
    $rules: dartx.rules = Symbol("dartx.rules"),
    $addRule: dartx.addRule = Symbol("dartx.addRule"),
    $removeRule: dartx.removeRule = Symbol("dartx.removeRule"),
    $ownerNode: dartx.ownerNode = Symbol("dartx.ownerNode"),
    $componentAtIndex: dartx.componentAtIndex = Symbol("dartx.componentAtIndex"),
    $toMatrix: dartx.toMatrix = Symbol("dartx.toMatrix"),
    $unit: dartx.unit = Symbol("dartx.unit"),
    $fragmentAtIndex: dartx.fragmentAtIndex = Symbol("dartx.fragmentAtIndex"),
    $fallback: dartx.fallback = Symbol("dartx.fallback"),
    $variable: dartx.variable = Symbol("dartx.variable"),
    _define_1: dart.privateName(html$, "_define_1"),
    _define_2: dart.privateName(html$, "_define_2"),
    $define: dartx.define = Symbol("dartx.define"),
    $whenDefined: dartx.whenDefined = Symbol("dartx.whenDefined"),
    _dartDetail: dart.privateName(html$, "_dartDetail"),
    _initCustomEvent: dart.privateName(html$, "_initCustomEvent"),
    _detail: dart.privateName(html$, "_detail"),
    _get__detail: dart.privateName(html$, "_get__detail"),
    $options: dartx.options = Symbol("dartx.options"),
    $dropEffect: dartx.dropEffect = Symbol("dartx.dropEffect"),
    $effectAllowed: dartx.effectAllowed = Symbol("dartx.effectAllowed"),
    $files: dartx.files = Symbol("dartx.files"),
    $items: dartx.items = Symbol("dartx.items"),
    $types: dartx.types = Symbol("dartx.types"),
    $clearData: dartx.clearData = Symbol("dartx.clearData"),
    $getData: dartx.getData = Symbol("dartx.getData"),
    $setData: dartx.setData = Symbol("dartx.setData"),
    $setDragImage: dartx.setDragImage = Symbol("dartx.setDragImage"),
    _webkitGetAsEntry: dart.privateName(html$, "_webkitGetAsEntry"),
    $getAsEntry: dartx.getAsEntry = Symbol("dartx.getAsEntry"),
    $getAsFile: dartx.getAsFile = Symbol("dartx.getAsFile"),
    $addData: dartx.addData = Symbol("dartx.addData"),
    $addFile: dartx.addFile = Symbol("dartx.addFile"),
    _postMessage_1: dart.privateName(html$, "_postMessage_1"),
    _postMessage_2: dart.privateName(html$, "_postMessage_2"),
    _webkitRequestFileSystem: dart.privateName(html$, "_webkitRequestFileSystem"),
    $requestFileSystemSync: dartx.requestFileSystemSync = Symbol("dartx.requestFileSystemSync"),
    $resolveLocalFileSystemSyncUrl: dartx.resolveLocalFileSystemSyncUrl = Symbol("dartx.resolveLocalFileSystemSyncUrl"),
    _webkitResolveLocalFileSystemUrl: dart.privateName(html$, "_webkitResolveLocalFileSystemUrl"),
    $addressSpace: dartx.addressSpace = Symbol("dartx.addressSpace"),
    $caches: dartx.caches = Symbol("dartx.caches"),
    $crypto: dartx.crypto = Symbol("dartx.crypto"),
    $indexedDB: dartx.indexedDB = Symbol("dartx.indexedDB"),
    $isSecureContext: dartx.isSecureContext = Symbol("dartx.isSecureContext"),
    $location: dartx.location = Symbol("dartx.location"),
    $navigator: dartx.navigator = Symbol("dartx.navigator"),
    $performance: dartx.performance = Symbol("dartx.performance"),
    $self: dartx.self = Symbol("dartx.self"),
    $importScripts: dartx.importScripts = Symbol("dartx.importScripts"),
    $atob: dartx.atob = Symbol("dartx.atob"),
    $btoa: dartx.btoa = Symbol("dartx.btoa"),
    _setInterval_String: dart.privateName(html$, "_setInterval_String"),
    _setTimeout_String: dart.privateName(html$, "_setTimeout_String"),
    _clearInterval: dart.privateName(html$, "_clearInterval"),
    _clearTimeout: dart.privateName(html$, "_clearTimeout"),
    _setInterval: dart.privateName(html$, "_setInterval"),
    _setTimeout: dart.privateName(html$, "_setTimeout"),
    $queryUsageAndQuota: dartx.queryUsageAndQuota = Symbol("dartx.queryUsageAndQuota"),
    $requestQuota: dartx.requestQuota = Symbol("dartx.requestQuota"),
    $lineNumber: dartx.lineNumber = Symbol("dartx.lineNumber"),
    $sourceFile: dartx.sourceFile = Symbol("dartx.sourceFile"),
    $cornerPoints: dartx.cornerPoints = Symbol("dartx.cornerPoints"),
    $rawValue: dartx.rawValue = Symbol("dartx.rawValue"),
    $landmarks: dartx.landmarks = Symbol("dartx.landmarks"),
    $acceleration: dartx.acceleration = Symbol("dartx.acceleration"),
    $accelerationIncludingGravity: dartx.accelerationIncludingGravity = Symbol("dartx.accelerationIncludingGravity"),
    $interval: dartx.interval = Symbol("dartx.interval"),
    $rotationRate: dartx.rotationRate = Symbol("dartx.rotationRate"),
    $absolute: dartx.absolute = Symbol("dartx.absolute"),
    $alpha: dartx.alpha = Symbol("dartx.alpha"),
    $beta: dartx.beta = Symbol("dartx.beta"),
    $gamma: dartx.gamma = Symbol("dartx.gamma"),
    $show: dartx.show = Symbol("dartx.show"),
    $showModal: dartx.showModal = Symbol("dartx.showModal"),
    _getDirectory: dart.privateName(html$, "_getDirectory"),
    $createDirectory: dartx.createDirectory = Symbol("dartx.createDirectory"),
    _createReader: dart.privateName(html$, "_createReader"),
    $createReader: dartx.createReader = Symbol("dartx.createReader"),
    $getDirectory: dartx.getDirectory = Symbol("dartx.getDirectory"),
    _getFile: dart.privateName(html$, "_getFile"),
    $createFile: dartx.createFile = Symbol("dartx.createFile"),
    $getFile: dartx.getFile = Symbol("dartx.getFile"),
    __getDirectory_1: dart.privateName(html$, "__getDirectory_1"),
    __getDirectory_2: dart.privateName(html$, "__getDirectory_2"),
    __getDirectory_3: dart.privateName(html$, "__getDirectory_3"),
    __getDirectory_4: dart.privateName(html$, "__getDirectory_4"),
    __getDirectory: dart.privateName(html$, "__getDirectory"),
    __getFile_1: dart.privateName(html$, "__getFile_1"),
    __getFile_2: dart.privateName(html$, "__getFile_2"),
    __getFile_3: dart.privateName(html$, "__getFile_3"),
    __getFile_4: dart.privateName(html$, "__getFile_4"),
    __getFile: dart.privateName(html$, "__getFile"),
    _removeRecursively: dart.privateName(html$, "_removeRecursively"),
    $removeRecursively: dartx.removeRecursively = Symbol("dartx.removeRecursively"),
    $filesystem: dartx.filesystem = Symbol("dartx.filesystem"),
    $fullPath: dartx.fullPath = Symbol("dartx.fullPath"),
    $isDirectory: dartx.isDirectory = Symbol("dartx.isDirectory"),
    $isFile: dartx.isFile = Symbol("dartx.isFile"),
    _copyTo: dart.privateName(html$, "_copyTo"),
    $copyTo: dartx.copyTo = Symbol("dartx.copyTo"),
    _getMetadata: dart.privateName(html$, "_getMetadata"),
    $getMetadata: dartx.getMetadata = Symbol("dartx.getMetadata"),
    _getParent: dart.privateName(html$, "_getParent"),
    $getParent: dartx.getParent = Symbol("dartx.getParent"),
    _moveTo: dart.privateName(html$, "_moveTo"),
    _remove$1: dart.privateName(html$, "_remove"),
    $toUrl: dartx.toUrl = Symbol("dartx.toUrl"),
    _readEntries: dart.privateName(html$, "_readEntries"),
    $readEntries: dartx.readEntries = Symbol("dartx.readEntries"),
    _body: dart.privateName(html$, "_body"),
    $contentType: dartx.contentType = Symbol("dartx.contentType"),
    $cookie: dartx.cookie = Symbol("dartx.cookie"),
    $currentScript: dartx.currentScript = Symbol("dartx.currentScript"),
    _get_window: dart.privateName(html$, "_get_window"),
    $window: dartx.window = Symbol("dartx.window"),
    $documentElement: dartx.documentElement = Symbol("dartx.documentElement"),
    $domain: dartx.domain = Symbol("dartx.domain"),
    $fullscreenEnabled: dartx.fullscreenEnabled = Symbol("dartx.fullscreenEnabled"),
    _head$1: dart.privateName(html$, "_head"),
    $implementation: dartx.implementation = Symbol("dartx.implementation"),
    _lastModified: dart.privateName(html$, "_lastModified"),
    _preferredStylesheetSet: dart.privateName(html$, "_preferredStylesheetSet"),
    _referrer: dart.privateName(html$, "_referrer"),
    $rootElement: dartx.rootElement = Symbol("dartx.rootElement"),
    $rootScroller: dartx.rootScroller = Symbol("dartx.rootScroller"),
    $scrollingElement: dartx.scrollingElement = Symbol("dartx.scrollingElement"),
    _selectedStylesheetSet: dart.privateName(html$, "_selectedStylesheetSet"),
    $suborigin: dartx.suborigin = Symbol("dartx.suborigin")
  };
  var S$1 = {
    _title: dart.privateName(html$, "_title"),
    _visibilityState: dart.privateName(html$, "_visibilityState"),
    _webkitFullscreenElement: dart.privateName(html$, "_webkitFullscreenElement"),
    _webkitFullscreenEnabled: dart.privateName(html$, "_webkitFullscreenEnabled"),
    _webkitHidden: dart.privateName(html$, "_webkitHidden"),
    _webkitVisibilityState: dart.privateName(html$, "_webkitVisibilityState"),
    $adoptNode: dartx.adoptNode = Symbol("dartx.adoptNode"),
    _caretRangeFromPoint: dart.privateName(html$, "_caretRangeFromPoint"),
    $createDocumentFragment: dartx.createDocumentFragment = Symbol("dartx.createDocumentFragment"),
    _createElement: dart.privateName(html$, "_createElement"),
    _createElementNS: dart.privateName(html$, "_createElementNS"),
    $createRange: dartx.createRange = Symbol("dartx.createRange"),
    _createTextNode: dart.privateName(html$, "_createTextNode"),
    _createTouch_1: dart.privateName(html$, "_createTouch_1"),
    _createTouch_2: dart.privateName(html$, "_createTouch_2"),
    _createTouch_3: dart.privateName(html$, "_createTouch_3"),
    _createTouch_4: dart.privateName(html$, "_createTouch_4"),
    _createTouch_5: dart.privateName(html$, "_createTouch_5"),
    _createTouch: dart.privateName(html$, "_createTouch"),
    _createTouchList: dart.privateName(html$, "_createTouchList"),
    $execCommand: dartx.execCommand = Symbol("dartx.execCommand"),
    $exitFullscreen: dartx.exitFullscreen = Symbol("dartx.exitFullscreen"),
    $exitPointerLock: dartx.exitPointerLock = Symbol("dartx.exitPointerLock"),
    $getElementsByName: dartx.getElementsByName = Symbol("dartx.getElementsByName"),
    $getElementsByTagName: dartx.getElementsByTagName = Symbol("dartx.getElementsByTagName"),
    $importNode: dartx.importNode = Symbol("dartx.importNode"),
    $queryCommandEnabled: dartx.queryCommandEnabled = Symbol("dartx.queryCommandEnabled"),
    $queryCommandIndeterm: dartx.queryCommandIndeterm = Symbol("dartx.queryCommandIndeterm"),
    $queryCommandState: dartx.queryCommandState = Symbol("dartx.queryCommandState"),
    $queryCommandSupported: dartx.queryCommandSupported = Symbol("dartx.queryCommandSupported"),
    $queryCommandValue: dartx.queryCommandValue = Symbol("dartx.queryCommandValue"),
    _registerElement2_1: dart.privateName(html$, "_registerElement2_1"),
    _registerElement2_2: dart.privateName(html$, "_registerElement2_2"),
    $registerElement2: dartx.registerElement2 = Symbol("dartx.registerElement2"),
    _webkitExitFullscreen: dart.privateName(html$, "_webkitExitFullscreen"),
    $getElementById: dartx.getElementById = Symbol("dartx.getElementById"),
    $activeElement: dartx.activeElement = Symbol("dartx.activeElement"),
    $fullscreenElement: dartx.fullscreenElement = Symbol("dartx.fullscreenElement"),
    $pointerLockElement: dartx.pointerLockElement = Symbol("dartx.pointerLockElement"),
    _styleSheets: dart.privateName(html$, "_styleSheets"),
    _elementFromPoint: dart.privateName(html$, "_elementFromPoint"),
    $elementsFromPoint: dartx.elementsFromPoint = Symbol("dartx.elementsFromPoint"),
    $fonts: dartx.fonts = Symbol("dartx.fonts"),
    $onPointerLockChange: dartx.onPointerLockChange = Symbol("dartx.onPointerLockChange"),
    $onPointerLockError: dartx.onPointerLockError = Symbol("dartx.onPointerLockError"),
    $onReadyStateChange: dartx.onReadyStateChange = Symbol("dartx.onReadyStateChange"),
    $onSecurityPolicyViolation: dartx.onSecurityPolicyViolation = Symbol("dartx.onSecurityPolicyViolation"),
    $onSelectionChange: dartx.onSelectionChange = Symbol("dartx.onSelectionChange"),
    $supportsRegisterElement: dartx.supportsRegisterElement = Symbol("dartx.supportsRegisterElement"),
    $supportsRegister: dartx.supportsRegister = Symbol("dartx.supportsRegister"),
    $registerElement: dartx.registerElement = Symbol("dartx.registerElement"),
    _createElement_2: dart.privateName(html$, "_createElement_2"),
    _createElementNS_2: dart.privateName(html$, "_createElementNS_2"),
    $createElementNS: dartx.createElementNS = Symbol("dartx.createElementNS"),
    _createNodeIterator: dart.privateName(html$, "_createNodeIterator"),
    _createTreeWalker: dart.privateName(html$, "_createTreeWalker"),
    $visibilityState: dartx.visibilityState = Symbol("dartx.visibilityState"),
    _docChildren: dart.privateName(html$, "_docChildren"),
    $styleSheets: dartx.styleSheets = Symbol("dartx.styleSheets"),
    $elementFromPoint: dartx.elementFromPoint = Symbol("dartx.elementFromPoint"),
    $getSelection: dartx.getSelection = Symbol("dartx.getSelection"),
    $createDocument: dartx.createDocument = Symbol("dartx.createDocument"),
    $createDocumentType: dartx.createDocumentType = Symbol("dartx.createDocumentType"),
    $hasFeature: dartx.hasFeature = Symbol("dartx.hasFeature"),
    $a: dartx.a = Symbol("dartx.a"),
    $b: dartx.b = Symbol("dartx.b"),
    $c: dartx.c = Symbol("dartx.c"),
    $d: dartx.d = Symbol("dartx.d"),
    $e: dartx.e = Symbol("dartx.e"),
    $f: dartx.f = Symbol("dartx.f"),
    $m11: dartx.m11 = Symbol("dartx.m11"),
    $m12: dartx.m12 = Symbol("dartx.m12"),
    $m13: dartx.m13 = Symbol("dartx.m13"),
    $m14: dartx.m14 = Symbol("dartx.m14"),
    $m21: dartx.m21 = Symbol("dartx.m21"),
    $m22: dartx.m22 = Symbol("dartx.m22"),
    $m23: dartx.m23 = Symbol("dartx.m23"),
    $m24: dartx.m24 = Symbol("dartx.m24"),
    $m31: dartx.m31 = Symbol("dartx.m31"),
    $m32: dartx.m32 = Symbol("dartx.m32"),
    $m33: dartx.m33 = Symbol("dartx.m33"),
    $m34: dartx.m34 = Symbol("dartx.m34"),
    $m41: dartx.m41 = Symbol("dartx.m41"),
    $m42: dartx.m42 = Symbol("dartx.m42"),
    $m43: dartx.m43 = Symbol("dartx.m43"),
    $m44: dartx.m44 = Symbol("dartx.m44"),
    $invertSelf: dartx.invertSelf = Symbol("dartx.invertSelf"),
    _multiplySelf_1: dart.privateName(html$, "_multiplySelf_1"),
    _multiplySelf_2: dart.privateName(html$, "_multiplySelf_2"),
    $multiplySelf: dartx.multiplySelf = Symbol("dartx.multiplySelf"),
    _preMultiplySelf_1: dart.privateName(html$, "_preMultiplySelf_1"),
    _preMultiplySelf_2: dart.privateName(html$, "_preMultiplySelf_2"),
    $preMultiplySelf: dartx.preMultiplySelf = Symbol("dartx.preMultiplySelf"),
    $rotateAxisAngleSelf: dartx.rotateAxisAngleSelf = Symbol("dartx.rotateAxisAngleSelf"),
    $rotateFromVectorSelf: dartx.rotateFromVectorSelf = Symbol("dartx.rotateFromVectorSelf"),
    $rotateSelf: dartx.rotateSelf = Symbol("dartx.rotateSelf"),
    $scale3dSelf: dartx.scale3dSelf = Symbol("dartx.scale3dSelf"),
    $scaleSelf: dartx.scaleSelf = Symbol("dartx.scaleSelf"),
    $setMatrixValue: dartx.setMatrixValue = Symbol("dartx.setMatrixValue"),
    $skewXSelf: dartx.skewXSelf = Symbol("dartx.skewXSelf"),
    $skewYSelf: dartx.skewYSelf = Symbol("dartx.skewYSelf"),
    $translateSelf: dartx.translateSelf = Symbol("dartx.translateSelf"),
    $isIdentity: dartx.isIdentity = Symbol("dartx.isIdentity"),
    $flipX: dartx.flipX = Symbol("dartx.flipX"),
    $flipY: dartx.flipY = Symbol("dartx.flipY"),
    $inverse: dartx.inverse = Symbol("dartx.inverse"),
    _multiply_1: dart.privateName(html$, "_multiply_1"),
    _multiply_2: dart.privateName(html$, "_multiply_2"),
    $multiply: dartx.multiply = Symbol("dartx.multiply"),
    $rotateAxisAngle: dartx.rotateAxisAngle = Symbol("dartx.rotateAxisAngle"),
    $rotateFromVector: dartx.rotateFromVector = Symbol("dartx.rotateFromVector"),
    $scale3d: dartx.scale3d = Symbol("dartx.scale3d"),
    $skewX: dartx.skewX = Symbol("dartx.skewX"),
    $skewY: dartx.skewY = Symbol("dartx.skewY"),
    $toFloat32Array: dartx.toFloat32Array = Symbol("dartx.toFloat32Array"),
    $toFloat64Array: dartx.toFloat64Array = Symbol("dartx.toFloat64Array"),
    _transformPoint_1: dart.privateName(html$, "_transformPoint_1"),
    _transformPoint_2: dart.privateName(html$, "_transformPoint_2"),
    $transformPoint: dartx.transformPoint = Symbol("dartx.transformPoint"),
    $parseFromString: dartx.parseFromString = Symbol("dartx.parseFromString"),
    $w: dartx.w = Symbol("dartx.w"),
    _matrixTransform_1: dart.privateName(html$, "_matrixTransform_1"),
    _matrixTransform_2: dart.privateName(html$, "_matrixTransform_2"),
    $matrixTransform: dartx.matrixTransform = Symbol("dartx.matrixTransform"),
    $p1: dartx.p1 = Symbol("dartx.p1"),
    $p2: dartx.p2 = Symbol("dartx.p2"),
    $p3: dartx.p3 = Symbol("dartx.p3"),
    $p4: dartx.p4 = Symbol("dartx.p4"),
    $getBounds: dartx.getBounds = Symbol("dartx.getBounds"),
    __delete__: dart.privateName(html$, "__delete__"),
    $replace: dartx.replace = Symbol("dartx.replace"),
    $supports: dartx.supports = Symbol("dartx.supports"),
    $toggle: dartx.toggle = Symbol("dartx.toggle"),
    _childElements: dart.privateName(html$, "_childElements"),
    _element$2: dart.privateName(html$, "_element"),
    _filter$2: dart.privateName(html$, "_filter"),
    _nodeList: dart.privateName(html$, "_nodeList"),
    _forElementList: dart.privateName(html$, "_forElementList"),
    _value$6: dart.privateName(html$, "ScrollAlignment._value"),
    _value$7: dart.privateName(html$, "_value"),
    $colno: dartx.colno = Symbol("dartx.colno"),
    $filename: dartx.filename = Symbol("dartx.filename"),
    $lineno: dartx.lineno = Symbol("dartx.lineno"),
    $withCredentials: dartx.withCredentials = Symbol("dartx.withCredentials"),
    $onOpen: dartx.onOpen = Symbol("dartx.onOpen"),
    _ptr: dart.privateName(html$, "_ptr"),
    $lastEventId: dartx.lastEventId = Symbol("dartx.lastEventId"),
    $ports: dartx.ports = Symbol("dartx.ports"),
    $AddSearchProvider: dartx.AddSearchProvider = Symbol("dartx.AddSearchProvider"),
    $IsSearchProviderInstalled: dartx.IsSearchProviderInstalled = Symbol("dartx.IsSearchProviderInstalled"),
    $provider: dartx.provider = Symbol("dartx.provider"),
    $clientId: dartx.clientId = Symbol("dartx.clientId"),
    $isReload: dartx.isReload = Symbol("dartx.isReload"),
    $preloadResponse: dartx.preloadResponse = Symbol("dartx.preloadResponse"),
    $elements: dartx.elements = Symbol("dartx.elements"),
    $lastModified: dartx.lastModified = Symbol("dartx.lastModified"),
    _get_lastModifiedDate: dart.privateName(html$, "_get_lastModifiedDate"),
    $lastModifiedDate: dartx.lastModifiedDate = Symbol("dartx.lastModifiedDate"),
    $relativePath: dartx.relativePath = Symbol("dartx.relativePath"),
    _createWriter: dart.privateName(html$, "_createWriter"),
    $createWriter: dartx.createWriter = Symbol("dartx.createWriter"),
    _file$1: dart.privateName(html$, "_file"),
    $file: dartx.file = Symbol("dartx.file"),
    $readAsArrayBuffer: dartx.readAsArrayBuffer = Symbol("dartx.readAsArrayBuffer"),
    $readAsDataUrl: dartx.readAsDataUrl = Symbol("dartx.readAsDataUrl"),
    $readAsText: dartx.readAsText = Symbol("dartx.readAsText"),
    $onLoadEnd: dartx.onLoadEnd = Symbol("dartx.onLoadEnd"),
    $onLoadStart: dartx.onLoadStart = Symbol("dartx.onLoadStart"),
    $root: dartx.root = Symbol("dartx.root"),
    $seek: dartx.seek = Symbol("dartx.seek"),
    $write: dartx.write = Symbol("dartx.write"),
    $onWrite: dartx.onWrite = Symbol("dartx.onWrite"),
    $onWriteEnd: dartx.onWriteEnd = Symbol("dartx.onWriteEnd"),
    $onWriteStart: dartx.onWriteStart = Symbol("dartx.onWriteStart"),
    _get_relatedTarget: dart.privateName(html$, "_get_relatedTarget"),
    $relatedTarget: dartx.relatedTarget = Symbol("dartx.relatedTarget"),
    $family: dartx.family = Symbol("dartx.family"),
    $featureSettings: dartx.featureSettings = Symbol("dartx.featureSettings"),
    $loaded: dartx.loaded = Symbol("dartx.loaded"),
    $stretch: dartx.stretch = Symbol("dartx.stretch"),
    $variant: dartx.variant = Symbol("dartx.variant"),
    $weight: dartx.weight = Symbol("dartx.weight"),
    $check: dartx.check = Symbol("dartx.check"),
    $onLoading: dartx.onLoading = Symbol("dartx.onLoading"),
    $onLoadingDone: dartx.onLoadingDone = Symbol("dartx.onLoadingDone"),
    $onLoadingError: dartx.onLoadingError = Symbol("dartx.onLoadingError"),
    $fontfaces: dartx.fontfaces = Symbol("dartx.fontfaces"),
    $appendBlob: dartx.appendBlob = Symbol("dartx.appendBlob"),
    $acceptCharset: dartx.acceptCharset = Symbol("dartx.acceptCharset"),
    $action: dartx.action = Symbol("dartx.action"),
    $enctype: dartx.enctype = Symbol("dartx.enctype"),
    $method: dartx.method = Symbol("dartx.method"),
    $noValidate: dartx.noValidate = Symbol("dartx.noValidate"),
    _requestAutocomplete_1: dart.privateName(html$, "_requestAutocomplete_1"),
    $requestAutocomplete: dartx.requestAutocomplete = Symbol("dartx.requestAutocomplete"),
    $reset: dartx.reset = Symbol("dartx.reset"),
    $submit: dartx.submit = Symbol("dartx.submit"),
    $axes: dartx.axes = Symbol("dartx.axes"),
    $buttons: dartx.buttons = Symbol("dartx.buttons"),
    $connected: dartx.connected = Symbol("dartx.connected"),
    $displayId: dartx.displayId = Symbol("dartx.displayId"),
    $hand: dartx.hand = Symbol("dartx.hand"),
    $mapping: dartx.mapping = Symbol("dartx.mapping"),
    $pose: dartx.pose = Symbol("dartx.pose"),
    $touched: dartx.touched = Symbol("dartx.touched"),
    $gamepad: dartx.gamepad = Symbol("dartx.gamepad"),
    $angularAcceleration: dartx.angularAcceleration = Symbol("dartx.angularAcceleration"),
    $angularVelocity: dartx.angularVelocity = Symbol("dartx.angularVelocity"),
    $hasOrientation: dartx.hasOrientation = Symbol("dartx.hasOrientation"),
    $hasPosition: dartx.hasPosition = Symbol("dartx.hasPosition"),
    $linearAcceleration: dartx.linearAcceleration = Symbol("dartx.linearAcceleration"),
    $linearVelocity: dartx.linearVelocity = Symbol("dartx.linearVelocity"),
    _ensurePosition: dart.privateName(html$, "_ensurePosition"),
    _getCurrentPosition: dart.privateName(html$, "_getCurrentPosition"),
    $getCurrentPosition: dartx.getCurrentPosition = Symbol("dartx.getCurrentPosition"),
    _clearWatch: dart.privateName(html$, "_clearWatch"),
    _watchPosition: dart.privateName(html$, "_watchPosition"),
    $watchPosition: dartx.watchPosition = Symbol("dartx.watchPosition"),
    _getCurrentPosition_1: dart.privateName(html$, "_getCurrentPosition_1"),
    _getCurrentPosition_2: dart.privateName(html$, "_getCurrentPosition_2"),
    _getCurrentPosition_3: dart.privateName(html$, "_getCurrentPosition_3"),
    _watchPosition_1: dart.privateName(html$, "_watchPosition_1"),
    _watchPosition_2: dart.privateName(html$, "_watchPosition_2"),
    _watchPosition_3: dart.privateName(html$, "_watchPosition_3"),
    $newUrl: dartx.newUrl = Symbol("dartx.newUrl"),
    $oldUrl: dartx.oldUrl = Symbol("dartx.oldUrl"),
    $scrollRestoration: dartx.scrollRestoration = Symbol("dartx.scrollRestoration"),
    _get_state: dart.privateName(html$, "_get_state"),
    $back: dartx.back = Symbol("dartx.back"),
    $forward: dartx.forward = Symbol("dartx.forward"),
    $go: dartx.go = Symbol("dartx.go"),
    _pushState_1: dart.privateName(html$, "_pushState_1"),
    $pushState: dartx.pushState = Symbol("dartx.pushState"),
    _replaceState_1: dart.privateName(html$, "_replaceState_1"),
    $replaceState: dartx.replaceState = Symbol("dartx.replaceState"),
    $namedItem: dartx.namedItem = Symbol("dartx.namedItem"),
    $body: dartx.body = Symbol("dartx.body"),
    $caretRangeFromPoint: dartx.caretRangeFromPoint = Symbol("dartx.caretRangeFromPoint"),
    $preferredStylesheetSet: dartx.preferredStylesheetSet = Symbol("dartx.preferredStylesheetSet"),
    $referrer: dartx.referrer = Symbol("dartx.referrer"),
    $selectedStylesheetSet: dartx.selectedStylesheetSet = Symbol("dartx.selectedStylesheetSet"),
    $register: dartx.register = Symbol("dartx.register"),
    $onVisibilityChange: dartx.onVisibilityChange = Symbol("dartx.onVisibilityChange"),
    $createElementUpgrader: dartx.createElementUpgrader = Symbol("dartx.createElementUpgrader"),
    _item: dart.privateName(html$, "_item"),
    $responseHeaders: dartx.responseHeaders = Symbol("dartx.responseHeaders"),
    _get_response: dart.privateName(html$, "_get_response"),
    $responseText: dartx.responseText = Symbol("dartx.responseText"),
    $responseType: dartx.responseType = Symbol("dartx.responseType"),
    $responseUrl: dartx.responseUrl = Symbol("dartx.responseUrl"),
    $responseXml: dartx.responseXml = Symbol("dartx.responseXml"),
    $statusText: dartx.statusText = Symbol("dartx.statusText"),
    $timeout: dartx.timeout = Symbol("dartx.timeout"),
    $upload: dartx.upload = Symbol("dartx.upload"),
    $getAllResponseHeaders: dartx.getAllResponseHeaders = Symbol("dartx.getAllResponseHeaders"),
    $getResponseHeader: dartx.getResponseHeader = Symbol("dartx.getResponseHeader"),
    $overrideMimeType: dartx.overrideMimeType = Symbol("dartx.overrideMimeType"),
    $send: dartx.send = Symbol("dartx.send"),
    $setRequestHeader: dartx.setRequestHeader = Symbol("dartx.setRequestHeader"),
    $onTimeout: dartx.onTimeout = Symbol("dartx.onTimeout"),
    $allow: dartx.allow = Symbol("dartx.allow"),
    $allowFullscreen: dartx.allowFullscreen = Symbol("dartx.allowFullscreen"),
    $allowPaymentRequest: dartx.allowPaymentRequest = Symbol("dartx.allowPaymentRequest"),
    _get_contentWindow: dart.privateName(html$, "_get_contentWindow"),
    $contentWindow: dartx.contentWindow = Symbol("dartx.contentWindow"),
    $csp: dartx.csp = Symbol("dartx.csp"),
    $sandbox: dartx.sandbox = Symbol("dartx.sandbox"),
    $srcdoc: dartx.srcdoc = Symbol("dartx.srcdoc"),
    $didTimeout: dartx.didTimeout = Symbol("dartx.didTimeout"),
    $timeRemaining: dartx.timeRemaining = Symbol("dartx.timeRemaining"),
    $transferFromImageBitmap: dartx.transferFromImageBitmap = Symbol("dartx.transferFromImageBitmap"),
    $track: dartx.track = Symbol("dartx.track"),
    $getPhotoCapabilities: dartx.getPhotoCapabilities = Symbol("dartx.getPhotoCapabilities"),
    $getPhotoSettings: dartx.getPhotoSettings = Symbol("dartx.getPhotoSettings"),
    $grabFrame: dartx.grabFrame = Symbol("dartx.grabFrame"),
    $setOptions: dartx.setOptions = Symbol("dartx.setOptions"),
    $takePhoto: dartx.takePhoto = Symbol("dartx.takePhoto"),
    $async: dartx.async = Symbol("dartx.async"),
    $complete: dartx.complete = Symbol("dartx.complete"),
    $isMap: dartx.isMap = Symbol("dartx.isMap"),
    $naturalHeight: dartx.naturalHeight = Symbol("dartx.naturalHeight"),
    $naturalWidth: dartx.naturalWidth = Symbol("dartx.naturalWidth"),
    $sizes: dartx.sizes = Symbol("dartx.sizes"),
    $srcset: dartx.srcset = Symbol("dartx.srcset"),
    $useMap: dartx.useMap = Symbol("dartx.useMap"),
    $decode: dartx.decode = Symbol("dartx.decode"),
    $firesTouchEvents: dartx.firesTouchEvents = Symbol("dartx.firesTouchEvents"),
    $accept: dartx.accept = Symbol("dartx.accept"),
    $autocapitalize: dartx.autocapitalize = Symbol("dartx.autocapitalize"),
    $capture: dartx.capture = Symbol("dartx.capture"),
    $defaultChecked: dartx.defaultChecked = Symbol("dartx.defaultChecked"),
    $defaultValue: dartx.defaultValue = Symbol("dartx.defaultValue"),
    $dirName: dartx.dirName = Symbol("dartx.dirName"),
    $incremental: dartx.incremental = Symbol("dartx.incremental"),
    $indeterminate: dartx.indeterminate = Symbol("dartx.indeterminate"),
    $list: dartx.list = Symbol("dartx.list"),
    $max: dartx.max = Symbol("dartx.max"),
    $maxLength: dartx.maxLength = Symbol("dartx.maxLength"),
    $min: dartx.min = Symbol("dartx.min"),
    $minLength: dartx.minLength = Symbol("dartx.minLength"),
    $multiple: dartx.multiple = Symbol("dartx.multiple"),
    $pattern: dartx.pattern = Symbol("dartx.pattern"),
    $selectionDirection: dartx.selectionDirection = Symbol("dartx.selectionDirection"),
    $selectionEnd: dartx.selectionEnd = Symbol("dartx.selectionEnd"),
    $selectionStart: dartx.selectionStart = Symbol("dartx.selectionStart"),
    $step: dartx.step = Symbol("dartx.step"),
    _get_valueAsDate: dart.privateName(html$, "_get_valueAsDate"),
    $valueAsDate: dartx.valueAsDate = Symbol("dartx.valueAsDate"),
    _set_valueAsDate: dart.privateName(html$, "_set_valueAsDate"),
    $valueAsNumber: dartx.valueAsNumber = Symbol("dartx.valueAsNumber"),
    $directory: dartx.directory = Symbol("dartx.directory"),
    $setRangeText: dartx.setRangeText = Symbol("dartx.setRangeText"),
    $setSelectionRange: dartx.setSelectionRange = Symbol("dartx.setSelectionRange"),
    $stepDown: dartx.stepDown = Symbol("dartx.stepDown"),
    $stepUp: dartx.stepUp = Symbol("dartx.stepUp"),
    files: dart.privateName(html$, "FileUploadInputElement.files"),
    _registerForeignFetch_1: dart.privateName(html$, "_registerForeignFetch_1"),
    $registerForeignFetch: dartx.registerForeignFetch = Symbol("dartx.registerForeignFetch"),
    $rootMargin: dartx.rootMargin = Symbol("dartx.rootMargin"),
    $thresholds: dartx.thresholds = Symbol("dartx.thresholds"),
    $disconnect: dartx.disconnect = Symbol("dartx.disconnect"),
    $takeRecords: dartx.takeRecords = Symbol("dartx.takeRecords"),
    $boundingClientRect: dartx.boundingClientRect = Symbol("dartx.boundingClientRect"),
    $intersectionRatio: dartx.intersectionRatio = Symbol("dartx.intersectionRatio"),
    $intersectionRect: dartx.intersectionRect = Symbol("dartx.intersectionRect"),
    $isIntersecting: dartx.isIntersecting = Symbol("dartx.isIntersecting"),
    $rootBounds: dartx.rootBounds = Symbol("dartx.rootBounds"),
    _initKeyboardEvent: dart.privateName(html$, "_initKeyboardEvent"),
    $keyCode: dartx.keyCode = Symbol("dartx.keyCode"),
    $charCode: dartx.charCode = Symbol("dartx.charCode"),
    $which: dartx.which = Symbol("dartx.which"),
    $altKey: dartx.altKey = Symbol("dartx.altKey"),
    _charCode: dart.privateName(html$, "_charCode"),
    $ctrlKey: dartx.ctrlKey = Symbol("dartx.ctrlKey"),
    $isComposing: dartx.isComposing = Symbol("dartx.isComposing"),
    _keyCode: dart.privateName(html$, "_keyCode"),
    $metaKey: dartx.metaKey = Symbol("dartx.metaKey"),
    $repeat: dartx.repeat = Symbol("dartx.repeat"),
    $shiftKey: dartx.shiftKey = Symbol("dartx.shiftKey"),
    $getModifierState: dartx.getModifierState = Symbol("dartx.getModifierState"),
    $control: dartx.control = Symbol("dartx.control"),
    $htmlFor: dartx.htmlFor = Symbol("dartx.htmlFor"),
    $as: dartx.as = Symbol("dartx.as"),
    $import: dartx.import = Symbol("dartx.import"),
    $integrity: dartx.integrity = Symbol("dartx.integrity"),
    $relList: dartx.relList = Symbol("dartx.relList"),
    $scope: dartx.scope = Symbol("dartx.scope"),
    $sheet: dartx.sheet = Symbol("dartx.sheet"),
    $supportsImport: dartx.supportsImport = Symbol("dartx.supportsImport"),
    $ancestorOrigins: dartx.ancestorOrigins = Symbol("dartx.ancestorOrigins"),
    $trustedHref: dartx.trustedHref = Symbol("dartx.trustedHref"),
    $assign: dartx.assign = Symbol("dartx.assign"),
    $reload: dartx.reload = Symbol("dartx.reload"),
    $areas: dartx.areas = Symbol("dartx.areas"),
    $decodingInfo: dartx.decodingInfo = Symbol("dartx.decodingInfo"),
    $encodingInfo: dartx.encodingInfo = Symbol("dartx.encodingInfo"),
    $powerEfficient: dartx.powerEfficient = Symbol("dartx.powerEfficient"),
    $smooth: dartx.smooth = Symbol("dartx.smooth"),
    $supported: dartx.supported = Symbol("dartx.supported"),
    $deviceId: dartx.deviceId = Symbol("dartx.deviceId"),
    $groupId: dartx.groupId = Symbol("dartx.groupId"),
    $enumerateDevices: dartx.enumerateDevices = Symbol("dartx.enumerateDevices"),
    _getSupportedConstraints_1: dart.privateName(html$, "_getSupportedConstraints_1"),
    $getSupportedConstraints: dartx.getSupportedConstraints = Symbol("dartx.getSupportedConstraints"),
    $getUserMedia: dartx.getUserMedia = Symbol("dartx.getUserMedia"),
    $initData: dartx.initData = Symbol("dartx.initData"),
    $initDataType: dartx.initDataType = Symbol("dartx.initDataType"),
    $messageType: dartx.messageType = Symbol("dartx.messageType"),
    $closed: dartx.closed = Symbol("dartx.closed"),
    $expiration: dartx.expiration = Symbol("dartx.expiration"),
    $keyStatuses: dartx.keyStatuses = Symbol("dartx.keyStatuses"),
    $sessionId: dartx.sessionId = Symbol("dartx.sessionId"),
    $generateRequest: dartx.generateRequest = Symbol("dartx.generateRequest"),
    _update$1: dart.privateName(html$, "_update"),
    $keySystem: dartx.keySystem = Symbol("dartx.keySystem"),
    $createMediaKeys: dartx.createMediaKeys = Symbol("dartx.createMediaKeys"),
    _getConfiguration_1: dart.privateName(html$, "_getConfiguration_1"),
    $getConfiguration: dartx.getConfiguration = Symbol("dartx.getConfiguration"),
    _createSession: dart.privateName(html$, "_createSession"),
    $getStatusForPolicy: dartx.getStatusForPolicy = Symbol("dartx.getStatusForPolicy"),
    $setServerCertificate: dartx.setServerCertificate = Symbol("dartx.setServerCertificate"),
    $minHdcpVersion: dartx.minHdcpVersion = Symbol("dartx.minHdcpVersion"),
    $mediaText: dartx.mediaText = Symbol("dartx.mediaText"),
    $appendMedium: dartx.appendMedium = Symbol("dartx.appendMedium"),
    $deleteMedium: dartx.deleteMedium = Symbol("dartx.deleteMedium"),
    $album: dartx.album = Symbol("dartx.album"),
    $artist: dartx.artist = Symbol("dartx.artist"),
    $artwork: dartx.artwork = Symbol("dartx.artwork"),
    $addListener: dartx.addListener = Symbol("dartx.addListener"),
    $removeListener: dartx.removeListener = Symbol("dartx.removeListener"),
    $audioBitsPerSecond: dartx.audioBitsPerSecond = Symbol("dartx.audioBitsPerSecond"),
    $mimeType: dartx.mimeType = Symbol("dartx.mimeType"),
    $stream: dartx.stream = Symbol("dartx.stream"),
    $videoBitsPerSecond: dartx.videoBitsPerSecond = Symbol("dartx.videoBitsPerSecond"),
    $requestData: dartx.requestData = Symbol("dartx.requestData"),
    $resume: dartx.resume = Symbol("dartx.resume"),
    $metadata: dartx.metadata = Symbol("dartx.metadata"),
    $playbackState: dartx.playbackState = Symbol("dartx.playbackState"),
    $setActionHandler: dartx.setActionHandler = Symbol("dartx.setActionHandler"),
    $activeSourceBuffers: dartx.activeSourceBuffers = Symbol("dartx.activeSourceBuffers"),
    $sourceBuffers: dartx.sourceBuffers = Symbol("dartx.sourceBuffers"),
    $addSourceBuffer: dartx.addSourceBuffer = Symbol("dartx.addSourceBuffer"),
    $clearLiveSeekableRange: dartx.clearLiveSeekableRange = Symbol("dartx.clearLiveSeekableRange"),
    $endOfStream: dartx.endOfStream = Symbol("dartx.endOfStream"),
    $removeSourceBuffer: dartx.removeSourceBuffer = Symbol("dartx.removeSourceBuffer"),
    $setLiveSeekableRange: dartx.setLiveSeekableRange = Symbol("dartx.setLiveSeekableRange"),
    $active: dartx.active = Symbol("dartx.active"),
    $addTrack: dartx.addTrack = Symbol("dartx.addTrack"),
    $getAudioTracks: dartx.getAudioTracks = Symbol("dartx.getAudioTracks"),
    $getTrackById: dartx.getTrackById = Symbol("dartx.getTrackById"),
    $getTracks: dartx.getTracks = Symbol("dartx.getTracks"),
    $getVideoTracks: dartx.getVideoTracks = Symbol("dartx.getVideoTracks"),
    $removeTrack: dartx.removeTrack = Symbol("dartx.removeTrack"),
    $onAddTrack: dartx.onAddTrack = Symbol("dartx.onAddTrack"),
    $onRemoveTrack: dartx.onRemoveTrack = Symbol("dartx.onRemoveTrack"),
    $jsHeapSizeLimit: dartx.jsHeapSizeLimit = Symbol("dartx.jsHeapSizeLimit"),
    $totalJSHeapSize: dartx.totalJSHeapSize = Symbol("dartx.totalJSHeapSize"),
    $usedJSHeapSize: dartx.usedJSHeapSize = Symbol("dartx.usedJSHeapSize"),
    $port1: dartx.port1 = Symbol("dartx.port1"),
    $port2: dartx.port2 = Symbol("dartx.port2"),
    _initMessageEvent: dart.privateName(html$, "_initMessageEvent"),
    _get_data: dart.privateName(html$, "_get_data"),
    _get_source: dart.privateName(html$, "_get_source"),
    _initMessageEvent_1: dart.privateName(html$, "_initMessageEvent_1"),
    _start$4: dart.privateName(html$, "_start"),
    $httpEquiv: dartx.httpEquiv = Symbol("dartx.httpEquiv"),
    _get_modificationTime: dart.privateName(html$, "_get_modificationTime"),
    $modificationTime: dartx.modificationTime = Symbol("dartx.modificationTime"),
    $high: dartx.high = Symbol("dartx.high"),
    $low: dartx.low = Symbol("dartx.low"),
    $optimum: dartx.optimum = Symbol("dartx.optimum"),
    $inputs: dartx.inputs = Symbol("dartx.inputs"),
    $outputs: dartx.outputs = Symbol("dartx.outputs"),
    $sysexEnabled: dartx.sysexEnabled = Symbol("dartx.sysexEnabled"),
    $onMidiMessage: dartx.onMidiMessage = Symbol("dartx.onMidiMessage"),
    $connection: dartx.connection = Symbol("dartx.connection"),
    $manufacturer: dartx.manufacturer = Symbol("dartx.manufacturer"),
    _getItem: dart.privateName(html$, "_getItem"),
    $description: dartx.description = Symbol("dartx.description"),
    $enabledPlugin: dartx.enabledPlugin = Symbol("dartx.enabledPlugin"),
    $suffixes: dartx.suffixes = Symbol("dartx.suffixes"),
    $cite: dartx.cite = Symbol("dartx.cite"),
    $dateTime: dartx.dateTime = Symbol("dartx.dateTime"),
    _initMouseEvent: dart.privateName(html$, "_initMouseEvent"),
    $button: dartx.button = Symbol("dartx.button"),
    _clientX: dart.privateName(html$, "_clientX"),
    _clientY: dart.privateName(html$, "_clientY"),
    $fromElement: dartx.fromElement = Symbol("dartx.fromElement"),
    _layerX: dart.privateName(html$, "_layerX"),
    _layerY: dart.privateName(html$, "_layerY"),
    _movementX: dart.privateName(html$, "_movementX"),
    _movementY: dart.privateName(html$, "_movementY"),
    _pageX: dart.privateName(html$, "_pageX"),
    _pageY: dart.privateName(html$, "_pageY"),
    $region: dartx.region = Symbol("dartx.region"),
    _screenX: dart.privateName(html$, "_screenX"),
    _screenY: dart.privateName(html$, "_screenY"),
    $toElement: dartx.toElement = Symbol("dartx.toElement"),
    _initMouseEvent_1: dart.privateName(html$, "_initMouseEvent_1"),
    $movement: dartx.movement = Symbol("dartx.movement"),
    $screen: dartx.screen = Symbol("dartx.screen"),
    $layer: dartx.layer = Symbol("dartx.layer"),
    $dataTransfer: dartx.dataTransfer = Symbol("dartx.dataTransfer"),
    $attrChange: dartx.attrChange = Symbol("dartx.attrChange"),
    $attrName: dartx.attrName = Symbol("dartx.attrName"),
    $newValue: dartx.newValue = Symbol("dartx.newValue"),
    $prevValue: dartx.prevValue = Symbol("dartx.prevValue"),
    $relatedNode: dartx.relatedNode = Symbol("dartx.relatedNode"),
    $initMutationEvent: dartx.initMutationEvent = Symbol("dartx.initMutationEvent"),
    _observe_1$1: dart.privateName(html$, "_observe_1"),
    _observe_2: dart.privateName(html$, "_observe_2"),
    _observe: dart.privateName(html$, "_observe"),
    _call: dart.privateName(html$, "_call"),
    $addedNodes: dartx.addedNodes = Symbol("dartx.addedNodes"),
    $attributeName: dartx.attributeName = Symbol("dartx.attributeName"),
    $attributeNamespace: dartx.attributeNamespace = Symbol("dartx.attributeNamespace"),
    $nextSibling: dartx.nextSibling = Symbol("dartx.nextSibling"),
    $oldValue: dartx.oldValue = Symbol("dartx.oldValue"),
    $previousSibling: dartx.previousSibling = Symbol("dartx.previousSibling"),
    $removedNodes: dartx.removedNodes = Symbol("dartx.removedNodes"),
    $disable: dartx.disable = Symbol("dartx.disable"),
    $enable: dartx.enable = Symbol("dartx.enable"),
    $getState: dartx.getState = Symbol("dartx.getState"),
    _getGamepads: dart.privateName(html$, "_getGamepads"),
    $getGamepads: dartx.getGamepads = Symbol("dartx.getGamepads"),
    $language: dartx.language = Symbol("dartx.language"),
    _ensureGetUserMedia: dart.privateName(html$, "_ensureGetUserMedia"),
    _getUserMedia: dart.privateName(html$, "_getUserMedia"),
    $budget: dartx.budget = Symbol("dartx.budget"),
    $clipboard: dartx.clipboard = Symbol("dartx.clipboard"),
    $credentials: dartx.credentials = Symbol("dartx.credentials"),
    $deviceMemory: dartx.deviceMemory = Symbol("dartx.deviceMemory"),
    $doNotTrack: dartx.doNotTrack = Symbol("dartx.doNotTrack"),
    $geolocation: dartx.geolocation = Symbol("dartx.geolocation"),
    $maxTouchPoints: dartx.maxTouchPoints = Symbol("dartx.maxTouchPoints"),
    $mediaCapabilities: dartx.mediaCapabilities = Symbol("dartx.mediaCapabilities"),
    $mediaDevices: dartx.mediaDevices = Symbol("dartx.mediaDevices"),
    $mediaSession: dartx.mediaSession = Symbol("dartx.mediaSession"),
    $mimeTypes: dartx.mimeTypes = Symbol("dartx.mimeTypes"),
    $nfc: dartx.nfc = Symbol("dartx.nfc")
  };
  var S$2 = {
    $permissions: dartx.permissions = Symbol("dartx.permissions"),
    $presentation: dartx.presentation = Symbol("dartx.presentation"),
    $productSub: dartx.productSub = Symbol("dartx.productSub"),
    $serviceWorker: dartx.serviceWorker = Symbol("dartx.serviceWorker"),
    $storage: dartx.storage = Symbol("dartx.storage"),
    $vendor: dartx.vendor = Symbol("dartx.vendor"),
    $vendorSub: dartx.vendorSub = Symbol("dartx.vendorSub"),
    $vr: dartx.vr = Symbol("dartx.vr"),
    $persistentStorage: dartx.persistentStorage = Symbol("dartx.persistentStorage"),
    $temporaryStorage: dartx.temporaryStorage = Symbol("dartx.temporaryStorage"),
    $cancelKeyboardLock: dartx.cancelKeyboardLock = Symbol("dartx.cancelKeyboardLock"),
    $getBattery: dartx.getBattery = Symbol("dartx.getBattery"),
    $getInstalledRelatedApps: dartx.getInstalledRelatedApps = Symbol("dartx.getInstalledRelatedApps"),
    $getVRDisplays: dartx.getVRDisplays = Symbol("dartx.getVRDisplays"),
    $registerProtocolHandler: dartx.registerProtocolHandler = Symbol("dartx.registerProtocolHandler"),
    _requestKeyboardLock_1: dart.privateName(html$, "_requestKeyboardLock_1"),
    _requestKeyboardLock_2: dart.privateName(html$, "_requestKeyboardLock_2"),
    $requestKeyboardLock: dartx.requestKeyboardLock = Symbol("dartx.requestKeyboardLock"),
    $requestMidiAccess: dartx.requestMidiAccess = Symbol("dartx.requestMidiAccess"),
    $requestMediaKeySystemAccess: dartx.requestMediaKeySystemAccess = Symbol("dartx.requestMediaKeySystemAccess"),
    $sendBeacon: dartx.sendBeacon = Symbol("dartx.sendBeacon"),
    $share: dartx.share = Symbol("dartx.share"),
    $webdriver: dartx.webdriver = Symbol("dartx.webdriver"),
    $cookieEnabled: dartx.cookieEnabled = Symbol("dartx.cookieEnabled"),
    $appCodeName: dartx.appCodeName = Symbol("dartx.appCodeName"),
    $appName: dartx.appName = Symbol("dartx.appName"),
    $appVersion: dartx.appVersion = Symbol("dartx.appVersion"),
    $dartEnabled: dartx.dartEnabled = Symbol("dartx.dartEnabled"),
    $platform: dartx.platform = Symbol("dartx.platform"),
    $product: dartx.product = Symbol("dartx.product"),
    $userAgent: dartx.userAgent = Symbol("dartx.userAgent"),
    $languages: dartx.languages = Symbol("dartx.languages"),
    $onLine: dartx.onLine = Symbol("dartx.onLine"),
    $hardwareConcurrency: dartx.hardwareConcurrency = Symbol("dartx.hardwareConcurrency"),
    $constraintName: dartx.constraintName = Symbol("dartx.constraintName"),
    $downlink: dartx.downlink = Symbol("dartx.downlink"),
    $downlinkMax: dartx.downlinkMax = Symbol("dartx.downlinkMax"),
    $effectiveType: dartx.effectiveType = Symbol("dartx.effectiveType"),
    $rtt: dartx.rtt = Symbol("dartx.rtt"),
    $pointerBeforeReferenceNode: dartx.pointerBeforeReferenceNode = Symbol("dartx.pointerBeforeReferenceNode"),
    $referenceNode: dartx.referenceNode = Symbol("dartx.referenceNode"),
    $whatToShow: dartx.whatToShow = Symbol("dartx.whatToShow"),
    $detach: dartx.detach = Symbol("dartx.detach"),
    $actions: dartx.actions = Symbol("dartx.actions"),
    $badge: dartx.badge = Symbol("dartx.badge"),
    $icon: dartx.icon = Symbol("dartx.icon"),
    $image: dartx.image = Symbol("dartx.image"),
    $renotify: dartx.renotify = Symbol("dartx.renotify"),
    $requireInteraction: dartx.requireInteraction = Symbol("dartx.requireInteraction"),
    $silent: dartx.silent = Symbol("dartx.silent"),
    $tag: dartx.tag = Symbol("dartx.tag"),
    $vibrate: dartx.vibrate = Symbol("dartx.vibrate"),
    $onShow: dartx.onShow = Symbol("dartx.onShow"),
    $notification: dartx.notification = Symbol("dartx.notification"),
    $reply: dartx.reply = Symbol("dartx.reply"),
    $convertToBlob: dartx.convertToBlob = Symbol("dartx.convertToBlob"),
    $transferToImageBitmap: dartx.transferToImageBitmap = Symbol("dartx.transferToImageBitmap"),
    $commit: dartx.commit = Symbol("dartx.commit"),
    $defaultSelected: dartx.defaultSelected = Symbol("dartx.defaultSelected"),
    $constraint: dartx.constraint = Symbol("dartx.constraint"),
    $persisted: dartx.persisted = Symbol("dartx.persisted"),
    $devicePixelRatio: dartx.devicePixelRatio = Symbol("dartx.devicePixelRatio"),
    $registerPaint: dartx.registerPaint = Symbol("dartx.registerPaint"),
    $additionalData: dartx.additionalData = Symbol("dartx.additionalData"),
    $idName: dartx.idName = Symbol("dartx.idName"),
    $passwordName: dartx.passwordName = Symbol("dartx.passwordName"),
    $addPath: dartx.addPath = Symbol("dartx.addPath"),
    $addressLine: dartx.addressLine = Symbol("dartx.addressLine"),
    $city: dartx.city = Symbol("dartx.city"),
    $country: dartx.country = Symbol("dartx.country"),
    $dependentLocality: dartx.dependentLocality = Symbol("dartx.dependentLocality"),
    $languageCode: dartx.languageCode = Symbol("dartx.languageCode"),
    $organization: dartx.organization = Symbol("dartx.organization"),
    $phone: dartx.phone = Symbol("dartx.phone"),
    $postalCode: dartx.postalCode = Symbol("dartx.postalCode"),
    $recipient: dartx.recipient = Symbol("dartx.recipient"),
    $sortingCode: dartx.sortingCode = Symbol("dartx.sortingCode"),
    $instruments: dartx.instruments = Symbol("dartx.instruments"),
    $userHint: dartx.userHint = Symbol("dartx.userHint"),
    $shippingAddress: dartx.shippingAddress = Symbol("dartx.shippingAddress"),
    $shippingOption: dartx.shippingOption = Symbol("dartx.shippingOption"),
    $shippingType: dartx.shippingType = Symbol("dartx.shippingType"),
    $canMakePayment: dartx.canMakePayment = Symbol("dartx.canMakePayment"),
    $instrumentKey: dartx.instrumentKey = Symbol("dartx.instrumentKey"),
    $paymentRequestId: dartx.paymentRequestId = Symbol("dartx.paymentRequestId"),
    $total: dartx.total = Symbol("dartx.total"),
    $updateWith: dartx.updateWith = Symbol("dartx.updateWith"),
    $methodName: dartx.methodName = Symbol("dartx.methodName"),
    $payerEmail: dartx.payerEmail = Symbol("dartx.payerEmail"),
    $payerName: dartx.payerName = Symbol("dartx.payerName"),
    $payerPhone: dartx.payerPhone = Symbol("dartx.payerPhone"),
    $requestId: dartx.requestId = Symbol("dartx.requestId"),
    $memory: dartx.memory = Symbol("dartx.memory"),
    $navigation: dartx.navigation = Symbol("dartx.navigation"),
    $timeOrigin: dartx.timeOrigin = Symbol("dartx.timeOrigin"),
    $clearMarks: dartx.clearMarks = Symbol("dartx.clearMarks"),
    $clearMeasures: dartx.clearMeasures = Symbol("dartx.clearMeasures"),
    $clearResourceTimings: dartx.clearResourceTimings = Symbol("dartx.clearResourceTimings"),
    $getEntries: dartx.getEntries = Symbol("dartx.getEntries"),
    $getEntriesByName: dartx.getEntriesByName = Symbol("dartx.getEntriesByName"),
    $getEntriesByType: dartx.getEntriesByType = Symbol("dartx.getEntriesByType"),
    $mark: dartx.mark = Symbol("dartx.mark"),
    $measure: dartx.measure = Symbol("dartx.measure"),
    $now: dartx.now = Symbol("dartx.now"),
    $setResourceTimingBufferSize: dartx.setResourceTimingBufferSize = Symbol("dartx.setResourceTimingBufferSize"),
    $entryType: dartx.entryType = Symbol("dartx.entryType"),
    $attribution: dartx.attribution = Symbol("dartx.attribution"),
    $redirectCount: dartx.redirectCount = Symbol("dartx.redirectCount"),
    $domComplete: dartx.domComplete = Symbol("dartx.domComplete"),
    $domContentLoadedEventEnd: dartx.domContentLoadedEventEnd = Symbol("dartx.domContentLoadedEventEnd"),
    $domContentLoadedEventStart: dartx.domContentLoadedEventStart = Symbol("dartx.domContentLoadedEventStart"),
    $domInteractive: dartx.domInteractive = Symbol("dartx.domInteractive"),
    $loadEventEnd: dartx.loadEventEnd = Symbol("dartx.loadEventEnd"),
    $loadEventStart: dartx.loadEventStart = Symbol("dartx.loadEventStart"),
    $unloadEventEnd: dartx.unloadEventEnd = Symbol("dartx.unloadEventEnd"),
    $unloadEventStart: dartx.unloadEventStart = Symbol("dartx.unloadEventStart"),
    $connectEnd: dartx.connectEnd = Symbol("dartx.connectEnd"),
    $connectStart: dartx.connectStart = Symbol("dartx.connectStart"),
    $decodedBodySize: dartx.decodedBodySize = Symbol("dartx.decodedBodySize"),
    $domainLookupEnd: dartx.domainLookupEnd = Symbol("dartx.domainLookupEnd"),
    $domainLookupStart: dartx.domainLookupStart = Symbol("dartx.domainLookupStart"),
    $encodedBodySize: dartx.encodedBodySize = Symbol("dartx.encodedBodySize"),
    $fetchStart: dartx.fetchStart = Symbol("dartx.fetchStart"),
    $initiatorType: dartx.initiatorType = Symbol("dartx.initiatorType"),
    $nextHopProtocol: dartx.nextHopProtocol = Symbol("dartx.nextHopProtocol"),
    $redirectEnd: dartx.redirectEnd = Symbol("dartx.redirectEnd"),
    $redirectStart: dartx.redirectStart = Symbol("dartx.redirectStart"),
    $requestStart: dartx.requestStart = Symbol("dartx.requestStart"),
    $responseEnd: dartx.responseEnd = Symbol("dartx.responseEnd"),
    $responseStart: dartx.responseStart = Symbol("dartx.responseStart"),
    $secureConnectionStart: dartx.secureConnectionStart = Symbol("dartx.secureConnectionStart"),
    $serverTiming: dartx.serverTiming = Symbol("dartx.serverTiming"),
    $transferSize: dartx.transferSize = Symbol("dartx.transferSize"),
    $workerStart: dartx.workerStart = Symbol("dartx.workerStart"),
    $domLoading: dartx.domLoading = Symbol("dartx.domLoading"),
    $navigationStart: dartx.navigationStart = Symbol("dartx.navigationStart"),
    $query: dartx.query = Symbol("dartx.query"),
    $requestAll: dartx.requestAll = Symbol("dartx.requestAll"),
    $revoke: dartx.revoke = Symbol("dartx.revoke"),
    $fillLightMode: dartx.fillLightMode = Symbol("dartx.fillLightMode"),
    $imageHeight: dartx.imageHeight = Symbol("dartx.imageHeight"),
    $imageWidth: dartx.imageWidth = Symbol("dartx.imageWidth"),
    $redEyeReduction: dartx.redEyeReduction = Symbol("dartx.redEyeReduction"),
    $refresh: dartx.refresh = Symbol("dartx.refresh"),
    $isPrimary: dartx.isPrimary = Symbol("dartx.isPrimary"),
    $pointerId: dartx.pointerId = Symbol("dartx.pointerId"),
    $pointerType: dartx.pointerType = Symbol("dartx.pointerType"),
    $pressure: dartx.pressure = Symbol("dartx.pressure"),
    $tangentialPressure: dartx.tangentialPressure = Symbol("dartx.tangentialPressure"),
    $tiltX: dartx.tiltX = Symbol("dartx.tiltX"),
    $tiltY: dartx.tiltY = Symbol("dartx.tiltY"),
    $twist: dartx.twist = Symbol("dartx.twist"),
    $getCoalescedEvents: dartx.getCoalescedEvents = Symbol("dartx.getCoalescedEvents"),
    $defaultRequest: dartx.defaultRequest = Symbol("dartx.defaultRequest"),
    $receiver: dartx.receiver = Symbol("dartx.receiver"),
    $binaryType: dartx.binaryType = Symbol("dartx.binaryType"),
    $terminate: dartx.terminate = Symbol("dartx.terminate"),
    $connections: dartx.connections = Symbol("dartx.connections"),
    $connectionList: dartx.connectionList = Symbol("dartx.connectionList"),
    $getAvailability: dartx.getAvailability = Symbol("dartx.getAvailability"),
    $reconnect: dartx.reconnect = Symbol("dartx.reconnect"),
    $lengthComputable: dartx.lengthComputable = Symbol("dartx.lengthComputable"),
    $promise: dartx.promise = Symbol("dartx.promise"),
    $rawId: dartx.rawId = Symbol("dartx.rawId"),
    $getSubscription: dartx.getSubscription = Symbol("dartx.getSubscription"),
    $permissionState: dartx.permissionState = Symbol("dartx.permissionState"),
    $subscribe: dartx.subscribe = Symbol("dartx.subscribe"),
    $endpoint: dartx.endpoint = Symbol("dartx.endpoint"),
    $expirationTime: dartx.expirationTime = Symbol("dartx.expirationTime"),
    $unsubscribe: dartx.unsubscribe = Symbol("dartx.unsubscribe"),
    $applicationServerKey: dartx.applicationServerKey = Symbol("dartx.applicationServerKey"),
    $userVisibleOnly: dartx.userVisibleOnly = Symbol("dartx.userVisibleOnly"),
    $collapsed: dartx.collapsed = Symbol("dartx.collapsed"),
    $commonAncestorContainer: dartx.commonAncestorContainer = Symbol("dartx.commonAncestorContainer"),
    $endContainer: dartx.endContainer = Symbol("dartx.endContainer"),
    $endOffset: dartx.endOffset = Symbol("dartx.endOffset"),
    $startContainer: dartx.startContainer = Symbol("dartx.startContainer"),
    $startOffset: dartx.startOffset = Symbol("dartx.startOffset"),
    $cloneContents: dartx.cloneContents = Symbol("dartx.cloneContents"),
    $cloneRange: dartx.cloneRange = Symbol("dartx.cloneRange"),
    $collapse: dartx.collapse = Symbol("dartx.collapse"),
    $compareBoundaryPoints: dartx.compareBoundaryPoints = Symbol("dartx.compareBoundaryPoints"),
    $comparePoint: dartx.comparePoint = Symbol("dartx.comparePoint"),
    $createContextualFragment: dartx.createContextualFragment = Symbol("dartx.createContextualFragment"),
    $deleteContents: dartx.deleteContents = Symbol("dartx.deleteContents"),
    $extractContents: dartx.extractContents = Symbol("dartx.extractContents"),
    $insertNode: dartx.insertNode = Symbol("dartx.insertNode"),
    $isPointInRange: dartx.isPointInRange = Symbol("dartx.isPointInRange"),
    $selectNode: dartx.selectNode = Symbol("dartx.selectNode"),
    $selectNodeContents: dartx.selectNodeContents = Symbol("dartx.selectNodeContents"),
    $setEnd: dartx.setEnd = Symbol("dartx.setEnd"),
    $setEndAfter: dartx.setEndAfter = Symbol("dartx.setEndAfter"),
    $setEndBefore: dartx.setEndBefore = Symbol("dartx.setEndBefore"),
    $setStart: dartx.setStart = Symbol("dartx.setStart"),
    $setStartAfter: dartx.setStartAfter = Symbol("dartx.setStartAfter"),
    $setStartBefore: dartx.setStartBefore = Symbol("dartx.setStartBefore"),
    $surroundContents: dartx.surroundContents = Symbol("dartx.surroundContents"),
    $cancelWatchAvailability: dartx.cancelWatchAvailability = Symbol("dartx.cancelWatchAvailability"),
    $watchAvailability: dartx.watchAvailability = Symbol("dartx.watchAvailability"),
    $contentRect: dartx.contentRect = Symbol("dartx.contentRect"),
    $expires: dartx.expires = Symbol("dartx.expires"),
    $getFingerprints: dartx.getFingerprints = Symbol("dartx.getFingerprints"),
    $bufferedAmount: dartx.bufferedAmount = Symbol("dartx.bufferedAmount"),
    $bufferedAmountLowThreshold: dartx.bufferedAmountLowThreshold = Symbol("dartx.bufferedAmountLowThreshold"),
    $maxRetransmitTime: dartx.maxRetransmitTime = Symbol("dartx.maxRetransmitTime"),
    $maxRetransmits: dartx.maxRetransmits = Symbol("dartx.maxRetransmits"),
    $negotiated: dartx.negotiated = Symbol("dartx.negotiated"),
    $ordered: dartx.ordered = Symbol("dartx.ordered"),
    $reliable: dartx.reliable = Symbol("dartx.reliable"),
    $sendBlob: dartx.sendBlob = Symbol("dartx.sendBlob"),
    $sendByteBuffer: dartx.sendByteBuffer = Symbol("dartx.sendByteBuffer"),
    $sendString: dartx.sendString = Symbol("dartx.sendString"),
    $sendTypedData: dartx.sendTypedData = Symbol("dartx.sendTypedData"),
    $channel: dartx.channel = Symbol("dartx.channel"),
    $canInsertDtmf: dartx.canInsertDtmf = Symbol("dartx.canInsertDtmf"),
    $interToneGap: dartx.interToneGap = Symbol("dartx.interToneGap"),
    $toneBuffer: dartx.toneBuffer = Symbol("dartx.toneBuffer"),
    $insertDtmf: dartx.insertDtmf = Symbol("dartx.insertDtmf"),
    $onToneChange: dartx.onToneChange = Symbol("dartx.onToneChange"),
    $tone: dartx.tone = Symbol("dartx.tone"),
    $candidate: dartx.candidate = Symbol("dartx.candidate"),
    $sdpMLineIndex: dartx.sdpMLineIndex = Symbol("dartx.sdpMLineIndex"),
    $sdpMid: dartx.sdpMid = Symbol("dartx.sdpMid"),
    _get_timestamp: dart.privateName(html$, "_get_timestamp"),
    $names: dartx.names = Symbol("dartx.names"),
    $stat: dartx.stat = Symbol("dartx.stat"),
    _getStats: dart.privateName(html$, "_getStats"),
    $getLegacyStats: dartx.getLegacyStats = Symbol("dartx.getLegacyStats"),
    $iceConnectionState: dartx.iceConnectionState = Symbol("dartx.iceConnectionState"),
    $iceGatheringState: dartx.iceGatheringState = Symbol("dartx.iceGatheringState"),
    $localDescription: dartx.localDescription = Symbol("dartx.localDescription"),
    $remoteDescription: dartx.remoteDescription = Symbol("dartx.remoteDescription"),
    $signalingState: dartx.signalingState = Symbol("dartx.signalingState"),
    $addIceCandidate: dartx.addIceCandidate = Symbol("dartx.addIceCandidate"),
    _addStream_1: dart.privateName(html$, "_addStream_1"),
    _addStream_2: dart.privateName(html$, "_addStream_2"),
    $addStream: dartx.addStream = Symbol("dartx.addStream"),
    $createAnswer: dartx.createAnswer = Symbol("dartx.createAnswer"),
    $createDtmfSender: dartx.createDtmfSender = Symbol("dartx.createDtmfSender"),
    _createDataChannel_1: dart.privateName(html$, "_createDataChannel_1"),
    _createDataChannel_2: dart.privateName(html$, "_createDataChannel_2"),
    $createDataChannel: dartx.createDataChannel = Symbol("dartx.createDataChannel"),
    $createOffer: dartx.createOffer = Symbol("dartx.createOffer"),
    $getLocalStreams: dartx.getLocalStreams = Symbol("dartx.getLocalStreams"),
    $getReceivers: dartx.getReceivers = Symbol("dartx.getReceivers"),
    $getRemoteStreams: dartx.getRemoteStreams = Symbol("dartx.getRemoteStreams"),
    $getSenders: dartx.getSenders = Symbol("dartx.getSenders"),
    $getStats: dartx.getStats = Symbol("dartx.getStats"),
    $removeStream: dartx.removeStream = Symbol("dartx.removeStream"),
    _setConfiguration_1: dart.privateName(html$, "_setConfiguration_1"),
    $setConfiguration: dartx.setConfiguration = Symbol("dartx.setConfiguration"),
    $setLocalDescription: dartx.setLocalDescription = Symbol("dartx.setLocalDescription"),
    $setRemoteDescription: dartx.setRemoteDescription = Symbol("dartx.setRemoteDescription"),
    $onAddStream: dartx.onAddStream = Symbol("dartx.onAddStream"),
    $onDataChannel: dartx.onDataChannel = Symbol("dartx.onDataChannel"),
    $onIceCandidate: dartx.onIceCandidate = Symbol("dartx.onIceCandidate"),
    $onIceConnectionStateChange: dartx.onIceConnectionStateChange = Symbol("dartx.onIceConnectionStateChange"),
    $onNegotiationNeeded: dartx.onNegotiationNeeded = Symbol("dartx.onNegotiationNeeded"),
    $onRemoveStream: dartx.onRemoveStream = Symbol("dartx.onRemoveStream"),
    $onSignalingStateChange: dartx.onSignalingStateChange = Symbol("dartx.onSignalingStateChange"),
    $onTrack: dartx.onTrack = Symbol("dartx.onTrack"),
    $getContributingSources: dartx.getContributingSources = Symbol("dartx.getContributingSources"),
    $sdp: dartx.sdp = Symbol("dartx.sdp"),
    $streams: dartx.streams = Symbol("dartx.streams"),
    _availLeft: dart.privateName(html$, "_availLeft"),
    _availTop: dart.privateName(html$, "_availTop"),
    _availWidth: dart.privateName(html$, "_availWidth"),
    _availHeight: dart.privateName(html$, "_availHeight"),
    $available: dartx.available = Symbol("dartx.available"),
    $colorDepth: dartx.colorDepth = Symbol("dartx.colorDepth"),
    $keepAwake: dartx.keepAwake = Symbol("dartx.keepAwake"),
    $pixelDepth: dartx.pixelDepth = Symbol("dartx.pixelDepth"),
    $lock: dartx.lock = Symbol("dartx.lock"),
    $unlock: dartx.unlock = Symbol("dartx.unlock"),
    $charset: dartx.charset = Symbol("dartx.charset"),
    $defer: dartx.defer = Symbol("dartx.defer"),
    $noModule: dartx.noModule = Symbol("dartx.noModule"),
    $deltaGranularity: dartx.deltaGranularity = Symbol("dartx.deltaGranularity"),
    $deltaX: dartx.deltaX = Symbol("dartx.deltaX"),
    $deltaY: dartx.deltaY = Symbol("dartx.deltaY"),
    $fromUserInput: dartx.fromUserInput = Symbol("dartx.fromUserInput"),
    $inInertialPhase: dartx.inInertialPhase = Symbol("dartx.inInertialPhase"),
    $isBeginning: dartx.isBeginning = Symbol("dartx.isBeginning"),
    $isDirectManipulation: dartx.isDirectManipulation = Symbol("dartx.isDirectManipulation"),
    $isEnding: dartx.isEnding = Symbol("dartx.isEnding"),
    $positionX: dartx.positionX = Symbol("dartx.positionX"),
    $positionY: dartx.positionY = Symbol("dartx.positionY"),
    $velocityX: dartx.velocityX = Symbol("dartx.velocityX"),
    $velocityY: dartx.velocityY = Symbol("dartx.velocityY"),
    $consumeDelta: dartx.consumeDelta = Symbol("dartx.consumeDelta"),
    $distributeToScrollChainDescendant: dartx.distributeToScrollChainDescendant = Symbol("dartx.distributeToScrollChainDescendant"),
    $scrollSource: dartx.scrollSource = Symbol("dartx.scrollSource"),
    $timeRange: dartx.timeRange = Symbol("dartx.timeRange"),
    $blockedUri: dartx.blockedUri = Symbol("dartx.blockedUri"),
    $columnNumber: dartx.columnNumber = Symbol("dartx.columnNumber"),
    $disposition: dartx.disposition = Symbol("dartx.disposition"),
    $documentUri: dartx.documentUri = Symbol("dartx.documentUri"),
    $effectiveDirective: dartx.effectiveDirective = Symbol("dartx.effectiveDirective"),
    $originalPolicy: dartx.originalPolicy = Symbol("dartx.originalPolicy"),
    $sample: dartx.sample = Symbol("dartx.sample"),
    $statusCode: dartx.statusCode = Symbol("dartx.statusCode"),
    $violatedDirective: dartx.violatedDirective = Symbol("dartx.violatedDirective"),
    $selectedIndex: dartx.selectedIndex = Symbol("dartx.selectedIndex"),
    $selectedOptions: dartx.selectedOptions = Symbol("dartx.selectedOptions"),
    $anchorNode: dartx.anchorNode = Symbol("dartx.anchorNode"),
    $anchorOffset: dartx.anchorOffset = Symbol("dartx.anchorOffset"),
    $baseNode: dartx.baseNode = Symbol("dartx.baseNode"),
    $baseOffset: dartx.baseOffset = Symbol("dartx.baseOffset"),
    $extentNode: dartx.extentNode = Symbol("dartx.extentNode"),
    $extentOffset: dartx.extentOffset = Symbol("dartx.extentOffset"),
    $focusNode: dartx.focusNode = Symbol("dartx.focusNode"),
    $focusOffset: dartx.focusOffset = Symbol("dartx.focusOffset"),
    $isCollapsed: dartx.isCollapsed = Symbol("dartx.isCollapsed"),
    $rangeCount: dartx.rangeCount = Symbol("dartx.rangeCount"),
    $addRange: dartx.addRange = Symbol("dartx.addRange"),
    $collapseToEnd: dartx.collapseToEnd = Symbol("dartx.collapseToEnd"),
    $collapseToStart: dartx.collapseToStart = Symbol("dartx.collapseToStart"),
    $containsNode: dartx.containsNode = Symbol("dartx.containsNode"),
    $deleteFromDocument: dartx.deleteFromDocument = Symbol("dartx.deleteFromDocument"),
    $empty: dartx.empty = Symbol("dartx.empty"),
    $extend: dartx.extend = Symbol("dartx.extend"),
    $getRangeAt: dartx.getRangeAt = Symbol("dartx.getRangeAt"),
    $modify: dartx.modify = Symbol("dartx.modify"),
    $removeAllRanges: dartx.removeAllRanges = Symbol("dartx.removeAllRanges"),
    $selectAllChildren: dartx.selectAllChildren = Symbol("dartx.selectAllChildren"),
    $setBaseAndExtent: dartx.setBaseAndExtent = Symbol("dartx.setBaseAndExtent"),
    $setPosition: dartx.setPosition = Symbol("dartx.setPosition"),
    $scriptUrl: dartx.scriptUrl = Symbol("dartx.scriptUrl"),
    $controller: dartx.controller = Symbol("dartx.controller"),
    $getRegistration: dartx.getRegistration = Symbol("dartx.getRegistration"),
    $getRegistrations: dartx.getRegistrations = Symbol("dartx.getRegistrations"),
    $clients: dartx.clients = Symbol("dartx.clients"),
    $registration: dartx.registration = Symbol("dartx.registration"),
    $skipWaiting: dartx.skipWaiting = Symbol("dartx.skipWaiting"),
    $onActivate: dartx.onActivate = Symbol("dartx.onActivate"),
    $onFetch: dartx.onFetch = Symbol("dartx.onFetch"),
    $onForeignfetch: dartx.onForeignfetch = Symbol("dartx.onForeignfetch"),
    $onInstall: dartx.onInstall = Symbol("dartx.onInstall"),
    $backgroundFetch: dartx.backgroundFetch = Symbol("dartx.backgroundFetch"),
    $installing: dartx.installing = Symbol("dartx.installing"),
    $navigationPreload: dartx.navigationPreload = Symbol("dartx.navigationPreload"),
    $paymentManager: dartx.paymentManager = Symbol("dartx.paymentManager"),
    $pushManager: dartx.pushManager = Symbol("dartx.pushManager"),
    $sync: dartx.sync = Symbol("dartx.sync"),
    $waiting: dartx.waiting = Symbol("dartx.waiting"),
    $getNotifications: dartx.getNotifications = Symbol("dartx.getNotifications"),
    $showNotification: dartx.showNotification = Symbol("dartx.showNotification"),
    $unregister: dartx.unregister = Symbol("dartx.unregister"),
    $delegatesFocus: dartx.delegatesFocus = Symbol("dartx.delegatesFocus"),
    $olderShadowRoot: dartx.olderShadowRoot = Symbol("dartx.olderShadowRoot"),
    $console: dartx.console = Symbol("dartx.console"),
    $resetStyleInheritance: dartx.resetStyleInheritance = Symbol("dartx.resetStyleInheritance"),
    $applyAuthorStyles: dartx.applyAuthorStyles = Symbol("dartx.applyAuthorStyles"),
    $byteLength: dartx.byteLength = Symbol("dartx.byteLength"),
    $onConnect: dartx.onConnect = Symbol("dartx.onConnect"),
    _assignedNodes_1: dart.privateName(html$, "_assignedNodes_1"),
    _assignedNodes_2: dart.privateName(html$, "_assignedNodes_2"),
    $assignedNodes: dartx.assignedNodes = Symbol("dartx.assignedNodes"),
    $appendWindowEnd: dartx.appendWindowEnd = Symbol("dartx.appendWindowEnd"),
    $appendWindowStart: dartx.appendWindowStart = Symbol("dartx.appendWindowStart"),
    $timestampOffset: dartx.timestampOffset = Symbol("dartx.timestampOffset"),
    $trackDefaults: dartx.trackDefaults = Symbol("dartx.trackDefaults"),
    $updating: dartx.updating = Symbol("dartx.updating"),
    $appendBuffer: dartx.appendBuffer = Symbol("dartx.appendBuffer"),
    $appendTypedData: dartx.appendTypedData = Symbol("dartx.appendTypedData"),
    $addFromString: dartx.addFromString = Symbol("dartx.addFromString"),
    $addFromUri: dartx.addFromUri = Symbol("dartx.addFromUri"),
    $audioTrack: dartx.audioTrack = Symbol("dartx.audioTrack"),
    $continuous: dartx.continuous = Symbol("dartx.continuous"),
    $grammars: dartx.grammars = Symbol("dartx.grammars"),
    $interimResults: dartx.interimResults = Symbol("dartx.interimResults"),
    $maxAlternatives: dartx.maxAlternatives = Symbol("dartx.maxAlternatives"),
    $onAudioEnd: dartx.onAudioEnd = Symbol("dartx.onAudioEnd"),
    $onAudioStart: dartx.onAudioStart = Symbol("dartx.onAudioStart"),
    $onEnd: dartx.onEnd = Symbol("dartx.onEnd"),
    $onNoMatch: dartx.onNoMatch = Symbol("dartx.onNoMatch"),
    $onResult: dartx.onResult = Symbol("dartx.onResult"),
    $onSoundEnd: dartx.onSoundEnd = Symbol("dartx.onSoundEnd"),
    $onSoundStart: dartx.onSoundStart = Symbol("dartx.onSoundStart"),
    $onSpeechEnd: dartx.onSpeechEnd = Symbol("dartx.onSpeechEnd"),
    $onSpeechStart: dartx.onSpeechStart = Symbol("dartx.onSpeechStart"),
    $onStart: dartx.onStart = Symbol("dartx.onStart"),
    $confidence: dartx.confidence = Symbol("dartx.confidence"),
    $transcript: dartx.transcript = Symbol("dartx.transcript"),
    $emma: dartx.emma = Symbol("dartx.emma"),
    $interpretation: dartx.interpretation = Symbol("dartx.interpretation"),
    $resultIndex: dartx.resultIndex = Symbol("dartx.resultIndex"),
    $results: dartx.results = Symbol("dartx.results"),
    $isFinal: dartx.isFinal = Symbol("dartx.isFinal"),
    _getVoices: dart.privateName(html$, "_getVoices"),
    $getVoices: dartx.getVoices = Symbol("dartx.getVoices"),
    $pending: dartx.pending = Symbol("dartx.pending"),
    $speaking: dartx.speaking = Symbol("dartx.speaking"),
    $charIndex: dartx.charIndex = Symbol("dartx.charIndex"),
    $utterance: dartx.utterance = Symbol("dartx.utterance"),
    $pitch: dartx.pitch = Symbol("dartx.pitch"),
    $rate: dartx.rate = Symbol("dartx.rate"),
    $voice: dartx.voice = Symbol("dartx.voice"),
    $onBoundary: dartx.onBoundary = Symbol("dartx.onBoundary"),
    $onMark: dartx.onMark = Symbol("dartx.onMark"),
    $onResume: dartx.onResume = Symbol("dartx.onResume"),
    $localService: dartx.localService = Symbol("dartx.localService"),
    $voiceUri: dartx.voiceUri = Symbol("dartx.voiceUri"),
    _setItem: dart.privateName(html$, "_setItem"),
    _removeItem: dart.privateName(html$, "_removeItem"),
    _key: dart.privateName(html$, "_key"),
    _length$3: dart.privateName(html$, "_length"),
    _initStorageEvent: dart.privateName(html$, "_initStorageEvent"),
    $storageArea: dartx.storageArea = Symbol("dartx.storageArea"),
    $estimate: dartx.estimate = Symbol("dartx.estimate"),
    $persist: dartx.persist = Symbol("dartx.persist"),
    $matchMedium: dartx.matchMedium = Symbol("dartx.matchMedium"),
    $getProperties: dartx.getProperties = Symbol("dartx.getProperties"),
    $lastChance: dartx.lastChance = Symbol("dartx.lastChance"),
    $getTags: dartx.getTags = Symbol("dartx.getTags"),
    $cellIndex: dartx.cellIndex = Symbol("dartx.cellIndex"),
    $headers: dartx.headers = Symbol("dartx.headers"),
    $span: dartx.span = Symbol("dartx.span"),
    _tBodies: dart.privateName(html$, "_tBodies"),
    $tBodies: dartx.tBodies = Symbol("dartx.tBodies"),
    _rows: dart.privateName(html$, "_rows"),
    $rows: dartx.rows = Symbol("dartx.rows"),
    $insertRow: dartx.insertRow = Symbol("dartx.insertRow"),
    $addRow: dartx.addRow = Symbol("dartx.addRow"),
    _createCaption: dart.privateName(html$, "_createCaption"),
    $createCaption: dartx.createCaption = Symbol("dartx.createCaption"),
    _createTBody: dart.privateName(html$, "_createTBody"),
    $createTBody: dartx.createTBody = Symbol("dartx.createTBody"),
    _createTFoot: dart.privateName(html$, "_createTFoot"),
    $createTFoot: dartx.createTFoot = Symbol("dartx.createTFoot"),
    _createTHead: dart.privateName(html$, "_createTHead"),
    $createTHead: dartx.createTHead = Symbol("dartx.createTHead"),
    _insertRow: dart.privateName(html$, "_insertRow"),
    _nativeCreateTBody: dart.privateName(html$, "_nativeCreateTBody"),
    $caption: dartx.caption = Symbol("dartx.caption"),
    $tFoot: dartx.tFoot = Symbol("dartx.tFoot"),
    $tHead: dartx.tHead = Symbol("dartx.tHead"),
    $deleteCaption: dartx.deleteCaption = Symbol("dartx.deleteCaption"),
    $deleteRow: dartx.deleteRow = Symbol("dartx.deleteRow"),
    $deleteTFoot: dartx.deleteTFoot = Symbol("dartx.deleteTFoot"),
    $deleteTHead: dartx.deleteTHead = Symbol("dartx.deleteTHead"),
    _cells: dart.privateName(html$, "_cells"),
    $cells: dartx.cells = Symbol("dartx.cells"),
    $insertCell: dartx.insertCell = Symbol("dartx.insertCell"),
    $addCell: dartx.addCell = Symbol("dartx.addCell"),
    _insertCell: dart.privateName(html$, "_insertCell"),
    $sectionRowIndex: dartx.sectionRowIndex = Symbol("dartx.sectionRowIndex"),
    $deleteCell: dartx.deleteCell = Symbol("dartx.deleteCell"),
    $containerId: dartx.containerId = Symbol("dartx.containerId"),
    $containerName: dartx.containerName = Symbol("dartx.containerName"),
    $containerSrc: dartx.containerSrc = Symbol("dartx.containerSrc"),
    $containerType: dartx.containerType = Symbol("dartx.containerType"),
    $cols: dartx.cols = Symbol("dartx.cols"),
    $textLength: dartx.textLength = Symbol("dartx.textLength"),
    $wrap: dartx.wrap = Symbol("dartx.wrap"),
    _initTextEvent: dart.privateName(html$, "_initTextEvent"),
    $actualBoundingBoxAscent: dartx.actualBoundingBoxAscent = Symbol("dartx.actualBoundingBoxAscent"),
    $actualBoundingBoxDescent: dartx.actualBoundingBoxDescent = Symbol("dartx.actualBoundingBoxDescent"),
    $actualBoundingBoxLeft: dartx.actualBoundingBoxLeft = Symbol("dartx.actualBoundingBoxLeft"),
    $actualBoundingBoxRight: dartx.actualBoundingBoxRight = Symbol("dartx.actualBoundingBoxRight"),
    $alphabeticBaseline: dartx.alphabeticBaseline = Symbol("dartx.alphabeticBaseline"),
    $emHeightAscent: dartx.emHeightAscent = Symbol("dartx.emHeightAscent"),
    $emHeightDescent: dartx.emHeightDescent = Symbol("dartx.emHeightDescent"),
    $fontBoundingBoxAscent: dartx.fontBoundingBoxAscent = Symbol("dartx.fontBoundingBoxAscent"),
    $fontBoundingBoxDescent: dartx.fontBoundingBoxDescent = Symbol("dartx.fontBoundingBoxDescent"),
    $hangingBaseline: dartx.hangingBaseline = Symbol("dartx.hangingBaseline"),
    $ideographicBaseline: dartx.ideographicBaseline = Symbol("dartx.ideographicBaseline"),
    $activeCues: dartx.activeCues = Symbol("dartx.activeCues"),
    $cues: dartx.cues = Symbol("dartx.cues"),
    $addCue: dartx.addCue = Symbol("dartx.addCue"),
    $removeCue: dartx.removeCue = Symbol("dartx.removeCue"),
    $onCueChange: dartx.onCueChange = Symbol("dartx.onCueChange"),
    $endTime: dartx.endTime = Symbol("dartx.endTime"),
    $pauseOnExit: dartx.pauseOnExit = Symbol("dartx.pauseOnExit"),
    $onEnter: dartx.onEnter = Symbol("dartx.onEnter"),
    $onExit: dartx.onExit = Symbol("dartx.onExit"),
    $getCueById: dartx.getCueById = Symbol("dartx.getCueById"),
    $end: dartx.end = Symbol("dartx.end"),
    $force: dartx.force = Symbol("dartx.force"),
    $identifier: dartx.identifier = Symbol("dartx.identifier"),
    _radiusX: dart.privateName(html$, "_radiusX"),
    _radiusY: dart.privateName(html$, "_radiusY"),
    $rotationAngle: dartx.rotationAngle = Symbol("dartx.rotationAngle"),
    __clientX: dart.privateName(html$, "__clientX"),
    __clientY: dart.privateName(html$, "__clientY"),
    __screenX: dart.privateName(html$, "__screenX"),
    __screenY: dart.privateName(html$, "__screenY"),
    __pageX: dart.privateName(html$, "__pageX"),
    __pageY: dart.privateName(html$, "__pageY"),
    __radiusX: dart.privateName(html$, "__radiusX"),
    __radiusY: dart.privateName(html$, "__radiusY"),
    $radiusX: dartx.radiusX = Symbol("dartx.radiusX"),
    $radiusY: dartx.radiusY = Symbol("dartx.radiusY"),
    $changedTouches: dartx.changedTouches = Symbol("dartx.changedTouches"),
    $targetTouches: dartx.targetTouches = Symbol("dartx.targetTouches"),
    $touches: dartx.touches = Symbol("dartx.touches"),
    $byteStreamTrackID: dartx.byteStreamTrackID = Symbol("dartx.byteStreamTrackID"),
    $kinds: dartx.kinds = Symbol("dartx.kinds"),
    $srclang: dartx.srclang = Symbol("dartx.srclang"),
    $propertyName: dartx.propertyName = Symbol("dartx.propertyName")
  };
  var S$3 = {
    $pseudoElement: dartx.pseudoElement = Symbol("dartx.pseudoElement"),
    $currentNode: dartx.currentNode = Symbol("dartx.currentNode"),
    $notifyLockAcquired: dartx.notifyLockAcquired = Symbol("dartx.notifyLockAcquired"),
    $notifyLockReleased: dartx.notifyLockReleased = Symbol("dartx.notifyLockReleased"),
    $pull: dartx.pull = Symbol("dartx.pull"),
    $searchParams: dartx.searchParams = Symbol("dartx.searchParams"),
    $getDevices: dartx.getDevices = Symbol("dartx.getDevices"),
    $getTransformTo: dartx.getTransformTo = Symbol("dartx.getTransformTo"),
    $deviceName: dartx.deviceName = Symbol("dartx.deviceName"),
    $isExternal: dartx.isExternal = Symbol("dartx.isExternal"),
    $requestSession: dartx.requestSession = Symbol("dartx.requestSession"),
    $supportsSession: dartx.supportsSession = Symbol("dartx.supportsSession"),
    $device: dartx.device = Symbol("dartx.device"),
    $capabilities: dartx.capabilities = Symbol("dartx.capabilities"),
    $depthFar: dartx.depthFar = Symbol("dartx.depthFar"),
    $depthNear: dartx.depthNear = Symbol("dartx.depthNear"),
    $displayName: dartx.displayName = Symbol("dartx.displayName"),
    $isPresenting: dartx.isPresenting = Symbol("dartx.isPresenting"),
    $stageParameters: dartx.stageParameters = Symbol("dartx.stageParameters"),
    $cancelAnimationFrame: dartx.cancelAnimationFrame = Symbol("dartx.cancelAnimationFrame"),
    $exitPresent: dartx.exitPresent = Symbol("dartx.exitPresent"),
    $getEyeParameters: dartx.getEyeParameters = Symbol("dartx.getEyeParameters"),
    $getFrameData: dartx.getFrameData = Symbol("dartx.getFrameData"),
    $getLayers: dartx.getLayers = Symbol("dartx.getLayers"),
    $requestAnimationFrame: dartx.requestAnimationFrame = Symbol("dartx.requestAnimationFrame"),
    $requestPresent: dartx.requestPresent = Symbol("dartx.requestPresent"),
    $submitFrame: dartx.submitFrame = Symbol("dartx.submitFrame"),
    $canPresent: dartx.canPresent = Symbol("dartx.canPresent"),
    $hasExternalDisplay: dartx.hasExternalDisplay = Symbol("dartx.hasExternalDisplay"),
    $maxLayers: dartx.maxLayers = Symbol("dartx.maxLayers"),
    $renderHeight: dartx.renderHeight = Symbol("dartx.renderHeight"),
    $renderWidth: dartx.renderWidth = Symbol("dartx.renderWidth"),
    $leftProjectionMatrix: dartx.leftProjectionMatrix = Symbol("dartx.leftProjectionMatrix"),
    $leftViewMatrix: dartx.leftViewMatrix = Symbol("dartx.leftViewMatrix"),
    $rightProjectionMatrix: dartx.rightProjectionMatrix = Symbol("dartx.rightProjectionMatrix"),
    $rightViewMatrix: dartx.rightViewMatrix = Symbol("dartx.rightViewMatrix"),
    $bounds: dartx.bounds = Symbol("dartx.bounds"),
    $emulatedHeight: dartx.emulatedHeight = Symbol("dartx.emulatedHeight"),
    $exclusive: dartx.exclusive = Symbol("dartx.exclusive"),
    $requestFrameOfReference: dartx.requestFrameOfReference = Symbol("dartx.requestFrameOfReference"),
    $session: dartx.session = Symbol("dartx.session"),
    $geometry: dartx.geometry = Symbol("dartx.geometry"),
    $sittingToStandingTransform: dartx.sittingToStandingTransform = Symbol("dartx.sittingToStandingTransform"),
    $sizeX: dartx.sizeX = Symbol("dartx.sizeX"),
    $sizeZ: dartx.sizeZ = Symbol("dartx.sizeZ"),
    $badInput: dartx.badInput = Symbol("dartx.badInput"),
    $customError: dartx.customError = Symbol("dartx.customError"),
    $patternMismatch: dartx.patternMismatch = Symbol("dartx.patternMismatch"),
    $rangeOverflow: dartx.rangeOverflow = Symbol("dartx.rangeOverflow"),
    $rangeUnderflow: dartx.rangeUnderflow = Symbol("dartx.rangeUnderflow"),
    $stepMismatch: dartx.stepMismatch = Symbol("dartx.stepMismatch"),
    $tooLong: dartx.tooLong = Symbol("dartx.tooLong"),
    $tooShort: dartx.tooShort = Symbol("dartx.tooShort"),
    $typeMismatch: dartx.typeMismatch = Symbol("dartx.typeMismatch"),
    $valid: dartx.valid = Symbol("dartx.valid"),
    $valueMissing: dartx.valueMissing = Symbol("dartx.valueMissing"),
    $poster: dartx.poster = Symbol("dartx.poster"),
    $videoHeight: dartx.videoHeight = Symbol("dartx.videoHeight"),
    $videoWidth: dartx.videoWidth = Symbol("dartx.videoWidth"),
    $decodedFrameCount: dartx.decodedFrameCount = Symbol("dartx.decodedFrameCount"),
    $droppedFrameCount: dartx.droppedFrameCount = Symbol("dartx.droppedFrameCount"),
    $getVideoPlaybackQuality: dartx.getVideoPlaybackQuality = Symbol("dartx.getVideoPlaybackQuality"),
    $enterFullscreen: dartx.enterFullscreen = Symbol("dartx.enterFullscreen"),
    $corruptedVideoFrames: dartx.corruptedVideoFrames = Symbol("dartx.corruptedVideoFrames"),
    $creationTime: dartx.creationTime = Symbol("dartx.creationTime"),
    $droppedVideoFrames: dartx.droppedVideoFrames = Symbol("dartx.droppedVideoFrames"),
    $totalVideoFrames: dartx.totalVideoFrames = Symbol("dartx.totalVideoFrames"),
    $sourceBuffer: dartx.sourceBuffer = Symbol("dartx.sourceBuffer"),
    $pageLeft: dartx.pageLeft = Symbol("dartx.pageLeft"),
    $pageTop: dartx.pageTop = Symbol("dartx.pageTop"),
    $align: dartx.align = Symbol("dartx.align"),
    $line: dartx.line = Symbol("dartx.line"),
    $snapToLines: dartx.snapToLines = Symbol("dartx.snapToLines"),
    $vertical: dartx.vertical = Symbol("dartx.vertical"),
    $getCueAsHtml: dartx.getCueAsHtml = Symbol("dartx.getCueAsHtml"),
    $lines: dartx.lines = Symbol("dartx.lines"),
    $regionAnchorX: dartx.regionAnchorX = Symbol("dartx.regionAnchorX"),
    $regionAnchorY: dartx.regionAnchorY = Symbol("dartx.regionAnchorY"),
    $viewportAnchorX: dartx.viewportAnchorX = Symbol("dartx.viewportAnchorX"),
    $viewportAnchorY: dartx.viewportAnchorY = Symbol("dartx.viewportAnchorY"),
    $extensions: dartx.extensions = Symbol("dartx.extensions"),
    _deltaX: dart.privateName(html$, "_deltaX"),
    _deltaY: dart.privateName(html$, "_deltaY"),
    $deltaZ: dartx.deltaZ = Symbol("dartx.deltaZ"),
    $deltaMode: dartx.deltaMode = Symbol("dartx.deltaMode"),
    _wheelDelta: dart.privateName(html$, "_wheelDelta"),
    _wheelDeltaX: dart.privateName(html$, "_wheelDeltaX"),
    _hasInitMouseScrollEvent: dart.privateName(html$, "_hasInitMouseScrollEvent"),
    _initMouseScrollEvent: dart.privateName(html$, "_initMouseScrollEvent"),
    _hasInitWheelEvent: dart.privateName(html$, "_hasInitWheelEvent"),
    _initWheelEvent: dart.privateName(html$, "_initWheelEvent"),
    $animationFrame: dartx.animationFrame = Symbol("dartx.animationFrame"),
    $document: dartx.document = Symbol("dartx.document"),
    _open2: dart.privateName(html$, "_open2"),
    _open3: dart.privateName(html$, "_open3"),
    _location: dart.privateName(html$, "_location"),
    _ensureRequestAnimationFrame: dart.privateName(html$, "_ensureRequestAnimationFrame"),
    _requestAnimationFrame: dart.privateName(html$, "_requestAnimationFrame"),
    _cancelAnimationFrame: dart.privateName(html$, "_cancelAnimationFrame"),
    _requestFileSystem: dart.privateName(html$, "_requestFileSystem"),
    $requestFileSystem: dartx.requestFileSystem = Symbol("dartx.requestFileSystem"),
    $animationWorklet: dartx.animationWorklet = Symbol("dartx.animationWorklet"),
    $applicationCache: dartx.applicationCache = Symbol("dartx.applicationCache"),
    $audioWorklet: dartx.audioWorklet = Symbol("dartx.audioWorklet"),
    $cookieStore: dartx.cookieStore = Symbol("dartx.cookieStore"),
    $customElements: dartx.customElements = Symbol("dartx.customElements"),
    $defaultStatus: dartx.defaultStatus = Symbol("dartx.defaultStatus"),
    $defaultstatus: dartx.defaultstatus = Symbol("dartx.defaultstatus"),
    $external: dartx.external = Symbol("dartx.external"),
    $history: dartx.history = Symbol("dartx.history"),
    $innerHeight: dartx.innerHeight = Symbol("dartx.innerHeight"),
    $innerWidth: dartx.innerWidth = Symbol("dartx.innerWidth"),
    $localStorage: dartx.localStorage = Symbol("dartx.localStorage"),
    $locationbar: dartx.locationbar = Symbol("dartx.locationbar"),
    $menubar: dartx.menubar = Symbol("dartx.menubar"),
    $offscreenBuffering: dartx.offscreenBuffering = Symbol("dartx.offscreenBuffering"),
    _get_opener: dart.privateName(html$, "_get_opener"),
    $opener: dartx.opener = Symbol("dartx.opener"),
    $outerHeight: dartx.outerHeight = Symbol("dartx.outerHeight"),
    $outerWidth: dartx.outerWidth = Symbol("dartx.outerWidth"),
    _pageXOffset: dart.privateName(html$, "_pageXOffset"),
    _pageYOffset: dart.privateName(html$, "_pageYOffset"),
    _get_parent: dart.privateName(html$, "_get_parent"),
    $screenLeft: dartx.screenLeft = Symbol("dartx.screenLeft"),
    $screenTop: dartx.screenTop = Symbol("dartx.screenTop"),
    $screenX: dartx.screenX = Symbol("dartx.screenX"),
    $screenY: dartx.screenY = Symbol("dartx.screenY"),
    $scrollbars: dartx.scrollbars = Symbol("dartx.scrollbars"),
    _get_self: dart.privateName(html$, "_get_self"),
    $sessionStorage: dartx.sessionStorage = Symbol("dartx.sessionStorage"),
    $speechSynthesis: dartx.speechSynthesis = Symbol("dartx.speechSynthesis"),
    $statusbar: dartx.statusbar = Symbol("dartx.statusbar"),
    $styleMedia: dartx.styleMedia = Symbol("dartx.styleMedia"),
    $toolbar: dartx.toolbar = Symbol("dartx.toolbar"),
    _get_top: dart.privateName(html$, "_get_top"),
    $visualViewport: dartx.visualViewport = Symbol("dartx.visualViewport"),
    __getter___1: dart.privateName(html$, "__getter___1"),
    __getter___2: dart.privateName(html$, "__getter___2"),
    $alert: dartx.alert = Symbol("dartx.alert"),
    $cancelIdleCallback: dartx.cancelIdleCallback = Symbol("dartx.cancelIdleCallback"),
    $confirm: dartx.confirm = Symbol("dartx.confirm"),
    $find: dartx.find = Symbol("dartx.find"),
    $getComputedStyleMap: dartx.getComputedStyleMap = Symbol("dartx.getComputedStyleMap"),
    $getMatchedCssRules: dartx.getMatchedCssRules = Symbol("dartx.getMatchedCssRules"),
    $matchMedia: dartx.matchMedia = Symbol("dartx.matchMedia"),
    $moveBy: dartx.moveBy = Symbol("dartx.moveBy"),
    _openDatabase: dart.privateName(html$, "_openDatabase"),
    $print: dartx.print = Symbol("dartx.print"),
    _requestIdleCallback_1: dart.privateName(html$, "_requestIdleCallback_1"),
    _requestIdleCallback_2: dart.privateName(html$, "_requestIdleCallback_2"),
    $requestIdleCallback: dartx.requestIdleCallback = Symbol("dartx.requestIdleCallback"),
    $resizeBy: dartx.resizeBy = Symbol("dartx.resizeBy"),
    $resizeTo: dartx.resizeTo = Symbol("dartx.resizeTo"),
    _scroll_4: dart.privateName(html$, "_scroll_4"),
    _scroll_5: dart.privateName(html$, "_scroll_5"),
    _scrollBy_4: dart.privateName(html$, "_scrollBy_4"),
    _scrollBy_5: dart.privateName(html$, "_scrollBy_5"),
    _scrollTo_4: dart.privateName(html$, "_scrollTo_4"),
    _scrollTo_5: dart.privateName(html$, "_scrollTo_5"),
    __requestFileSystem: dart.privateName(html$, "__requestFileSystem"),
    _resolveLocalFileSystemUrl: dart.privateName(html$, "_resolveLocalFileSystemUrl"),
    $resolveLocalFileSystemUrl: dartx.resolveLocalFileSystemUrl = Symbol("dartx.resolveLocalFileSystemUrl"),
    $onContentLoaded: dartx.onContentLoaded = Symbol("dartx.onContentLoaded"),
    $onDeviceMotion: dartx.onDeviceMotion = Symbol("dartx.onDeviceMotion"),
    $onDeviceOrientation: dartx.onDeviceOrientation = Symbol("dartx.onDeviceOrientation"),
    $onPageHide: dartx.onPageHide = Symbol("dartx.onPageHide"),
    $onPageShow: dartx.onPageShow = Symbol("dartx.onPageShow"),
    $onAnimationEnd: dartx.onAnimationEnd = Symbol("dartx.onAnimationEnd"),
    $onAnimationIteration: dartx.onAnimationIteration = Symbol("dartx.onAnimationIteration"),
    $onAnimationStart: dartx.onAnimationStart = Symbol("dartx.onAnimationStart"),
    $onBeforeUnload: dartx.onBeforeUnload = Symbol("dartx.onBeforeUnload"),
    $openDatabase: dartx.openDatabase = Symbol("dartx.openDatabase"),
    $pageXOffset: dartx.pageXOffset = Symbol("dartx.pageXOffset"),
    $pageYOffset: dartx.pageYOffset = Symbol("dartx.pageYOffset"),
    $scrollX: dartx.scrollX = Symbol("dartx.scrollX"),
    $scrollY: dartx.scrollY = Symbol("dartx.scrollY"),
    _BeforeUnloadEventStreamProvider__eventType: dart.privateName(html$, "_BeforeUnloadEventStreamProvider._eventType"),
    _returnValue: dart.privateName(html$, "_returnValue"),
    wrapped: dart.privateName(html$, "_WrappedEvent.wrapped"),
    _eventType: dart.privateName(html$, "_BeforeUnloadEventStreamProvider._eventType"),
    _eventType$1: dart.privateName(html$, "_eventType"),
    $focused: dartx.focused = Symbol("dartx.focused"),
    $navigate: dartx.navigate = Symbol("dartx.navigate"),
    $createExpression: dartx.createExpression = Symbol("dartx.createExpression"),
    $createNSResolver: dartx.createNSResolver = Symbol("dartx.createNSResolver"),
    $evaluate: dartx.evaluate = Symbol("dartx.evaluate"),
    $lookupNamespaceUri: dartx.lookupNamespaceUri = Symbol("dartx.lookupNamespaceUri"),
    $booleanValue: dartx.booleanValue = Symbol("dartx.booleanValue"),
    $invalidIteratorState: dartx.invalidIteratorState = Symbol("dartx.invalidIteratorState"),
    $numberValue: dartx.numberValue = Symbol("dartx.numberValue"),
    $resultType: dartx.resultType = Symbol("dartx.resultType"),
    $singleNodeValue: dartx.singleNodeValue = Symbol("dartx.singleNodeValue"),
    $snapshotLength: dartx.snapshotLength = Symbol("dartx.snapshotLength"),
    $stringValue: dartx.stringValue = Symbol("dartx.stringValue"),
    $iterateNext: dartx.iterateNext = Symbol("dartx.iterateNext"),
    $snapshotItem: dartx.snapshotItem = Symbol("dartx.snapshotItem"),
    $serializeToString: dartx.serializeToString = Symbol("dartx.serializeToString"),
    $clearParameters: dartx.clearParameters = Symbol("dartx.clearParameters"),
    $getParameter: dartx.getParameter = Symbol("dartx.getParameter"),
    $importStylesheet: dartx.importStylesheet = Symbol("dartx.importStylesheet"),
    $removeParameter: dartx.removeParameter = Symbol("dartx.removeParameter"),
    $setParameter: dartx.setParameter = Symbol("dartx.setParameter"),
    $transformToDocument: dartx.transformToDocument = Symbol("dartx.transformToDocument"),
    $transformToFragment: dartx.transformToFragment = Symbol("dartx.transformToFragment"),
    $getBudget: dartx.getBudget = Symbol("dartx.getBudget"),
    $getCost: dartx.getCost = Symbol("dartx.getCost"),
    $reserve: dartx.reserve = Symbol("dartx.reserve"),
    $read: dartx.read = Symbol("dartx.read"),
    $readText: dartx.readText = Symbol("dartx.readText"),
    $writeText: dartx.writeText = Symbol("dartx.writeText"),
    $getNamedItem: dartx.getNamedItem = Symbol("dartx.getNamedItem"),
    $getNamedItemNS: dartx.getNamedItemNS = Symbol("dartx.getNamedItemNS"),
    $removeNamedItem: dartx.removeNamedItem = Symbol("dartx.removeNamedItem"),
    $removeNamedItemNS: dartx.removeNamedItemNS = Symbol("dartx.removeNamedItemNS"),
    $setNamedItem: dartx.setNamedItem = Symbol("dartx.setNamedItem"),
    $setNamedItemNS: dartx.setNamedItemNS = Symbol("dartx.setNamedItemNS"),
    $cache: dartx.cache = Symbol("dartx.cache"),
    $redirect: dartx.redirect = Symbol("dartx.redirect"),
    _matches: dart.privateName(html$, "_matches"),
    _namespace: dart.privateName(html$, "_namespace"),
    _attr: dart.privateName(html$, "_attr"),
    _strip: dart.privateName(html$, "_strip"),
    _toHyphenedName: dart.privateName(html$, "_toHyphenedName"),
    _toCamelCase: dart.privateName(html$, "_toCamelCase"),
    _addOrSubtractToBoxModel: dart.privateName(html$, "_addOrSubtractToBoxModel"),
    _elementList: dart.privateName(html$, "_elementList"),
    _sets: dart.privateName(html$, "_sets"),
    _validateToken: dart.privateName(html_common, "_validateToken"),
    _unit: dart.privateName(html$, "_unit"),
    _eventType$2: dart.privateName(html$, "EventStreamProvider._eventType"),
    _target$2: dart.privateName(html$, "_target"),
    _useCapture: dart.privateName(html$, "_useCapture"),
    _targetList: dart.privateName(html$, "_targetList"),
    _pauseCount$1: dart.privateName(html$, "_pauseCount"),
    _onData$3: dart.privateName(html$, "_onData"),
    _tryResume: dart.privateName(html$, "_tryResume"),
    _canceled: dart.privateName(html$, "_canceled"),
    _unlisten: dart.privateName(html$, "_unlisten"),
    _type$5: dart.privateName(html$, "_type"),
    _streamController: dart.privateName(html$, "_streamController"),
    _parent$2: dart.privateName(html$, "_parent"),
    _currentTarget: dart.privateName(html$, "_currentTarget"),
    _shadowAltKey: dart.privateName(html$, "_shadowAltKey"),
    _shadowCharCode: dart.privateName(html$, "_shadowCharCode"),
    _shadowKeyCode: dart.privateName(html$, "_shadowKeyCode"),
    _realAltKey: dart.privateName(html$, "_realAltKey"),
    _realCharCode: dart.privateName(html$, "_realCharCode"),
    _realKeyCode: dart.privateName(html$, "_realKeyCode"),
    _shadowKeyIdentifier: dart.privateName(html$, "_shadowKeyIdentifier"),
    _keyIdentifier: dart.privateName(html$, "_keyIdentifier"),
    _controller$2: dart.privateName(html$, "_controller"),
    _subscriptions: dart.privateName(html$, "_subscriptions"),
    _eventTypeGetter: dart.privateName(html$, "_CustomEventStreamProvider._eventTypeGetter"),
    _eventTypeGetter$1: dart.privateName(html$, "_eventTypeGetter"),
    _keyDownList: dart.privateName(html$, "_keyDownList"),
    _stream$3: dart.privateName(html$, "_stream"),
    _capsLockOn: dart.privateName(html$, "_capsLockOn"),
    _determineKeyCodeForKeypress: dart.privateName(html$, "_determineKeyCodeForKeypress"),
    _findCharCodeKeyDown: dart.privateName(html$, "_findCharCodeKeyDown"),
    _firesKeyPressEvent: dart.privateName(html$, "_firesKeyPressEvent"),
    _normalizeKeyCodes: dart.privateName(html$, "_normalizeKeyCodes"),
    _validators: dart.privateName(html$, "_validators"),
    _templateAttrs: dart.privateName(html$, "_templateAttrs"),
    _list$19: dart.privateName(html$, "_list"),
    _iterator$3: dart.privateName(html$, "_iterator"),
    _current$4: dart.privateName(html$, "_current"),
    _array: dart.privateName(html$, "_array"),
    _isConsoleDefined: dart.privateName(html$, "_isConsoleDefined"),
    _interceptor: dart.privateName(html$, "_interceptor"),
    _constructor: dart.privateName(html$, "_constructor"),
    _nativeType: dart.privateName(html$, "_nativeType"),
    _window: dart.privateName(html$, "_window"),
    _history: dart.privateName(html$, "_history"),
    _hiddenAnchor: dart.privateName(html$, "_hiddenAnchor"),
    _loc: dart.privateName(html$, "_loc"),
    _removeNode: dart.privateName(html$, "_removeNode"),
    _sanitizeElement: dart.privateName(html$, "_sanitizeElement"),
    _sanitizeUntrustedElement: dart.privateName(html$, "_sanitizeUntrustedElement"),
    alpha: dart.privateName(html_common, "ContextAttributes.alpha"),
    antialias: dart.privateName(html_common, "ContextAttributes.antialias"),
    depth: dart.privateName(html_common, "ContextAttributes.depth"),
    premultipliedAlpha: dart.privateName(html_common, "ContextAttributes.premultipliedAlpha"),
    preserveDrawingBuffer: dart.privateName(html_common, "ContextAttributes.preserveDrawingBuffer"),
    stencil: dart.privateName(html_common, "ContextAttributes.stencil"),
    failIfMajorPerformanceCaveat: dart.privateName(html_common, "ContextAttributes.failIfMajorPerformanceCaveat"),
    data$1: dart.privateName(html_common, "_TypedImageData.data"),
    height$1: dart.privateName(html_common, "_TypedImageData.height"),
    width$1: dart.privateName(html_common, "_TypedImageData.width"),
    _childNodes: dart.privateName(html_common, "_childNodes"),
    _node: dart.privateName(html_common, "_node"),
    _iterable$2: dart.privateName(html_common, "_iterable"),
    _filtered: dart.privateName(html_common, "_filtered"),
    $farthestViewportElement: dartx.farthestViewportElement = Symbol("dartx.farthestViewportElement"),
    $nearestViewportElement: dartx.nearestViewportElement = Symbol("dartx.nearestViewportElement"),
    $getBBox: dartx.getBBox = Symbol("dartx.getBBox"),
    $getCtm: dartx.getCtm = Symbol("dartx.getCtm"),
    $getScreenCtm: dartx.getScreenCtm = Symbol("dartx.getScreenCtm"),
    $requiredExtensions: dartx.requiredExtensions = Symbol("dartx.requiredExtensions"),
    $systemLanguage: dartx.systemLanguage = Symbol("dartx.systemLanguage"),
    _children$1: dart.privateName(svg$, "_children"),
    _svgClassName: dart.privateName(svg$, "_svgClassName"),
    $ownerSvgElement: dartx.ownerSvgElement = Symbol("dartx.ownerSvgElement"),
    $viewportElement: dartx.viewportElement = Symbol("dartx.viewportElement"),
    $unitType: dartx.unitType = Symbol("dartx.unitType"),
    $valueAsString: dartx.valueAsString = Symbol("dartx.valueAsString"),
    $valueInSpecifiedUnits: dartx.valueInSpecifiedUnits = Symbol("dartx.valueInSpecifiedUnits"),
    $convertToSpecifiedUnits: dartx.convertToSpecifiedUnits = Symbol("dartx.convertToSpecifiedUnits"),
    $newValueSpecifiedUnits: dartx.newValueSpecifiedUnits = Symbol("dartx.newValueSpecifiedUnits"),
    $targetElement: dartx.targetElement = Symbol("dartx.targetElement"),
    $beginElement: dartx.beginElement = Symbol("dartx.beginElement"),
    $beginElementAt: dartx.beginElementAt = Symbol("dartx.beginElementAt"),
    $endElement: dartx.endElement = Symbol("dartx.endElement"),
    $endElementAt: dartx.endElementAt = Symbol("dartx.endElementAt"),
    $getCurrentTime: dartx.getCurrentTime = Symbol("dartx.getCurrentTime"),
    $getSimpleDuration: dartx.getSimpleDuration = Symbol("dartx.getSimpleDuration"),
    $getStartTime: dartx.getStartTime = Symbol("dartx.getStartTime"),
    $animVal: dartx.animVal = Symbol("dartx.animVal"),
    $baseVal: dartx.baseVal = Symbol("dartx.baseVal"),
    $cx: dartx.cx = Symbol("dartx.cx"),
    $cy: dartx.cy = Symbol("dartx.cy"),
    $r: dartx.r = Symbol("dartx.r"),
    $pathLength: dartx.pathLength = Symbol("dartx.pathLength"),
    $getPointAtLength: dartx.getPointAtLength = Symbol("dartx.getPointAtLength"),
    $getTotalLength: dartx.getTotalLength = Symbol("dartx.getTotalLength"),
    $isPointInFill: dartx.isPointInFill = Symbol("dartx.isPointInFill"),
    $clipPathUnits: dartx.clipPathUnits = Symbol("dartx.clipPathUnits"),
    $rx: dartx.rx = Symbol("dartx.rx"),
    $ry: dartx.ry = Symbol("dartx.ry"),
    $in1: dartx.in1 = Symbol("dartx.in1"),
    $in2: dartx.in2 = Symbol("dartx.in2"),
    $k1: dartx.k1 = Symbol("dartx.k1"),
    $k2: dartx.k2 = Symbol("dartx.k2"),
    $k3: dartx.k3 = Symbol("dartx.k3"),
    $k4: dartx.k4 = Symbol("dartx.k4"),
    $operator: dartx.operator = Symbol("dartx.operator"),
    $bias: dartx.bias = Symbol("dartx.bias"),
    $divisor: dartx.divisor = Symbol("dartx.divisor"),
    $edgeMode: dartx.edgeMode = Symbol("dartx.edgeMode"),
    $kernelMatrix: dartx.kernelMatrix = Symbol("dartx.kernelMatrix"),
    $kernelUnitLengthX: dartx.kernelUnitLengthX = Symbol("dartx.kernelUnitLengthX"),
    $kernelUnitLengthY: dartx.kernelUnitLengthY = Symbol("dartx.kernelUnitLengthY"),
    $orderX: dartx.orderX = Symbol("dartx.orderX"),
    $orderY: dartx.orderY = Symbol("dartx.orderY"),
    $preserveAlpha: dartx.preserveAlpha = Symbol("dartx.preserveAlpha"),
    $targetX: dartx.targetX = Symbol("dartx.targetX"),
    $targetY: dartx.targetY = Symbol("dartx.targetY"),
    $diffuseConstant: dartx.diffuseConstant = Symbol("dartx.diffuseConstant"),
    $surfaceScale: dartx.surfaceScale = Symbol("dartx.surfaceScale"),
    $xChannelSelector: dartx.xChannelSelector = Symbol("dartx.xChannelSelector"),
    $yChannelSelector: dartx.yChannelSelector = Symbol("dartx.yChannelSelector"),
    $azimuth: dartx.azimuth = Symbol("dartx.azimuth"),
    $elevation: dartx.elevation = Symbol("dartx.elevation"),
    $stdDeviationX: dartx.stdDeviationX = Symbol("dartx.stdDeviationX"),
    $stdDeviationY: dartx.stdDeviationY = Symbol("dartx.stdDeviationY"),
    $setStdDeviation: dartx.setStdDeviation = Symbol("dartx.setStdDeviation"),
    $preserveAspectRatio: dartx.preserveAspectRatio = Symbol("dartx.preserveAspectRatio"),
    $dx: dartx.dx = Symbol("dartx.dx"),
    $dy: dartx.dy = Symbol("dartx.dy"),
    $specularConstant: dartx.specularConstant = Symbol("dartx.specularConstant"),
    $specularExponent: dartx.specularExponent = Symbol("dartx.specularExponent"),
    $limitingConeAngle: dartx.limitingConeAngle = Symbol("dartx.limitingConeAngle"),
    $pointsAtX: dartx.pointsAtX = Symbol("dartx.pointsAtX"),
    $pointsAtY: dartx.pointsAtY = Symbol("dartx.pointsAtY"),
    $pointsAtZ: dartx.pointsAtZ = Symbol("dartx.pointsAtZ"),
    $baseFrequencyX: dartx.baseFrequencyX = Symbol("dartx.baseFrequencyX"),
    $baseFrequencyY: dartx.baseFrequencyY = Symbol("dartx.baseFrequencyY"),
    $numOctaves: dartx.numOctaves = Symbol("dartx.numOctaves"),
    $seed: dartx.seed = Symbol("dartx.seed"),
    $stitchTiles: dartx.stitchTiles = Symbol("dartx.stitchTiles"),
    $filterUnits: dartx.filterUnits = Symbol("dartx.filterUnits"),
    $primitiveUnits: dartx.primitiveUnits = Symbol("dartx.primitiveUnits"),
    $viewBox: dartx.viewBox = Symbol("dartx.viewBox"),
    $numberOfItems: dartx.numberOfItems = Symbol("dartx.numberOfItems"),
    __setter__$1: dart.privateName(svg$, "__setter__"),
    $appendItem: dartx.appendItem = Symbol("dartx.appendItem"),
    $getItem: dartx.getItem = Symbol("dartx.getItem"),
    $initialize: dartx.initialize = Symbol("dartx.initialize"),
    $insertItemBefore: dartx.insertItemBefore = Symbol("dartx.insertItemBefore"),
    $removeItem: dartx.removeItem = Symbol("dartx.removeItem"),
    $replaceItem: dartx.replaceItem = Symbol("dartx.replaceItem"),
    $x1: dartx.x1 = Symbol("dartx.x1"),
    $x2: dartx.x2 = Symbol("dartx.x2"),
    $y1: dartx.y1 = Symbol("dartx.y1"),
    $y2: dartx.y2 = Symbol("dartx.y2"),
    $gradientTransform: dartx.gradientTransform = Symbol("dartx.gradientTransform"),
    $gradientUnits: dartx.gradientUnits = Symbol("dartx.gradientUnits"),
    $spreadMethod: dartx.spreadMethod = Symbol("dartx.spreadMethod"),
    $markerHeight: dartx.markerHeight = Symbol("dartx.markerHeight"),
    $markerUnits: dartx.markerUnits = Symbol("dartx.markerUnits"),
    $markerWidth: dartx.markerWidth = Symbol("dartx.markerWidth"),
    $orientAngle: dartx.orientAngle = Symbol("dartx.orientAngle"),
    $orientType: dartx.orientType = Symbol("dartx.orientType"),
    $refX: dartx.refX = Symbol("dartx.refX"),
    $refY: dartx.refY = Symbol("dartx.refY"),
    $setOrientToAngle: dartx.setOrientToAngle = Symbol("dartx.setOrientToAngle"),
    $setOrientToAuto: dartx.setOrientToAuto = Symbol("dartx.setOrientToAuto"),
    $maskContentUnits: dartx.maskContentUnits = Symbol("dartx.maskContentUnits"),
    $maskUnits: dartx.maskUnits = Symbol("dartx.maskUnits"),
    $scaleNonUniform: dartx.scaleNonUniform = Symbol("dartx.scaleNonUniform"),
    $patternContentUnits: dartx.patternContentUnits = Symbol("dartx.patternContentUnits"),
    $patternTransform: dartx.patternTransform = Symbol("dartx.patternTransform"),
    $patternUnits: dartx.patternUnits = Symbol("dartx.patternUnits"),
    $animatedPoints: dartx.animatedPoints = Symbol("dartx.animatedPoints"),
    $points: dartx.points = Symbol("dartx.points"),
    $meetOrSlice: dartx.meetOrSlice = Symbol("dartx.meetOrSlice"),
    $fr: dartx.fr = Symbol("dartx.fr"),
    $fx: dartx.fx = Symbol("dartx.fx"),
    $fy: dartx.fy = Symbol("dartx.fy"),
    $gradientOffset: dartx.gradientOffset = Symbol("dartx.gradientOffset"),
    _element$3: dart.privateName(svg$, "_element"),
    $currentScale: dartx.currentScale = Symbol("dartx.currentScale"),
    $currentTranslate: dartx.currentTranslate = Symbol("dartx.currentTranslate"),
    $animationsPaused: dartx.animationsPaused = Symbol("dartx.animationsPaused"),
    $checkEnclosure: dartx.checkEnclosure = Symbol("dartx.checkEnclosure"),
    $checkIntersection: dartx.checkIntersection = Symbol("dartx.checkIntersection"),
    $createSvgAngle: dartx.createSvgAngle = Symbol("dartx.createSvgAngle"),
    $createSvgLength: dartx.createSvgLength = Symbol("dartx.createSvgLength"),
    $createSvgMatrix: dartx.createSvgMatrix = Symbol("dartx.createSvgMatrix"),
    $createSvgNumber: dartx.createSvgNumber = Symbol("dartx.createSvgNumber"),
    $createSvgPoint: dartx.createSvgPoint = Symbol("dartx.createSvgPoint"),
    $createSvgRect: dartx.createSvgRect = Symbol("dartx.createSvgRect"),
    $createSvgTransform: dartx.createSvgTransform = Symbol("dartx.createSvgTransform"),
    $createSvgTransformFromMatrix: dartx.createSvgTransformFromMatrix = Symbol("dartx.createSvgTransformFromMatrix"),
    $deselectAll: dartx.deselectAll = Symbol("dartx.deselectAll"),
    $forceRedraw: dartx.forceRedraw = Symbol("dartx.forceRedraw"),
    $getEnclosureList: dartx.getEnclosureList = Symbol("dartx.getEnclosureList"),
    $getIntersectionList: dartx.getIntersectionList = Symbol("dartx.getIntersectionList"),
    $pauseAnimations: dartx.pauseAnimations = Symbol("dartx.pauseAnimations"),
    $setCurrentTime: dartx.setCurrentTime = Symbol("dartx.setCurrentTime"),
    $suspendRedraw: dartx.suspendRedraw = Symbol("dartx.suspendRedraw"),
    $unpauseAnimations: dartx.unpauseAnimations = Symbol("dartx.unpauseAnimations"),
    $unsuspendRedraw: dartx.unsuspendRedraw = Symbol("dartx.unsuspendRedraw"),
    $unsuspendRedrawAll: dartx.unsuspendRedrawAll = Symbol("dartx.unsuspendRedrawAll"),
    $zoomAndPan: dartx.zoomAndPan = Symbol("dartx.zoomAndPan"),
    $lengthAdjust: dartx.lengthAdjust = Symbol("dartx.lengthAdjust"),
    $getCharNumAtPosition: dartx.getCharNumAtPosition = Symbol("dartx.getCharNumAtPosition"),
    $getComputedTextLength: dartx.getComputedTextLength = Symbol("dartx.getComputedTextLength"),
    $getEndPositionOfChar: dartx.getEndPositionOfChar = Symbol("dartx.getEndPositionOfChar"),
    $getExtentOfChar: dartx.getExtentOfChar = Symbol("dartx.getExtentOfChar"),
    $getNumberOfChars: dartx.getNumberOfChars = Symbol("dartx.getNumberOfChars"),
    $getRotationOfChar: dartx.getRotationOfChar = Symbol("dartx.getRotationOfChar"),
    $getStartPositionOfChar: dartx.getStartPositionOfChar = Symbol("dartx.getStartPositionOfChar"),
    $getSubStringLength: dartx.getSubStringLength = Symbol("dartx.getSubStringLength"),
    $selectSubString: dartx.selectSubString = Symbol("dartx.selectSubString"),
    $spacing: dartx.spacing = Symbol("dartx.spacing"),
    $setMatrix: dartx.setMatrix = Symbol("dartx.setMatrix"),
    $setRotate: dartx.setRotate = Symbol("dartx.setRotate"),
    $setScale: dartx.setScale = Symbol("dartx.setScale"),
    $setSkewX: dartx.setSkewX = Symbol("dartx.setSkewX"),
    $setSkewY: dartx.setSkewY = Symbol("dartx.setSkewY"),
    $setTranslate: dartx.setTranslate = Symbol("dartx.setTranslate"),
    $consolidate: dartx.consolidate = Symbol("dartx.consolidate"),
    $fftSize: dartx.fftSize = Symbol("dartx.fftSize"),
    $frequencyBinCount: dartx.frequencyBinCount = Symbol("dartx.frequencyBinCount"),
    $maxDecibels: dartx.maxDecibels = Symbol("dartx.maxDecibels"),
    $minDecibels: dartx.minDecibels = Symbol("dartx.minDecibels"),
    $smoothingTimeConstant: dartx.smoothingTimeConstant = Symbol("dartx.smoothingTimeConstant"),
    $getByteFrequencyData: dartx.getByteFrequencyData = Symbol("dartx.getByteFrequencyData"),
    $getByteTimeDomainData: dartx.getByteTimeDomainData = Symbol("dartx.getByteTimeDomainData"),
    $getFloatFrequencyData: dartx.getFloatFrequencyData = Symbol("dartx.getFloatFrequencyData"),
    $getFloatTimeDomainData: dartx.getFloatTimeDomainData = Symbol("dartx.getFloatTimeDomainData"),
    $channelCount: dartx.channelCount = Symbol("dartx.channelCount"),
    $channelCountMode: dartx.channelCountMode = Symbol("dartx.channelCountMode"),
    $channelInterpretation: dartx.channelInterpretation = Symbol("dartx.channelInterpretation"),
    $context: dartx.context = Symbol("dartx.context"),
    $numberOfInputs: dartx.numberOfInputs = Symbol("dartx.numberOfInputs"),
    $numberOfOutputs: dartx.numberOfOutputs = Symbol("dartx.numberOfOutputs"),
    _connect: dart.privateName(web_audio, "_connect"),
    $connectNode: dartx.connectNode = Symbol("dartx.connectNode"),
    $connectParam: dartx.connectParam = Symbol("dartx.connectParam"),
    $numberOfChannels: dartx.numberOfChannels = Symbol("dartx.numberOfChannels"),
    $sampleRate: dartx.sampleRate = Symbol("dartx.sampleRate"),
    $copyFromChannel: dartx.copyFromChannel = Symbol("dartx.copyFromChannel"),
    $copyToChannel: dartx.copyToChannel = Symbol("dartx.copyToChannel"),
    $getChannelData: dartx.getChannelData = Symbol("dartx.getChannelData"),
    $detune: dartx.detune = Symbol("dartx.detune"),
    $loopEnd: dartx.loopEnd = Symbol("dartx.loopEnd"),
    $loopStart: dartx.loopStart = Symbol("dartx.loopStart"),
    $start2: dartx.start2 = Symbol("dartx.start2"),
    $baseLatency: dartx.baseLatency = Symbol("dartx.baseLatency"),
    _getOutputTimestamp_1: dart.privateName(web_audio, "_getOutputTimestamp_1"),
    $getOutputTimestamp: dartx.getOutputTimestamp = Symbol("dartx.getOutputTimestamp"),
    $suspend: dartx.suspend = Symbol("dartx.suspend"),
    $createGain: dartx.createGain = Symbol("dartx.createGain"),
    $createScriptProcessor: dartx.createScriptProcessor = Symbol("dartx.createScriptProcessor"),
    _decodeAudioData: dart.privateName(web_audio, "_decodeAudioData"),
    $decodeAudioData: dartx.decodeAudioData = Symbol("dartx.decodeAudioData"),
    $destination: dartx.destination = Symbol("dartx.destination"),
    $listener: dartx.listener = Symbol("dartx.listener"),
    $createAnalyser: dartx.createAnalyser = Symbol("dartx.createAnalyser"),
    $createBiquadFilter: dartx.createBiquadFilter = Symbol("dartx.createBiquadFilter"),
    $createBuffer: dartx.createBuffer = Symbol("dartx.createBuffer"),
    $createBufferSource: dartx.createBufferSource = Symbol("dartx.createBufferSource"),
    $createChannelMerger: dartx.createChannelMerger = Symbol("dartx.createChannelMerger"),
    $createChannelSplitter: dartx.createChannelSplitter = Symbol("dartx.createChannelSplitter"),
    $createConstantSource: dartx.createConstantSource = Symbol("dartx.createConstantSource"),
    $createConvolver: dartx.createConvolver = Symbol("dartx.createConvolver"),
    $createDelay: dartx.createDelay = Symbol("dartx.createDelay"),
    $createDynamicsCompressor: dartx.createDynamicsCompressor = Symbol("dartx.createDynamicsCompressor"),
    $createIirFilter: dartx.createIirFilter = Symbol("dartx.createIirFilter")
  };
  var S$4 = {
    $createMediaElementSource: dartx.createMediaElementSource = Symbol("dartx.createMediaElementSource"),
    $createMediaStreamDestination: dartx.createMediaStreamDestination = Symbol("dartx.createMediaStreamDestination"),
    $createMediaStreamSource: dartx.createMediaStreamSource = Symbol("dartx.createMediaStreamSource"),
    $createOscillator: dartx.createOscillator = Symbol("dartx.createOscillator"),
    $createPanner: dartx.createPanner = Symbol("dartx.createPanner"),
    _createPeriodicWave_1: dart.privateName(web_audio, "_createPeriodicWave_1"),
    _createPeriodicWave_2: dart.privateName(web_audio, "_createPeriodicWave_2"),
    $createPeriodicWave: dartx.createPeriodicWave = Symbol("dartx.createPeriodicWave"),
    $createStereoPanner: dartx.createStereoPanner = Symbol("dartx.createStereoPanner"),
    $createWaveShaper: dartx.createWaveShaper = Symbol("dartx.createWaveShaper"),
    $maxChannelCount: dartx.maxChannelCount = Symbol("dartx.maxChannelCount"),
    $forwardX: dartx.forwardX = Symbol("dartx.forwardX"),
    $forwardY: dartx.forwardY = Symbol("dartx.forwardY"),
    $forwardZ: dartx.forwardZ = Symbol("dartx.forwardZ"),
    $positionZ: dartx.positionZ = Symbol("dartx.positionZ"),
    $upX: dartx.upX = Symbol("dartx.upX"),
    $upY: dartx.upY = Symbol("dartx.upY"),
    $upZ: dartx.upZ = Symbol("dartx.upZ"),
    $setOrientation: dartx.setOrientation = Symbol("dartx.setOrientation"),
    $maxValue: dartx.maxValue = Symbol("dartx.maxValue"),
    $minValue: dartx.minValue = Symbol("dartx.minValue"),
    $cancelAndHoldAtTime: dartx.cancelAndHoldAtTime = Symbol("dartx.cancelAndHoldAtTime"),
    $cancelScheduledValues: dartx.cancelScheduledValues = Symbol("dartx.cancelScheduledValues"),
    $exponentialRampToValueAtTime: dartx.exponentialRampToValueAtTime = Symbol("dartx.exponentialRampToValueAtTime"),
    $linearRampToValueAtTime: dartx.linearRampToValueAtTime = Symbol("dartx.linearRampToValueAtTime"),
    $setTargetAtTime: dartx.setTargetAtTime = Symbol("dartx.setTargetAtTime"),
    $setValueAtTime: dartx.setValueAtTime = Symbol("dartx.setValueAtTime"),
    $setValueCurveAtTime: dartx.setValueCurveAtTime = Symbol("dartx.setValueCurveAtTime"),
    _getItem$1: dart.privateName(web_audio, "_getItem"),
    $inputBuffer: dartx.inputBuffer = Symbol("dartx.inputBuffer"),
    $outputBuffer: dartx.outputBuffer = Symbol("dartx.outputBuffer"),
    $playbackTime: dartx.playbackTime = Symbol("dartx.playbackTime"),
    __getter__$1: dart.privateName(web_audio, "__getter__"),
    $registerProcessor: dartx.registerProcessor = Symbol("dartx.registerProcessor"),
    $parameters: dartx.parameters = Symbol("dartx.parameters"),
    $Q: dartx.Q = Symbol("dartx.Q"),
    $frequency: dartx.frequency = Symbol("dartx.frequency"),
    $gain: dartx.gain = Symbol("dartx.gain"),
    $getFrequencyResponse: dartx.getFrequencyResponse = Symbol("dartx.getFrequencyResponse"),
    $normalize: dartx.normalize = Symbol("dartx.normalize"),
    $delayTime: dartx.delayTime = Symbol("dartx.delayTime"),
    $attack: dartx.attack = Symbol("dartx.attack"),
    $knee: dartx.knee = Symbol("dartx.knee"),
    $ratio: dartx.ratio = Symbol("dartx.ratio"),
    $reduction: dartx.reduction = Symbol("dartx.reduction"),
    $release: dartx.release = Symbol("dartx.release"),
    $threshold: dartx.threshold = Symbol("dartx.threshold"),
    $mediaElement: dartx.mediaElement = Symbol("dartx.mediaElement"),
    $mediaStream: dartx.mediaStream = Symbol("dartx.mediaStream"),
    $renderedBuffer: dartx.renderedBuffer = Symbol("dartx.renderedBuffer"),
    $startRendering: dartx.startRendering = Symbol("dartx.startRendering"),
    $suspendFor: dartx.suspendFor = Symbol("dartx.suspendFor"),
    $setPeriodicWave: dartx.setPeriodicWave = Symbol("dartx.setPeriodicWave"),
    $coneInnerAngle: dartx.coneInnerAngle = Symbol("dartx.coneInnerAngle"),
    $coneOuterAngle: dartx.coneOuterAngle = Symbol("dartx.coneOuterAngle"),
    $coneOuterGain: dartx.coneOuterGain = Symbol("dartx.coneOuterGain"),
    $distanceModel: dartx.distanceModel = Symbol("dartx.distanceModel"),
    $maxDistance: dartx.maxDistance = Symbol("dartx.maxDistance"),
    $orientationX: dartx.orientationX = Symbol("dartx.orientationX"),
    $orientationY: dartx.orientationY = Symbol("dartx.orientationY"),
    $orientationZ: dartx.orientationZ = Symbol("dartx.orientationZ"),
    $panningModel: dartx.panningModel = Symbol("dartx.panningModel"),
    $refDistance: dartx.refDistance = Symbol("dartx.refDistance"),
    $rolloffFactor: dartx.rolloffFactor = Symbol("dartx.rolloffFactor"),
    $bufferSize: dartx.bufferSize = Symbol("dartx.bufferSize"),
    $setEventListener: dartx.setEventListener = Symbol("dartx.setEventListener"),
    $onAudioProcess: dartx.onAudioProcess = Symbol("dartx.onAudioProcess"),
    $pan: dartx.pan = Symbol("dartx.pan"),
    $curve: dartx.curve = Symbol("dartx.curve"),
    $oversample: dartx.oversample = Symbol("dartx.oversample"),
    $drawArraysInstancedAngle: dartx.drawArraysInstancedAngle = Symbol("dartx.drawArraysInstancedAngle"),
    $drawElementsInstancedAngle: dartx.drawElementsInstancedAngle = Symbol("dartx.drawElementsInstancedAngle"),
    $vertexAttribDivisorAngle: dartx.vertexAttribDivisorAngle = Symbol("dartx.vertexAttribDivisorAngle"),
    $offscreenCanvas: dartx.offscreenCanvas = Symbol("dartx.offscreenCanvas"),
    $statusMessage: dartx.statusMessage = Symbol("dartx.statusMessage"),
    $getTranslatedShaderSource: dartx.getTranslatedShaderSource = Symbol("dartx.getTranslatedShaderSource"),
    $drawBuffersWebgl: dartx.drawBuffersWebgl = Symbol("dartx.drawBuffersWebgl"),
    $beginQueryExt: dartx.beginQueryExt = Symbol("dartx.beginQueryExt"),
    $createQueryExt: dartx.createQueryExt = Symbol("dartx.createQueryExt"),
    $deleteQueryExt: dartx.deleteQueryExt = Symbol("dartx.deleteQueryExt"),
    $endQueryExt: dartx.endQueryExt = Symbol("dartx.endQueryExt"),
    $getQueryExt: dartx.getQueryExt = Symbol("dartx.getQueryExt"),
    $getQueryObjectExt: dartx.getQueryObjectExt = Symbol("dartx.getQueryObjectExt"),
    $isQueryExt: dartx.isQueryExt = Symbol("dartx.isQueryExt"),
    $queryCounterExt: dartx.queryCounterExt = Symbol("dartx.queryCounterExt"),
    $getBufferSubDataAsync: dartx.getBufferSubDataAsync = Symbol("dartx.getBufferSubDataAsync"),
    $loseContext: dartx.loseContext = Symbol("dartx.loseContext"),
    $restoreContext: dartx.restoreContext = Symbol("dartx.restoreContext"),
    $bindVertexArray: dartx.bindVertexArray = Symbol("dartx.bindVertexArray"),
    $createVertexArray: dartx.createVertexArray = Symbol("dartx.createVertexArray"),
    $deleteVertexArray: dartx.deleteVertexArray = Symbol("dartx.deleteVertexArray"),
    $isVertexArray: dartx.isVertexArray = Symbol("dartx.isVertexArray"),
    $drawingBufferHeight: dartx.drawingBufferHeight = Symbol("dartx.drawingBufferHeight"),
    $drawingBufferWidth: dartx.drawingBufferWidth = Symbol("dartx.drawingBufferWidth"),
    $activeTexture: dartx.activeTexture = Symbol("dartx.activeTexture"),
    $attachShader: dartx.attachShader = Symbol("dartx.attachShader"),
    $bindAttribLocation: dartx.bindAttribLocation = Symbol("dartx.bindAttribLocation"),
    $bindBuffer: dartx.bindBuffer = Symbol("dartx.bindBuffer"),
    $bindFramebuffer: dartx.bindFramebuffer = Symbol("dartx.bindFramebuffer"),
    $bindRenderbuffer: dartx.bindRenderbuffer = Symbol("dartx.bindRenderbuffer"),
    $bindTexture: dartx.bindTexture = Symbol("dartx.bindTexture"),
    $blendColor: dartx.blendColor = Symbol("dartx.blendColor"),
    $blendEquation: dartx.blendEquation = Symbol("dartx.blendEquation"),
    $blendEquationSeparate: dartx.blendEquationSeparate = Symbol("dartx.blendEquationSeparate"),
    $blendFunc: dartx.blendFunc = Symbol("dartx.blendFunc"),
    $blendFuncSeparate: dartx.blendFuncSeparate = Symbol("dartx.blendFuncSeparate"),
    $bufferData: dartx.bufferData = Symbol("dartx.bufferData"),
    $bufferSubData: dartx.bufferSubData = Symbol("dartx.bufferSubData"),
    $checkFramebufferStatus: dartx.checkFramebufferStatus = Symbol("dartx.checkFramebufferStatus"),
    $clearColor: dartx.clearColor = Symbol("dartx.clearColor"),
    $clearDepth: dartx.clearDepth = Symbol("dartx.clearDepth"),
    $clearStencil: dartx.clearStencil = Symbol("dartx.clearStencil"),
    $colorMask: dartx.colorMask = Symbol("dartx.colorMask"),
    $compileShader: dartx.compileShader = Symbol("dartx.compileShader"),
    $compressedTexImage2D: dartx.compressedTexImage2D = Symbol("dartx.compressedTexImage2D"),
    $compressedTexSubImage2D: dartx.compressedTexSubImage2D = Symbol("dartx.compressedTexSubImage2D"),
    $copyTexImage2D: dartx.copyTexImage2D = Symbol("dartx.copyTexImage2D"),
    $copyTexSubImage2D: dartx.copyTexSubImage2D = Symbol("dartx.copyTexSubImage2D"),
    $createFramebuffer: dartx.createFramebuffer = Symbol("dartx.createFramebuffer"),
    $createProgram: dartx.createProgram = Symbol("dartx.createProgram"),
    $createRenderbuffer: dartx.createRenderbuffer = Symbol("dartx.createRenderbuffer"),
    $createShader: dartx.createShader = Symbol("dartx.createShader"),
    $createTexture: dartx.createTexture = Symbol("dartx.createTexture"),
    $cullFace: dartx.cullFace = Symbol("dartx.cullFace"),
    $deleteBuffer: dartx.deleteBuffer = Symbol("dartx.deleteBuffer"),
    $deleteFramebuffer: dartx.deleteFramebuffer = Symbol("dartx.deleteFramebuffer"),
    $deleteProgram: dartx.deleteProgram = Symbol("dartx.deleteProgram"),
    $deleteRenderbuffer: dartx.deleteRenderbuffer = Symbol("dartx.deleteRenderbuffer"),
    $deleteShader: dartx.deleteShader = Symbol("dartx.deleteShader"),
    $deleteTexture: dartx.deleteTexture = Symbol("dartx.deleteTexture"),
    $depthFunc: dartx.depthFunc = Symbol("dartx.depthFunc"),
    $depthMask: dartx.depthMask = Symbol("dartx.depthMask"),
    $depthRange: dartx.depthRange = Symbol("dartx.depthRange"),
    $detachShader: dartx.detachShader = Symbol("dartx.detachShader"),
    $disableVertexAttribArray: dartx.disableVertexAttribArray = Symbol("dartx.disableVertexAttribArray"),
    $drawArrays: dartx.drawArrays = Symbol("dartx.drawArrays"),
    $drawElements: dartx.drawElements = Symbol("dartx.drawElements"),
    $enableVertexAttribArray: dartx.enableVertexAttribArray = Symbol("dartx.enableVertexAttribArray"),
    $flush: dartx.flush = Symbol("dartx.flush"),
    $framebufferRenderbuffer: dartx.framebufferRenderbuffer = Symbol("dartx.framebufferRenderbuffer"),
    $framebufferTexture2D: dartx.framebufferTexture2D = Symbol("dartx.framebufferTexture2D"),
    $frontFace: dartx.frontFace = Symbol("dartx.frontFace"),
    $generateMipmap: dartx.generateMipmap = Symbol("dartx.generateMipmap"),
    $getActiveAttrib: dartx.getActiveAttrib = Symbol("dartx.getActiveAttrib"),
    $getActiveUniform: dartx.getActiveUniform = Symbol("dartx.getActiveUniform"),
    $getAttachedShaders: dartx.getAttachedShaders = Symbol("dartx.getAttachedShaders"),
    $getAttribLocation: dartx.getAttribLocation = Symbol("dartx.getAttribLocation"),
    $getBufferParameter: dartx.getBufferParameter = Symbol("dartx.getBufferParameter"),
    _getContextAttributes_1$1: dart.privateName(web_gl, "_getContextAttributes_1"),
    $getError: dartx.getError = Symbol("dartx.getError"),
    $getExtension: dartx.getExtension = Symbol("dartx.getExtension"),
    $getFramebufferAttachmentParameter: dartx.getFramebufferAttachmentParameter = Symbol("dartx.getFramebufferAttachmentParameter"),
    $getProgramInfoLog: dartx.getProgramInfoLog = Symbol("dartx.getProgramInfoLog"),
    $getProgramParameter: dartx.getProgramParameter = Symbol("dartx.getProgramParameter"),
    $getRenderbufferParameter: dartx.getRenderbufferParameter = Symbol("dartx.getRenderbufferParameter"),
    $getShaderInfoLog: dartx.getShaderInfoLog = Symbol("dartx.getShaderInfoLog"),
    $getShaderParameter: dartx.getShaderParameter = Symbol("dartx.getShaderParameter"),
    $getShaderPrecisionFormat: dartx.getShaderPrecisionFormat = Symbol("dartx.getShaderPrecisionFormat"),
    $getShaderSource: dartx.getShaderSource = Symbol("dartx.getShaderSource"),
    $getSupportedExtensions: dartx.getSupportedExtensions = Symbol("dartx.getSupportedExtensions"),
    $getTexParameter: dartx.getTexParameter = Symbol("dartx.getTexParameter"),
    $getUniform: dartx.getUniform = Symbol("dartx.getUniform"),
    $getUniformLocation: dartx.getUniformLocation = Symbol("dartx.getUniformLocation"),
    $getVertexAttrib: dartx.getVertexAttrib = Symbol("dartx.getVertexAttrib"),
    $getVertexAttribOffset: dartx.getVertexAttribOffset = Symbol("dartx.getVertexAttribOffset"),
    $hint: dartx.hint = Symbol("dartx.hint"),
    $isBuffer: dartx.isBuffer = Symbol("dartx.isBuffer"),
    $isEnabled: dartx.isEnabled = Symbol("dartx.isEnabled"),
    $isFramebuffer: dartx.isFramebuffer = Symbol("dartx.isFramebuffer"),
    $isProgram: dartx.isProgram = Symbol("dartx.isProgram"),
    $isRenderbuffer: dartx.isRenderbuffer = Symbol("dartx.isRenderbuffer"),
    $isShader: dartx.isShader = Symbol("dartx.isShader"),
    $isTexture: dartx.isTexture = Symbol("dartx.isTexture"),
    $linkProgram: dartx.linkProgram = Symbol("dartx.linkProgram"),
    $pixelStorei: dartx.pixelStorei = Symbol("dartx.pixelStorei"),
    $polygonOffset: dartx.polygonOffset = Symbol("dartx.polygonOffset"),
    _readPixels: dart.privateName(web_gl, "_readPixels"),
    $renderbufferStorage: dartx.renderbufferStorage = Symbol("dartx.renderbufferStorage"),
    $sampleCoverage: dartx.sampleCoverage = Symbol("dartx.sampleCoverage"),
    $scissor: dartx.scissor = Symbol("dartx.scissor"),
    $shaderSource: dartx.shaderSource = Symbol("dartx.shaderSource"),
    $stencilFunc: dartx.stencilFunc = Symbol("dartx.stencilFunc"),
    $stencilFuncSeparate: dartx.stencilFuncSeparate = Symbol("dartx.stencilFuncSeparate"),
    $stencilMask: dartx.stencilMask = Symbol("dartx.stencilMask"),
    $stencilMaskSeparate: dartx.stencilMaskSeparate = Symbol("dartx.stencilMaskSeparate"),
    $stencilOp: dartx.stencilOp = Symbol("dartx.stencilOp"),
    $stencilOpSeparate: dartx.stencilOpSeparate = Symbol("dartx.stencilOpSeparate"),
    _texImage2D_1: dart.privateName(web_gl, "_texImage2D_1"),
    _texImage2D_2: dart.privateName(web_gl, "_texImage2D_2"),
    _texImage2D_3: dart.privateName(web_gl, "_texImage2D_3"),
    _texImage2D_4: dart.privateName(web_gl, "_texImage2D_4"),
    _texImage2D_5: dart.privateName(web_gl, "_texImage2D_5"),
    _texImage2D_6: dart.privateName(web_gl, "_texImage2D_6"),
    $texImage2D: dartx.texImage2D = Symbol("dartx.texImage2D"),
    $texParameterf: dartx.texParameterf = Symbol("dartx.texParameterf"),
    $texParameteri: dartx.texParameteri = Symbol("dartx.texParameteri"),
    _texSubImage2D_1: dart.privateName(web_gl, "_texSubImage2D_1"),
    _texSubImage2D_2: dart.privateName(web_gl, "_texSubImage2D_2"),
    _texSubImage2D_3: dart.privateName(web_gl, "_texSubImage2D_3"),
    _texSubImage2D_4: dart.privateName(web_gl, "_texSubImage2D_4"),
    _texSubImage2D_5: dart.privateName(web_gl, "_texSubImage2D_5"),
    _texSubImage2D_6: dart.privateName(web_gl, "_texSubImage2D_6"),
    $texSubImage2D: dartx.texSubImage2D = Symbol("dartx.texSubImage2D"),
    $uniform1f: dartx.uniform1f = Symbol("dartx.uniform1f"),
    $uniform1fv: dartx.uniform1fv = Symbol("dartx.uniform1fv"),
    $uniform1i: dartx.uniform1i = Symbol("dartx.uniform1i"),
    $uniform1iv: dartx.uniform1iv = Symbol("dartx.uniform1iv"),
    $uniform2f: dartx.uniform2f = Symbol("dartx.uniform2f"),
    $uniform2fv: dartx.uniform2fv = Symbol("dartx.uniform2fv"),
    $uniform2i: dartx.uniform2i = Symbol("dartx.uniform2i"),
    $uniform2iv: dartx.uniform2iv = Symbol("dartx.uniform2iv"),
    $uniform3f: dartx.uniform3f = Symbol("dartx.uniform3f"),
    $uniform3fv: dartx.uniform3fv = Symbol("dartx.uniform3fv"),
    $uniform3i: dartx.uniform3i = Symbol("dartx.uniform3i"),
    $uniform3iv: dartx.uniform3iv = Symbol("dartx.uniform3iv"),
    $uniform4f: dartx.uniform4f = Symbol("dartx.uniform4f"),
    $uniform4fv: dartx.uniform4fv = Symbol("dartx.uniform4fv"),
    $uniform4i: dartx.uniform4i = Symbol("dartx.uniform4i"),
    $uniform4iv: dartx.uniform4iv = Symbol("dartx.uniform4iv"),
    $uniformMatrix2fv: dartx.uniformMatrix2fv = Symbol("dartx.uniformMatrix2fv"),
    $uniformMatrix3fv: dartx.uniformMatrix3fv = Symbol("dartx.uniformMatrix3fv"),
    $uniformMatrix4fv: dartx.uniformMatrix4fv = Symbol("dartx.uniformMatrix4fv"),
    $useProgram: dartx.useProgram = Symbol("dartx.useProgram"),
    $validateProgram: dartx.validateProgram = Symbol("dartx.validateProgram"),
    $vertexAttrib1f: dartx.vertexAttrib1f = Symbol("dartx.vertexAttrib1f"),
    $vertexAttrib1fv: dartx.vertexAttrib1fv = Symbol("dartx.vertexAttrib1fv"),
    $vertexAttrib2f: dartx.vertexAttrib2f = Symbol("dartx.vertexAttrib2f"),
    $vertexAttrib2fv: dartx.vertexAttrib2fv = Symbol("dartx.vertexAttrib2fv"),
    $vertexAttrib3f: dartx.vertexAttrib3f = Symbol("dartx.vertexAttrib3f"),
    $vertexAttrib3fv: dartx.vertexAttrib3fv = Symbol("dartx.vertexAttrib3fv"),
    $vertexAttrib4f: dartx.vertexAttrib4f = Symbol("dartx.vertexAttrib4f"),
    $vertexAttrib4fv: dartx.vertexAttrib4fv = Symbol("dartx.vertexAttrib4fv"),
    $vertexAttribPointer: dartx.vertexAttribPointer = Symbol("dartx.vertexAttribPointer"),
    $viewport: dartx.viewport = Symbol("dartx.viewport"),
    $readPixels: dartx.readPixels = Symbol("dartx.readPixels"),
    $texImage2DUntyped: dartx.texImage2DUntyped = Symbol("dartx.texImage2DUntyped"),
    $texImage2DTyped: dartx.texImage2DTyped = Symbol("dartx.texImage2DTyped"),
    $texSubImage2DUntyped: dartx.texSubImage2DUntyped = Symbol("dartx.texSubImage2DUntyped"),
    $texSubImage2DTyped: dartx.texSubImage2DTyped = Symbol("dartx.texSubImage2DTyped"),
    $bufferDataTyped: dartx.bufferDataTyped = Symbol("dartx.bufferDataTyped"),
    $bufferSubDataTyped: dartx.bufferSubDataTyped = Symbol("dartx.bufferSubDataTyped"),
    $beginQuery: dartx.beginQuery = Symbol("dartx.beginQuery"),
    $beginTransformFeedback: dartx.beginTransformFeedback = Symbol("dartx.beginTransformFeedback"),
    $bindBufferBase: dartx.bindBufferBase = Symbol("dartx.bindBufferBase"),
    $bindBufferRange: dartx.bindBufferRange = Symbol("dartx.bindBufferRange"),
    $bindSampler: dartx.bindSampler = Symbol("dartx.bindSampler"),
    $bindTransformFeedback: dartx.bindTransformFeedback = Symbol("dartx.bindTransformFeedback"),
    $blitFramebuffer: dartx.blitFramebuffer = Symbol("dartx.blitFramebuffer"),
    $bufferData2: dartx.bufferData2 = Symbol("dartx.bufferData2"),
    $bufferSubData2: dartx.bufferSubData2 = Symbol("dartx.bufferSubData2"),
    $clearBufferfi: dartx.clearBufferfi = Symbol("dartx.clearBufferfi"),
    $clearBufferfv: dartx.clearBufferfv = Symbol("dartx.clearBufferfv"),
    $clearBufferiv: dartx.clearBufferiv = Symbol("dartx.clearBufferiv"),
    $clearBufferuiv: dartx.clearBufferuiv = Symbol("dartx.clearBufferuiv"),
    $clientWaitSync: dartx.clientWaitSync = Symbol("dartx.clientWaitSync"),
    $compressedTexImage2D2: dartx.compressedTexImage2D2 = Symbol("dartx.compressedTexImage2D2"),
    $compressedTexImage2D3: dartx.compressedTexImage2D3 = Symbol("dartx.compressedTexImage2D3"),
    $compressedTexImage3D: dartx.compressedTexImage3D = Symbol("dartx.compressedTexImage3D"),
    $compressedTexImage3D2: dartx.compressedTexImage3D2 = Symbol("dartx.compressedTexImage3D2"),
    $compressedTexSubImage2D2: dartx.compressedTexSubImage2D2 = Symbol("dartx.compressedTexSubImage2D2"),
    $compressedTexSubImage2D3: dartx.compressedTexSubImage2D3 = Symbol("dartx.compressedTexSubImage2D3"),
    $compressedTexSubImage3D: dartx.compressedTexSubImage3D = Symbol("dartx.compressedTexSubImage3D"),
    $compressedTexSubImage3D2: dartx.compressedTexSubImage3D2 = Symbol("dartx.compressedTexSubImage3D2"),
    $copyBufferSubData: dartx.copyBufferSubData = Symbol("dartx.copyBufferSubData"),
    $copyTexSubImage3D: dartx.copyTexSubImage3D = Symbol("dartx.copyTexSubImage3D"),
    $createQuery: dartx.createQuery = Symbol("dartx.createQuery"),
    $createSampler: dartx.createSampler = Symbol("dartx.createSampler"),
    $createTransformFeedback: dartx.createTransformFeedback = Symbol("dartx.createTransformFeedback"),
    $deleteQuery: dartx.deleteQuery = Symbol("dartx.deleteQuery"),
    $deleteSampler: dartx.deleteSampler = Symbol("dartx.deleteSampler"),
    $deleteSync: dartx.deleteSync = Symbol("dartx.deleteSync"),
    $deleteTransformFeedback: dartx.deleteTransformFeedback = Symbol("dartx.deleteTransformFeedback"),
    $drawArraysInstanced: dartx.drawArraysInstanced = Symbol("dartx.drawArraysInstanced"),
    $drawBuffers: dartx.drawBuffers = Symbol("dartx.drawBuffers"),
    $drawElementsInstanced: dartx.drawElementsInstanced = Symbol("dartx.drawElementsInstanced"),
    $drawRangeElements: dartx.drawRangeElements = Symbol("dartx.drawRangeElements"),
    $endQuery: dartx.endQuery = Symbol("dartx.endQuery"),
    $endTransformFeedback: dartx.endTransformFeedback = Symbol("dartx.endTransformFeedback"),
    $fenceSync: dartx.fenceSync = Symbol("dartx.fenceSync"),
    $framebufferTextureLayer: dartx.framebufferTextureLayer = Symbol("dartx.framebufferTextureLayer"),
    $getActiveUniformBlockName: dartx.getActiveUniformBlockName = Symbol("dartx.getActiveUniformBlockName"),
    $getActiveUniformBlockParameter: dartx.getActiveUniformBlockParameter = Symbol("dartx.getActiveUniformBlockParameter"),
    $getActiveUniforms: dartx.getActiveUniforms = Symbol("dartx.getActiveUniforms"),
    $getBufferSubData: dartx.getBufferSubData = Symbol("dartx.getBufferSubData"),
    $getFragDataLocation: dartx.getFragDataLocation = Symbol("dartx.getFragDataLocation"),
    $getIndexedParameter: dartx.getIndexedParameter = Symbol("dartx.getIndexedParameter"),
    $getInternalformatParameter: dartx.getInternalformatParameter = Symbol("dartx.getInternalformatParameter"),
    $getQuery: dartx.getQuery = Symbol("dartx.getQuery"),
    $getQueryParameter: dartx.getQueryParameter = Symbol("dartx.getQueryParameter"),
    $getSamplerParameter: dartx.getSamplerParameter = Symbol("dartx.getSamplerParameter"),
    $getSyncParameter: dartx.getSyncParameter = Symbol("dartx.getSyncParameter"),
    $getTransformFeedbackVarying: dartx.getTransformFeedbackVarying = Symbol("dartx.getTransformFeedbackVarying"),
    $getUniformBlockIndex: dartx.getUniformBlockIndex = Symbol("dartx.getUniformBlockIndex"),
    _getUniformIndices_1: dart.privateName(web_gl, "_getUniformIndices_1"),
    $getUniformIndices: dartx.getUniformIndices = Symbol("dartx.getUniformIndices"),
    $invalidateFramebuffer: dartx.invalidateFramebuffer = Symbol("dartx.invalidateFramebuffer"),
    $invalidateSubFramebuffer: dartx.invalidateSubFramebuffer = Symbol("dartx.invalidateSubFramebuffer"),
    $isQuery: dartx.isQuery = Symbol("dartx.isQuery"),
    $isSampler: dartx.isSampler = Symbol("dartx.isSampler"),
    $isSync: dartx.isSync = Symbol("dartx.isSync"),
    $isTransformFeedback: dartx.isTransformFeedback = Symbol("dartx.isTransformFeedback"),
    $pauseTransformFeedback: dartx.pauseTransformFeedback = Symbol("dartx.pauseTransformFeedback"),
    $readBuffer: dartx.readBuffer = Symbol("dartx.readBuffer"),
    $readPixels2: dartx.readPixels2 = Symbol("dartx.readPixels2"),
    $renderbufferStorageMultisample: dartx.renderbufferStorageMultisample = Symbol("dartx.renderbufferStorageMultisample"),
    $resumeTransformFeedback: dartx.resumeTransformFeedback = Symbol("dartx.resumeTransformFeedback"),
    $samplerParameterf: dartx.samplerParameterf = Symbol("dartx.samplerParameterf"),
    $samplerParameteri: dartx.samplerParameteri = Symbol("dartx.samplerParameteri"),
    _texImage2D2_1: dart.privateName(web_gl, "_texImage2D2_1"),
    _texImage2D2_2: dart.privateName(web_gl, "_texImage2D2_2"),
    _texImage2D2_3: dart.privateName(web_gl, "_texImage2D2_3"),
    _texImage2D2_4: dart.privateName(web_gl, "_texImage2D2_4"),
    _texImage2D2_5: dart.privateName(web_gl, "_texImage2D2_5"),
    _texImage2D2_6: dart.privateName(web_gl, "_texImage2D2_6"),
    _texImage2D2_7: dart.privateName(web_gl, "_texImage2D2_7"),
    $texImage2D2: dartx.texImage2D2 = Symbol("dartx.texImage2D2"),
    _texImage3D_1: dart.privateName(web_gl, "_texImage3D_1"),
    _texImage3D_2: dart.privateName(web_gl, "_texImage3D_2"),
    _texImage3D_3: dart.privateName(web_gl, "_texImage3D_3"),
    _texImage3D_4: dart.privateName(web_gl, "_texImage3D_4"),
    _texImage3D_5: dart.privateName(web_gl, "_texImage3D_5"),
    _texImage3D_6: dart.privateName(web_gl, "_texImage3D_6"),
    _texImage3D_7: dart.privateName(web_gl, "_texImage3D_7"),
    _texImage3D_8: dart.privateName(web_gl, "_texImage3D_8"),
    $texImage3D: dartx.texImage3D = Symbol("dartx.texImage3D"),
    $texStorage2D: dartx.texStorage2D = Symbol("dartx.texStorage2D"),
    $texStorage3D: dartx.texStorage3D = Symbol("dartx.texStorage3D"),
    _texSubImage2D2_1: dart.privateName(web_gl, "_texSubImage2D2_1"),
    _texSubImage2D2_2: dart.privateName(web_gl, "_texSubImage2D2_2"),
    _texSubImage2D2_3: dart.privateName(web_gl, "_texSubImage2D2_3"),
    _texSubImage2D2_4: dart.privateName(web_gl, "_texSubImage2D2_4"),
    _texSubImage2D2_5: dart.privateName(web_gl, "_texSubImage2D2_5"),
    _texSubImage2D2_6: dart.privateName(web_gl, "_texSubImage2D2_6"),
    _texSubImage2D2_7: dart.privateName(web_gl, "_texSubImage2D2_7"),
    $texSubImage2D2: dartx.texSubImage2D2 = Symbol("dartx.texSubImage2D2"),
    _texSubImage3D_1: dart.privateName(web_gl, "_texSubImage3D_1"),
    _texSubImage3D_2: dart.privateName(web_gl, "_texSubImage3D_2"),
    _texSubImage3D_3: dart.privateName(web_gl, "_texSubImage3D_3"),
    _texSubImage3D_4: dart.privateName(web_gl, "_texSubImage3D_4"),
    _texSubImage3D_5: dart.privateName(web_gl, "_texSubImage3D_5"),
    _texSubImage3D_6: dart.privateName(web_gl, "_texSubImage3D_6"),
    _texSubImage3D_7: dart.privateName(web_gl, "_texSubImage3D_7"),
    _texSubImage3D_8: dart.privateName(web_gl, "_texSubImage3D_8"),
    $texSubImage3D: dartx.texSubImage3D = Symbol("dartx.texSubImage3D"),
    _transformFeedbackVaryings_1: dart.privateName(web_gl, "_transformFeedbackVaryings_1"),
    $transformFeedbackVaryings: dartx.transformFeedbackVaryings = Symbol("dartx.transformFeedbackVaryings"),
    $uniform1fv2: dartx.uniform1fv2 = Symbol("dartx.uniform1fv2"),
    $uniform1iv2: dartx.uniform1iv2 = Symbol("dartx.uniform1iv2"),
    $uniform1ui: dartx.uniform1ui = Symbol("dartx.uniform1ui"),
    $uniform1uiv: dartx.uniform1uiv = Symbol("dartx.uniform1uiv"),
    $uniform2fv2: dartx.uniform2fv2 = Symbol("dartx.uniform2fv2"),
    $uniform2iv2: dartx.uniform2iv2 = Symbol("dartx.uniform2iv2"),
    $uniform2ui: dartx.uniform2ui = Symbol("dartx.uniform2ui"),
    $uniform2uiv: dartx.uniform2uiv = Symbol("dartx.uniform2uiv"),
    $uniform3fv2: dartx.uniform3fv2 = Symbol("dartx.uniform3fv2"),
    $uniform3iv2: dartx.uniform3iv2 = Symbol("dartx.uniform3iv2"),
    $uniform3ui: dartx.uniform3ui = Symbol("dartx.uniform3ui"),
    $uniform3uiv: dartx.uniform3uiv = Symbol("dartx.uniform3uiv"),
    $uniform4fv2: dartx.uniform4fv2 = Symbol("dartx.uniform4fv2"),
    $uniform4iv2: dartx.uniform4iv2 = Symbol("dartx.uniform4iv2"),
    $uniform4ui: dartx.uniform4ui = Symbol("dartx.uniform4ui"),
    $uniform4uiv: dartx.uniform4uiv = Symbol("dartx.uniform4uiv"),
    $uniformBlockBinding: dartx.uniformBlockBinding = Symbol("dartx.uniformBlockBinding"),
    $uniformMatrix2fv2: dartx.uniformMatrix2fv2 = Symbol("dartx.uniformMatrix2fv2"),
    $uniformMatrix2x3fv: dartx.uniformMatrix2x3fv = Symbol("dartx.uniformMatrix2x3fv"),
    $uniformMatrix2x4fv: dartx.uniformMatrix2x4fv = Symbol("dartx.uniformMatrix2x4fv"),
    $uniformMatrix3fv2: dartx.uniformMatrix3fv2 = Symbol("dartx.uniformMatrix3fv2"),
    $uniformMatrix3x2fv: dartx.uniformMatrix3x2fv = Symbol("dartx.uniformMatrix3x2fv"),
    $uniformMatrix3x4fv: dartx.uniformMatrix3x4fv = Symbol("dartx.uniformMatrix3x4fv"),
    $uniformMatrix4fv2: dartx.uniformMatrix4fv2 = Symbol("dartx.uniformMatrix4fv2"),
    $uniformMatrix4x2fv: dartx.uniformMatrix4x2fv = Symbol("dartx.uniformMatrix4x2fv"),
    $uniformMatrix4x3fv: dartx.uniformMatrix4x3fv = Symbol("dartx.uniformMatrix4x3fv"),
    $vertexAttribDivisor: dartx.vertexAttribDivisor = Symbol("dartx.vertexAttribDivisor"),
    $vertexAttribI4i: dartx.vertexAttribI4i = Symbol("dartx.vertexAttribI4i"),
    $vertexAttribI4iv: dartx.vertexAttribI4iv = Symbol("dartx.vertexAttribI4iv"),
    $vertexAttribI4ui: dartx.vertexAttribI4ui = Symbol("dartx.vertexAttribI4ui"),
    $vertexAttribI4uiv: dartx.vertexAttribI4uiv = Symbol("dartx.vertexAttribI4uiv"),
    $vertexAttribIPointer: dartx.vertexAttribIPointer = Symbol("dartx.vertexAttribIPointer"),
    $waitSync: dartx.waitSync = Symbol("dartx.waitSync"),
    $precision: dartx.precision = Symbol("dartx.precision"),
    $rangeMax: dartx.rangeMax = Symbol("dartx.rangeMax"),
    $rangeMin: dartx.rangeMin = Symbol("dartx.rangeMin"),
    $lastUploadedVideoFrameWasSkipped: dartx.lastUploadedVideoFrameWasSkipped = Symbol("dartx.lastUploadedVideoFrameWasSkipped"),
    $lastUploadedVideoHeight: dartx.lastUploadedVideoHeight = Symbol("dartx.lastUploadedVideoHeight"),
    $lastUploadedVideoTimestamp: dartx.lastUploadedVideoTimestamp = Symbol("dartx.lastUploadedVideoTimestamp"),
    $lastUploadedVideoWidth: dartx.lastUploadedVideoWidth = Symbol("dartx.lastUploadedVideoWidth"),
    _changeVersion: dart.privateName(web_sql, "_changeVersion"),
    $changeVersion: dartx.changeVersion = Symbol("dartx.changeVersion"),
    _readTransaction: dart.privateName(web_sql, "_readTransaction"),
    $readTransaction: dartx.readTransaction = Symbol("dartx.readTransaction"),
    $transaction_future: dartx.transaction_future = Symbol("dartx.transaction_future"),
    $insertId: dartx.insertId = Symbol("dartx.insertId"),
    $rowsAffected: dartx.rowsAffected = Symbol("dartx.rowsAffected"),
    _item_1: dart.privateName(web_sql, "_item_1"),
    _executeSql: dart.privateName(web_sql, "_executeSql"),
    $executeSql: dartx.executeSql = Symbol("dartx.executeSql")
  };
  var S$5 = {
    _: () => S$5
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S, S$, S$0, S$1, S$2, S$3, S$4, S$5);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = Array(946).fill(void 0);
  var I = [
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/classes.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/operations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/rtti.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/runtime.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/utils.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart",
    "dart:core",
    "dart:_runtime",
    "org-dartlang-sdk:///dart-sdk/lib/core/invocation.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/debugger.dart",
    "dart:_debugger",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/profile.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/foreign_helper.dart",
    "dart:_foreign_helper",
    "dart:_interceptors",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/interceptors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_array.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_number.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_string.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/internal.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart",
    "dart:collection",
    "dart:_internal",
    "org-dartlang-sdk:///dart-sdk/lib/core/num.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/async_cast.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart",
    "dart:async",
    "org-dartlang-sdk:///dart-sdk/lib/convert/converter.dart",
    "dart:convert",
    "org-dartlang-sdk:///dart-sdk/lib/internal/bytes_builder.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/cast.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/maps.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/sort.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/internal_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/symbol.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/isolate_helper.dart",
    "dart:_isolate_helper",
    "dart:_js_helper",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/annotations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/linked_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/identity_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/custom_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/regexp_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/string_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_rti.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/native_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_primitives.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/metadata.dart",
    "dart:_metadata",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/native_typed_data.dart",
    "dart:_native_typed_data",
    "dart:typed_data",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/async_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/async_error.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/deferred_load.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/future.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/schedule_microtask.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_pipe.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_transformers.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/timer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/collection_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/collections.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/hash_set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/iterator.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_hash_set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/splay_tree.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/string_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/ascii.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/encoding.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/codec.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/byte_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/chunked_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/html_escape.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/latin1.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/line_splitter.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/developer_patch.dart",
    "dart:developer",
    "org-dartlang-sdk:///dart-sdk/lib/developer/extension.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/profiler.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/service.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/timeline.dart",
    "dart:io",
    "org-dartlang-sdk:///dart-sdk/lib/io/common.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/io_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/data_transformer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/directory.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/directory_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file_system_entity.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/embedder_config.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/io_sink.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/link.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/network_policy.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/network_profiling.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/overrides.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/platform_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/process.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/secure_server_socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/security_context.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/service_object.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/stdio.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/string_transformer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/isolate_patch.dart",
    "dart:isolate",
    "org-dartlang-sdk:///dart-sdk/lib/isolate/isolate.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/js_patch.dart",
    "dart:js",
    "org-dartlang-sdk:///dart-sdk/lib/js/js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/js_util/js_util.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/math_patch.dart",
    "dart:math",
    "org-dartlang-sdk:///dart-sdk/lib/math/point.dart",
    "org-dartlang-sdk:///dart-sdk/lib/math/rectangle.dart",
    "org-dartlang-sdk:///dart-sdk/lib/typed_data/typed_data.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/typed_data_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/typed_data/unmodifiable_typed_data.dart",
    "org-dartlang-sdk:///dart-sdk/lib/indexed_db/dart2js/indexed_db_dart2js.dart",
    "dart:indexed_db",
    "org-dartlang-sdk:///dart-sdk/lib/html/dart2js/html_dart2js.dart",
    "dart:html",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/css_class_set.dart",
    "dart:html_common",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/conversions.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/conversions_dart2js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/device.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/filtered_element_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/lists.dart",
    "org-dartlang-sdk:///dart-sdk/lib/svg/dart2js/svg_dart2js.dart",
    "dart:svg",
    "org-dartlang-sdk:///dart-sdk/lib/web_audio/dart2js/web_audio_dart2js.dart",
    "dart:web_audio",
    "dart:web_gl",
    "org-dartlang-sdk:///dart-sdk/lib/web_gl/dart2js/web_gl_dart2js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/web_sql/dart2js/web_sql_dart2js.dart",
    "dart:web_sql",
    "org-dartlang-sdk:///dart-sdk/lib/core/map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/annotations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/bool.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/comparable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/date_time.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/duration.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/exceptions.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/stacktrace.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/string.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/ui.dart",
    "dart:ui",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/channel_buffers.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/compositing.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/platform_dispatcher.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/pointer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/semantics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/text.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/tile_mode.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/window.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/initialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/lerp.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/test_embedding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine.dart",
    "dart:_engine",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/alarm_clock.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/assets.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/bitmap_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/browser_detection.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvaskit_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvaskit_api.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/color_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/skia_object_cache.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/embedded_views.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/fonts.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/font_fallbacks.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/image.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/image_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/interval_tree.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer_scene_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer_tree.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/mask_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/n_way_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/picture_recorder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/platform_message.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/raster_cache.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/rasterizer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/shader.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/surface.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/text.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/util.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/vertices.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/viewport_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvas_pool.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/clipboard.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/dom_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/engine_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/dom_renderer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/frame_reference.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/navigation/history.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/navigation/url_strategy.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/backdrop_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/surface.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/clip.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/color_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/debug_canvas_reuse_overlay.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/image_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/offset.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/opacity.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/conic.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/cubic.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_ref.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_utils.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_windings.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/platform_view.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/recording_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/render_vertices.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/scene.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/scene_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/normalized_gradient.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/shader.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/shader_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/surface_stats.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/transform.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html_image_codec.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/keyboard.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/onscreen_logging.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/platform_dispatcher.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/pointer_binding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/pointer_converter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/profiler.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/rrect_renderer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/accessibility.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/checkable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/semantics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/image.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/incrementable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/label_and_value.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/live_region.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/scrollable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/semantics_helper.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/tappable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/text_field.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/text_editing.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/buffers.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/message_codec.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/message_codecs.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/serialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/shadow.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/test_embedding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/font_collection.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/layout_service.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/line_break_properties.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/line_breaker.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/measurement.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/paint_service.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/paragraph.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/canvas_paragraph.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/ruler.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/unicode_range.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/word_break_properties.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/word_breaker.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/autofill_hint.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/input_type.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/text_capitalization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/ulps.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/util.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/vector_math.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/web_experiments.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/window.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/initialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_to_svg.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/tangent.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/validators.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http.dart",
    "dart:_http",
    "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_date.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_headers.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/overrides.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/websocket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart",
    "dart:_js_annotations"
  ];
  var _jsError$ = dart.privateName(dart, "_jsError");
  var _type$ = dart.privateName(dart, "_type");
  dart.applyMixin = function applyMixin(to, from) {
    to[dart._mixin] = from;
    let toProto = to.prototype;
    let fromProto = from.prototype;
    dart._copyMembers(toProto, fromProto);
    dart._mixinSignature(to, from, dart._methodSig);
    dart._mixinSignature(to, from, dart._fieldSig);
    dart._mixinSignature(to, from, dart._getterSig);
    dart._mixinSignature(to, from, dart._setterSig);
    let mixinOnFn = from[dart.mixinOn];
    if (mixinOnFn != null) {
      let proto = mixinOnFn(to.__proto__).prototype;
      dart._copyMembers(toProto, proto);
    }
  };
  dart._copyMembers = function _copyMembers(to, from) {
    let names = dart.getOwnNamesAndSymbols(from);
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (name === "constructor") continue;
      dart._copyMember(to, from, name);
    }
    return to;
  };
  dart._copyMember = function _copyMember(to, from, name) {
    let desc = dart.getOwnPropertyDescriptor(from, name);
    if (name == Symbol.iterator) {
      let existing = dart.getOwnPropertyDescriptor(to, name);
      if (existing != null) {
        if (existing.writable) {
          to[name] = desc.value;
        }
        return;
      }
    }
    let getter = desc.get;
    let setter = desc.set;
    if (getter != null) {
      if (setter == null) {
        let obj = desc.set = {
          __proto__: to.__proto__,
          set [name](x) {
            return super[name] = x;
          }
        };
        desc.set = dart.getOwnPropertyDescriptor(obj, name).set;
      }
    } else if (setter != null) {
      if (getter == null) {
        let obj = desc.get = {
          __proto__: to.__proto__,
          get [name]() {
            return super[name];
          }
        };
        desc.get = dart.getOwnPropertyDescriptor(obj, name).get;
      }
    }
    dart.defineProperty(to, name, desc);
  };
  dart._mixinSignature = function _mixinSignature(to, from, kind) {
    to[kind] = () => {
      let baseMembers = dart._getMembers(to.__proto__, kind);
      let fromMembers = dart._getMembers(from, kind);
      if (fromMembers == null) return baseMembers;
      let toSignature = {__proto__: baseMembers};
      dart.copyProperties(toSignature, fromMembers);
      return toSignature;
    };
  };
  dart.getMixin = function getMixin(clazz) {
    return Object.hasOwnProperty.call(clazz, dart._mixin) ? clazz[dart._mixin] : null;
  };
  dart.getImplements = function getImplements(clazz) {
    return Object.hasOwnProperty.call(clazz, dart.implements) ? clazz[dart.implements] : null;
  };
  dart.normalizeFutureOr = function normalizeFutureOr(typeConstructor, setBaseClass) {
    let genericFutureOrType = dart.generic(typeConstructor, setBaseClass);
    function normalize(typeArg) {
      if (typeArg == void 0) return dart.dynamic;
      if (dart._isTop(typeArg) || typeArg === core.Object || typeArg instanceof dart.LegacyType && typeArg.type === core.Object) {
        return typeArg;
      }
      if (typeArg === dart.Never) {
        return async.Future$(typeArg);
      }
      if (typeArg === core.Null) {
        return dart.nullable(async.Future$(typeArg));
      }
      let genericType = genericFutureOrType(typeArg);
      genericType[dart._originalDeclaration] = normalize;
      dart.addTypeCaches(genericType);
      function is_FutureOr(obj) {
        return typeArg.is(obj) || async.Future$(typeArg).is(obj);
      }
      genericType.is = is_FutureOr;
      function as_FutureOr(obj) {
        if (obj == null && typeArg instanceof dart.LegacyType) {
          return obj;
        }
        if (typeArg.is(obj) || async.Future$(typeArg).is(obj)) {
          return obj;
        }
        return dart.as(obj, async.FutureOr$(typeArg));
      }
      genericType.as = as_FutureOr;
      return genericType;
    }
    return normalize;
  };
  dart.generic = function generic(typeConstructor, setBaseClass) {
    let length = typeConstructor.length;
    if (length < 1) {
      dart.throwInternalError('must have at least one generic type argument');
    }
    let resultMap = new Map();
    function makeGenericType(...args) {
      if (args.length != length && args.length != 0) {
        dart.throwInternalError('requires ' + length + ' or 0 type arguments');
      }
      while (args.length < length)
        args.push(dart.dynamic);
      let value = resultMap;
      for (let i = 0; i < length; i++) {
        let arg = args[i];
        if (arg == null) {
          dart.throwInternalError('type arguments should not be null: ' + typeConstructor);
        }
        let map = value;
        value = map.get(arg);
        if (value === void 0) {
          if (i + 1 == length) {
            value = typeConstructor.apply(null, args);
            if (value) {
              value[dart._typeArguments] = args;
              value[dart._originalDeclaration] = makeGenericType;
            }
            map.set(arg, value);
            if (setBaseClass != null) setBaseClass.apply(null, args);
          } else {
            value = new Map();
            map.set(arg, value);
          }
        }
      }
      return value;
    }
    makeGenericType[dart._genericTypeCtor] = typeConstructor;
    dart.addTypeCaches(makeGenericType);
    return makeGenericType;
  };
  dart.getGenericClass = function getGenericClass(type) {
    return dart.safeGetOwnProperty(type, dart._originalDeclaration);
  };
  dart.getGenericArgs = function getGenericArgs(type) {
    return dart.safeGetOwnProperty(type, dart._typeArguments);
  };
  dart.getGenericArgVariances = function getGenericArgVariances(type) {
    return dart.safeGetOwnProperty(type, dart._variances);
  };
  dart.setGenericArgVariances = function setGenericArgVariances(f, variances) {
    return f[dart._variances] = variances;
  };
  dart.getGenericTypeFormals = function getGenericTypeFormals(genericClass) {
    return dart._typeFormalsFromFunction(dart.getGenericTypeCtor(genericClass));
  };
  dart.instantiateClass = function instantiateClass(genericClass, typeArgs) {
    if (genericClass == null) dart.nullFailed(I[0], 287, 32, "genericClass");
    if (typeArgs == null) dart.nullFailed(I[0], 287, 59, "typeArgs");
    return genericClass.apply(null, typeArgs);
  };
  dart.getConstructors = function getConstructors(value) {
    return dart._getMembers(value, dart._constructorSig);
  };
  dart.getMethods = function getMethods(value) {
    return dart._getMembers(value, dart._methodSig);
  };
  dart.getFields = function getFields(value) {
    return dart._getMembers(value, dart._fieldSig);
  };
  dart.getGetters = function getGetters(value) {
    return dart._getMembers(value, dart._getterSig);
  };
  dart.getSetters = function getSetters(value) {
    return dart._getMembers(value, dart._setterSig);
  };
  dart.getStaticMethods = function getStaticMethods(value) {
    return dart._getMembers(value, dart._staticMethodSig);
  };
  dart.getStaticFields = function getStaticFields(value) {
    return dart._getMembers(value, dart._staticFieldSig);
  };
  dart.getStaticGetters = function getStaticGetters(value) {
    return dart._getMembers(value, dart._staticGetterSig);
  };
  dart.getStaticSetters = function getStaticSetters(value) {
    return dart._getMembers(value, dart._staticSetterSig);
  };
  dart.getGenericTypeCtor = function getGenericTypeCtor(value) {
    return value[dart._genericTypeCtor];
  };
  dart.getType = function getType(obj) {
    if (obj == null) return core.Object;
    let constructor = obj.constructor;
    return constructor ? constructor : dart.global.Object.prototype.constructor;
  };
  dart.getLibraryUri = function getLibraryUri(value) {
    return value[dart._libraryUri];
  };
  dart.setLibraryUri = function setLibraryUri(f, uri) {
    return f[dart._libraryUri] = uri;
  };
  dart.isJsInterop = function isJsInterop(obj) {
    if (obj == null) return false;
    if (typeof obj === "function") {
      return obj[dart._runtimeType] == null;
    }
    if (typeof obj !== "object") return false;
    if (obj[dart._extensionType] != null) return false;
    return !(obj instanceof core.Object);
  };
  dart.getMethodType = function getMethodType(type, name) {
    let m = dart.getMethods(type);
    return m != null ? m[name] : null;
  };
  dart.getSetterType = function getSetterType(type, name) {
    let setters = dart.getSetters(type);
    if (setters != null) {
      let type = setters[name];
      if (type != null) {
        return type;
      }
    }
    let fields = dart.getFields(type);
    if (fields != null) {
      let fieldInfo = fields[name];
      if (fieldInfo != null && !fieldInfo.isFinal) {
        return fieldInfo.type;
      }
    }
    return null;
  };
  dart.finalFieldType = function finalFieldType(type, metadata) {
    return {type: type, isFinal: true, metadata: metadata};
  };
  dart.fieldType = function fieldType(type, metadata) {
    return {type: type, isFinal: false, metadata: metadata};
  };
  dart.classGetConstructorType = function classGetConstructorType(cls, name) {
    if (cls == null) return null;
    if (name == null) name = "new";
    let ctors = dart.getConstructors(cls);
    return ctors != null ? ctors[name] : null;
  };
  dart.setMethodSignature = function setMethodSignature(f, sigF) {
    return f[dart._methodSig] = sigF;
  };
  dart.setFieldSignature = function setFieldSignature(f, sigF) {
    return f[dart._fieldSig] = sigF;
  };
  dart.setGetterSignature = function setGetterSignature(f, sigF) {
    return f[dart._getterSig] = sigF;
  };
  dart.setSetterSignature = function setSetterSignature(f, sigF) {
    return f[dart._setterSig] = sigF;
  };
  dart.setConstructorSignature = function setConstructorSignature(f, sigF) {
    return f[dart._constructorSig] = sigF;
  };
  dart.setStaticMethodSignature = function setStaticMethodSignature(f, sigF) {
    return f[dart._staticMethodSig] = sigF;
  };
  dart.setStaticFieldSignature = function setStaticFieldSignature(f, sigF) {
    return f[dart._staticFieldSig] = sigF;
  };
  dart.setStaticGetterSignature = function setStaticGetterSignature(f, sigF) {
    return f[dart._staticGetterSig] = sigF;
  };
  dart.setStaticSetterSignature = function setStaticSetterSignature(f, sigF) {
    return f[dart._staticSetterSig] = sigF;
  };
  dart._getMembers = function _getMembers(type, kind) {
    let sig = type[kind];
    return typeof sig == "function" ? type[kind] = sig() : sig;
  };
  dart._hasMember = function _hasMember(type, kind, name) {
    let sig = dart._getMembers(type, kind);
    return sig != null && name in sig;
  };
  dart.hasMethod = function hasMethod(type, name) {
    return dart._hasMember(type, dart._methodSig, name);
  };
  dart.hasGetter = function hasGetter(type, name) {
    return dart._hasMember(type, dart._getterSig, name);
  };
  dart.hasSetter = function hasSetter(type, name) {
    return dart._hasMember(type, dart._setterSig, name);
  };
  dart.hasField = function hasField(type, name) {
    return dart._hasMember(type, dart._fieldSig, name);
  };
  dart._installProperties = function _installProperties(jsProto, dartType, installedParent) {
    if (dartType === core.Object) {
      dart._installPropertiesForObject(jsProto);
      return;
    }
    let dartSupertype = dartType.__proto__;
    if (dartSupertype !== installedParent) {
      dart._installProperties(jsProto, dartSupertype, installedParent);
    }
    let dartProto = dartType.prototype;
    dart.copyTheseProperties(jsProto, dartProto, dart.getOwnPropertySymbols(dartProto));
  };
  dart._installPropertiesForObject = function _installPropertiesForObject(jsProto) {
    let coreObjProto = core.Object.prototype;
    let names = dart.getOwnPropertyNames(coreObjProto);
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (name === "constructor") continue;
      let desc = dart.getOwnPropertyDescriptor(coreObjProto, name);
      dart.defineProperty(jsProto, dart.dartx[name], desc);
    }
  };
  dart._installPropertiesForGlobalObject = function _installPropertiesForGlobalObject(jsProto) {
    dart._installPropertiesForObject(jsProto);
    jsProto[dartx.toString] = function() {
      return this.toString();
    };
    dart.identityEquals == null ? dart.identityEquals = jsProto[dartx._equals] : null;
  };
  dart._applyExtension = function _applyExtension(jsType, dartExtType) {
    if (jsType == null) return;
    let jsProto = jsType.prototype;
    if (jsProto == null) return;
    if (dartExtType === core.Object) {
      dart._installPropertiesForGlobalObject(jsProto);
      return;
    }
    if (jsType === dart.global.Object) {
      let extName = dartExtType.name;
      dart._warn("Attempting to install properties from non-Object type '" + extName + "' onto the native JS Object.");
      return;
    }
    dart._installProperties(jsProto, dartExtType, jsProto[dart._extensionType]);
    if (dartExtType !== _interceptors.JSFunction) {
      jsProto[dart._extensionType] = dartExtType;
    }
    jsType[dart._methodSig] = dartExtType[dart._methodSig];
    jsType[dart._fieldSig] = dartExtType[dart._fieldSig];
    jsType[dart._getterSig] = dartExtType[dart._getterSig];
    jsType[dart._setterSig] = dartExtType[dart._setterSig];
  };
  dart.applyExtension = function applyExtension(name, nativeObject) {
    let dartExtType = dart._extensionMap.get(name);
    let jsType = nativeObject.constructor;
    dart._applyExtension(jsType, dartExtType);
  };
  dart.applyAllExtensions = function applyAllExtensions(global) {
    dart._extensionMap.forEach((dartExtType, name) => dart._applyExtension(global[name], dartExtType));
  };
  dart.registerExtension = function registerExtension(name, dartExtType) {
    dart._extensionMap.set(name, dartExtType);
    let jsType = dart.global[name];
    dart._applyExtension(jsType, dartExtType);
  };
  dart.applyExtensionForTesting = function applyExtensionForTesting(name) {
    let dartExtType = dart._extensionMap.get(name);
    let jsType = dart.global[name];
    dart._applyExtension(jsType, dartExtType);
  };
  dart.defineExtensionMethods = function defineExtensionMethods(type, memberNames) {
    if (memberNames == null) dart.nullFailed(I[0], 563, 39, "memberNames");
    let proto = type.prototype;
    for (let name of memberNames) {
      proto[dartx[name]] = proto[name];
    }
  };
  dart.defineExtensionAccessors = function defineExtensionAccessors(type, memberNames) {
    if (memberNames == null) dart.nullFailed(I[0], 571, 46, "memberNames");
    let proto = type.prototype;
    for (let name of memberNames) {
      let member = null;
      let p = proto;
      for (;; p = p.__proto__) {
        member = dart.getOwnPropertyDescriptor(p, name);
        if (member != null) break;
      }
      dart.defineProperty(proto, dartx[name], member);
    }
  };
  dart.definePrimitiveHashCode = function definePrimitiveHashCode(proto) {
    dart.defineProperty(proto, dart.identityHashCode_, dart.getOwnPropertyDescriptor(proto, $hashCode));
  };
  dart.setBaseClass = function setBaseClass(derived, base) {
    derived.prototype.__proto__ = base.prototype;
    derived.__proto__ = base;
  };
  dart.setExtensionBaseClass = function setExtensionBaseClass(dartType, jsType) {
    let dartProto = dartType.prototype;
    dartProto[dart._extensionType] = dartType;
    dartProto.__proto__ = jsType.prototype;
  };
  dart.addTypeTests = function addTypeTests(ctor, isClass) {
    if (isClass == null) isClass = Symbol("_is_" + ctor.name);
    ctor.prototype[isClass] = true;
    ctor.is = function is_C(obj) {
      return obj != null && (obj[isClass] || dart.is(obj, this));
    };
    ctor.as = function as_C(obj) {
      if (obj != null && obj[isClass]) return obj;
      return dart.as(obj, this);
    };
  };
  dart.addTypeCaches = function addTypeCaches(type) {
    type[dart._cachedLegacy] = void 0;
    type[dart._cachedNullable] = void 0;
    let subtypeCacheMap = new Map();
    type[dart._subtypeCache] = subtypeCacheMap;
    dart._cacheMaps.push(subtypeCacheMap);
  };
  dart.argumentError = function argumentError(value) {
    dart.throw(new core.ArgumentError.value(value));
  };
  dart.throwUnimplementedError = function throwUnimplementedError(message) {
    if (message == null) dart.nullFailed(I[1], 16, 32, "message");
    dart.throw(new core.UnimplementedError.new(message));
  };
  dart.throwDeferredIsLoadedError = function throwDeferredIsLoadedError(enclosingLibrary, importPrefix) {
    dart.throw(new _js_helper.DeferredNotLoadedError.new(enclosingLibrary, importPrefix));
  };
  dart.assertFailed = function assertFailed(message, fileUri = null, line = null, column = null, conditionSource = null) {
    dart.throw(new _js_helper.AssertionErrorImpl.new(message, fileUri, line, column, conditionSource));
  };
  dart._checkModuleNullSafetyMode = function _checkModuleNullSafetyMode(isModuleSound) {
    if (isModuleSound !== false) {
      let sdkMode = false ? "sound" : "unsound";
      let moduleMode = isModuleSound ? "sound" : "unsound";
      dart.throw(new core.AssertionError.new("The null safety mode of the Dart SDK module " + "(" + sdkMode + ") does not match the null safety mode of this module " + "(" + moduleMode + ")."));
    }
  };
  dart._nullFailedMessage = function _nullFailedMessage(variableName) {
    return "A null value was passed into a non-nullable parameter: " + dart.str(variableName) + ".";
  };
  dart.nullFailed = function nullFailed(fileUri, line, column, variable) {
    if (dart._nonNullAsserts) {
      dart.throw(new _js_helper.AssertionErrorImpl.new(dart._nullFailedMessage(variable), fileUri, line, column, dart.str(variable) + " != null"));
    }
    let key = dart.str(fileUri) + ":" + dart.str(line) + ":" + dart.str(column);
    if (!dart._nullFailedSet.has(key)) {
      dart._nullFailedSet.add(key);
      dart._nullWarn(dart._nullFailedMessage(variable));
    }
  };
  dart.throwLateInitializationError = function throwLateInitializationError(name) {
    if (name == null) dart.nullFailed(I[1], 66, 37, "name");
    dart.throw(new _internal.LateError.new(name));
  };
  dart.throwCyclicInitializationError = function throwCyclicInitializationError(field = null) {
    dart.throw(new core.CyclicInitializationError.new(field));
  };
  dart.throwNullValueError = function throwNullValueError() {
    dart.throw(new core.NoSuchMethodError.new(null, new _internal.Symbol.new("<Unexpected Null Value>"), null, null));
  };
  dart.castError = function castError(obj, expectedType) {
    let actualType = dart.getReifiedType(obj);
    let message = dart._castErrorMessage(actualType, expectedType);
    dart.throw(new _js_helper.TypeErrorImpl.new(message));
  };
  dart._castErrorMessage = function _castErrorMessage(from, to) {
    return "Expected a value of type '" + dart.typeName(to) + "', " + "but got one of type '" + dart.typeName(from) + "'";
  };
  dart.getThrown = function getThrown(error) {
    if (error != null) {
      let value = error[dart._thrownValue];
      if (value != null) return value;
    }
    return error;
  };
  dart.stackTrace = function stackTrace(error) {
    if (!(error instanceof Error)) {
      return new dart._StackTrace.missing(error);
    }
    let trace = error[dart._stackTrace];
    if (trace != null) return trace;
    return error[dart._stackTrace] = new dart._StackTrace.new(error);
  };
  dart.stackTraceForError = function stackTraceForError(error) {
    if (error == null) dart.nullFailed(I[1], 164, 37, "error");
    return dart.stackTrace(error[dart._jsError]);
  };
  dart.rethrow = function rethrow_(error) {
    if (error == null) dart.nullFailed(I[1], 173, 22, "error");
    throw error;
  };
  dart.throw = function throw_(exception) {
    throw new dart.DartError(exception);
  };
  dart.createErrorWithStack = function createErrorWithStack(exception, trace) {
    if (exception == null) dart.nullFailed(I[1], 256, 37, "exception");
    if (trace == null) {
      let error = exception[dart._jsError];
      return error != null ? error : new dart.DartError(exception);
    }
    if (dart._StackTrace.is(trace)) {
      let originalError = trace[_jsError$];
      if (core.identical(exception, dart.getThrown(originalError))) {
        return originalError;
      }
    }
    return new dart.RethrownDartError(exception, trace);
  };
  dart.stackPrint = function stackPrint(error) {
    if (error == null) dart.nullFailed(I[1], 274, 24, "error");
    console.log(error.stack ? error.stack : "No stack trace for: " + error);
  };
  dart.bind = function bind(obj, name, method) {
    if (obj == null) obj = _interceptors.jsNull;
    if (method == null) method = obj[name];
    let f = method.bind(obj);
    f._boundObject = obj;
    f._boundMethod = method;
    f[dart._runtimeType] = dart.getMethodType(dart.getType(obj), name);
    return f;
  };
  dart.bindCall = function bindCall(obj, name) {
    if (obj == null) return null;
    let ftype = dart.getMethodType(dart.getType(obj), name);
    if (ftype == null) return null;
    let method = obj[name];
    let f = method.bind(obj);
    f._boundObject = obj;
    f._boundMethod = method;
    f[dart._runtimeType] = ftype;
    return f;
  };
  dart.gbind = function gbind(f, ...typeArgs) {
    if (typeArgs == null) dart.nullFailed(I[2], 85, 29, "typeArgs");
    let type = f[dart._runtimeType];
    type.checkBounds(typeArgs);
    let result = (...args) => f.apply(null, typeArgs.concat(args));
    return dart.fn(result, type.instantiate(typeArgs));
  };
  dart.dloadRepl = function dloadRepl(obj, field) {
    return dart.dload(obj, dart.replNameLookup(obj, field));
  };
  dart.dload = function dload(obj, field) {
    if (typeof obj == "function" && field == "call") {
      return obj;
    }
    let f = dart._canonicalMember(obj, field);
    _debugger.trackCall(obj);
    if (f != null) {
      let type = dart.getType(obj);
      if (dart.test(dart.hasField(type, f)) || dart.test(dart.hasGetter(type, f))) return obj[f];
      if (dart.test(dart.hasMethod(type, f))) return dart.bind(obj, f, null);
      if (dart.test(dart.isJsInterop(obj))) return obj[f];
    }
    return dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [], {isGetter: true}));
  };
  dart._stripGenericArguments = function _stripGenericArguments(type) {
    let genericClass = dart.getGenericClass(type);
    if (genericClass != null) return genericClass();
    return type;
  };
  dart.dputRepl = function dputRepl(obj, field, value) {
    return dart.dput(obj, dart.replNameLookup(obj, field), value);
  };
  dart.dput = function dput(obj, field, value) {
    let f = dart._canonicalMember(obj, field);
    _debugger.trackCall(obj);
    if (f != null) {
      let setterType = dart.getSetterType(dart.getType(obj), f);
      if (setterType != null) {
        return obj[f] = setterType.as(value);
      }
      if (dart.test(dart.isJsInterop(obj))) return obj[f] = value;
    }
    dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [value], {isSetter: true}));
    return value;
  };
  dart._argumentErrors = function _argumentErrors(type, actuals, namedActuals) {
    if (type == null) dart.nullFailed(I[2], 147, 38, "type");
    if (actuals == null) dart.nullFailed(I[2], 147, 49, "actuals");
    let actualsCount = actuals.length;
    let required = type.args;
    let requiredCount = required.length;
    if (actualsCount < requiredCount) {
      return "Dynamic call with too few arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
    }
    let extras = actualsCount - requiredCount;
    let optionals = type.optionals;
    if (extras > optionals.length) {
      return "Dynamic call with too many arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
    }
    let names = null;
    let named = type.named;
    let requiredNamed = type.requiredNamed;
    if (namedActuals != null) {
      names = dart.getOwnPropertyNames(namedActuals);
      for (let name of names) {
        if (!(named.hasOwnProperty(name) || requiredNamed.hasOwnProperty(name))) {
          return "Dynamic call with unexpected named argument '" + dart.str(name) + "'.";
        }
      }
    }
    let requiredNames = dart.getOwnPropertyNames(requiredNamed);
    if (dart.test(requiredNames[$isNotEmpty])) {
      let missingRequired = namedActuals == null ? requiredNames : requiredNames[$where](name => !namedActuals.hasOwnProperty(name));
      if (dart.test(missingRequired[$isNotEmpty])) {
        let error = "Dynamic call with missing required named arguments: " + dart.str(missingRequired[$join](", ")) + ".";
        if (!false) {
          dart._nullWarn(error);
        } else {
          return error;
        }
      }
    }
    for (let i = 0; i < requiredCount; i = i + 1) {
      required[i].as(actuals[i]);
    }
    for (let i = 0; i < extras; i = i + 1) {
      optionals[i].as(actuals[i + requiredCount]);
    }
    if (names != null) {
      for (let name of names) {
        (named[name] || requiredNamed[name]).as(namedActuals[name]);
      }
    }
    return null;
  };
  dart._toSymbolName = function _toSymbolName(symbol) {
    let str = symbol.toString();
    return str.substring(7, str.length - 1);
  };
  dart._toDisplayName = function _toDisplayName(name) {
    if (name[0] === '_') {
      switch (name) {
        case '_get':
        {
          return '[]';
        }
        case '_set':
        {
          return '[]=';
        }
        case '_negate':
        {
          return 'unary-';
        }
        case '_constructor':
        case '_prototype':
        {
          return name.substring(1);
        }
      }
    }
    return name;
  };
  dart._dartSymbol = function _dartSymbol(name) {
    return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name), name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name)));
  };
  dart._setterSymbol = function _setterSymbol(name) {
    return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name) + "=", name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name) + "="));
  };
  dart._checkAndCall = function _checkAndCall(f, ftype, obj, typeArgs, args, named, displayName) {
    _debugger.trackCall(obj);
    let originalTarget = obj === void 0 ? f : obj;
    function callNSM(errorMessage) {
      return dart.noSuchMethod(originalTarget, new dart.InvocationImpl.new(displayName, args, {namedArguments: named, typeArguments: typeArgs || [], isMethod: true, failureMessage: errorMessage}));
    }
    if (f == null) return callNSM('Dynamic call of null.');
    if (!(f instanceof Function)) {
      if (f != null) {
        originalTarget = f;
        f = dart.bindCall(f, dart._canonicalMember(f, "call"));
        ftype = null;
        displayName = "call";
      }
      if (f == null) return callNSM("Dynamic call of object has no instance method 'call'.");
    }
    if (ftype == null) ftype = f[dart._runtimeType];
    if (ftype == null) {
      if (typeArgs != null) {
        dart.throwTypeError('call to JS object `' + obj + '` with type arguments <' + typeArgs + '> is not supported.');
      }
      if (named != null) args.push(named);
      return f.apply(obj, args);
    }
    if (ftype instanceof dart.GenericFunctionType) {
      let formalCount = ftype.formalCount;
      if (typeArgs == null) {
        typeArgs = ftype.instantiateDefaultBounds();
      } else if (typeArgs.length != formalCount) {
        return callNSM('Dynamic call with incorrect number of type arguments. ' + 'Expected: ' + formalCount + ' Actual: ' + typeArgs.length);
      } else {
        ftype.checkBounds(typeArgs);
      }
      ftype = ftype.instantiate(typeArgs);
    } else if (typeArgs != null) {
      return callNSM('Dynamic call with unexpected type arguments. ' + 'Expected: 0 Actual: ' + typeArgs.length);
    }
    let errorMessage = dart._argumentErrors(ftype, args, named);
    if (errorMessage == null) {
      if (typeArgs != null) args = typeArgs.concat(args);
      if (named != null) args.push(named);
      return f.apply(obj, args);
    }
    return callNSM(errorMessage);
  };
  dart.dcall = function dcall(f, args, named = null) {
    return dart._checkAndCall(f, null, void 0, null, args, named, f.name);
  };
  dart.dgcall = function dgcall(f, typeArgs, args, named = null) {
    return dart._checkAndCall(f, null, void 0, typeArgs, args, named, f.name || 'call');
  };
  dart.replNameLookup = function replNameLookup(object, field) {
    let rawField = field;
    if (typeof field == 'symbol') {
      if (field in object) return field;
      field = field.toString();
      field = field.substring('Symbol('.length, field.length - 1);
    } else if (field.charAt(0) != '_') {
      return field;
    }
    if (field in object) return field;
    let proto = object;
    while (proto !== null) {
      let symbols = Object.getOwnPropertySymbols(proto);
      let target = 'Symbol(' + field + ')';
      for (let s = 0; s < symbols.length; s++) {
        let sym = symbols[s];
        if (target == sym.toString()) return sym;
      }
      proto = proto.__proto__;
    }
    return rawField;
  };
  dart.callMethod = function callMethod(obj, name, typeArgs, args, named, displayName) {
    if (typeof obj == "function" && name == "call") {
      return dart.dgcall(obj, typeArgs, args, named);
    }
    let symbol = dart._canonicalMember(obj, name);
    if (symbol == null) {
      return dart.noSuchMethod(obj, new dart.InvocationImpl.new(displayName, T$.ListOfObjectN().as(args), {isMethod: true}));
    }
    let f = obj != null ? obj[symbol] : null;
    let type = dart.getType(obj);
    let ftype = dart.getMethodType(type, symbol);
    return dart._checkAndCall(f, ftype, obj, typeArgs, args, named, displayName);
  };
  dart.dsend = function dsend(obj, method, args, named = null) {
    return dart.callMethod(obj, method, null, args, named, method);
  };
  dart.dgsend = function dgsend(obj, typeArgs, method, args, named = null) {
    return dart.callMethod(obj, method, typeArgs, args, named, method);
  };
  dart.dsendRepl = function dsendRepl(obj, method, args, named = null) {
    return dart.callMethod(obj, dart.replNameLookup(obj, method), null, args, named, method);
  };
  dart.dgsendRepl = function dgsendRepl(obj, typeArgs, method, args, named = null) {
    return dart.callMethod(obj, dart.replNameLookup(obj, method), typeArgs, args, named, method);
  };
  dart.dindex = function dindex(obj, index) {
    return dart.callMethod(obj, "_get", null, [index], null, "[]");
  };
  dart.dsetindex = function dsetindex(obj, index, value) {
    return dart.callMethod(obj, "_set", null, [index, value], null, "[]=");
  };
  dart.is = function instanceOf(obj, type) {
    if (obj == null) {
      return type === core.Null || dart._isTop(type) || type instanceof dart.NullableType;
    }
    return dart.isSubtypeOf(dart.getReifiedType(obj), type);
  };
  dart.as = function cast(obj, type) {
    if (obj == null && !false) {
      dart._nullWarnOnType(type);
      return obj;
    } else {
      let actual = dart.getReifiedType(obj);
      if (dart.isSubtypeOf(actual, type)) return obj;
    }
    return dart.castError(obj, type);
  };
  dart.test = function test(obj) {
    if (obj == null) dart.throw(new _js_helper.BooleanConversionAssertionError.new());
    return obj;
  };
  dart.dtest = function dtest(obj) {
    if (!(typeof obj == 'boolean')) {
      dart.booleanConversionFailed(false ? obj : dart.test(T$.boolN().as(obj)));
      dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
    }
    return obj;
  };
  dart.booleanConversionFailed = function booleanConversionFailed(obj) {
    let actual = dart.typeName(dart.getReifiedType(obj));
    dart.throw(new _js_helper.TypeErrorImpl.new("type '" + actual + "' is not a 'bool' in boolean expression"));
  };
  dart.asInt = function asInt(obj) {
    if (Math.floor(obj) != obj) {
      if (obj == null && !false) {
        dart._nullWarnOnType(core.int);
        return null;
      } else {
        dart.castError(obj, core.int);
      }
    }
    return obj;
  };
  dart.asNullableInt = function asNullableInt(obj) {
    return obj == null ? null : dart.asInt(obj);
  };
  dart.notNull = function _notNull(x) {
    if (x == null) dart.throwNullValueError();
    return x;
  };
  dart.nullCast = function nullCast(x, type) {
    if (x == null) {
      if (!false) {
        dart._nullWarnOnType(type);
      } else {
        dart.castError(x, type);
      }
    }
    return x;
  };
  dart.nullCheck = function nullCheck(x) {
    if (x == null) dart.throw(new _js_helper.TypeErrorImpl.new("Unexpected null value."));
    return x;
  };
  dart._lookupNonTerminal = function _lookupNonTerminal(map, key) {
    if (map == null) dart.nullFailed(I[2], 529, 34, "map");
    let result = map.get(key);
    if (result != null) return result;
    map.set(key, result = new Map());
    return dart.nullCheck(result);
  };
  dart.constMap = function constMap(K, V, elements) {
    if (elements == null) dart.nullFailed(I[2], 536, 34, "elements");
    let count = elements[$length];
    let map = dart._lookupNonTerminal(dart.constantMaps, count);
    for (let i = 0; i < count; i = i + 1) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    map = dart._lookupNonTerminal(map, dart.wrapType(K));
    let result = map.get(V);
    if (result != null) return result;
    result = new (_js_helper.ImmutableMap$(K, V)).from(elements);
    map.set(V, result);
    return result;
  };
  dart._createImmutableSet = function _createImmutableSet(E, elements) {
    if (elements == null) dart.nullFailed(I[2], 554, 42, "elements");
    dart._immutableSetConstructor == null ? dart._immutableSetConstructor = dart.getLibrary("dart:collection")._ImmutableSet$ : null;
    return new (dart._immutableSetConstructor(E)).from(elements);
  };
  dart.constSet = function constSet(E, elements) {
    if (elements == null) dart.nullFailed(I[2], 560, 31, "elements");
    let count = elements[$length];
    let map = dart._lookupNonTerminal(dart.constantSets, count);
    for (let i = 0; i < count; i = i + 1) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    let result = map.get(E);
    if (result != null) return result;
    result = dart._createImmutableSet(E, elements);
    map.set(E, result);
    return result;
  };
  dart.multiKeyPutIfAbsent = function multiKeyPutIfAbsent(map, keys, valueFn) {
    for (let k of keys) {
      let value = map.get(k);
      if (!value) {
        map.set(k, value = new Map());
      }
      map = value;
    }
    if (map.has(dart._value)) return map.get(dart._value);
    let value = valueFn();
    map.set(dart._value, value);
    return value;
  };
  dart.const = function const_(obj) {
    let names = dart.getOwnNamesAndSymbols(obj);
    let count = names.length;
    let map = dart._lookupNonTerminal(dart.constants, count);
    for (let i = 0; i < count; i++) {
      let name = names[i];
      map = dart._lookupNonTerminal(map, name);
      map = dart._lookupNonTerminal(map, obj[name]);
    }
    let type = dart.getReifiedType(obj);
    let value = map.get(type);
    if (value) return value;
    map.set(type, obj);
    return obj;
  };
  dart.constList = function constList(elements, elementType) {
    let count = elements.length;
    let map = dart._lookupNonTerminal(dart.constantLists, count);
    for (let i = 0; i < count; i++) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    let value = map.get(elementType);
    if (value) return value;
    _interceptors.JSArray$(elementType).unmodifiable(elements);
    map.set(elementType, elements);
    return elements;
  };
  dart.constFn = function constFn(x) {
    return () => x;
  };
  dart.extensionSymbol = function extensionSymbol(name) {
    if (name == null) dart.nullFailed(I[2], 678, 24, "name");
    return dartx[name];
  };
  dart.equals = function equals(x, y) {
    return x == null ? y == null : x[$_equals](y);
  };
  dart.hashCode = function hashCode(obj) {
    return obj == null ? 0 : obj[$hashCode];
  };
  dart.toString = function _toString(obj) {
    if (obj == null) return "null";
    if (typeof obj == 'string') return obj;
    return obj[$toString]();
  };
  dart.str = function str(obj) {
    if (obj == null) return "null";
    if (typeof obj == 'string') return obj;
    return core.String.as(dart.notNull(obj[$toString]()));
  };
  dart.noSuchMethod = function noSuchMethod(obj, invocation) {
    if (invocation == null) dart.nullFailed(I[2], 714, 30, "invocation");
    if (obj == null) dart.defaultNoSuchMethod(obj, invocation);
    return obj[$noSuchMethod](invocation);
  };
  dart.defaultNoSuchMethod = function defaultNoSuchMethod(obj, i) {
    if (i == null) dart.nullFailed(I[2], 720, 37, "i");
    dart.throw(new core.NoSuchMethodError.withInvocation(obj, i));
  };
  dart.runtimeType = function runtimeType(obj) {
    return obj == null ? dart.wrapType(core.Null) : obj[dartx.runtimeType];
  };
  dart._canonicalMember = function _canonicalMember(obj, name) {
    if (typeof name === "symbol") return name;
    if (obj != null && obj[dart._extensionType] != null) {
      return dartx[name];
    }
    if (name == "constructor" || name == "prototype") {
      name = "+" + name;
    }
    return name;
  };
  dart.loadLibrary = function loadLibrary(enclosingLibrary, importPrefix) {
    let result = dart.deferredImports.get(enclosingLibrary);
    if (dart.test(result === void 0)) {
      dart.deferredImports.set(enclosingLibrary, result = new Set());
    }
    result.add(importPrefix);
    return async.Future.value();
  };
  dart.checkDeferredIsLoaded = function checkDeferredIsLoaded(enclosingLibrary, importPrefix) {
    let loaded = dart.deferredImports.get(enclosingLibrary);
    if (dart.test(loaded === void 0) || dart.test(!loaded.has(importPrefix))) {
      dart.throwDeferredIsLoadedError(enclosingLibrary, importPrefix);
    }
  };
  dart.defineLazy = function defineLazy(to, from, useOldSemantics) {
    if (useOldSemantics == null) dart.nullFailed(I[2], 795, 32, "useOldSemantics");
    for (let name of dart.getOwnNamesAndSymbols(from)) {
      if (dart.test(useOldSemantics)) {
        dart.defineLazyFieldOld(to, name, dart.getOwnPropertyDescriptor(from, name));
      } else {
        dart.defineLazyField(to, name, dart.getOwnPropertyDescriptor(from, name));
      }
    }
  };
  dart.defineLazyField = function defineLazyField(to, name, desc) {
    const initializer = desc.get;
    const final = desc.set == null;
    let initialized = false;
    let init = initializer;
    let value = null;
    let savedLocals = false;
    desc.get = function() {
      if (init == null) return value;
      if (final && initialized) dart.throwLateInitializationError(name);
      if (!savedLocals) {
        dart._resetFields.push(() => {
          init = initializer;
          value = null;
          savedLocals = false;
          initialized = false;
        });
        savedLocals = true;
      }
      initialized = true;
      try {
        value = init();
      } catch (e) {
        initialized = false;
        throw e;
      }
      init = null;
      return value;
    };
    desc.configurable = true;
    if (desc.set != null) {
      desc.set = function(x) {
        init = null;
        value = x;
      };
    }
    return dart.defineProperty(to, name, desc);
  };
  dart.defineLazyFieldOld = function defineLazyFieldOld(to, name, desc) {
    const initializer = desc.get;
    let init = initializer;
    let value = null;
    desc.get = function() {
      if (init == null) return value;
      let f = init;
      init = dart.throwCyclicInitializationError;
      if (f === init) f(name);
      dart._resetFields.push(() => {
        init = initializer;
        value = null;
      });
      try {
        value = f();
        init = null;
        return value;
      } catch (e) {
        init = null;
        value = null;
        throw e;
      }
    };
    desc.configurable = true;
    if (desc.set != null) {
      desc.set = function(x) {
        init = null;
        value = x;
      };
    }
    return dart.defineProperty(to, name, desc);
  };
  dart.checkNativeNonNull = function checkNativeNonNull(variable) {
    if (dart._nativeNonNullAsserts && variable == null) {
      dart.throw(new _js_helper.TypeErrorImpl.new("      Unexpected null value encountered in Dart web platform libraries.\n      This may be a bug in the Dart SDK APIs. If you would like to report a bug\n      or disable this error, you can use the following instructions:\n      https://github.com/dart-lang/sdk/tree/master/sdk/lib/html/doc/NATIVE_NULL_ASSERTIONS.md\n    "));
    }
    return variable;
  };
  dart.fn = function fn(closure, type) {
    closure[dart._runtimeType] = type;
    return closure;
  };
  dart.lazyFn = function lazyFn(closure, computeType) {
    if (computeType == null) dart.nullFailed(I[3], 63, 35, "computeType");
    dart.defineAccessor(closure, dart._runtimeType, {
      get: () => dart.defineValue(closure, dart._runtimeType, computeType()),
      set: value => dart.defineValue(closure, dart._runtimeType, value),
      configurable: true
    });
    return closure;
  };
  dart.getFunctionType = function getFunctionType(obj) {
    let args = Array(obj.length).fill(dart.dynamic);
    return dart.fnType(dart.bottom, args, void 0);
  };
  dart.getReifiedType = function getReifiedType(obj) {
    switch (typeof obj) {
      case "object":
      {
        if (obj == null) return core.Null;
        if (obj instanceof core.Object) {
          return obj.constructor;
        }
        let result = obj[dart._extensionType];
        if (result == null) return dart.jsobject;
        return result;
      }
      case "function":
      {
        let result = obj[dart._runtimeType];
        if (result != null) return result;
        return dart.jsobject;
      }
      case "undefined":
      {
        return core.Null;
      }
      case "number":
      {
        return Math.floor(obj) == obj ? core.int : core.double;
      }
      case "boolean":
      {
        return core.bool;
      }
      case "string":
      {
        return core.String;
      }
      case "symbol":
      default:
      {
        return dart.jsobject;
      }
    }
  };
  dart.getModuleName = function getModuleName(module) {
    if (module == null) dart.nullFailed(I[3], 117, 30, "module");
    return module[dart._moduleName];
  };
  dart.getModuleNames = function getModuleNames() {
    return Array.from(dart._loadedModules.keys());
  };
  dart.getSourceMap = function getSourceMap(moduleName) {
    if (moduleName == null) dart.nullFailed(I[3], 127, 29, "moduleName");
    return dart._loadedSourceMaps.get(moduleName);
  };
  dart.getModuleLibraries = function getModuleLibraries(name) {
    if (name == null) dart.nullFailed(I[3], 132, 27, "name");
    let module = dart._loadedModules.get(name);
    if (module == null) return null;
    module[dart._moduleName] = name;
    return module;
  };
  dart.getModulePartMap = function getModulePartMap(name) {
    if (name == null) dart.nullFailed(I[3], 140, 25, "name");
    return dart._loadedPartMaps.get(name);
  };
  dart.trackLibraries = function trackLibraries(moduleName, libraries, parts, sourceMap) {
    if (moduleName == null) dart.nullFailed(I[3], 144, 12, "moduleName");
    if (libraries == null) dart.nullFailed(I[3], 144, 31, "libraries");
    if (parts == null) dart.nullFailed(I[3], 144, 49, "parts");
    if (typeof parts == 'string') {
      sourceMap = parts;
      parts = {};
    }
    dart._loadedSourceMaps.set(moduleName, sourceMap);
    dart._loadedModules.set(moduleName, libraries);
    dart._loadedPartMaps.set(moduleName, parts);
    dart._libraries = null;
    dart._libraryObjects = null;
    dart._parts = null;
  };
  dart._computeLibraryMetadata = function _computeLibraryMetadata() {
    dart._libraries = T$.JSArrayOfString().of([]);
    dart._libraryObjects = new (T$.IdentityMapOfString$ObjectN()).new();
    dart._parts = new (T$.IdentityMapOfString$ListNOfString()).new();
    let modules = dart.getModuleNames();
    for (let name of modules) {
      let module = dart.getModuleLibraries(name);
      let libraries = dart.getOwnPropertyNames(module)[$cast](core.String);
      dart.nullCheck(dart._libraries)[$addAll](libraries);
      for (let library of libraries) {
        dart.nullCheck(dart._libraryObjects)[$_set](library, module[library]);
      }
      let partMap = dart.getModulePartMap(name);
      libraries = dart.getOwnPropertyNames(partMap)[$cast](core.String);
      for (let library of libraries) {
        dart.nullCheck(dart._parts)[$_set](library, T$.ListOfString().from(partMap[library]));
      }
    }
  };
  dart.getLibrary = function getLibrary(uri) {
    if (uri == null) dart.nullFailed(I[3], 192, 27, "uri");
    if (dart._libraryObjects == null) {
      dart._computeLibraryMetadata();
    }
    return dart.nullCheck(dart._libraryObjects)[$_get](uri);
  };
  dart.getLibraries = function getLibraries() {
    if (dart._libraries == null) {
      dart._computeLibraryMetadata();
    }
    return dart.nullCheck(dart._libraries);
  };
  dart.getParts = function getParts(libraryUri) {
    let t0;
    if (libraryUri == null) dart.nullFailed(I[3], 222, 30, "libraryUri");
    if (dart._parts == null) {
      dart._computeLibraryMetadata();
    }
    t0 = dart.nullCheck(dart._parts)[$_get](libraryUri);
    return t0 == null ? T$.JSArrayOfString().of([]) : t0;
  };
  dart.polyfill = function polyfill(window) {
    if (window[dart._polyfilled]) return false;
    window[dart._polyfilled] = true;
    if (typeof window.NodeList !== "undefined") {
      window.NodeList.prototype.get = function(i) {
        return this[i];
      };
      window.NamedNodeMap.prototype.get = function(i) {
        return this[i];
      };
      window.DOMTokenList.prototype.get = function(i) {
        return this[i];
      };
      window.HTMLCollection.prototype.get = function(i) {
        return this[i];
      };
      if (typeof window.PannerNode == "undefined") {
        let audioContext;
        if (typeof window.AudioContext == "undefined" && typeof window.webkitAudioContext != "undefined") {
          audioContext = new window.webkitAudioContext();
        } else {
          audioContext = new window.AudioContext();
          window.StereoPannerNode = audioContext.createStereoPanner().constructor;
        }
        window.PannerNode = audioContext.createPanner().constructor;
      }
      if (typeof window.AudioSourceNode == "undefined") {
        window.AudioSourceNode = MediaElementAudioSourceNode.__proto__;
      }
      if (typeof window.FontFaceSet == "undefined") {
        if (typeof window.document.fonts != "undefined") {
          window.FontFaceSet = window.document.fonts.__proto__.constructor;
        }
      }
      if (typeof window.MemoryInfo == "undefined") {
        if (typeof window.performance.memory != "undefined") {
          window.MemoryInfo = function() {
          };
          window.MemoryInfo.prototype = window.performance.memory.__proto__;
        }
      }
      if (typeof window.Geolocation == "undefined") {
        window.Geolocation == window.navigator.geolocation.constructor;
      }
      if (typeof window.Animation == "undefined") {
        let d = window.document.createElement('div');
        if (typeof d.animate != "undefined") {
          window.Animation = d.animate(d).constructor;
        }
      }
      if (typeof window.SourceBufferList == "undefined") {
        if ('MediaSource' in window) {
          window.SourceBufferList = new window.MediaSource().sourceBuffers.constructor;
        }
      }
      if (typeof window.SpeechRecognition == "undefined") {
        window.SpeechRecognition = window.webkitSpeechRecognition;
        window.SpeechRecognitionError = window.webkitSpeechRecognitionError;
        window.SpeechRecognitionEvent = window.webkitSpeechRecognitionEvent;
      }
    }
    return true;
  };
  dart.trackProfile = function trackProfile(flag) {
    if (flag == null) dart.nullFailed(I[4], 141, 24, "flag");
    dart.__trackProfile = flag;
  };
  dart.setStartAsyncSynchronously = function setStartAsyncSynchronously(value = true) {
    if (value == null) dart.nullFailed(I[4], 166, 39, "value");
    dart.startAsyncSynchronously = value;
  };
  dart.hotRestart = function hotRestart() {
    dart.hotRestartIteration = dart.notNull(dart.hotRestartIteration) + 1;
    for (let f of dart._resetFields)
      f();
    dart._resetFields[$clear]();
    for (let m of dart._cacheMaps)
      m.clear();
    dart._cacheMaps[$clear]();
    dart._nullComparisonSet.clear();
    dart.constantMaps.clear();
    dart.deferredImports.clear();
  };
  dart._throwInvalidFlagError = function _throwInvalidFlagError(message) {
    if (message == null) dart.nullFailed(I[5], 15, 31, "message");
    return dart.throw(new core.UnsupportedError.new("Invalid flag combination.\n" + dart.str(message)));
  };
  dart.weakNullSafetyWarnings = function weakNullSafetyWarnings(showWarnings) {
    if (showWarnings == null) dart.nullFailed(I[5], 25, 34, "showWarnings");
    if (dart.test(showWarnings) && false) {
      dart._throwInvalidFlagError("Null safety violations cannot be shown as warnings when running with " + "sound null safety.");
    }
    dart._weakNullSafetyWarnings = showWarnings;
  };
  dart.weakNullSafetyErrors = function weakNullSafetyErrors(showErrors) {
    if (showErrors == null) dart.nullFailed(I[5], 42, 32, "showErrors");
    if (dart.test(showErrors) && false) {
      dart._throwInvalidFlagError("Null safety violations are already thrown as errors when running with " + "sound null safety.");
    }
    if (dart.test(showErrors) && dart._weakNullSafetyWarnings) {
      dart._throwInvalidFlagError("Null safety violations can be shown as warnings or thrown as errors, " + "not both.");
    }
    dart._weakNullSafetyErrors = showErrors;
  };
  dart.nonNullAsserts = function nonNullAsserts(enable) {
    if (enable == null) dart.nullFailed(I[5], 66, 26, "enable");
    dart._nonNullAsserts = enable;
  };
  dart.nativeNonNullAsserts = function nativeNonNullAsserts(enable) {
    if (enable == null) dart.nullFailed(I[5], 78, 32, "enable");
    dart._nativeNonNullAsserts = enable;
  };
  dart._isJsObject = function _isJsObject(obj) {
    return dart.getReifiedType(obj) === dart.jsobject;
  };
  dart.assertInterop = function assertInterop(f) {
    if (f == null) dart.nullFailed(I[5], 164, 39, "f");
    if (!(dart._isJsObject(f) || !(f instanceof dart.global.Function))) dart.assertFailed("Dart function requires `allowInterop` to be passed to JavaScript.", I[5], 166, 7, "_isJsObject(f) ||\n          !JS<bool>('bool', '# instanceof #.Function', f, global_)");
    return f;
  };
  dart.isDartFunction = function isDartFunction(obj) {
    return obj instanceof Function && obj[dart._runtimeType] != null;
  };
  dart.tearoffInterop = function tearoffInterop(f) {
    if (!dart._isJsObject(f) || f == null) return f;
    let ret = dart._assertInteropExpando._get(f);
    if (ret == null) {
      ret = function(...arguments$) {
        var args = arguments$.map(dart.assertInterop);
        return f.apply(this, args);
      };
      dart._assertInteropExpando._set(f, ret);
    }
    return ret;
  };
  dart._warn = function _warn(arg) {
    console.warn(arg);
  };
  dart._nullWarn = function _nullWarn(message) {
    if (dart._weakNullSafetyWarnings) {
      dart._warn(dart.str(message) + "\n" + "This will become a failure when runtime null safety is enabled.");
    } else if (dart._weakNullSafetyErrors) {
      dart.throw(new _js_helper.TypeErrorImpl.new(core.String.as(message)));
    }
  };
  dart._nullWarnOnType = function _nullWarnOnType(type) {
    let result = dart._nullComparisonSet.has(type);
    if (!dart.test(result)) {
      dart._nullComparisonSet.add(type);
      dart._nullWarn("Null is not a subtype of " + dart.str(type) + ".");
    }
  };
  dart.lazyJSType = function lazyJSType(getJSTypeCallback, name) {
    if (getJSTypeCallback == null) dart.nullFailed(I[5], 304, 23, "getJSTypeCallback");
    if (name == null) dart.nullFailed(I[5], 304, 49, "name");
    let ret = dart._lazyJSTypes.get(name);
    if (ret == null) {
      ret = new dart.LazyJSType.new(getJSTypeCallback, name);
      dart._lazyJSTypes.set(name, ret);
    }
    return ret;
  };
  dart.anonymousJSType = function anonymousJSType(name) {
    if (name == null) dart.nullFailed(I[5], 313, 24, "name");
    let ret = dart._anonymousJSTypes.get(name);
    if (ret == null) {
      ret = new dart.AnonymousJSType.new(name);
      dart._anonymousJSTypes.set(name, ret);
    }
    return ret;
  };
  dart.nullable = function nullable(type) {
    let cached = type[dart._cachedNullable];
    if (cached !== void 0) {
      return cached;
    }
    let cachedType = dart._computeNullable(type);
    type[dart._cachedNullable] = cachedType;
    return cachedType;
  };
  dart._computeNullable = function _computeNullable(type) {
    if (type instanceof dart.LegacyType) {
      return dart.nullable(type.type);
    }
    if (type instanceof dart.NullableType || dart._isTop(type) || type === core.Null || dart._isFutureOr(type) && dart.getGenericArgs(type)[0] instanceof dart.NullableType) {
      return type;
    }
    if (type === dart.Never) return core.Null;
    return new dart.NullableType.new(type);
  };
  dart.legacy = function legacy(type) {
    let cached = type[dart._cachedLegacy];
    if (cached !== void 0) {
      return cached;
    }
    let cachedType = dart._computeLegacy(type);
    type[dart._cachedLegacy] = cachedType;
    return cachedType;
  };
  dart._computeLegacy = function _computeLegacy(type) {
    if (type instanceof dart.LegacyType || type instanceof dart.NullableType || dart._isTop(type) || type === core.Null) {
      return type;
    }
    return new dart.LegacyType.new(type);
  };
  dart.wrapType = function wrapType(type, isNormalized = false) {
    if (type.hasOwnProperty(dart._typeObject)) {
      return type[dart._typeObject];
    }
    let result = isNormalized ? new dart._Type.new(core.Object.as(type)) : type instanceof dart.LegacyType ? dart.wrapType(type.type) : dart._canonicalizeNormalizedTypeObject(type);
    type[dart._typeObject] = result;
    return result;
  };
  dart._canonicalizeNormalizedTypeObject = function _canonicalizeNormalizedTypeObject(type) {
    if (!!(type instanceof dart.LegacyType)) dart.assertFailed(null, I[5], 528, 10, "!_jsInstanceOf(type, LegacyType)");
    function normalizeHelper(a) {
      return dart.unwrapType(dart.wrapType(a));
    }
    if (type instanceof dart.GenericFunctionTypeIdentifier) {
      return dart.wrapType(type, true);
    }
    if (type instanceof dart.FunctionType) {
      let normReturnType = normalizeHelper(dart.dload(type, 'returnType'));
      let normArgs = dart.dsend(dart.dsend(dart.dload(type, 'args'), 'map', [normalizeHelper]), 'toList', []);
      if (dart.global.Object.keys(dart.dload(type, 'named')).length === 0 && dart.global.Object.keys(dart.dload(type, 'requiredNamed')).length === 0) {
        if (dart.dtest(dart.dload(dart.dload(type, 'optionals'), 'isEmpty'))) {
          let normType = dart.fnType(normReturnType, core.List.as(normArgs));
          return dart.wrapType(normType, true);
        }
        let normOptionals = dart.dsend(dart.dsend(dart.dload(type, 'optionals'), 'map', [normalizeHelper]), 'toList', []);
        let normType = dart.fnType(normReturnType, core.List.as(normArgs), normOptionals);
        return dart.wrapType(normType, true);
      }
      let normNamed = {};
      dart._transformJSObject(dart.dload(type, 'named'), normNamed, normalizeHelper);
      let normRequiredNamed = {};
      dart._transformJSObject(dart.dload(type, 'requiredNamed'), normRequiredNamed, normalizeHelper);
      let normType = dart.fnType(normReturnType, core.List.as(normArgs), normNamed, normRequiredNamed);
      return dart.wrapType(normType, true);
    }
    if (type instanceof dart.GenericFunctionType) {
      let formals = dart._getCanonicalTypeFormals(core.int.as(dart.dload(dart.dload(type, 'typeFormals'), 'length')));
      let normBounds = core.List.as(dart.dsend(dart.dsend(dart.dsend(type, 'instantiateTypeBounds', [formals]), 'map', [normalizeHelper]), 'toList', []));
      let substitutedTypes = [];
      if (dart.test(normBounds[$contains](dart.Never))) {
        for (let i = 0; i < dart.notNull(formals[$length]); i = i + 1) {
          let substitutedType = normBounds[$_get](i);
          while (dart.test(formals[$contains](substitutedType))) {
            substitutedType = normBounds[$_get](formals[$indexOf](dart.TypeVariable.as(substitutedType)));
          }
          if (dart.equals(substitutedType, dart.Never)) {
            substitutedTypes[$add](dart.Never);
          } else {
            substitutedTypes[$add](formals[$_get](i));
          }
        }
      } else {
        substitutedTypes = formals;
      }
      let normFunc = dart.FunctionType.as(normalizeHelper(dart.dsend(type, 'instantiate', [substitutedTypes])));
      let typeObjectIdKey = [];
      typeObjectIdKey.push(...normBounds);
      typeObjectIdKey.push(normFunc);
      let memoizedId = dart._memoizeArray(dart._gFnTypeTypeMap, typeObjectIdKey, () => new dart.GenericFunctionTypeIdentifier.new(formals, normBounds, normFunc));
      return dart.wrapType(memoizedId, true);
    }
    let args = dart.getGenericArgs(type);
    let normType = null;
    if (args == null || dart.test(args[$isEmpty])) {
      normType = type;
    } else {
      let genericClass = dart.getGenericClass(type);
      let normArgs = args[$map](core.Object, normalizeHelper)[$toList]();
      normType = genericClass(...normArgs);
    }
    return dart.wrapType(normType, true);
  };
  dart._transformJSObject = function _transformJSObject(srcObject, dstObject, transform) {
    if (transform == null) dart.nullFailed(I[5], 610, 56, "transform");
    for (let key of dart.global.Object.keys(srcObject)) {
      dstObject[key] = dart.dcall(transform, [srcObject[key]]);
    }
  };
  dart.unwrapType = function unwrapType(obj) {
    if (obj == null) dart.nullFailed(I[5], 621, 24, "obj");
    return obj[_type$];
  };
  dart._getCanonicalTypeFormals = function _getCanonicalTypeFormals(count) {
    if (count == null) dart.nullFailed(I[5], 666, 49, "count");
    while (dart.notNull(count) > dart.notNull(dart._typeVariablePool[$length])) {
      dart._fillTypeVariable();
    }
    return dart._typeVariablePool[$sublist](0, count);
  };
  dart._fillTypeVariable = function _fillTypeVariable() {
    if (dart.notNull(dart._typeVariablePool[$length]) < 26) {
      dart._typeVariablePool[$add](new dart.TypeVariable.new(core.String.fromCharCode(65 + dart.notNull(dart._typeVariablePool[$length]))));
    } else {
      dart._typeVariablePool[$add](new dart.TypeVariable.new("T" + dart.str(dart.notNull(dart._typeVariablePool[$length]) - 26)));
    }
  };
  dart._memoizeArray = function _memoizeArray(map, arr, create) {
    if (create == null) dart.nullFailed(I[5], 688, 32, "create");
    return (() => {
      let len = arr.length;
      map = dart._lookupNonTerminal(map, len);
      for (var i = 0; i < len - 1; ++i) {
        map = dart._lookupNonTerminal(map, arr[i]);
      }
      let result = map.get(arr[len - 1]);
      if (result !== void 0) return result;
      map.set(arr[len - 1], result = create());
      return result;
    })();
  };
  dart._canonicalizeArray = function _canonicalizeArray(array, map) {
    if (array == null) dart.nullFailed(I[5], 700, 30, "array");
    return dart._memoizeArray(map, array, () => array);
  };
  dart._canonicalizeNamed = function _canonicalizeNamed(named, map) {
    let key = [];
    let names = dart.getOwnPropertyNames(named);
    for (var i = 0; i < names.length; ++i) {
      let name = names[i];
      let type = named[name];
      key.push(name);
      key.push(type);
    }
    return dart._memoizeArray(map, key, () => named);
  };
  dart._createSmall = function _createSmall(returnType, required) {
    if (required == null) dart.nullFailed(I[5], 720, 44, "required");
    return (() => {
      let count = required.length;
      let map = dart._fnTypeSmallMap[count];
      for (var i = 0; i < count; ++i) {
        map = dart._lookupNonTerminal(map, required[i]);
      }
      let result = map.get(returnType);
      if (result !== void 0) return result;
      result = new dart.FunctionType.new(core.Type.as(returnType), required, [], {}, {});
      map.set(returnType, result);
      return result;
    })();
  };
  dart._typeFormalsFromFunction = function _typeFormalsFromFunction(typeConstructor) {
    let str = typeConstructor.toString();
    let hasParens = str[$_get](0) === "(";
    let end = str[$indexOf](hasParens ? ")" : "=>");
    if (hasParens) {
      return str[$substring](1, end)[$split](",")[$map](dart.TypeVariable, n => {
        if (n == null) dart.nullFailed(I[5], 1152, 15, "n");
        return new dart.TypeVariable.new(n[$trim]());
      })[$toList]();
    } else {
      return T$.JSArrayOfTypeVariable().of([new dart.TypeVariable.new(str[$substring](0, end)[$trim]())]);
    }
  };
  dart.fnType = function fnType(returnType, args, optional = null, requiredNamed = null) {
    if (args == null) dart.nullFailed(I[5], 1160, 38, "args");
    return dart.FunctionType.create(returnType, args, optional, requiredNamed);
  };
  dart.gFnType = function gFnType(instantiateFn, typeBounds) {
    return new dart.GenericFunctionType.new(instantiateFn, typeBounds);
  };
  dart.isType = function isType(obj) {
    return obj[dart._runtimeType] === core.Type;
  };
  dart.checkTypeBound = function checkTypeBound(type, bound, name) {
    if (!dart.isSubtypeOf(type, bound)) {
      dart.throwTypeError("type `" + dart.str(type) + "` does not extend `" + dart.str(bound) + "` of `" + name + "`.");
    }
  };
  dart.typeName = function typeName(type) {
    if (type === void 0) return "undefined type";
    if (type === null) return "null type";
    if (type instanceof dart.DartType) {
      return type.toString();
    }
    let tag = type[dart._runtimeType];
    if (tag === core.Type) {
      let name = type.name;
      let args = dart.getGenericArgs(type);
      if (args == null) return name;
      if (dart.getGenericClass(type) == _interceptors.JSArray$) name = 'List';
      let result = name;
      result += '<';
      for (let i = 0; i < args.length; ++i) {
        if (i > 0) result += ', ';
        result += dart.typeName(args[i]);
      }
      result += '>';
      return result;
    }
    if (tag) return "Not a type: " + tag.name;
    return "JSObject<" + type.name + ">";
  };
  dart._isFunctionSubtype = function _isFunctionSubtype(ft1, ft2, strictMode) {
    let ret1 = ft1.returnType;
    let ret2 = ft2.returnType;
    let args1 = ft1.args;
    let args2 = ft2.args;
    if (args1.length > args2.length) {
      return false;
    }
    for (let i = 0; i < args1.length; ++i) {
      if (!dart._isSubtype(args2[i], args1[i], strictMode)) {
        return false;
      }
    }
    let optionals1 = ft1.optionals;
    let optionals2 = ft2.optionals;
    if (args1.length + optionals1.length < args2.length + optionals2.length) {
      return false;
    }
    let j = 0;
    for (let i = args1.length; i < args2.length; ++i, ++j) {
      if (!dart._isSubtype(args2[i], optionals1[j], strictMode)) {
        return false;
      }
    }
    for (let i = 0; i < optionals2.length; ++i, ++j) {
      if (!dart._isSubtype(optionals2[i], optionals1[j], strictMode)) {
        return false;
      }
    }
    let named1 = ft1.named;
    let requiredNamed1 = ft1.requiredNamed;
    let named2 = ft2.named;
    let requiredNamed2 = ft2.requiredNamed;
    if (!strictMode) {
      named1 = Object.assign({}, named1, requiredNamed1);
      named2 = Object.assign({}, named2, requiredNamed2);
      requiredNamed1 = {};
      requiredNamed2 = {};
    }
    let names = dart.getOwnPropertyNames(requiredNamed1);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n2 = requiredNamed2[name];
      if (n2 === void 0) {
        return false;
      }
    }
    names = dart.getOwnPropertyNames(named2);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n1 = named1[name];
      let n2 = named2[name];
      if (n1 === void 0) {
        return false;
      }
      if (!dart._isSubtype(n2, n1, strictMode)) {
        return false;
      }
    }
    names = dart.getOwnPropertyNames(requiredNamed2);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n1 = named1[name] || requiredNamed1[name];
      let n2 = requiredNamed2[name];
      if (n1 === void 0) {
        return false;
      }
      if (!dart._isSubtype(n2, n1, strictMode)) {
        return false;
      }
    }
    return dart._isSubtype(ret1, ret2, strictMode);
  };
  dart.isSubtypeOf = function isSubtypeOf(t1, t2) {
    let map = t1[dart._subtypeCache];
    let result = map.get(t2);
    if (result !== void 0) return result;
    let validSubtype = dart._isSubtype(t1, t2, true);
    if (!validSubtype && !false) {
      validSubtype = dart._isSubtype(t1, t2, false);
      if (validSubtype) {
        dart._nullWarn(dart.str(t1) + " is not a subtype of " + dart.str(t2) + ".");
      }
    }
    map.set(t2, validSubtype);
    return validSubtype;
  };
  dart._isBottom = function _isBottom(type, strictMode) {
    return type === dart.Never || !strictMode && type === core.Null;
  };
  dart._isTop = function _isTop(type) {
    if (type instanceof dart.NullableType) return type.type === core.Object;
    return type === dart.dynamic || type === dart.void;
  };
  dart._isFutureOr = function _isFutureOr(type) {
    let genericClass = dart.getGenericClass(type);
    return genericClass && genericClass === async.FutureOr$;
  };
  dart._isSubtype = function _isSubtype(t1, t2, strictMode) {
    if (!strictMode) {
      if (t1 instanceof dart.NullableType) {
        t1 = t1.type;
      }
      if (t2 instanceof dart.NullableType) {
        t2 = t2.type;
      }
    }
    if (t1 === t2) {
      return true;
    }
    if (dart._isTop(t2) || dart._isBottom(t1, strictMode)) {
      return true;
    }
    if (t1 === dart.dynamic || t1 === dart.void) {
      return dart._isSubtype(dart.nullable(core.Object), t2, strictMode);
    }
    if (t2 === core.Object) {
      if (dart._isFutureOr(t1)) {
        let t1TypeArg = dart.getGenericArgs(t1)[0];
        return dart._isSubtype(t1TypeArg, core.Object, strictMode);
      }
      if (t1 instanceof dart.LegacyType) {
        return dart._isSubtype(t1.type, t2, strictMode);
      }
      if (t1 === core.Null || t1 instanceof dart.NullableType) {
        return false;
      }
      return true;
    }
    if (t1 === core.Null) {
      if (dart._isFutureOr(t2)) {
        let t2TypeArg = dart.getGenericArgs(t2)[0];
        return dart._isSubtype(core.Null, t2TypeArg, strictMode);
      }
      return t2 === core.Null || t2 instanceof dart.LegacyType || t2 instanceof dart.NullableType;
    }
    if (t1 instanceof dart.LegacyType) {
      return dart._isSubtype(t1.type, t2, strictMode);
    }
    if (t2 instanceof dart.LegacyType) {
      return dart._isSubtype(t1, dart.nullable(t2.type), strictMode);
    }
    if (dart._isFutureOr(t1)) {
      let t1TypeArg = dart.getGenericArgs(t1)[0];
      if (dart._isFutureOr(t2)) {
        let t2TypeArg = dart.getGenericArgs(t2)[0];
        if (dart._isSubtype(t1TypeArg, t2TypeArg, strictMode)) {
          return true;
        }
      }
      let t1Future = async.Future$(t1TypeArg);
      return dart._isSubtype(t1Future, t2, strictMode) && dart._isSubtype(t1TypeArg, t2, strictMode);
    }
    if (t1 instanceof dart.NullableType) {
      return dart._isSubtype(t1.type, t2, strictMode) && dart._isSubtype(core.Null, t2, strictMode);
    }
    if (dart._isFutureOr(t2)) {
      let t2TypeArg = dart.getGenericArgs(t2)[0];
      let t2Future = async.Future$(t2TypeArg);
      return dart._isSubtype(t1, t2Future, strictMode) || dart._isSubtype(t1, t2TypeArg, strictMode);
    }
    if (t2 instanceof dart.NullableType) {
      return dart._isSubtype(t1, t2.type, strictMode) || dart._isSubtype(t1, core.Null, strictMode);
    }
    if (!(t2 instanceof dart.AbstractFunctionType)) {
      if (t1 instanceof dart.AbstractFunctionType) {
        return t2 === core.Function;
      }
      if (t1 === dart.jsobject && t2 instanceof dart.AnonymousJSType) {
        return true;
      }
      return dart._isInterfaceSubtype(t1, t2, strictMode);
    }
    if (!(t1 instanceof dart.AbstractFunctionType)) {
      return false;
    }
    if (t1 instanceof dart.GenericFunctionType) {
      if (!(t2 instanceof dart.GenericFunctionType)) {
        return false;
      }
      let formalCount = t1.formalCount;
      if (formalCount !== t2.formalCount) {
        return false;
      }
      let fresh = t2.typeFormals;
      if (t1.hasTypeBounds || t2.hasTypeBounds) {
        let t1Bounds = t1.instantiateTypeBounds(fresh);
        let t2Bounds = t2.instantiateTypeBounds(fresh);
        for (let i = 0; i < formalCount; i++) {
          if (t1Bounds[i] != t2Bounds[i]) {
            if (!(dart._isSubtype(t1Bounds[i], t2Bounds[i], strictMode) && dart._isSubtype(t2Bounds[i], t1Bounds[i], strictMode))) {
              return false;
            }
          }
        }
      }
      t1 = t1.instantiate(fresh);
      t2 = t2.instantiate(fresh);
    } else if (t2 instanceof dart.GenericFunctionType) {
      return false;
    }
    return dart._isFunctionSubtype(t1, t2, strictMode);
  };
  dart._isInterfaceSubtype = function _isInterfaceSubtype(t1, t2, strictMode) {
    if (t1 instanceof dart.LazyJSType) t1 = t1.rawJSTypeForCheck();
    if (t2 instanceof dart.LazyJSType) t2 = t2.rawJSTypeForCheck();
    if (t1 === t2) {
      return true;
    }
    if (t1 === core.Object) {
      return false;
    }
    if (t1 === core.Function || t2 === core.Function) {
      return false;
    }
    if (t1 == null) {
      return t2 === core.Object || t2 === dart.dynamic;
    }
    let raw1 = dart.getGenericClass(t1);
    let raw2 = dart.getGenericClass(t2);
    if (raw1 != null && raw1 == raw2) {
      let typeArguments1 = dart.getGenericArgs(t1);
      let typeArguments2 = dart.getGenericArgs(t2);
      if (typeArguments1.length != typeArguments2.length) {
        dart.assertFailed();
      }
      let variances = dart.getGenericArgVariances(t1);
      for (let i = 0; i < typeArguments1.length; ++i) {
        if (variances === void 0 || variances[i] == 1) {
          if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode)) {
            return false;
          }
        } else if (variances[i] == 2) {
          if (!dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
            return false;
          }
        } else if (variances[i] == 3) {
          if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode) || !dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
            return false;
          }
        }
      }
      return true;
    }
    if (dart._isInterfaceSubtype(t1.__proto__, t2, strictMode)) {
      return true;
    }
    let m1 = dart.getMixin(t1);
    if (m1 != null && dart._isInterfaceSubtype(m1, t2, strictMode)) {
      return true;
    }
    let getInterfaces = dart.getImplements(t1);
    if (getInterfaces) {
      for (let i1 of getInterfaces()) {
        if (dart._isInterfaceSubtype(i1, t2, strictMode)) {
          return true;
        }
      }
    }
    return false;
  };
  dart.extractTypeArguments = function extractTypeArguments(T, instance, f) {
    if (f == null) dart.nullFailed(I[5], 1666, 54, "f");
    if (instance == null) {
      dart.throw(new core.ArgumentError.new("Cannot extract type of null instance."));
    }
    let type = T;
    type = type.type || type;
    if (dart.AbstractFunctionType.is(type) || dart._isFutureOr(type)) {
      dart.throw(new core.ArgumentError.new("Cannot extract from non-class type (" + dart.str(type) + ")."));
    }
    let typeArguments = dart.getGenericArgs(type);
    if (dart.test(dart.nullCheck(typeArguments)[$isEmpty])) {
      dart.throw(new core.ArgumentError.new("Cannot extract from non-generic type (" + dart.str(type) + ")."));
    }
    let supertype = dart._getMatchingSupertype(dart.getReifiedType(instance), type);
    if (!(supertype != null)) dart.assertFailed(null, I[5], 1684, 10, "supertype != null");
    let typeArgs = dart.getGenericArgs(supertype);
    if (!(typeArgs != null && dart.test(typeArgs[$isNotEmpty]))) dart.assertFailed(null, I[5], 1686, 10, "typeArgs != null && typeArgs.isNotEmpty");
    return dart.dgcall(f, typeArgs, []);
  };
  dart._getMatchingSupertype = function _getMatchingSupertype(subtype, supertype) {
    if (supertype == null) dart.nullFailed(I[5], 2047, 55, "supertype");
    if (core.identical(subtype, supertype)) return supertype;
    if (subtype == null || subtype === core.Object) return null;
    let subclass = dart.getGenericClass(subtype);
    let superclass = dart.getGenericClass(supertype);
    if (subclass != null && core.identical(subclass, superclass)) {
      return subtype;
    }
    let result = dart._getMatchingSupertype(subtype.__proto__, supertype);
    if (result != null) return result;
    let mixin = dart.getMixin(subtype);
    if (mixin != null) {
      result = dart._getMatchingSupertype(mixin, supertype);
      if (result != null) return result;
    }
    let getInterfaces = dart.getImplements(subtype);
    if (getInterfaces != null) {
      for (let iface of getInterfaces()) {
        result = dart._getMatchingSupertype(iface, supertype);
        if (result != null) return result;
      }
    }
    return null;
  };
  dart.defineValue = function defineValue(obj, name, value) {
    dart.defineAccessor(obj, name, {value: value, configurable: true, writable: true});
    return value;
  };
  dart.throwTypeError = function throwTypeError(message) {
    if (message == null) dart.nullFailed(I[6], 39, 28, "message");
    dart.throw(new _js_helper.TypeErrorImpl.new(message));
  };
  dart.throwInternalError = function throwInternalError(message) {
    if (message == null) dart.nullFailed(I[6], 44, 32, "message");
    throw Error(message);
  };
  dart.getOwnNamesAndSymbols = function getOwnNamesAndSymbols(obj) {
    let names = dart.getOwnPropertyNames(obj);
    let symbols = dart.getOwnPropertySymbols(obj);
    return names.concat(symbols);
  };
  dart.safeGetOwnProperty = function safeGetOwnProperty(obj, name) {
    if (obj.hasOwnProperty(name)) return obj[name];
  };
  dart.copyTheseProperties = function copyTheseProperties(to, from, names) {
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (dart.equals(name, "constructor")) continue;
      dart.copyProperty(to, from, name);
    }
    return to;
  };
  dart.copyProperty = function copyProperty(to, from, name) {
    let desc = dart.getOwnPropertyDescriptor(from, name);
    if (name == Symbol.iterator) {
      let existing = dart.getOwnPropertyDescriptor(to, name);
      if (existing != null) {
        if (existing.writable) {
          to[name] = desc.value;
        }
        return;
      }
    }
    dart.defineProperty(to, name, desc);
  };
  dart.export = function exportProperty(to, from, name) {
    return dart.copyProperty(to, from, name);
  };
  dart.copyProperties = function copyProperties(to, from) {
    return dart.copyTheseProperties(to, from, dart.getOwnNamesAndSymbols(from));
  };
  dart._polyfilled = Symbol("_polyfilled");
  dart.global = (function() {
    var globalState = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : null;
    if (!globalState) {
      globalState = new Function('return this;')();
    }
    dart.polyfill(globalState);
    if (globalState.Error) {
      globalState.Error.stackTraceLimit = Infinity;
    }
    let settings = 'ddcSettings' in globalState ? globalState.ddcSettings : {};
    dart.trackProfile('trackProfile' in settings ? settings.trackProfile : false);
    return globalState;
  })();
  dart.JsSymbol = Symbol;
  dart.libraryPrototype = dart.library;
  dart.startAsyncSynchronously = true;
  dart._cacheMaps = [];
  dart._resetFields = [];
  dart.hotRestartIteration = 0;
  dart.addAsyncCallback = function() {
  };
  dart.removeAsyncCallback = function() {
  };
  dart.defineProperty = Object.defineProperty;
  dart.defineAccessor = Object.defineProperty;
  dart.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  dart.getOwnPropertyNames = Object.getOwnPropertyNames;
  dart.getOwnPropertySymbols = Object.getOwnPropertySymbols;
  dart.getPrototypeOf = Object.getPrototypeOf;
  dart._mixin = Symbol("mixin");
  dart.mixinOn = Symbol("mixinOn");
  dart.implements = Symbol("implements");
  dart._typeArguments = Symbol("typeArguments");
  dart._variances = Symbol("variances");
  dart._originalDeclaration = Symbol("originalDeclaration");
  dart.mixinNew = Symbol("dart.mixinNew");
  dart._constructorSig = Symbol("sigCtor");
  dart._methodSig = Symbol("sigMethod");
  dart._fieldSig = Symbol("sigField");
  dart._getterSig = Symbol("sigGetter");
  dart._setterSig = Symbol("sigSetter");
  dart._staticMethodSig = Symbol("sigStaticMethod");
  dart._staticFieldSig = Symbol("sigStaticField");
  dart._staticGetterSig = Symbol("sigStaticGetter");
  dart._staticSetterSig = Symbol("sigStaticSetter");
  dart._genericTypeCtor = Symbol("genericType");
  dart._libraryUri = Symbol("libraryUri");
  dart._extensionType = Symbol("extensionType");
  dart.dartx = dartx;
  dart._extensionMap = new Map();
  dart.isFuture = Symbol("_is_Future");
  dart.isIterable = Symbol("_is_Iterable");
  dart.isList = Symbol("_is_List");
  dart.isMap = Symbol("_is_Map");
  dart.isStream = Symbol("_is_Stream");
  dart.isStreamSubscription = Symbol("_is_StreamSubscription");
  dart.identityEquals = null;
  dart._runtimeType = Symbol("_runtimeType");
  dart._moduleName = Symbol("_moduleName");
  dart._loadedModules = new Map();
  dart._loadedPartMaps = new Map();
  dart._loadedSourceMaps = new Map();
  dart._libraries = null;
  dart._libraryObjects = null;
  dart._parts = null;
  dart._weakNullSafetyWarnings = false;
  dart._weakNullSafetyErrors = false;
  dart._nonNullAsserts = false;
  dart._nativeNonNullAsserts = false;
  dart.metadata = Symbol("metadata");
  dart._nullComparisonSet = new Set();
  dart._lazyJSTypes = new Map();
  dart._anonymousJSTypes = new Map();
  dart._cachedNullable = Symbol("cachedNullable");
  dart._cachedLegacy = Symbol("cachedLegacy");
  dart._subtypeCache = Symbol("_subtypeCache");
  core.Object = class Object {
    constructor() {
      throw Error("use `new " + dart.typeName(dart.getReifiedType(this)) + ".new(...)` to create a Dart object");
    }
    static is(o) {
      return o != null;
    }
    static as(o) {
      return o == null ? dart.as(o, core.Object) : o;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other;
    }
    get hashCode() {
      return core.identityHashCode(this);
    }
    toString() {
      return "Instance of '" + dart.typeName(dart.getReifiedType(this)) + "'";
    }
    noSuchMethod(invocation) {
      if (invocation == null) dart.nullFailed(I[7], 60, 35, "invocation");
      return dart.defaultNoSuchMethod(this, invocation);
    }
    get runtimeType() {
      return dart.wrapType(dart.getReifiedType(this));
    }
  };
  (core.Object.new = function() {
    ;
  }).prototype = core.Object.prototype;
  dart.addTypeCaches(core.Object);
  dart.setMethodSignature(core.Object, () => ({
    __proto__: Object.create(null),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object]),
    toString: dart.fnType(core.String, []),
    [$toString]: dart.fnType(core.String, []),
    noSuchMethod: dart.fnType(dart.dynamic, [core.Invocation]),
    [$noSuchMethod]: dart.fnType(dart.dynamic, [core.Invocation])
  }));
  dart.setGetterSignature(core.Object, () => ({
    __proto__: Object.create(null),
    hashCode: core.int,
    [$hashCode]: core.int,
    runtimeType: core.Type,
    [$runtimeType]: core.Type
  }));
  dart.setLibraryUri(core.Object, I[8]);
  dart.lazyFn(core.Object, () => core.Type);
  dart.defineExtensionMethods(core.Object, ['_equals', 'toString', 'noSuchMethod']);
  dart.defineExtensionAccessors(core.Object, ['hashCode', 'runtimeType']);
  dart.registerExtension("Object", core.Object);
  dart.DartType = class DartType extends core.Object {
    get name() {
      return this[$toString]();
    }
    is(object) {
      return dart.is(object, this);
    }
    as(object) {
      return dart.as(object, this);
    }
  };
  (dart.DartType.new = function() {
    dart.addTypeCaches(this);
  }).prototype = dart.DartType.prototype;
  dart.addTypeTests(dart.DartType);
  dart.addTypeCaches(dart.DartType);
  dart.DartType[dart.implements] = () => [core.Type];
  dart.setMethodSignature(dart.DartType, () => ({
    __proto__: dart.getMethods(dart.DartType.__proto__),
    is: dart.fnType(core.bool, [dart.dynamic]),
    as: dart.fnType(dart.dynamic, [dart.dynamic])
  }));
  dart.setGetterSignature(dart.DartType, () => ({
    __proto__: dart.getGetters(dart.DartType.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(dart.DartType, I[9]);
  dart.NeverType = class NeverType extends dart.DartType {
    toString() {
      return "Never";
    }
  };
  (dart.NeverType.new = function() {
    dart.NeverType.__proto__.new.call(this);
    ;
  }).prototype = dart.NeverType.prototype;
  dart.addTypeTests(dart.NeverType);
  dart.addTypeCaches(dart.NeverType);
  dart.setLibraryUri(dart.NeverType, I[9]);
  dart.defineExtensionMethods(dart.NeverType, ['toString']);
  dart.Never = new dart.NeverType.new();
  dart.DynamicType = class DynamicType extends dart.DartType {
    toString() {
      return "dynamic";
    }
    is(object) {
      return true;
    }
    as(object) {
      return object;
    }
  };
  (dart.DynamicType.new = function() {
    dart.DynamicType.__proto__.new.call(this);
    ;
  }).prototype = dart.DynamicType.prototype;
  dart.addTypeTests(dart.DynamicType);
  dart.addTypeCaches(dart.DynamicType);
  dart.setMethodSignature(dart.DynamicType, () => ({
    __proto__: dart.getMethods(dart.DynamicType.__proto__),
    as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dart.DynamicType, I[9]);
  dart.defineExtensionMethods(dart.DynamicType, ['toString']);
  dart.dynamic = new dart.DynamicType.new();
  dart.VoidType = class VoidType extends dart.DartType {
    toString() {
      return "void";
    }
    is(object) {
      return true;
    }
    as(object) {
      return object;
    }
  };
  (dart.VoidType.new = function() {
    dart.VoidType.__proto__.new.call(this);
    ;
  }).prototype = dart.VoidType.prototype;
  dart.addTypeTests(dart.VoidType);
  dart.addTypeCaches(dart.VoidType);
  dart.setMethodSignature(dart.VoidType, () => ({
    __proto__: dart.getMethods(dart.VoidType.__proto__),
    as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dart.VoidType, I[9]);
  dart.defineExtensionMethods(dart.VoidType, ['toString']);
  dart.void = new dart.VoidType.new();
  dart.JSObjectType = class JSObjectType extends dart.DartType {
    toString() {
      return "NativeJavaScriptObject";
    }
  };
  (dart.JSObjectType.new = function() {
    dart.JSObjectType.__proto__.new.call(this);
    ;
  }).prototype = dart.JSObjectType.prototype;
  dart.addTypeTests(dart.JSObjectType);
  dart.addTypeCaches(dart.JSObjectType);
  dart.setLibraryUri(dart.JSObjectType, I[9]);
  dart.defineExtensionMethods(dart.JSObjectType, ['toString']);
  dart.jsobject = new dart.JSObjectType.new();
  dart._typeObject = Symbol("typeObject");
  dart._fnTypeNamedArgMap = new Map();
  dart._fnTypeArrayArgMap = new Map();
  dart._fnTypeTypeMap = new Map();
  dart._fnTypeSmallMap = [new Map(), new Map(), new Map()];
  dart._gFnTypeTypeMap = new Map();
  dart._nullFailedSet = new Set();
  dart._thrownValue = Symbol("_thrownValue");
  dart._jsError = Symbol("_jsError");
  dart._stackTrace = Symbol("_stackTrace");
  dart.DartError = class DartError extends Error {
    constructor(error) {
      super();
      if (error == null) error = new core.NullThrownError.new();
      this[dart._thrownValue] = error;
      if (error != null && typeof error == "object" && error[dart._jsError] == null) {
        error[dart._jsError] = this;
      }
    }
    get message() {
      return dart.toString(this[dart._thrownValue]);
    }
  };
  dart.RethrownDartError = class RethrownDartError extends dart.DartError {
    constructor(error, stackTrace) {
      super(error);
      this[dart._stackTrace] = stackTrace;
    }
    get message() {
      return super.message + "\n    " + dart.toString(this[dart._stackTrace]) + "\n";
    }
  };
  dart.constantMaps = new Map();
  dart.constantSets = new Map();
  dart._immutableSetConstructor = null;
  dart._value = Symbol("_value");
  dart.constants = new Map();
  dart.constantLists = new Map();
  dart.identityHashCode_ = Symbol("_identityHashCode");
  dart.JsIterator = class JsIterator {
    constructor(dartIterator) {
      this.dartIterator = dartIterator;
    }
    next() {
      let i = this.dartIterator;
      let done = !i.moveNext();
      return {done: done, value: done ? void 0 : i.current};
    }
  };
  dart.deferredImports = new Map();
  dart.defineLazy(dart, {
    /*dart._assertInteropExpando*/get _assertInteropExpando() {
      return new (T$.ExpandoOfFunction()).new();
    },
    set _assertInteropExpando(_) {},
    /*dart.bottom*/get bottom() {
      return core.Null;
    },
    /*dart._typeVariablePool*/get _typeVariablePool() {
      return T$.JSArrayOfTypeVariable().of([]);
    }
  }, false);
  var _rawJSType = dart.privateName(dart, "_rawJSType");
  var _getRawJSTypeFn$ = dart.privateName(dart, "_getRawJSTypeFn");
  var _dartName$ = dart.privateName(dart, "_dartName");
  var _getRawJSType = dart.privateName(dart, "_getRawJSType");
  dart.LazyJSType = class LazyJSType extends dart.DartType {
    toString() {
      let raw = this[_getRawJSType]();
      return raw != null ? dart.typeName(raw) : "JSObject<" + this[_dartName$] + ">";
    }
    [_getRawJSType]() {
      let raw = this[_rawJSType];
      if (raw != null) return raw;
      try {
        raw = this[_getRawJSTypeFn$]();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      if (raw == null) {
        dart._warn("Cannot find native JavaScript type (" + this[_dartName$] + ") for type check");
      } else {
        this[_rawJSType] = raw;
        dart._resetFields.push(() => this[_rawJSType] = null);
      }
      return raw;
    }
    rawJSTypeForCheck() {
      let t1;
      t1 = this[_getRawJSType]();
      return t1 == null ? dart.jsobject : t1;
    }
    is(obj) {
      return obj != null && (dart._isJsObject(obj) || dart.isSubtypeOf(dart.getReifiedType(obj), this));
    }
    as(obj) {
      return this.is(obj) ? obj : dart.castError(obj, this);
    }
  };
  (dart.LazyJSType.new = function(_getRawJSTypeFn, _dartName) {
    if (_getRawJSTypeFn == null) dart.nullFailed(I[5], 211, 19, "_getRawJSTypeFn");
    if (_dartName == null) dart.nullFailed(I[5], 211, 41, "_dartName");
    this[_rawJSType] = null;
    this[_getRawJSTypeFn$] = _getRawJSTypeFn;
    this[_dartName$] = _dartName;
    dart.LazyJSType.__proto__.new.call(this);
    ;
  }).prototype = dart.LazyJSType.prototype;
  dart.addTypeTests(dart.LazyJSType);
  dart.addTypeCaches(dart.LazyJSType);
  dart.setMethodSignature(dart.LazyJSType, () => ({
    __proto__: dart.getMethods(dart.LazyJSType.__proto__),
    [_getRawJSType]: dart.fnType(dart.nullable(core.Object), []),
    rawJSTypeForCheck: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(dart.LazyJSType, I[9]);
  dart.setFieldSignature(dart.LazyJSType, () => ({
    __proto__: dart.getFields(dart.LazyJSType.__proto__),
    [_getRawJSTypeFn$]: dart.fieldType(dart.fnType(dart.dynamic, [])),
    [_dartName$]: dart.finalFieldType(core.String),
    [_rawJSType]: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(dart.LazyJSType, ['toString']);
  dart.AnonymousJSType = class AnonymousJSType extends dart.DartType {
    toString() {
      return this[_dartName$];
    }
    is(obj) {
      return obj != null && (dart._isJsObject(obj) || dart.isSubtypeOf(dart.getReifiedType(obj), this));
    }
    as(obj) {
      return dart.test(this.is(obj)) ? obj : dart.castError(obj, this);
    }
  };
  (dart.AnonymousJSType.new = function(_dartName) {
    if (_dartName == null) dart.nullFailed(I[5], 257, 24, "_dartName");
    this[_dartName$] = _dartName;
    dart.AnonymousJSType.__proto__.new.call(this);
    ;
  }).prototype = dart.AnonymousJSType.prototype;
  dart.addTypeTests(dart.AnonymousJSType);
  dart.addTypeCaches(dart.AnonymousJSType);
  dart.setLibraryUri(dart.AnonymousJSType, I[9]);
  dart.setFieldSignature(dart.AnonymousJSType, () => ({
    __proto__: dart.getFields(dart.AnonymousJSType.__proto__),
    [_dartName$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dart.AnonymousJSType, ['toString']);
  var type$ = dart.privateName(dart, "NullableType.type");
  dart.NullableType = class NullableType extends dart.DartType {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get name() {
      return this.type instanceof dart.FunctionType ? "(" + dart.str(this.type) + ")?" : dart.str(this.type) + "?";
    }
    toString() {
      return this.name;
    }
    is(obj) {
      return obj == null || this.type.is(obj);
    }
    as(obj) {
      return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
    }
  };
  (dart.NullableType.new = function(type) {
    this[type$] = type;
    dart.NullableType.__proto__.new.call(this);
    ;
  }).prototype = dart.NullableType.prototype;
  dart.addTypeTests(dart.NullableType);
  dart.addTypeCaches(dart.NullableType);
  dart.setLibraryUri(dart.NullableType, I[9]);
  dart.setFieldSignature(dart.NullableType, () => ({
    __proto__: dart.getFields(dart.NullableType.__proto__),
    type: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(dart.NullableType, ['toString']);
  var type$0 = dart.privateName(dart, "LegacyType.type");
  dart.LegacyType = class LegacyType extends dart.DartType {
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    get name() {
      return dart.str(this.type);
    }
    toString() {
      return this.name;
    }
    is(obj) {
      if (obj == null) {
        return this.type === core.Object || this.type === dart.Never;
      }
      return this.type.is(obj);
    }
    as(obj) {
      return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
    }
  };
  (dart.LegacyType.new = function(type) {
    this[type$0] = type;
    dart.LegacyType.__proto__.new.call(this);
    ;
  }).prototype = dart.LegacyType.prototype;
  dart.addTypeTests(dart.LegacyType);
  dart.addTypeCaches(dart.LegacyType);
  dart.setLibraryUri(dart.LegacyType, I[9]);
  dart.setFieldSignature(dart.LegacyType, () => ({
    __proto__: dart.getFields(dart.LegacyType.__proto__),
    type: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(dart.LegacyType, ['toString']);
  dart.BottomType = class BottomType extends dart.DartType {
    toString() {
      return "bottom";
    }
  };
  (dart.BottomType.new = function() {
    dart.BottomType.__proto__.new.call(this);
    ;
  }).prototype = dart.BottomType.prototype;
  dart.addTypeTests(dart.BottomType);
  dart.addTypeCaches(dart.BottomType);
  dart.setLibraryUri(dart.BottomType, I[9]);
  dart.defineExtensionMethods(dart.BottomType, ['toString']);
  core.Type = class Type extends core.Object {};
  (core.Type.new = function() {
    ;
  }).prototype = core.Type.prototype;
  dart.addTypeTests(core.Type);
  dart.addTypeCaches(core.Type);
  dart.setLibraryUri(core.Type, I[8]);
  dart._Type = class _Type extends core.Type {
    toString() {
      return dart.typeName(this[_type$]);
    }
    get runtimeType() {
      return dart.wrapType(core.Type);
    }
  };
  (dart._Type.new = function(_type) {
    if (_type == null) dart.nullFailed(I[5], 496, 14, "_type");
    this[_type$] = _type;
    ;
  }).prototype = dart._Type.prototype;
  dart.addTypeTests(dart._Type);
  dart.addTypeCaches(dart._Type);
  dart.setLibraryUri(dart._Type, I[9]);
  dart.setFieldSignature(dart._Type, () => ({
    __proto__: dart.getFields(dart._Type.__proto__),
    [_type$]: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionMethods(dart._Type, ['toString']);
  dart.defineExtensionAccessors(dart._Type, ['runtimeType']);
  dart.AbstractFunctionType = class AbstractFunctionType extends dart.DartType {};
  (dart.AbstractFunctionType.new = function() {
    dart.AbstractFunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.AbstractFunctionType.prototype;
  dart.addTypeTests(dart.AbstractFunctionType);
  dart.addTypeCaches(dart.AbstractFunctionType);
  dart.setLibraryUri(dart.AbstractFunctionType, I[9]);
  var returnType$ = dart.privateName(dart, "FunctionType.returnType");
  var args$ = dart.privateName(dart, "FunctionType.args");
  var optionals$ = dart.privateName(dart, "FunctionType.optionals");
  var named$ = dart.privateName(dart, "FunctionType.named");
  var requiredNamed$ = dart.privateName(dart, "FunctionType.requiredNamed");
  var _stringValue = dart.privateName(dart, "_stringValue");
  var _createNameMap = dart.privateName(dart, "_createNameMap");
  dart.FunctionType = class FunctionType extends dart.AbstractFunctionType {
    get returnType() {
      return this[returnType$];
    }
    set returnType(value) {
      super.returnType = value;
    }
    get args() {
      return this[args$];
    }
    set args(value) {
      super.args = value;
    }
    get optionals() {
      return this[optionals$];
    }
    set optionals(value) {
      super.optionals = value;
    }
    get named() {
      return this[named$];
    }
    set named(value) {
      super.named = value;
    }
    get requiredNamed() {
      return this[requiredNamed$];
    }
    set requiredNamed(value) {
      super.requiredNamed = value;
    }
    static create(returnType, args, optionalArgs, requiredNamedArgs) {
      if (args == null) dart.nullFailed(I[5], 753, 24, "args");
      let noOptionalArgs = optionalArgs == null && requiredNamedArgs == null;
      if (noOptionalArgs && args.length < 3) {
        return dart._createSmall(returnType, args);
      }
      args = dart._canonicalizeArray(args, dart._fnTypeArrayArgMap);
      let keys = [];
      let create = null;
      if (noOptionalArgs) {
        keys = [returnType, args];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], {}, {});
      } else if (optionalArgs instanceof Array) {
        let optionals = dart._canonicalizeArray(optionalArgs, dart._fnTypeArrayArgMap);
        keys = [returnType, args, optionals];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, optionals, {}, {});
      } else {
        let named = dart._canonicalizeNamed(optionalArgs, dart._fnTypeNamedArgMap);
        let requiredNamed = dart._canonicalizeNamed(requiredNamedArgs, dart._fnTypeNamedArgMap);
        keys = [returnType, args, named, requiredNamed];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], named, requiredNamed);
      }
      return dart._memoizeArray(dart._fnTypeTypeMap, keys, create);
    }
    toString() {
      return this.name;
    }
    get requiredParameterCount() {
      return this.args[$length];
    }
    get positionalParameterCount() {
      return dart.notNull(this.args[$length]) + dart.notNull(this.optionals[$length]);
    }
    getPositionalParameter(i) {
      if (i == null) dart.nullFailed(I[5], 792, 30, "i");
      let n = this.args[$length];
      return dart.notNull(i) < dart.notNull(n) ? this.args[$_get](i) : this.optionals[$_get](dart.notNull(i) + dart.notNull(n));
    }
    [_createNameMap](names) {
      if (names == null) dart.nullFailed(I[5], 798, 52, "names");
      let result = new (T$.IdentityMapOfString$Object()).new();
      names.sort();
      for (let i = 0; i < names.length; i = i + 1) {
        let name = names[i];
        result[$_set](name, this.named[name]);
      }
      return result;
    }
    getNamedParameters() {
      return this[_createNameMap](dart.getOwnPropertyNames(this.named)[$toList]());
    }
    getRequiredNamedParameters() {
      return this[_createNameMap](dart.getOwnPropertyNames(this.requiredNamed)[$toList]());
    }
    get name() {
      if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
      let buffer = "(";
      for (let i = 0; i < this.args.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        buffer = buffer + dart.typeName(this.args[i]);
      }
      if (this.optionals.length > 0) {
        if (this.args.length > 0) buffer = buffer + ", ";
        buffer = buffer + "[";
        for (let i = 0; i < this.optionals.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          buffer = buffer + dart.typeName(this.optionals[i]);
        }
        buffer = buffer + "]";
      } else if (Object.keys(this.named).length > 0 || Object.keys(this.requiredNamed).length > 0) {
        if (this.args.length > 0) buffer = buffer + ", ";
        buffer = buffer + "{";
        let names = dart.getOwnPropertyNames(this.named);
        names.sort();
        for (let i = 0; i < names.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          let typeNameString = dart.typeName(this.named[names[i]]);
          buffer = buffer + (typeNameString + " " + dart.str(names[i]));
        }
        if (Object.keys(this.requiredNamed).length > 0 && names.length > 0) buffer = buffer + ", ";
        names = dart.getOwnPropertyNames(this.requiredNamed);
        names.sort();
        for (let i = 0; i < names.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          let typeNameString = dart.typeName(this.requiredNamed[names[i]]);
          buffer = buffer + ("required " + typeNameString + " " + dart.str(names[i]));
        }
        buffer = buffer + "}";
      }
      let returnTypeName = dart.typeName(this.returnType);
      buffer = buffer + (") => " + returnTypeName);
      this[_stringValue] = buffer;
      return buffer;
    }
    is(obj) {
      if (typeof obj == "function") {
        let actual = obj[dart._runtimeType];
        return actual == null || dart.isSubtypeOf(actual, this);
      }
      return false;
    }
    as(obj) {
      if (dart.test(this.is(obj))) return obj;
      return dart.as(obj, this);
    }
  };
  (dart.FunctionType.new = function(returnType, args, optionals, named, requiredNamed) {
    if (returnType == null) dart.nullFailed(I[5], 784, 21, "returnType");
    if (args == null) dart.nullFailed(I[5], 784, 38, "args");
    if (optionals == null) dart.nullFailed(I[5], 784, 49, "optionals");
    this[_stringValue] = null;
    this[returnType$] = returnType;
    this[args$] = args;
    this[optionals$] = optionals;
    this[named$] = named;
    this[requiredNamed$] = requiredNamed;
    dart.FunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.FunctionType.prototype;
  dart.addTypeTests(dart.FunctionType);
  dart.addTypeCaches(dart.FunctionType);
  dart.setMethodSignature(dart.FunctionType, () => ({
    __proto__: dart.getMethods(dart.FunctionType.__proto__),
    getPositionalParameter: dart.fnType(dart.dynamic, [core.int]),
    [_createNameMap]: dart.fnType(core.Map$(core.String, core.Object), [core.List$(dart.nullable(core.Object))]),
    getNamedParameters: dart.fnType(core.Map$(core.String, core.Object), []),
    getRequiredNamedParameters: dart.fnType(core.Map$(core.String, core.Object), [])
  }));
  dart.setGetterSignature(dart.FunctionType, () => ({
    __proto__: dart.getGetters(dart.FunctionType.__proto__),
    requiredParameterCount: core.int,
    positionalParameterCount: core.int
  }));
  dart.setLibraryUri(dart.FunctionType, I[9]);
  dart.setFieldSignature(dart.FunctionType, () => ({
    __proto__: dart.getFields(dart.FunctionType.__proto__),
    returnType: dart.finalFieldType(core.Type),
    args: dart.finalFieldType(core.List),
    optionals: dart.finalFieldType(core.List),
    named: dart.finalFieldType(dart.dynamic),
    requiredNamed: dart.finalFieldType(dart.dynamic),
    [_stringValue]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart.FunctionType, ['toString']);
  var name$ = dart.privateName(dart, "TypeVariable.name");
  dart.TypeVariable = class TypeVariable extends dart.DartType {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return this.name;
    }
  };
  (dart.TypeVariable.new = function(name) {
    if (name == null) dart.nullFailed(I[5], 893, 21, "name");
    this[name$] = name;
    dart.TypeVariable.__proto__.new.call(this);
    ;
  }).prototype = dart.TypeVariable.prototype;
  dart.addTypeTests(dart.TypeVariable);
  dart.addTypeCaches(dart.TypeVariable);
  dart.setLibraryUri(dart.TypeVariable, I[9]);
  dart.setFieldSignature(dart.TypeVariable, () => ({
    __proto__: dart.getFields(dart.TypeVariable.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dart.TypeVariable, ['toString']);
  dart.Variance = class Variance extends core.Object {};
  (dart.Variance.new = function() {
    ;
  }).prototype = dart.Variance.prototype;
  dart.addTypeTests(dart.Variance);
  dart.addTypeCaches(dart.Variance);
  dart.setLibraryUri(dart.Variance, I[9]);
  dart.defineLazy(dart.Variance, {
    /*dart.Variance.unrelated*/get unrelated() {
      return 0;
    },
    /*dart.Variance.covariant*/get covariant() {
      return 1;
    },
    /*dart.Variance.contravariant*/get contravariant() {
      return 2;
    },
    /*dart.Variance.invariant*/get invariant() {
      return 3;
    }
  }, false);
  var typeFormals$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeFormals");
  var typeBounds$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeBounds");
  var $function$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.function");
  dart.GenericFunctionTypeIdentifier = class GenericFunctionTypeIdentifier extends dart.AbstractFunctionType {
    get typeFormals() {
      return this[typeFormals$];
    }
    set typeFormals(value) {
      super.typeFormals = value;
    }
    get typeBounds() {
      return this[typeBounds$];
    }
    set typeBounds(value) {
      super.typeBounds = value;
    }
    get function() {
      return this[$function$];
    }
    set function(value) {
      super.function = value;
    }
    toString() {
      if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
      let s = "<";
      let typeFormals = this.typeFormals;
      let typeBounds = this.typeBounds;
      for (let i = 0, n = core.int.as(dart.dload(typeFormals, 'length')); i < dart.notNull(n); i = i + 1) {
        if (i !== 0) s = s + ", ";
        s = s + typeFormals[i].name;
        let bound = dart.dsend(typeBounds, '_get', [i]);
        if (bound === dart.dynamic || bound === dart.nullable(core.Object) || !false && bound === core.Object) {
          continue;
        }
        s = s + (" extends " + dart.str(bound));
      }
      s = s + (">" + dart.notNull(dart.toString(this.function)));
      return this[_stringValue] = s;
    }
  };
  (dart.GenericFunctionTypeIdentifier.new = function(typeFormals, typeBounds, $function) {
    if ($function == null) dart.nullFailed(I[5], 916, 47, "function");
    this[_stringValue] = null;
    this[typeFormals$] = typeFormals;
    this[typeBounds$] = typeBounds;
    this[$function$] = $function;
    dart.GenericFunctionTypeIdentifier.__proto__.new.call(this);
    ;
  }).prototype = dart.GenericFunctionTypeIdentifier.prototype;
  dart.addTypeTests(dart.GenericFunctionTypeIdentifier);
  dart.addTypeCaches(dart.GenericFunctionTypeIdentifier);
  dart.setLibraryUri(dart.GenericFunctionTypeIdentifier, I[9]);
  dart.setFieldSignature(dart.GenericFunctionTypeIdentifier, () => ({
    __proto__: dart.getFields(dart.GenericFunctionTypeIdentifier.__proto__),
    typeFormals: dart.finalFieldType(dart.dynamic),
    typeBounds: dart.finalFieldType(dart.dynamic),
    function: dart.finalFieldType(dart.FunctionType),
    [_stringValue]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart.GenericFunctionTypeIdentifier, ['toString']);
  var formalCount = dart.privateName(dart, "GenericFunctionType.formalCount");
  var _instantiateTypeBounds$ = dart.privateName(dart, "_instantiateTypeBounds");
  var _instantiateTypeParts = dart.privateName(dart, "_instantiateTypeParts");
  var _typeFormals = dart.privateName(dart, "_typeFormals");
  dart.GenericFunctionType = class GenericFunctionType extends dart.AbstractFunctionType {
    get formalCount() {
      return this[formalCount];
    }
    set formalCount(value) {
      super.formalCount = value;
    }
    get typeFormals() {
      return this[_typeFormals];
    }
    get hasTypeBounds() {
      return this[_instantiateTypeBounds$] != null;
    }
    checkBounds(typeArgs) {
      if (typeArgs == null) dart.nullFailed(I[5], 964, 33, "typeArgs");
      if (!dart.test(this.hasTypeBounds)) return;
      let bounds = this.instantiateTypeBounds(typeArgs);
      let typeFormals = this.typeFormals;
      for (let i = 0; i < dart.notNull(typeArgs[$length]); i = i + 1) {
        dart.checkTypeBound(typeArgs[$_get](i), bounds[$_get](i), typeFormals[$_get](i).name);
      }
    }
    instantiate(typeArgs) {
      let parts = this[_instantiateTypeParts].apply(null, typeArgs);
      return dart.FunctionType.create(parts[0], parts[1], parts[2], parts[3]);
    }
    instantiateTypeBounds(typeArgs) {
      if (typeArgs == null) dart.nullFailed(I[5], 982, 43, "typeArgs");
      if (!dart.test(this.hasTypeBounds)) {
        return T$.ListOfObject().filled(this.formalCount, dart.legacy(core.Object));
      }
      return this[_instantiateTypeBounds$].apply(null, typeArgs);
    }
    toString() {
      let s = "<";
      let typeFormals = this.typeFormals;
      let typeBounds = this.instantiateTypeBounds(typeFormals);
      for (let i = 0, n = typeFormals[$length]; i < dart.notNull(n); i = i + 1) {
        if (i !== 0) s = s + ", ";
        s = s + typeFormals[i].name;
        let bound = typeBounds[$_get](i);
        if (bound !== dart.dynamic && bound !== core.Object) {
          s = s + (" extends " + dart.str(bound));
        }
      }
      s = s + (">" + dart.notNull(dart.toString(this.instantiate(typeFormals))));
      return s;
    }
    instantiateDefaultBounds() {
      function defaultsToDynamic(type) {
        if (type === dart.dynamic) return true;
        if (type instanceof dart.NullableType || !false && type instanceof dart.LegacyType) {
          return type.type === core.Object;
        }
        return false;
      }
      let typeFormals = this.typeFormals;
      let all = new (T$.IdentityMapOfTypeVariable$int()).new();
      let defaults = T$.ListOfObjectN().filled(typeFormals[$length], null);
      let partials = new (T$.IdentityMapOfTypeVariable$Object()).new();
      let typeBounds = this.instantiateTypeBounds(typeFormals);
      for (let i = 0; i < dart.notNull(typeFormals[$length]); i = i + 1) {
        let typeFormal = typeFormals[$_get](i);
        let bound = typeBounds[$_get](i);
        all[$_set](typeFormal, i);
        if (dart.test(defaultsToDynamic(bound))) {
          defaults[$_set](i, dart.dynamic);
        } else {
          defaults[$_set](i, typeFormal);
          partials[$_set](typeFormal, bound);
        }
      }
      function hasFreeFormal(t) {
        if (dart.test(partials[$containsKey](t))) return true;
        if (t instanceof dart.LegacyType || t instanceof dart.NullableType) {
          return hasFreeFormal(t.type);
        }
        let typeArgs = dart.getGenericArgs(t);
        if (typeArgs != null) return typeArgs[$any](hasFreeFormal);
        if (dart.GenericFunctionType.is(t)) {
          return hasFreeFormal(t.instantiate(t.typeFormals));
        }
        if (dart.FunctionType.is(t)) {
          return dart.test(hasFreeFormal(t.returnType)) || dart.test(t.args[$any](hasFreeFormal));
        }
        return false;
      }
      let hasProgress = true;
      while (hasProgress) {
        hasProgress = false;
        for (let typeFormal of partials[$keys]) {
          let partialBound = dart.nullCheck(partials[$_get](typeFormal));
          if (!dart.test(hasFreeFormal(partialBound))) {
            let index = dart.nullCheck(all[$_get](typeFormal));
            defaults[$_set](index, this.instantiateTypeBounds(defaults)[$_get](index));
            partials[$remove](typeFormal);
            hasProgress = true;
            break;
          }
        }
      }
      if (dart.test(partials[$isNotEmpty])) {
        dart.throwTypeError("Instantiate to bounds failed for type with " + "recursive generic bounds: " + dart.typeName(this) + ". " + "Try passing explicit type arguments.");
      }
      return defaults;
    }
    is(obj) {
      if (typeof obj == "function") {
        let actual = obj[dart._runtimeType];
        return actual != null && dart.isSubtypeOf(actual, this);
      }
      return false;
    }
    as(obj) {
      if (this.is(obj)) return obj;
      return dart.as(obj, this);
    }
  };
  (dart.GenericFunctionType.new = function(instantiateTypeParts, _instantiateTypeBounds) {
    this[_instantiateTypeBounds$] = _instantiateTypeBounds;
    this[_instantiateTypeParts] = instantiateTypeParts;
    this[formalCount] = instantiateTypeParts.length;
    this[_typeFormals] = dart._typeFormalsFromFunction(instantiateTypeParts);
    dart.GenericFunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.GenericFunctionType.prototype;
  dart.addTypeTests(dart.GenericFunctionType);
  dart.addTypeCaches(dart.GenericFunctionType);
  dart.setMethodSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getMethods(dart.GenericFunctionType.__proto__),
    checkBounds: dart.fnType(dart.void, [core.List$(core.Object)]),
    instantiate: dart.fnType(dart.FunctionType, [dart.dynamic]),
    instantiateTypeBounds: dart.fnType(core.List$(core.Object), [core.List]),
    instantiateDefaultBounds: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getGetters(dart.GenericFunctionType.__proto__),
    typeFormals: core.List$(dart.TypeVariable),
    hasTypeBounds: core.bool
  }));
  dart.setLibraryUri(dart.GenericFunctionType, I[9]);
  dart.setFieldSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getFields(dart.GenericFunctionType.__proto__),
    [_instantiateTypeParts]: dart.finalFieldType(dart.dynamic),
    formalCount: dart.finalFieldType(core.int),
    [_instantiateTypeBounds$]: dart.finalFieldType(dart.dynamic),
    [_typeFormals]: dart.finalFieldType(core.List$(dart.TypeVariable))
  }));
  dart.defineExtensionMethods(dart.GenericFunctionType, ['toString']);
  var _typeVariables = dart.privateName(dart, "_typeVariables");
  var _isSubtypeMatch = dart.privateName(dart, "_isSubtypeMatch");
  var _constrainLower = dart.privateName(dart, "_constrainLower");
  var _constrainUpper = dart.privateName(dart, "_constrainUpper");
  var _isFunctionSubtypeMatch = dart.privateName(dart, "_isFunctionSubtypeMatch");
  var _isInterfaceSubtypeMatch = dart.privateName(dart, "_isInterfaceSubtypeMatch");
  var _isTop$ = dart.privateName(dart, "_isTop");
  dart._TypeInferrer = class _TypeInferrer extends core.Object {
    getInferredTypes() {
      let result = T$.JSArrayOfObject().of([]);
      for (let constraint of this[_typeVariables][$values]) {
        if (constraint.lower != null) {
          result[$add](dart.nullCheck(constraint.lower));
        } else if (constraint.upper != null) {
          result[$add](dart.nullCheck(constraint.upper));
        } else {
          return null;
        }
      }
      return result;
    }
    trySubtypeMatch(subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1722, 31, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1722, 47, "supertype");
      return this[_isSubtypeMatch](subtype, supertype);
    }
    [_constrainLower](parameter, lower) {
      if (parameter == null) dart.nullFailed(I[5], 1725, 37, "parameter");
      if (lower == null) dart.nullFailed(I[5], 1725, 55, "lower");
      dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainLower](lower);
    }
    [_constrainUpper](parameter, upper) {
      if (parameter == null) dart.nullFailed(I[5], 1729, 37, "parameter");
      if (upper == null) dart.nullFailed(I[5], 1729, 55, "upper");
      dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainUpper](upper);
    }
    [_isFunctionSubtypeMatch](subtype, supertype) {
      let t7;
      if (subtype == null) dart.nullFailed(I[5], 1733, 45, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1733, 67, "supertype");
      if (dart.notNull(subtype.requiredParameterCount) > dart.notNull(supertype.requiredParameterCount)) {
        return false;
      }
      if (dart.notNull(subtype.positionalParameterCount) < dart.notNull(supertype.positionalParameterCount)) {
        return false;
      }
      if (!dart.VoidType.is(supertype.returnType) && !dart.test(this[_isSubtypeMatch](subtype.returnType, supertype.returnType))) {
        return false;
      }
      for (let i = 0, n = supertype.positionalParameterCount; i < dart.notNull(n); i = i + 1) {
        if (!dart.test(this[_isSubtypeMatch](core.Object.as(supertype.getPositionalParameter(i)), core.Object.as(subtype.getPositionalParameter(i))))) {
          return false;
        }
      }
      let supertypeNamed = supertype.getNamedParameters();
      let supertypeRequiredNamed = supertype.getRequiredNamedParameters();
      let subtypeNamed = supertype.getNamedParameters();
      let subtypeRequiredNamed = supertype.getRequiredNamedParameters();
      if (!false) {
        supertypeNamed = (() => {
          let t1 = new (T$.IdentityMapOfString$Object()).new();
          for (let t2 of supertypeNamed[$entries])
            t1[$_set](t2.key, t2.value);
          for (let t3 of supertypeRequiredNamed[$entries])
            t1[$_set](t3.key, t3.value);
          return t1;
        })();
        subtypeNamed = (() => {
          let t4 = new (T$.IdentityMapOfString$Object()).new();
          for (let t5 of subtypeNamed[$entries])
            t4[$_set](t5.key, t5.value);
          for (let t6 of subtypeRequiredNamed[$entries])
            t4[$_set](t6.key, t6.value);
          return t4;
        })();
        supertypeRequiredNamed = new (T$.IdentityMapOfString$Object()).new();
        subtypeRequiredNamed = new (T$.IdentityMapOfString$Object()).new();
      }
      for (let name of subtypeRequiredNamed[$keys]) {
        let supertypeParamType = supertypeRequiredNamed[$_get](name);
        if (supertypeParamType == null) return false;
      }
      for (let name of supertypeNamed[$keys]) {
        let subtypeParamType = subtypeNamed[$_get](name);
        if (subtypeParamType == null) return false;
        if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeNamed[$_get](name)), subtypeParamType))) {
          return false;
        }
      }
      for (let name of supertypeRequiredNamed[$keys]) {
        let subtypeParamType = (t7 = subtypeRequiredNamed[$_get](name), t7 == null ? dart.nullCheck(subtypeNamed[$_get](name)) : t7);
        if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeRequiredNamed[$_get](name)), subtypeParamType))) {
          return false;
        }
      }
      return true;
    }
    [_isInterfaceSubtypeMatch](subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1809, 40, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1809, 56, "supertype");
      let matchingSupertype = dart._getMatchingSupertype(subtype, supertype);
      if (matchingSupertype == null) return false;
      let matchingTypeArgs = dart.nullCheck(dart.getGenericArgs(matchingSupertype));
      let supertypeTypeArgs = dart.nullCheck(dart.getGenericArgs(supertype));
      for (let i = 0; i < dart.notNull(supertypeTypeArgs[$length]); i = i + 1) {
        if (!dart.test(this[_isSubtypeMatch](core.Object.as(matchingTypeArgs[$_get](i)), core.Object.as(supertypeTypeArgs[$_get](i))))) {
          return false;
        }
      }
      return true;
    }
    [_isSubtypeMatch](subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1853, 31, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1853, 47, "supertype");
      if (dart.TypeVariable.is(subtype) && dart.test(this[_typeVariables][$containsKey](subtype))) {
        this[_constrainUpper](subtype, supertype);
        return true;
      }
      if (dart.TypeVariable.is(supertype) && dart.test(this[_typeVariables][$containsKey](supertype))) {
        this[_constrainLower](supertype, subtype);
        return true;
      }
      if (core.identical(subtype, supertype)) return true;
      if (dart.test(this[_isTop$](supertype))) return true;
      if (subtype === core.Null) return true;
      if (dart._isFutureOr(subtype)) {
        let subtypeArg = dart.nullCheck(dart.getGenericArgs(subtype))[$_get](0);
        if (dart._isFutureOr(supertype)) {
          let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
          return this[_isSubtypeMatch](core.Object.as(subtypeArg), core.Object.as(supertypeArg));
        }
        let subtypeFuture = async.Future$(subtypeArg);
        return dart.test(this[_isSubtypeMatch](subtypeFuture, supertype)) && dart.test(this[_isSubtypeMatch](core.Object.as(dart.nullCheck(subtypeArg)), supertype));
      }
      if (dart._isFutureOr(supertype)) {
        let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
        let supertypeFuture = async.Future$(supertypeArg);
        return dart.test(this[_isSubtypeMatch](subtype, supertypeFuture)) || dart.test(this[_isSubtypeMatch](subtype, core.Object.as(supertypeArg)));
      }
      if (dart.TypeVariable.is(subtype)) {
        return dart.TypeVariable.is(supertype) && subtype == supertype;
      }
      if (dart.GenericFunctionType.is(subtype)) {
        if (dart.GenericFunctionType.is(supertype)) {
          let formalCount = subtype.formalCount;
          if (formalCount != supertype.formalCount) return false;
          let fresh = supertype.typeFormals;
          let t1Bounds = subtype.instantiateTypeBounds(fresh);
          let t2Bounds = supertype.instantiateTypeBounds(fresh);
          for (let i = 0; i < dart.notNull(formalCount); i = i + 1) {
            if (!dart.test(this[_isSubtypeMatch](t2Bounds[$_get](i), t1Bounds[$_get](i)))) {
              return false;
            }
          }
          return this[_isFunctionSubtypeMatch](subtype.instantiate(fresh), supertype.instantiate(fresh));
        } else {
          return false;
        }
      } else if (dart.GenericFunctionType.is(supertype)) {
        return false;
      }
      if (dart.FunctionType.is(subtype)) {
        if (!dart.FunctionType.is(supertype)) {
          if (supertype === core.Function || supertype === core.Object) {
            return true;
          } else {
            return false;
          }
        }
        if (dart.FunctionType.is(supertype)) {
          return this[_isFunctionSubtypeMatch](subtype, supertype);
        }
      }
      return this[_isInterfaceSubtypeMatch](subtype, supertype);
    }
    [_isTop$](type) {
      if (type == null) dart.nullFailed(I[5], 1996, 22, "type");
      return core.identical(type, dart.dynamic) || core.identical(type, dart.void) || type === core.Object;
    }
  };
  (dart._TypeInferrer.new = function(typeVariables) {
    if (typeVariables == null) dart.nullFailed(I[5], 1697, 40, "typeVariables");
    this[_typeVariables] = T$.LinkedHashMapOfTypeVariable$TypeConstraint().fromIterables(typeVariables, typeVariables[$map](dart.TypeConstraint, _ => {
      if (_ == null) dart.nullFailed(I[5], 1699, 47, "_");
      return new dart.TypeConstraint.new();
    }));
    ;
  }).prototype = dart._TypeInferrer.prototype;
  dart.addTypeTests(dart._TypeInferrer);
  dart.addTypeCaches(dart._TypeInferrer);
  dart.setMethodSignature(dart._TypeInferrer, () => ({
    __proto__: dart.getMethods(dart._TypeInferrer.__proto__),
    getInferredTypes: dart.fnType(dart.nullable(core.List$(core.Object)), []),
    trySubtypeMatch: dart.fnType(core.bool, [core.Object, core.Object]),
    [_constrainLower]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
    [_constrainUpper]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
    [_isFunctionSubtypeMatch]: dart.fnType(core.bool, [dart.FunctionType, dart.FunctionType]),
    [_isInterfaceSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
    [_isSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
    [_isTop$]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(dart._TypeInferrer, I[9]);
  dart.setFieldSignature(dart._TypeInferrer, () => ({
    __proto__: dart.getFields(dart._TypeInferrer.__proto__),
    [_typeVariables]: dart.finalFieldType(core.Map$(dart.TypeVariable, dart.TypeConstraint))
  }));
  var lower = dart.privateName(dart, "TypeConstraint.lower");
  var upper = dart.privateName(dart, "TypeConstraint.upper");
  dart.TypeConstraint = class TypeConstraint extends core.Object {
    get lower() {
      return this[lower];
    }
    set lower(value) {
      this[lower] = value;
    }
    get upper() {
      return this[upper];
    }
    set upper(value) {
      this[upper] = value;
    }
    [_constrainLower](type) {
      if (type == null) dart.nullFailed(I[5], 2012, 31, "type");
      let _lower = this.lower;
      if (_lower != null) {
        if (dart.isSubtypeOf(_lower, type)) {
          return;
        }
        if (!dart.isSubtypeOf(type, _lower)) {
          type = core.Null;
        }
      }
      this.lower = type;
    }
    [_constrainUpper](type) {
      if (type == null) dart.nullFailed(I[5], 2027, 31, "type");
      let _upper = this.upper;
      if (_upper != null) {
        if (dart.isSubtypeOf(type, _upper)) {
          return;
        }
        if (!dart.isSubtypeOf(_upper, type)) {
          type = core.Object;
        }
      }
      this.upper = type;
    }
    toString() {
      return dart.typeName(this.lower) + " <: <type> <: " + dart.typeName(this.upper);
    }
  };
  (dart.TypeConstraint.new = function() {
    this[lower] = null;
    this[upper] = null;
    ;
  }).prototype = dart.TypeConstraint.prototype;
  dart.addTypeTests(dart.TypeConstraint);
  dart.addTypeCaches(dart.TypeConstraint);
  dart.setMethodSignature(dart.TypeConstraint, () => ({
    __proto__: dart.getMethods(dart.TypeConstraint.__proto__),
    [_constrainLower]: dart.fnType(dart.void, [core.Object]),
    [_constrainUpper]: dart.fnType(dart.void, [core.Object])
  }));
  dart.setLibraryUri(dart.TypeConstraint, I[9]);
  dart.setFieldSignature(dart.TypeConstraint, () => ({
    __proto__: dart.getFields(dart.TypeConstraint.__proto__),
    lower: dart.fieldType(dart.nullable(core.Object)),
    upper: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(dart.TypeConstraint, ['toString']);
  var _trace = dart.privateName(dart, "_trace");
  var _jsObjectMissingTrace = dart.privateName(dart, "_jsObjectMissingTrace");
  dart._StackTrace = class _StackTrace extends core.Object {
    toString() {
      if (this[_trace] != null) return dart.nullCheck(this[_trace]);
      let e = this[_jsError$];
      let trace = "";
      if (e != null && typeof e === "object") {
        trace = _interceptors.NativeError.is(e) ? e[$dartStack]() : e.stack;
        let mapper = _debugger.stackTraceMapper;
        if (trace != null && mapper != null) {
          trace = mapper(trace);
        }
      }
      if (trace[$isEmpty] || this[_jsObjectMissingTrace] != null) {
        let jsToString = null;
        try {
          jsToString = "" + this[_jsObjectMissingTrace];
        } catch (e$) {
          let _ = dart.getThrown(e$);
          if (core.Object.is(_)) {
            jsToString = "<error converting JS object to string>";
          } else
            throw e$;
        }
        trace = "Non-error `" + dart.str(jsToString) + "` thrown by JS does not have stack trace." + "\nCaught in Dart at:\n\n" + dart.str(trace);
      }
      return this[_trace] = trace;
    }
  };
  (dart._StackTrace.new = function(_jsError) {
    this[_trace] = null;
    this[_jsError$] = _jsError;
    this[_jsObjectMissingTrace] = null;
    ;
  }).prototype = dart._StackTrace.prototype;
  (dart._StackTrace.missing = function(caughtObj) {
    this[_trace] = null;
    this[_jsObjectMissingTrace] = caughtObj != null ? caughtObj : "null";
    this[_jsError$] = Error();
    ;
  }).prototype = dart._StackTrace.prototype;
  dart.addTypeTests(dart._StackTrace);
  dart.addTypeCaches(dart._StackTrace);
  dart._StackTrace[dart.implements] = () => [core.StackTrace];
  dart.setLibraryUri(dart._StackTrace, I[9]);
  dart.setFieldSignature(dart._StackTrace, () => ({
    __proto__: dart.getFields(dart._StackTrace.__proto__),
    [_jsError$]: dart.finalFieldType(dart.nullable(core.Object)),
    [_jsObjectMissingTrace]: dart.finalFieldType(dart.nullable(core.Object)),
    [_trace]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart._StackTrace, ['toString']);
  var memberName$ = dart.privateName(dart, "InvocationImpl.memberName");
  var positionalArguments$ = dart.privateName(dart, "InvocationImpl.positionalArguments");
  var namedArguments$ = dart.privateName(dart, "InvocationImpl.namedArguments");
  var typeArguments$ = dart.privateName(dart, "InvocationImpl.typeArguments");
  var isMethod$ = dart.privateName(dart, "InvocationImpl.isMethod");
  var isGetter$ = dart.privateName(dart, "InvocationImpl.isGetter");
  var isSetter$ = dart.privateName(dart, "InvocationImpl.isSetter");
  var failureMessage$ = dart.privateName(dart, "InvocationImpl.failureMessage");
  let const$;
  let const$0;
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T$.TypeL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "none"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "skipDart"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "keyToString"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asClass"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asObject"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asMap"
      });
    },
    get C7() {
      return C[7] = dart.fn(_debugger.getTypeName, T$.dynamicToString());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: _foreign_helper._Rest.prototype
      });
    },
    get C9() {
      return C[9] = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver));
    },
    get C10() {
      return C[10] = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments));
    },
    get C11() {
      return C[11] = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName));
    },
    get C12() {
      return C[12] = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation));
    },
    get C13() {
      return C[13] = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments));
    },
    get C14() {
      return C[14] = dart.const(new _js_helper.PrivateSymbol.new('_hasValue', _hasValue));
    },
    get C15() {
      return C[15] = dart.const(new _js_helper.PrivateSymbol.new('_errorExplanation', _errorExplanation));
    },
    get C16() {
      return C[16] = dart.const(new _js_helper.PrivateSymbol.new('_errorName', _errorName));
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: core.OutOfMemoryError.prototype
      });
    },
    get C18() {
      return C[18] = dart.fn(collection.ListMixin._compareAny, T$.dynamicAnddynamicToint());
    },
    get C19() {
      return C[19] = dart.fn(collection.MapBase._id, T$.ObjectNToObjectN());
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: T$.EmptyIteratorOfNeverL().prototype
      });
    },
    get C21() {
      return C[21] = dart.constList([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000.0, 100000000000.0, 1000000000000.0, 10000000000000.0, 100000000000000.0, 1000000000000000.0, 10000000000000000.0, 100000000000000000.0, 1000000000000000000.0, 10000000000000000000.0, 100000000000000000000.0, 1e+21, 1e+22], T$.doubleL());
    },
    get C22() {
      return C[22] = dart.fn(_js_helper.Primitives.dateNow, T$.VoidToint());
    },
    get C23() {
      return C[23] = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver$1));
    },
    get C24() {
      return C[24] = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments$0));
    },
    get C25() {
      return C[25] = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName$0));
    },
    get C26() {
      return C[26] = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation$0));
    },
    get C27() {
      return C[27] = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments$0));
    },
    get C28() {
      return C[28] = dart.applyExtensionForTesting;
    },
    get C29() {
      return C[29] = dart.fn(_js_helper.assertInterop, T$.ObjectNTovoid());
    },
    get C30() {
      return C[30] = dart.fn(_js_helper._matchString, T$.MatchToString());
    },
    get C31() {
      return C[31] = dart.fn(_js_helper._stringIdentity, T$.StringToString());
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: _js_helper._Patch.prototype
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: _js_helper._NotNull.prototype
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: _js_helper._Undefined.prototype
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: _js_helper._NullCheck.prototype
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [Endian__littleEndian]: false
      });
    },
    get C37() {
      return C[37] = dart.fn(async._nullDataHandler, T$.dynamicTovoid());
    },
    get C38() {
      return C[38] = dart.fn(async._nullErrorHandler, T$.ObjectAndStackTraceTovoid());
    },
    get C39() {
      return C[39] = dart.fn(async._nullDoneHandler, T$.VoidTovoid());
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: async._DelayedDone.prototype
      });
    },
    get C41() {
      return C[41] = dart.fn(async.Future._kTrue, T$.ObjectNTobool());
    },
    get C42() {
      return C[42] = async._AsyncRun._scheduleImmediateJSOverride;
    },
    get C43() {
      return C[43] = async._AsyncRun._scheduleImmediateWithPromise;
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: async._RootZone.prototype
      });
    },
    get C46() {
      return C[46] = dart.fn(async._rootRun, T$.ZoneNAndZoneDelegateNAndZone__ToR());
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: async._RunNullaryZoneFunction.prototype,
        [$function$1]: C[46] || CT.C46,
        [zone$0]: C[44] || CT.C44
      });
    },
    get C48() {
      return C[48] = dart.fn(async._rootRunUnary, T$.ZoneNAndZoneDelegateNAndZone__ToR$1());
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: async._RunUnaryZoneFunction.prototype,
        [$function$2]: C[48] || CT.C48,
        [zone$1]: C[44] || CT.C44
      });
    },
    get C50() {
      return C[50] = dart.fn(async._rootRunBinary, T$.ZoneNAndZoneDelegateNAndZone__ToR$2());
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: async._RunBinaryZoneFunction.prototype,
        [$function$3]: C[50] || CT.C50,
        [zone$2]: C[44] || CT.C44
      });
    },
    get C52() {
      return C[52] = dart.fn(async._rootRegisterCallback, T$.ZoneAndZoneDelegateAndZone__ToFn());
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: async._RegisterNullaryZoneFunction.prototype,
        [$function$4]: C[52] || CT.C52,
        [zone$3]: C[44] || CT.C44
      });
    },
    get C54() {
      return C[54] = dart.fn(async._rootRegisterUnaryCallback, T$.ZoneAndZoneDelegateAndZone__ToFn$1());
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: async._RegisterUnaryZoneFunction.prototype,
        [$function$5]: C[54] || CT.C54,
        [zone$4]: C[44] || CT.C44
      });
    },
    get C56() {
      return C[56] = dart.fn(async._rootRegisterBinaryCallback, T$.ZoneAndZoneDelegateAndZone__ToFn$2());
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: async._RegisterBinaryZoneFunction.prototype,
        [$function$6]: C[56] || CT.C56,
        [zone$5]: C[44] || CT.C44
      });
    },
    get C58() {
      return C[58] = dart.fn(async._rootErrorCallback, T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN());
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN().prototype,
        [$function$0]: C[58] || CT.C58,
        [zone$]: C[44] || CT.C44
      });
    },
    get C60() {
      return C[60] = dart.fn(async._rootScheduleMicrotask, T$.ZoneNAndZoneDelegateNAndZone__Tovoid());
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid().prototype,
        [$function$0]: C[60] || CT.C60,
        [zone$]: C[44] || CT.C44
      });
    },
    get C62() {
      return C[62] = dart.fn(async._rootCreateTimer, T$.ZoneAndZoneDelegateAndZone__ToTimer());
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL().prototype,
        [$function$0]: C[62] || CT.C62,
        [zone$]: C[44] || CT.C44
      });
    },
    get C64() {
      return C[64] = dart.fn(async._rootCreatePeriodicTimer, T$.ZoneAndZoneDelegateAndZone__ToTimer$1());
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1().prototype,
        [$function$0]: C[64] || CT.C64,
        [zone$]: C[44] || CT.C44
      });
    },
    get C66() {
      return C[66] = dart.fn(async._rootPrint, T$.ZoneAndZoneDelegateAndZone__Tovoid$1());
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1().prototype,
        [$function$0]: C[66] || CT.C66,
        [zone$]: C[44] || CT.C44
      });
    },
    get C68() {
      return C[68] = dart.fn(async._rootFork, T$.ZoneNAndZoneDelegateNAndZone__ToZone());
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL().prototype,
        [$function$0]: C[68] || CT.C68,
        [zone$]: C[44] || CT.C44
      });
    },
    get C70() {
      return C[70] = dart.fn(async._rootHandleUncaughtError, T$.ZoneNAndZoneDelegateNAndZone__Tovoid$1());
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2().prototype,
        [$function$0]: C[70] || CT.C70,
        [zone$]: C[44] || CT.C44
      });
    },
    get C71() {
      return C[71] = dart.fn(async._startMicrotaskLoop, T$.VoidTovoid());
    },
    get C72() {
      return C[72] = dart.fn(async._printToZone, T$.StringTovoid());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: async._ZoneSpecification.prototype,
        [fork$]: null,
        [print$]: null,
        [createPeriodicTimer$]: null,
        [createTimer$]: null,
        [scheduleMicrotask$]: null,
        [errorCallback$]: null,
        [registerBinaryCallback$]: null,
        [registerUnaryCallback$]: null,
        [registerCallback$]: null,
        [runBinary$]: null,
        [runUnary$]: null,
        [run$]: null,
        [handleUncaughtError$]: null
      });
    },
    get C74() {
      return C[74] = dart.hashCode;
    },
    get C75() {
      return C[75] = dart.fn(core.identityHashCode, T$.ObjectNToint());
    },
    get C76() {
      return C[76] = dart.fn(core.identical, T$.ObjectNAndObjectNTobool());
    },
    get C77() {
      return C[77] = dart.equals;
    },
    get C78() {
      return C[78] = dart.fn(core.Comparable.compare, T$0.ComparableAndComparableToint());
    },
    get C79() {
      return C[79] = dart.fn(collection._dynamicCompare, T$.dynamicAnddynamicToint());
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: convert.AsciiDecoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 127,
        [_UnicodeSubsetDecoder__allowInvalid]: true
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: convert.AsciiDecoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 127,
        [_UnicodeSubsetDecoder__allowInvalid]: false
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: convert.AsciiEncoder.prototype,
        [_UnicodeSubsetEncoder__subsetMask]: 127
      });
    },
    get C83() {
      return C[83] = dart.constList([239, 191, 189], T$0.intL());
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: convert.Base64Encoder.prototype,
        [Base64Encoder__urlSafe]: false
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: convert.Base64Encoder.prototype,
        [Base64Encoder__urlSafe]: true
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: convert.Base64Decoder.prototype
      });
    },
    get C87() {
      return C[87] = dart.constList([], T$0.intL());
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: true,
        [escapeApos$]: true,
        [escapeQuot$]: true,
        [escapeLtGt$]: true,
        [_name$2]: "unknown"
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: false,
        [escapeQuot$]: true,
        [escapeLtGt$]: true,
        [_name$2]: "attribute"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: true,
        [escapeQuot$]: false,
        [escapeLtGt$]: true,
        [_name$2]: "attribute"
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: false,
        [escapeQuot$]: false,
        [escapeLtGt$]: true,
        [_name$2]: "element"
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: convert.JsonEncoder.prototype,
        [JsonEncoder__toEncodable]: null,
        [JsonEncoder_indent]: null
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: convert.JsonDecoder.prototype,
        [JsonDecoder__reviver]: null
      });
    },
    get C94() {
      return C[94] = dart.fn(convert._defaultToEncodable, T$.dynamicTodynamic());
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: convert.Latin1Decoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 255,
        [_UnicodeSubsetDecoder__allowInvalid]: true
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: convert.Latin1Decoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 255,
        [_UnicodeSubsetDecoder__allowInvalid]: false
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: convert.Latin1Encoder.prototype,
        [_UnicodeSubsetEncoder__subsetMask]: 255
      });
    },
    get C98() {
      return C[98] = dart.constList([65533], T$0.intL());
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: true
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: false
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: convert.AsciiCodec.prototype,
        [_allowInvalid]: false
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: convert.Base64Codec.prototype,
        [_encoder]: C[84] || CT.C84
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: convert.Base64Codec.prototype,
        [_encoder]: C[85] || CT.C85
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: convert.HtmlEscape.prototype,
        [mode$]: C[88] || CT.C88
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: convert.JsonCodec.prototype,
        [_toEncodable]: null,
        [_reviver]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [_allowInvalid$1]: false
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [_allowMalformed]: false
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 1
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 2
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 3
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 4
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 1
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 2
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 3
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 4
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: convert.LineSplitter.prototype
      });
    },
    get C119() {
      return C[119] = dart.fn(io._FileResourceInfo.getOpenFiles, T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse());
    },
    get C120() {
      return C[120] = dart.fn(io._FileResourceInfo.getOpenFileInfoMapByID, T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse());
    },
    get C121() {
      return C[121] = dart.constList(["file", "directory", "link", "notFound"], T$.StringL());
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 0
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 1
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 2
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 3
      });
    },
    get C126() {
      return C[126] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125], T$0.FileSystemEntityTypeL());
    },
    get C127() {
      return C[127] = dart.constList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"], T$.StringL());
    },
    get C128() {
      return C[128] = dart.fn(io._NetworkProfiling._serviceExtensionHandler, T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse());
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.startTime",
        index: 0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.endTime",
        index: 1
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.address",
        index: 2
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.port",
        index: 3
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.socketType",
        index: 4
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.readBytes",
        index: 5
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.writeBytes",
        index: 6
      });
    },
    get C136() {
      return C[136] = dart.constList([C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134, C[135] || CT.C135], T$0._SocketProfileTypeL());
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 1
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 2
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 3
      });
    },
    get C137() {
      return C[137] = dart.constList([C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141], T$0.ProcessStartModeL());
    },
    get C142() {
      return C[142] = dart.constList(["normal", "inheritStdio", "detached", "detachedWithStdio"], T$.StringL());
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: io.SystemEncoding.prototype
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTERM",
        [ProcessSignal__signalNumber]: 15
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGHUP",
        [ProcessSignal__signalNumber]: 1
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGINT",
        [ProcessSignal__signalNumber]: 2
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGQUIT",
        [ProcessSignal__signalNumber]: 3
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGILL",
        [ProcessSignal__signalNumber]: 4
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTRAP",
        [ProcessSignal__signalNumber]: 5
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGABRT",
        [ProcessSignal__signalNumber]: 6
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGBUS",
        [ProcessSignal__signalNumber]: 7
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGFPE",
        [ProcessSignal__signalNumber]: 8
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGKILL",
        [ProcessSignal__signalNumber]: 9
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR1",
        [ProcessSignal__signalNumber]: 10
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSEGV",
        [ProcessSignal__signalNumber]: 11
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR2",
        [ProcessSignal__signalNumber]: 12
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPIPE",
        [ProcessSignal__signalNumber]: 13
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGALRM",
        [ProcessSignal__signalNumber]: 14
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCHLD",
        [ProcessSignal__signalNumber]: 17
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCONT",
        [ProcessSignal__signalNumber]: 18
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSTOP",
        [ProcessSignal__signalNumber]: 19
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTSTP",
        [ProcessSignal__signalNumber]: 20
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTIN",
        [ProcessSignal__signalNumber]: 21
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTOU",
        [ProcessSignal__signalNumber]: 22
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGURG",
        [ProcessSignal__signalNumber]: 23
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXCPU",
        [ProcessSignal__signalNumber]: 24
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXFSZ",
        [ProcessSignal__signalNumber]: 25
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGVTALRM",
        [ProcessSignal__signalNumber]: 26
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPROF",
        [ProcessSignal__signalNumber]: 27
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGWINCH",
        [ProcessSignal__signalNumber]: 28
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPOLL",
        [ProcessSignal__signalNumber]: 29
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSYS",
        [ProcessSignal__signalNumber]: 31
      });
    },
    get C173() {
      return C[173] = dart.constList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"], T$.StringL());
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 0
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 1
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 2
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 3
      });
    },
    get C178() {
      return C[178] = dart.constList(["ANY", "IPv4", "IPv6", "Unix"], T$.StringL());
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 0
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 1
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 2
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: -1
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 0
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 1
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 2
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 0
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 1
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 2
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 3
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 4
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.SOL_SOCKET",
        index: 0
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_IP",
        index: 1
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IP_MULTICAST_IF",
        index: 2
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_IPV6",
        index: 3
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPV6_MULTICAST_IF",
        index: 4
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_TCP",
        index: 5
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_UDP",
        index: 6
      });
    },
    get C198() {
      return C[198] = dart.constList([C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194, C[195] || CT.C195, C[196] || CT.C196, C[197] || CT.C197], T$0._RawSocketOptionsL());
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "terminal"
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "pipe"
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "file"
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "other"
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: io._WindowsCodePageEncoder.prototype
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: io._WindowsCodePageDecoder.prototype
      });
    },
    get C205() {
      return C[205] = dart.constList([1, 2, 3, 4, 0], T$0.intL());
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: io.ZLibCodec.prototype,
        [dictionary$]: null,
        [raw$]: false,
        [windowBits$]: 15,
        [strategy$]: 0,
        [memLevel$]: 8,
        [level$]: 6,
        [gzip$]: false
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: io.GZipCodec.prototype,
        [raw$0]: false,
        [dictionary$0]: null,
        [windowBits$0]: 15,
        [strategy$0]: 0,
        [memLevel$0]: 8,
        [level$0]: 6,
        [gzip$0]: true
      });
    },
    get C208() {
      return C[208] = dart.fn(async.runZoned, T$0.Fn__ToR());
    },
    get C209() {
      return C[209] = dart.fn(js._convertToJS, T$.ObjectNToObjectN());
    },
    get C210() {
      return C[210] = dart.fn(js._wrapDartFunction, T$0.ObjectToObject());
    },
    get C211() {
      return C[211] = dart.fn(js._wrapToDartHelper, T$0.ObjectToJsObject());
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: math._JSRandom.prototype
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [Endian__littleEndian]: true
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "abort"
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "close"
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: T$0.EventStreamProviderOfVersionChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "versionchange"
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "success"
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "blocked"
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: T$0.EventStreamProviderOfVersionChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "upgradeneeded"
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "complete"
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: _js_helper.Creates.prototype,
        [types$0]: "JSExtendableArray|=Object|num|String"
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: _js_helper.Returns.prototype,
        [types$1]: "JSExtendableArray|=Object|num|String"
      });
    },
    get C224() {
      return C[224] = dart.fn(html_common.convertDartToNative_Dictionary, T$0.MapNAndFnTodynamic());
    },
    get C226() {
      return C[226] = dart.fn(html$.Element._determineMouseWheelEventType, T$0.EventTargetToString());
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfWheelEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[226] || CT.C226
      });
    },
    get C228() {
      return C[228] = dart.fn(html$.Element._determineTransitionEventType, T$0.EventTargetToString());
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfTransitionEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[228] || CT.C228
      });
    },
    get C229() {
      return C[229] = dart.constList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"], T$.StringL());
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforecopy"
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforecut"
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforepaste"
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "blur"
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "canplay"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "canplaythrough"
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "change"
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "click"
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "contextmenu"
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "copy"
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "cut"
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "dblclick"
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "drag"
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragend"
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragenter"
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragleave"
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragover"
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragstart"
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "drop"
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "durationchange"
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "emptied"
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "ended"
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "focus"
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "input"
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "invalid"
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keydown"
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keypress"
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keyup"
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "load"
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadeddata"
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadedmetadata"
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousedown"
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseenter"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseleave"
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousemove"
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseout"
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseover"
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseup"
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "paste"
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pause"
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "play"
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "playing"
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "ratechange"
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "reset"
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "resize"
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "scroll"
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "search"
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "seeked"
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "seeking"
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "select"
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "selectstart"
      });
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "stalled"
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "submit"
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "suspend"
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "timeupdate"
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchcancel"
      });
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchend"
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchenter"
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchleave"
      });
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchmove"
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchstart"
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "volumechange"
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "waiting"
      });
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitfullscreenchange"
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitfullscreenerror"
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: T$0.EventStreamProviderOfWheelEventL().prototype,
        [S.EventStreamProvider__eventType]: "wheel"
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibleclick"
      });
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblecontextmenu"
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibledecrement"
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblefocus"
      });
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibleincrement"
      });
    },
    get C301() {
      return C[301] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblescrollintoview"
      });
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cancel"
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "finish"
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cached"
      });
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "checking"
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "downloading"
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "noupdate"
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "obsolete"
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "progress"
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "updateready"
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "hashchange"
      });
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: T$0.EventStreamProviderOfMessageEventL().prototype,
        [S.EventStreamProvider__eventType]: "message"
      });
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "offline"
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "online"
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: T$0.EventStreamProviderOfPopStateEventL().prototype,
        [S.EventStreamProvider__eventType]: "popstate"
      });
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: T$0.EventStreamProviderOfStorageEventL().prototype,
        [S.EventStreamProvider__eventType]: "storage"
      });
    },
    get C317() {
      return C[317] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "unload"
      });
    },
    get C318() {
      return C[318] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "mute"
      });
    },
    get C319() {
      return C[319] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "unmute"
      });
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: T$0.EventStreamProviderOfContextEventL().prototype,
        [S.EventStreamProvider__eventType]: "webglcontextlost"
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: T$0.EventStreamProviderOfContextEventL().prototype,
        [S.EventStreamProvider__eventType]: "webglcontextrestored"
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pointerlockchange"
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pointerlockerror"
      });
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "readystatechange"
      });
    },
    get C325() {
      return C[325] = dart.const({
        __proto__: T$0.EventStreamProviderOfSecurityPolicyViolationEventL().prototype,
        [S.EventStreamProvider__eventType]: "securitypolicyviolation"
      });
    },
    get C326() {
      return C[326] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "selectionchange"
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "TOP"
      });
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "CENTER"
      });
    },
    get C329() {
      return C[329] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "BOTTOM"
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "open"
      });
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "abort"
      });
    },
    get C332() {
      return C[332] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "load"
      });
    },
    get C334() {
      return C[334] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadend"
      });
    },
    get C335() {
      return C[335] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadstart"
      });
    },
    get C336() {
      return C[336] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "write"
      });
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "writeend"
      });
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "writestart"
      });
    },
    get C339() {
      return C[339] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loading"
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadingdone"
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadingerror"
      });
    },
    get C342() {
      return C[342] = dart.const({
        __proto__: T$0.EventStreamProviderOfWheelEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousewheel"
      });
    },
    get C344() {
      return C[344] = dart.fn(html$.HtmlDocument._determineVisibilityChangeEventType, T$0.EventTargetToString());
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[344] || CT.C344
      });
    },
    get C345() {
      return C[345] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "timeout"
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "addtrack"
      });
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "removetrack"
      });
    },
    get C348() {
      return C[348] = dart.constList([], T$0.MessagePortL());
    },
    get C349() {
      return C[349] = dart.const({
        __proto__: T$0.EventStreamProviderOfMidiMessageEventL().prototype,
        [S.EventStreamProvider__eventType]: "midimessage"
      });
    },
    get C350() {
      return C[350] = dart.constMap(T$.StringL(), T$0.boolL(), ["childList", true, "attributes", true, "characterData", true, "subtree", true, "attributeOldValue", true, "characterDataOldValue", true]);
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "click"
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "show"
      });
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcDtmfToneChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "tonechange"
      });
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: T$0.EventStreamProviderOfMediaStreamEventL().prototype,
        [S.EventStreamProvider__eventType]: "addstream"
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcDataChannelEventL().prototype,
        [S.EventStreamProvider__eventType]: "datachannel"
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcPeerConnectionIceEventL().prototype,
        [S.EventStreamProvider__eventType]: "icecandidate"
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "iceconnectionstatechange"
      });
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "negotiationneeded"
      });
    },
    get C359() {
      return C[359] = dart.const({
        __proto__: T$0.EventStreamProviderOfMediaStreamEventL().prototype,
        [S.EventStreamProvider__eventType]: "removestream"
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "signalingstatechange"
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcTrackEventL().prototype,
        [S.EventStreamProvider__eventType]: "track"
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "activate"
      });
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "fetch"
      });
    },
    get C364() {
      return C[364] = dart.const({
        __proto__: T$0.EventStreamProviderOfForeignFetchEventL().prototype,
        [S.EventStreamProvider__eventType]: "foreignfetch"
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "install"
      });
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "connect"
      });
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "audioend"
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "audiostart"
      });
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "end"
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionErrorL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionEventL().prototype,
        [S.EventStreamProvider__eventType]: "nomatch"
      });
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionEventL().prototype,
        [S.EventStreamProvider__eventType]: "result"
      });
    },
    get C373() {
      return C[373] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "soundend"
      });
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "soundstart"
      });
    },
    get C375() {
      return C[375] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "speechend"
      });
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "speechstart"
      });
    },
    get C377() {
      return C[377] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "start"
      });
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "boundary"
      });
    },
    get C379() {
      return C[379] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "end"
      });
    },
    get C380() {
      return C[380] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "mark"
      });
    },
    get C381() {
      return C[381] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "resume"
      });
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "start"
      });
    },
    get C383() {
      return C[383] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cuechange"
      });
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "enter"
      });
    },
    get C385() {
      return C[385] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "exit"
      });
    },
    get C386() {
      return C[386] = dart.const({
        __proto__: T$0.EventStreamProviderOfTrackEventL().prototype,
        [S.EventStreamProvider__eventType]: "addtrack"
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: T$0.EventStreamProviderOfCloseEventL().prototype,
        [S.EventStreamProvider__eventType]: "close"
      });
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "DOMContentLoaded"
      });
    },
    get C389() {
      return C[389] = dart.const({
        __proto__: T$0.EventStreamProviderOfDeviceMotionEventL().prototype,
        [S.EventStreamProvider__eventType]: "devicemotion"
      });
    },
    get C390() {
      return C[390] = dart.const({
        __proto__: T$0.EventStreamProviderOfDeviceOrientationEventL().prototype,
        [S.EventStreamProvider__eventType]: "deviceorientation"
      });
    },
    get C391() {
      return C[391] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadstart"
      });
    },
    get C392() {
      return C[392] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pagehide"
      });
    },
    get C393() {
      return C[393] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pageshow"
      });
    },
    get C394() {
      return C[394] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "progress"
      });
    },
    get C395() {
      return C[395] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationEnd"
      });
    },
    get C396() {
      return C[396] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationIteration"
      });
    },
    get C397() {
      return C[397] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationStart"
      });
    },
    get C398() {
      return C[398] = dart.const({
        __proto__: html$._BeforeUnloadEventStreamProvider.prototype,
        [S$3._BeforeUnloadEventStreamProvider__eventType]: "beforeunload"
      });
    },
    get C399() {
      return C[399] = dart.fn(html$._Html5NodeValidator._standardAttributeValidator, T$0.ElementAndStringAndString__Tobool());
    },
    get C400() {
      return C[400] = dart.fn(html$._Html5NodeValidator._uriAttributeValidator, T$0.ElementAndStringAndString__Tobool());
    },
    get C401() {
      return C[401] = dart.constList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"], T$.StringL());
    },
    get C402() {
      return C[402] = dart.constList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"], T$.StringL());
    },
    get C403() {
      return C[403] = dart.constMap(T$.StringL(), T$0.intL(), ["Up", 38, "Down", 40, "Left", 37, "Right", 39, "Enter", 13, "F1", 112, "F2", 113, "F3", 114, "F4", 115, "F5", 116, "F6", 117, "F7", 118, "F8", 119, "F9", 120, "F10", 121, "F11", 122, "F12", 123, "U+007F", 46, "Home", 36, "End", 35, "PageUp", 33, "PageDown", 34, "Insert", 45]);
    },
    get C404() {
      return C[404] = dart.constList([], T$.StringL());
    },
    get C405() {
      return C[405] = dart.constList(["A", "FORM"], T$.StringL());
    },
    get C406() {
      return C[406] = dart.constList(["A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target"], T$.StringL());
    },
    get C407() {
      return C[407] = dart.constList(["A::href", "FORM::action"], T$.StringL());
    },
    get C408() {
      return C[408] = dart.constList(["IMG"], T$.StringL());
    },
    get C409() {
      return C[409] = dart.constList(["IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width"], T$.StringL());
    },
    get C410() {
      return C[410] = dart.constList(["IMG::src"], T$.StringL());
    },
    get C411() {
      return C[411] = dart.constList(["B", "BLOCKQUOTE", "BR", "EM", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "I", "LI", "OL", "P", "SPAN", "UL"], T$.StringL());
    },
    get C412() {
      return C[412] = dart.constList(["bind", "if", "ref", "repeat", "syntax"], T$.StringL());
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: html$.Console.prototype
      });
    },
    get C414() {
      return C[414] = dart.const({
        __proto__: html$._TrustedHtmlTreeSanitizer.prototype
      });
    },
    get C415() {
      return C[415] = dart.fn(html_common.convertNativeToDart_Dictionary, T$0.dynamicToMapNOfString$dynamic());
    },
    get C416() {
      return C[416] = dart.const({
        __proto__: _js_helper.Creates.prototype,
        [types$0]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
      });
    },
    get C417() {
      return C[417] = dart.const({
        __proto__: _js_helper.Returns.prototype,
        [types$1]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
      });
    },
    get C418() {
      return C[418] = dart.const({
        __proto__: T$0.EventStreamProviderOfAudioProcessingEventL().prototype,
        [S.EventStreamProvider__eventType]: "audioprocess"
      });
    },
    get C419() {
      return C[419] = dart.const({
        __proto__: core.IntegerDivisionByZeroException.prototype
      });
    },
    get C420() {
      return C[420] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 0
      });
    },
    get C421() {
      return C[421] = dart.constList([], T$.ObjectN());
    },
    get C422() {
      return C[422] = dart.constMap(T$.SymbolL(), T$.ObjectN(), []);
    },
    get C423() {
      return C[423] = dart.constList([], T$.ObjectL());
    },
    get C424() {
      return C[424] = dart.constMap(T$.SymbolL(), T$.ObjectL(), []);
    },
    get C425() {
      return C[425] = dart.fn(core._GeneratorIterable._id, T$0.intToint());
    },
    get C426() {
      return C[426] = dart.const({
        __proto__: core._StringStackTrace.prototype,
        [_StringStackTrace__stackTrace]: ""
      });
    },
    get C427() {
      return C[427] = dart.const(new _internal.Symbol.new('unary-'));
    },
    get C428() {
      return C[428] = dart.const(new _internal.Symbol.new(''));
    },
    get C429() {
      return C[429] = dart.fn(core.Uri.decodeComponent, T$.StringToString());
    },
    get C430() {
      return C[430] = dart.constMap(T$.StringL(), T$0.ListLOfStringL(), []);
    },
    get C431() {
      return C[431] = dart.fn(core._toUnmodifiableStringList, T$0.StringAndListOfStringToListOfString());
    },
    get C432() {
      return C[432] = dart.fn(core._Uri._createList, T$0.VoidToListOfString());
    },
    get C433() {
      return C[433] = dart.constList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C434() {
      return C[434] = dart.constList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C435() {
      return C[435] = dart.constList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C436() {
      return C[436] = dart.constList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047], T$0.intL());
    },
    get C437() {
      return C[437] = dart.constList([0, 0, 32776, 33792, 1, 10240, 0, 0], T$0.intL());
    },
    get C438() {
      return C[438] = dart.constList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C439() {
      return C[439] = dart.constList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C440() {
      return C[440] = dart.constList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C441() {
      return C[441] = dart.constList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C442() {
      return C[442] = dart.constList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C443() {
      return C[443] = dart.constList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767], T$0.intL());
    },
    get C444() {
      return C[444] = dart.constMap(T$.StringL(), T$.StringL(), []);
    },
    get C445() {
      return C[445] = dart.const({
        __proto__: core.Deprecated.prototype,
        [message$11]: "next release"
      });
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: core._Override.prototype
      });
    },
    get C447() {
      return C[447] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.points",
        index: 0
      });
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.lines",
        index: 1
      });
    },
    get C449() {
      return C[449] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.polygon",
        index: 2
      });
    },
    get C450() {
      return C[450] = dart.constList([C[447] || CT.C447, C[448] || CT.C448, C[449] || CT.C449], T$0.PointModeL());
    },
    get C451() {
      return C[451] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$7]: "ClipOp.difference",
        index: 0
      });
    },
    get C452() {
      return C[452] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$7]: "ClipOp.intersect",
        index: 1
      });
    },
    get C453() {
      return C[453] = dart.constList([C[451] || CT.C451, C[452] || CT.C452], T$0.ClipOpL());
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangles",
        index: 0
      });
    },
    get C455() {
      return C[455] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangleStrip",
        index: 1
      });
    },
    get C456() {
      return C[456] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangleFan",
        index: 2
      });
    },
    get C457() {
      return C[457] = dart.constList([C[454] || CT.C454, C[455] || CT.C455, C[456] || CT.C456], T$0.VertexModeL());
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$7]: "PathFillType.nonZero",
        index: 0
      });
    },
    get C459() {
      return C[459] = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$7]: "PathFillType.evenOdd",
        index: 1
      });
    },
    get C460() {
      return C[460] = dart.constList([C[458] || CT.C458, C[459] || CT.C459], T$0.PathFillTypeL());
    },
    get C461() {
      return C[461] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.difference",
        index: 0
      });
    },
    get C462() {
      return C[462] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.intersect",
        index: 1
      });
    },
    get C463() {
      return C[463] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.union",
        index: 2
      });
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.xor",
        index: 3
      });
    },
    get C465() {
      return C[465] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.reverseDifference",
        index: 4
      });
    },
    get C466() {
      return C[466] = dart.constList([C[461] || CT.C461, C[462] || CT.C462, C[463] || CT.C463, C[464] || CT.C464, C[465] || CT.C465], T$0.PathOperationL());
    },
    get C467() {
      return C[467] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: 0
      });
    },
    get C468() {
      return C[468] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1 / 0,
        [_dx$]: 1 / 0
      });
    },
    get C469() {
      return C[469] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 0,
        [_dx$]: 0
      });
    },
    get C470() {
      return C[470] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 1 / 0,
        [_dx$]: 1 / 0
      });
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: ui.Rect.prototype,
        [bottom$]: 0,
        [right$]: 0,
        [top$1]: 0,
        [left$1]: 0
      });
    },
    get C472() {
      return C[472] = dart.const({
        __proto__: ui.Rect.prototype,
        [bottom$]: 1000000000,
        [right$]: 1000000000,
        [top$1]: -1000000000,
        [left$1]: -1000000000
      });
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: ui.Radius.prototype,
        [y$3]: 0,
        [x$3]: 0
      });
    },
    get C474() {
      return C[474] = dart.const({
        __proto__: ui.RRect.prototype,
        [webOnlyUniformRadii]: false,
        [blRadiusY$]: 0,
        [blRadiusX$]: 0,
        [brRadiusY$]: 0,
        [brRadiusX$]: 0,
        [trRadiusY$]: 0,
        [trRadiusX$]: 0,
        [tlRadiusY$]: 0,
        [tlRadiusX$]: 0,
        [bottom$0]: 0,
        [right$0]: 0,
        [top$2]: 0,
        [left$2]: 0
      });
    },
    get C475() {
      return C[475] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.butt",
        index: 0
      });
    },
    get C476() {
      return C[476] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.round",
        index: 1
      });
    },
    get C477() {
      return C[477] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.square",
        index: 2
      });
    },
    get C478() {
      return C[478] = dart.constList([C[475] || CT.C475, C[476] || CT.C476, C[477] || CT.C477], T$0.StrokeCapL());
    },
    get C479() {
      return C[479] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.miter",
        index: 0
      });
    },
    get C480() {
      return C[480] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.round",
        index: 1
      });
    },
    get C481() {
      return C[481] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.bevel",
        index: 2
      });
    },
    get C482() {
      return C[482] = dart.constList([C[479] || CT.C479, C[480] || CT.C480, C[481] || CT.C481], T$0.StrokeJoinL());
    },
    get C483() {
      return C[483] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$7]: "PaintingStyle.fill",
        index: 0
      });
    },
    get C484() {
      return C[484] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$7]: "PaintingStyle.stroke",
        index: 1
      });
    },
    get C485() {
      return C[485] = dart.constList([C[483] || CT.C483, C[484] || CT.C484], T$0.PaintingStyleL());
    },
    get C486() {
      return C[486] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.clear",
        index: 0
      });
    },
    get C487() {
      return C[487] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.src",
        index: 1
      });
    },
    get C488() {
      return C[488] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dst",
        index: 2
      });
    },
    get C489() {
      return C[489] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcOver",
        index: 3
      });
    },
    get C490() {
      return C[490] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstOver",
        index: 4
      });
    },
    get C491() {
      return C[491] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcIn",
        index: 5
      });
    },
    get C492() {
      return C[492] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstIn",
        index: 6
      });
    },
    get C493() {
      return C[493] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcOut",
        index: 7
      });
    },
    get C494() {
      return C[494] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstOut",
        index: 8
      });
    },
    get C495() {
      return C[495] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcATop",
        index: 9
      });
    },
    get C496() {
      return C[496] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstATop",
        index: 10
      });
    },
    get C497() {
      return C[497] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.xor",
        index: 11
      });
    },
    get C498() {
      return C[498] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.plus",
        index: 12
      });
    },
    get C499() {
      return C[499] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.modulate",
        index: 13
      });
    },
    get C500() {
      return C[500] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.screen",
        index: 14
      });
    },
    get C501() {
      return C[501] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.overlay",
        index: 15
      });
    },
    get C502() {
      return C[502] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.darken",
        index: 16
      });
    },
    get C503() {
      return C[503] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.lighten",
        index: 17
      });
    },
    get C504() {
      return C[504] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.colorDodge",
        index: 18
      });
    },
    get C505() {
      return C[505] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.colorBurn",
        index: 19
      });
    },
    get C506() {
      return C[506] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.hardLight",
        index: 20
      });
    },
    get C507() {
      return C[507] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.softLight",
        index: 21
      });
    },
    get C508() {
      return C[508] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.difference",
        index: 22
      });
    },
    get C509() {
      return C[509] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.exclusion",
        index: 23
      });
    },
    get C510() {
      return C[510] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.multiply",
        index: 24
      });
    },
    get C511() {
      return C[511] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.hue",
        index: 25
      });
    },
    get C512() {
      return C[512] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.saturation",
        index: 26
      });
    },
    get C513() {
      return C[513] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.color",
        index: 27
      });
    },
    get C514() {
      return C[514] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.luminosity",
        index: 28
      });
    },
    get C515() {
      return C[515] = dart.constList([C[486] || CT.C486, C[487] || CT.C487, C[488] || CT.C488, C[489] || CT.C489, C[490] || CT.C490, C[491] || CT.C491, C[492] || CT.C492, C[493] || CT.C493, C[494] || CT.C494, C[495] || CT.C495, C[496] || CT.C496, C[497] || CT.C497, C[498] || CT.C498, C[499] || CT.C499, C[500] || CT.C500, C[501] || CT.C501, C[502] || CT.C502, C[503] || CT.C503, C[504] || CT.C504, C[505] || CT.C505, C[506] || CT.C506, C[507] || CT.C507, C[508] || CT.C508, C[509] || CT.C509, C[510] || CT.C510, C[511] || CT.C511, C[512] || CT.C512, C[513] || CT.C513, C[514] || CT.C514], T$0.BlendModeL());
    },
    get C516() {
      return C[516] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.none",
        index: 0
      });
    },
    get C517() {
      return C[517] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.hardEdge",
        index: 1
      });
    },
    get C518() {
      return C[518] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.antiAlias",
        index: 2
      });
    },
    get C519() {
      return C[519] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.antiAliasWithSaveLayer",
        index: 3
      });
    },
    get C520() {
      return C[520] = dart.constList([C[516] || CT.C516, C[517] || CT.C517, C[518] || CT.C518, C[519] || CT.C519], T$0.ClipL());
    },
    get C521() {
      return C[521] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.clamp",
        index: 0
      });
    },
    get C522() {
      return C[522] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.normal",
        index: 0
      });
    },
    get C523() {
      return C[523] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.solid",
        index: 1
      });
    },
    get C524() {
      return C[524] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.outer",
        index: 2
      });
    },
    get C525() {
      return C[525] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.inner",
        index: 3
      });
    },
    get C526() {
      return C[526] = dart.constList([C[522] || CT.C522, C[523] || CT.C523, C[524] || CT.C524, C[525] || CT.C525], T$0.BlurStyleL());
    },
    get C527() {
      return C[527] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.none",
        index: 0
      });
    },
    get C528() {
      return C[528] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.low",
        index: 1
      });
    },
    get C529() {
      return C[529] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.medium",
        index: 2
      });
    },
    get C530() {
      return C[530] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.high",
        index: 3
      });
    },
    get C531() {
      return C[531] = dart.constList([C[527] || CT.C527, C[528] || CT.C528, C[529] || CT.C529, C[530] || CT.C530], T$0.FilterQualityL());
    },
    get C532() {
      return C[532] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.rawRgba",
        index: 0
      });
    },
    get C533() {
      return C[533] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.rawUnmodified",
        index: 1
      });
    },
    get C534() {
      return C[534] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.png",
        index: 2
      });
    },
    get C535() {
      return C[535] = dart.constList([C[532] || CT.C532, C[533] || CT.C533, C[534] || CT.C534], T$0.ImageByteFormatL());
    },
    get C536() {
      return C[536] = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$7]: "PixelFormat.rgba8888",
        index: 0
      });
    },
    get C537() {
      return C[537] = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$7]: "PixelFormat.bgra8888",
        index: 1
      });
    },
    get C538() {
      return C[538] = dart.constList([C[536] || CT.C536, C[537] || CT.C537], T$0.PixelFormatL());
    },
    get C539() {
      return C[539] = dart.const({
        __proto__: ui.Color.prototype,
        [value$5]: 4278190080.0
      });
    },
    get C540() {
      return C[540] = dart.const({
        __proto__: ui.AccessibilityFeatures.prototype,
        [AccessibilityFeatures__index]: 0
      });
    },
    get C541() {
      return C[541] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$7]: "Brightness.light",
        index: 1
      });
    },
    get C542() {
      return C[542] = dart.constList([], T$0.LocaleL());
    },
    get C543() {
      return C[543] = dart.const({
        __proto__: _engine.WindowPadding.prototype,
        [WindowPadding_bottom]: 0,
        [WindowPadding_right]: 0,
        [WindowPadding_top]: 0,
        [WindowPadding_left]: 0
      });
    },
    get C544() {
      return C[544] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.vsyncStart",
        index: 0
      });
    },
    get C545() {
      return C[545] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.buildStart",
        index: 1
      });
    },
    get C546() {
      return C[546] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.buildFinish",
        index: 2
      });
    },
    get C547() {
      return C[547] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.rasterStart",
        index: 3
      });
    },
    get C548() {
      return C[548] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.rasterFinish",
        index: 4
      });
    },
    get C549() {
      return C[549] = dart.constList([C[544] || CT.C544, C[545] || CT.C545, C[546] || CT.C546, C[547] || CT.C547, C[548] || CT.C548], T$0.FramePhaseL());
    },
    get C550() {
      return C[550] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.resumed",
        index: 0
      });
    },
    get C551() {
      return C[551] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.inactive",
        index: 1
      });
    },
    get C552() {
      return C[552] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.paused",
        index: 2
      });
    },
    get C553() {
      return C[553] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.detached",
        index: 3
      });
    },
    get C554() {
      return C[554] = dart.constList([C[550] || CT.C550, C[551] || CT.C551, C[552] || CT.C552, C[553] || CT.C553], T$0.AppLifecycleStateL());
    },
    get C555() {
      return C[555] = dart.constMap(T$.StringL(), T$.StringL(), ["in", "id", "iw", "he", "ji", "yi", "jw", "jv", "mo", "ro", "aam", "aas", "adp", "dz", "aue", "ktz", "ayx", "nun", "bgm", "bcg", "bjd", "drl", "ccq", "rki", "cjr", "mom", "cka", "cmr", "cmk", "xch", "coy", "pij", "cqu", "quh", "drh", "khk", "drw", "prs", "gav", "dev", "gfx", "vaj", "ggn", "gvr", "gti", "nyc", "guv", "duz", "hrr", "jal", "ibi", "opa", "ilw", "gal", "jeg", "oyb", "kgc", "tdf", "kgh", "kml", "koj", "kwv", "krm", "bmf", "ktr", "dtp", "kvs", "gdj", "kwq", "yam", "kxe", "tvd", "kzj", "dtp", "kzt", "dtp", "lii", "raq", "lmm", "rmx", "meg", "cir", "mst", "mry", "mwj", "vaj", "myt", "mry", "nad", "xny", "ncp", "kdz", "nnx", "ngv", "nts", "pij", "oun", "vaj", "pcr", "adx", "pmc", "huw", "pmu", "phr", "ppa", "bfy", "ppr", "lcq", "pry", "prt", "puz", "pub", "sca", "hle", "skk", "oyb", "tdu", "dtp", "thc", "tpo", "thx", "oyb", "tie", "ras", "tkk", "twm", "tlw", "weo", "tmp", "tyj", "tne", "kak", "tnf", "prs", "tsf", "taj", "uok", "ema", "xba", "cax", "xia", "acn", "xkh", "waw", "xsj", "suj", "ybd", "rki", "yma", "lrr", "ymt", "mtm", "yos", "zom", "yuu", "yug"]);
    },
    get C556() {
      return C[556] = dart.constMap(T$.StringL(), T$.StringL(), ["BU", "MM", "DD", "DE", "FX", "FR", "TP", "TL", "YD", "YE", "ZR", "CD"]);
    },
    get C557() {
      return C[557] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.cancel",
        index: 0
      });
    },
    get C558() {
      return C[558] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.add",
        index: 1
      });
    },
    get C559() {
      return C[559] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.remove",
        index: 2
      });
    },
    get C560() {
      return C[560] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.hover",
        index: 3
      });
    },
    get C561() {
      return C[561] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.down",
        index: 4
      });
    },
    get C562() {
      return C[562] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.move",
        index: 5
      });
    },
    get C563() {
      return C[563] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.up",
        index: 6
      });
    },
    get C564() {
      return C[564] = dart.constList([C[557] || CT.C557, C[558] || CT.C558, C[559] || CT.C559, C[560] || CT.C560, C[561] || CT.C561, C[562] || CT.C562, C[563] || CT.C563], T$0.PointerChangeL());
    },
    get C565() {
      return C[565] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C566() {
      return C[566] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C567() {
      return C[567] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C568() {
      return C[568] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C569() {
      return C[569] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.unknown",
        index: 4
      });
    },
    get C570() {
      return C[570] = dart.constList([C[565] || CT.C565, C[566] || CT.C566, C[567] || CT.C567, C[568] || CT.C568, C[569] || CT.C569], T$0.PointerDeviceKindL());
    },
    get C571() {
      return C[571] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.none",
        index: 0
      });
    },
    get C572() {
      return C[572] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.scroll",
        index: 1
      });
    },
    get C573() {
      return C[573] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.unknown",
        index: 2
      });
    },
    get C574() {
      return C[574] = dart.constList([C[571] || CT.C571, C[572] || CT.C572, C[573] || CT.C573], T$0.PointerSignalKindL());
    },
    get C575() {
      return C[575] = dart.constList([], T$0.PointerDataL());
    },
    get C576() {
      return C[576] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1
      });
    },
    get C577() {
      return C[577] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 2
      });
    },
    get C578() {
      return C[578] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 4
      });
    },
    get C579() {
      return C[579] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 8
      });
    },
    get C580() {
      return C[580] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 16
      });
    },
    get C581() {
      return C[581] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 32
      });
    },
    get C582() {
      return C[582] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 64
      });
    },
    get C583() {
      return C[583] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 128
      });
    },
    get C584() {
      return C[584] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 256
      });
    },
    get C585() {
      return C[585] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 512
      });
    },
    get C586() {
      return C[586] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1024
      });
    },
    get C587() {
      return C[587] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 2048
      });
    },
    get C588() {
      return C[588] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 4096
      });
    },
    get C589() {
      return C[589] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 8192
      });
    },
    get C590() {
      return C[590] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 16384
      });
    },
    get C591() {
      return C[591] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 32768
      });
    },
    get C592() {
      return C[592] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 65536
      });
    },
    get C593() {
      return C[593] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 131072
      });
    },
    get C594() {
      return C[594] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 262144
      });
    },
    get C595() {
      return C[595] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 524288
      });
    },
    get C596() {
      return C[596] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1048576
      });
    },
    get C597() {
      return C[597] = dart.constMap(T$0.intL(), T$0.SemanticsActionL(), [1, C[576] || CT.C576, 2, C[577] || CT.C577, 4, C[578] || CT.C578, 8, C[579] || CT.C579, 16, C[580] || CT.C580, 32, C[581] || CT.C581, 64, C[582] || CT.C582, 128, C[583] || CT.C583, 256, C[584] || CT.C584, 512, C[585] || CT.C585, 1024, C[586] || CT.C586, 2048, C[587] || CT.C587, 4096, C[588] || CT.C588, 8192, C[589] || CT.C589, 16384, C[590] || CT.C590, 32768, C[591] || CT.C591, 65536, C[592] || CT.C592, 131072, C[593] || CT.C593, 262144, C[594] || CT.C594, 524288, C[595] || CT.C595, 1048576, C[596] || CT.C596]);
    },
    get C598() {
      return C[598] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1
      });
    },
    get C599() {
      return C[599] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2
      });
    },
    get C600() {
      return C[600] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4
      });
    },
    get C601() {
      return C[601] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8
      });
    },
    get C602() {
      return C[602] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4194304
      });
    },
    get C603() {
      return C[603] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 16
      });
    },
    get C604() {
      return C[604] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1048576
      });
    },
    get C605() {
      return C[605] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2097152
      });
    },
    get C606() {
      return C[606] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 32
      });
    },
    get C607() {
      return C[607] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 64
      });
    },
    get C608() {
      return C[608] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 128
      });
    },
    get C609() {
      return C[609] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 256
      });
    },
    get C610() {
      return C[610] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 512
      });
    },
    get C611() {
      return C[611] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1024
      });
    },
    get C612() {
      return C[612] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2048
      });
    },
    get C613() {
      return C[613] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4096
      });
    },
    get C614() {
      return C[614] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8192
      });
    },
    get C615() {
      return C[615] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 16384
      });
    },
    get C616() {
      return C[616] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 32768
      });
    },
    get C617() {
      return C[617] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 65536
      });
    },
    get C618() {
      return C[618] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 131072
      });
    },
    get C619() {
      return C[619] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 262144
      });
    },
    get C620() {
      return C[620] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 524288
      });
    },
    get C621() {
      return C[621] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8388608
      });
    },
    get C622() {
      return C[622] = dart.constMap(T$0.intL(), T$0.SemanticsFlagL(), [1, C[598] || CT.C598, 2, C[599] || CT.C599, 4, C[600] || CT.C600, 8, C[601] || CT.C601, 4194304, C[602] || CT.C602, 8388608, C[621] || CT.C621, 16, C[603] || CT.C603, 2097152, C[605] || CT.C605, 32, C[606] || CT.C606, 64, C[607] || CT.C607, 128, C[608] || CT.C608, 256, C[609] || CT.C609, 512, C[610] || CT.C610, 1024, C[611] || CT.C611, 2048, C[612] || CT.C612, 4096, C[613] || CT.C613, 8192, C[614] || CT.C614, 16384, C[615] || CT.C615, 32768, C[616] || CT.C616, 65536, C[617] || CT.C617, 131072, C[618] || CT.C618, 262144, C[619] || CT.C619, 524288, C[620] || CT.C620, 1048576, C[604] || CT.C604]);
    },
    get C623() {
      return C[623] = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$7]: "FontStyle.normal",
        index: 0
      });
    },
    get C624() {
      return C[624] = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$7]: "FontStyle.italic",
        index: 1
      });
    },
    get C625() {
      return C[625] = dart.constList([C[623] || CT.C623, C[624] || CT.C624], T$0.FontStyleL());
    },
    get C626() {
      return C[626] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.baseline",
        index: 0
      });
    },
    get C627() {
      return C[627] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.aboveBaseline",
        index: 1
      });
    },
    get C628() {
      return C[628] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.belowBaseline",
        index: 2
      });
    },
    get C629() {
      return C[629] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.top",
        index: 3
      });
    },
    get C630() {
      return C[630] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C631() {
      return C[631] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.middle",
        index: 5
      });
    },
    get C632() {
      return C[632] = dart.constList([C[626] || CT.C626, C[627] || CT.C627, C[628] || CT.C628, C[629] || CT.C629, C[630] || CT.C630, C[631] || CT.C631], T$0.PlaceholderAlignmentL());
    },
    get C633() {
      return C[633] = dart.constMap(T$0.intL(), T$.StringL(), [0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"]);
    },
    get C634() {
      return C[634] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 0
      });
    },
    get C635() {
      return C[635] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 1
      });
    },
    get C636() {
      return C[636] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 2
      });
    },
    get C637() {
      return C[637] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 3
      });
    },
    get C638() {
      return C[638] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 4
      });
    },
    get C639() {
      return C[639] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 5
      });
    },
    get C640() {
      return C[640] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 6
      });
    },
    get C641() {
      return C[641] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 7
      });
    },
    get C642() {
      return C[642] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 8
      });
    },
    get C643() {
      return C[643] = dart.constList([C[634] || CT.C634, C[635] || CT.C635, C[636] || CT.C636, C[637] || CT.C637, C[638] || CT.C638, C[639] || CT.C639, C[640] || CT.C640, C[641] || CT.C641, C[642] || CT.C642], T$0.FontWeightL());
    },
    get C644() {
      return C[644] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.left",
        index: 0
      });
    },
    get C645() {
      return C[645] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.right",
        index: 1
      });
    },
    get C646() {
      return C[646] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.center",
        index: 2
      });
    },
    get C647() {
      return C[647] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.justify",
        index: 3
      });
    },
    get C648() {
      return C[648] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.start",
        index: 4
      });
    },
    get C649() {
      return C[649] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.end",
        index: 5
      });
    },
    get C650() {
      return C[650] = dart.constList([C[644] || CT.C644, C[645] || CT.C645, C[646] || CT.C646, C[647] || CT.C647, C[648] || CT.C648, C[649] || CT.C649], T$0.TextAlignL());
    },
    get C651() {
      return C[651] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$7]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C652() {
      return C[652] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$7]: "TextBaseline.ideographic",
        index: 1
      });
    },
    get C653() {
      return C[653] = dart.constList([C[651] || CT.C651, C[652] || CT.C652], T$0.TextBaselineL());
    },
    get C654() {
      return C[654] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 0
      });
    },
    get C655() {
      return C[655] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 1
      });
    },
    get C656() {
      return C[656] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 2
      });
    },
    get C657() {
      return C[657] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 4
      });
    },
    get C658() {
      return C[658] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.solid",
        index: 0
      });
    },
    get C659() {
      return C[659] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.double",
        index: 1
      });
    },
    get C660() {
      return C[660] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.dotted",
        index: 2
      });
    },
    get C661() {
      return C[661] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.dashed",
        index: 3
      });
    },
    get C662() {
      return C[662] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.wavy",
        index: 4
      });
    },
    get C663() {
      return C[663] = dart.constList([C[658] || CT.C658, C[659] || CT.C659, C[660] || CT.C660, C[661] || CT.C661, C[662] || CT.C662], T$0.TextDecorationStyleL());
    },
    get C664() {
      return C[664] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$7]: "TextDirection.rtl",
        index: 0
      });
    },
    get C665() {
      return C[665] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$7]: "TextDirection.ltr",
        index: 1
      });
    },
    get C666() {
      return C[666] = dart.constList([C[664] || CT.C664, C[665] || CT.C665], T$0.TextDirectionL());
    },
    get C667() {
      return C[667] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$7]: "TextAffinity.upstream",
        index: 0
      });
    },
    get C668() {
      return C[668] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$7]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C669() {
      return C[669] = dart.constList([C[667] || CT.C667, C[668] || CT.C668], T$0.TextAffinityL());
    },
    get C670() {
      return C[670] = dart.const({
        __proto__: ui.TextRange.prototype,
        [end$0]: -1,
        [start$1]: -1
      });
    },
    get C671() {
      return C[671] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C672() {
      return C[672] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.max",
        index: 1
      });
    },
    get C673() {
      return C[673] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingMiddle",
        index: 2
      });
    },
    get C674() {
      return C[674] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingTop",
        index: 3
      });
    },
    get C675() {
      return C[675] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingBottom",
        index: 4
      });
    },
    get C676() {
      return C[676] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.strut",
        index: 5
      });
    },
    get C677() {
      return C[677] = dart.constList([C[671] || CT.C671, C[672] || CT.C672, C[673] || CT.C673, C[674] || CT.C674, C[675] || CT.C675, C[676] || CT.C676], T$0.BoxHeightStyleL());
    },
    get C678() {
      return C[678] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$7]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C679() {
      return C[679] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$7]: "BoxWidthStyle.max",
        index: 1
      });
    },
    get C680() {
      return C[680] = dart.constList([C[678] || CT.C678, C[679] || CT.C679], T$0.BoxWidthStyleL());
    },
    get C681() {
      return C[681] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.repeated",
        index: 1
      });
    },
    get C682() {
      return C[682] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.mirror",
        index: 2
      });
    },
    get C683() {
      return C[683] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.decal",
        index: 3
      });
    },
    get C684() {
      return C[684] = dart.constList([C[521] || CT.C521, C[681] || CT.C681, C[682] || CT.C682, C[683] || CT.C683], T$0.TileModeL());
    },
    get C685() {
      return C[685] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$7]: "Brightness.dark",
        index: 0
      });
    },
    get C686() {
      return C[686] = dart.constList([C[685] || CT.C685, C[541] || CT.C541], T$0.BrightnessL());
    },
    get C687() {
      return C[687] = dart.const({
        __proto__: ui._HashEnd.prototype
      });
    },
    get C688() {
      return C[688] = dart.const({
        __proto__: _engine.AssetManager.prototype,
        [AssetManager_assetsDir]: "assets"
      });
    },
    get C689() {
      return C[689] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 2000000
      });
    },
    get C691() {
      return C[691] = dart.const({
        __proto__: _engine.StandardMessageCodec.prototype
      });
    },
    get C690() {
      return C[690] = dart.const({
        __proto__: _engine.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[691] || CT.C691
      });
    },
    get C692() {
      return C[692] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 600,
        [_dx$]: 800
      });
    },
    get C693() {
      return C[693] = dart.const({
        __proto__: ui._KeepToString.prototype
      });
    },
    get C694() {
      return C[694] = dart.fn(_engine.BitmapCanvas._onEvictElement, T$0.HtmlElementTovoid());
    },
    get C695() {
      return C[695] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.blink",
        index: 0
      });
    },
    get C696() {
      return C[696] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.webkit",
        index: 1
      });
    },
    get C697() {
      return C[697] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.firefox",
        index: 2
      });
    },
    get C698() {
      return C[698] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.edge",
        index: 3
      });
    },
    get C699() {
      return C[699] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.ie11",
        index: 4
      });
    },
    get C700() {
      return C[700] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.unknown",
        index: 5
      });
    },
    get C701() {
      return C[701] = dart.constList([C[695] || CT.C695, C[696] || CT.C696, C[697] || CT.C697, C[698] || CT.C698, C[699] || CT.C699, C[700] || CT.C700], T$1.BrowserEngineL());
    },
    get C702() {
      return C[702] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.iOs",
        index: 0
      });
    },
    get C703() {
      return C[703] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.android",
        index: 1
      });
    },
    get C704() {
      return C[704] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.linux",
        index: 2
      });
    },
    get C705() {
      return C[705] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.windows",
        index: 3
      });
    },
    get C706() {
      return C[706] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.macOs",
        index: 4
      });
    },
    get C707() {
      return C[707] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.unknown",
        index: 5
      });
    },
    get C708() {
      return C[708] = dart.constList([C[702] || CT.C702, C[703] || CT.C703, C[704] || CT.C704, C[705] || CT.C705, C[706] || CT.C706, C[707] || CT.C707], T$1.OperatingSystemL());
    },
    get C709() {
      return C[709] = dart.const({
        __proto__: _engine.CkRestoreCommand.prototype
      });
    },
    get C710() {
      return C[710] = dart.const({
        __proto__: _engine.CkSaveCommand.prototype
      });
    },
    get C711() {
      return C[711] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.transform",
        index: 3
      });
    },
    get C712() {
      return C[712] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipRect",
        index: 0
      });
    },
    get C713() {
      return C[713] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipRRect",
        index: 1
      });
    },
    get C714() {
      return C[714] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipPath",
        index: 2
      });
    },
    get C715() {
      return C[715] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.opacity",
        index: 4
      });
    },
    get C716() {
      return C[716] = dart.constList([C[712] || CT.C712, C[713] || CT.C713, C[714] || CT.C714, C[711] || CT.C711, C[715] || CT.C715], T$1.MutatorTypeL());
    },
    get C717() {
      return C[717] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 100000
      });
    },
    get C718() {
      return C[718] = dart.const(new _js_helper.PrivateSymbol.new('_getNextFrame', _getNextFrame$));
    },
    get C719() {
      return C[719] = dart.const(new _js_helper.PrivateSymbol.new('_durationMillis', _durationMillis$));
    },
    get C720() {
      return C[720] = dart.const({
        __proto__: _engine.CkPathMetricIteratorEmpty.prototype
      });
    },
    get C721() {
      return C[721] = dart.fn(_engine.SkiaObjects.postFrameCleanUp, T$.VoidTovoid());
    },
    get C722() {
      return C[722] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.addText",
        index: 0
      });
    },
    get C723() {
      return C[723] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.pop",
        index: 1
      });
    },
    get C724() {
      return C[724] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.pushStyle",
        index: 2
      });
    },
    get C725() {
      return C[725] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.addPlaceholder",
        index: 3
      });
    },
    get C726() {
      return C[726] = dart.constList([], T$1.TextBoxL());
    },
    get C727() {
      return C[727] = dart.const({
        __proto__: _engine._ParagraphCommand.prototype,
        [_ParagraphCommand_placeholderStyle]: null,
        [_ParagraphCommand_style]: null,
        [_ParagraphCommand_text]: null,
        [_ParagraphCommand_type]: C[723] || CT.C723
      });
    },
    get C728() {
      return C[728] = dart.constList([C[722] || CT.C722, C[723] || CT.C723, C[724] || CT.C724, C[725] || CT.C725], T$1._ParagraphCommandTypeL());
    },
    get C729() {
      return C[729] = dart.const({
        __proto__: _engine.JSONMethodCodec.prototype
      });
    },
    get C730() {
      return C[730] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "languagechange"
      });
    },
    get C731() {
      return C[731] = dart.const({
        __proto__: _engine.MethodCall.prototype,
        [MethodCall_arguments]: null,
        [MethodCall_method]: "popRoute"
      });
    },
    get C732() {
      return C[732] = dart.const({
        __proto__: _engine.BrowserPlatformLocation.prototype
      });
    },
    get C733() {
      return C[733] = dart.constMap(T$1.PersistedSurfaceL(), T$1.PersistedSurfaceL(), []);
    },
    get C735() {
      return C[735] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: 1
      });
    },
    get C736() {
      return C[736] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: 1
      });
    },
    get C737() {
      return C[737] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: 0
      });
    },
    get C738() {
      return C[738] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: -1
      });
    },
    get C739() {
      return C[739] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: -1
      });
    },
    get C740() {
      return C[740] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: -1
      });
    },
    get C741() {
      return C[741] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: 0
      });
    },
    get C742() {
      return C[742] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: 1
      });
    },
    get C734() {
      return C[734] = dart.constList([C[735] || CT.C735, C[736] || CT.C736, C[737] || CT.C737, C[738] || CT.C738, C[739] || CT.C739, C[740] || CT.C740, C[741] || CT.C741, C[742] || CT.C742], T$1.OffsetL());
    },
    get C743() {
      return C[743] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kBackwards",
        index: 4
      });
    },
    get C744() {
      return C[744] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kUnknown",
        index: 0
      });
    },
    get C745() {
      return C[745] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kLeft",
        index: 1
      });
    },
    get C746() {
      return C[746] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kRight",
        index: 2
      });
    },
    get C747() {
      return C[747] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kStraight",
        index: 3
      });
    },
    get C748() {
      return C[748] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kInvalid",
        index: 5
      });
    },
    get C749() {
      return C[749] = dart.constList([C[744] || CT.C744, C[745] || CT.C745, C[746] || CT.C746, C[747] || CT.C747, C[743] || CT.C743, C[748] || CT.C748], T$1.DirChangeL());
    },
    get C750() {
      return C[750] = dart.const({
        __proto__: _engine.PaintSave.prototype
      });
    },
    get C751() {
      return C[751] = dart.const({
        __proto__: _engine.PaintRestore.prototype
      });
    },
    get C752() {
      return C[752] = dart.fn(core.print, T$.ObjectNTovoid());
    },
    get C753() {
      return C[753] = const$ || (const$ = dart.constList([], dart.dynamic));
    },
    get C754() {
      return C[754] = dart.constList([0, 1], T$.doubleL());
    },
    get C755() {
      return C[755] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.created",
        index: 0
      });
    },
    get C756() {
      return C[756] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.active",
        index: 1
      });
    },
    get C757() {
      return C[757] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.pendingRetention",
        index: 2
      });
    },
    get C758() {
      return C[758] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.pendingUpdate",
        index: 3
      });
    },
    get C759() {
      return C[759] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.released",
        index: 4
      });
    },
    get C760() {
      return C[760] = dart.constList([C[755] || CT.C755, C[756] || CT.C756, C[757] || CT.C757, C[758] || CT.C758, C[759] || CT.C759], T$1.PersistedSurfaceStateL());
    },
    get C761() {
      return C[761] = dart.fn(_engine._noopCallback, T$0.ByteDataNTovoid());
    },
    get C762() {
      return C[762] = dart.const({
        __proto__: _engine.JSONMessageCodec.prototype
      });
    },
    get C763() {
      return C[763] = dart.constMap(T$.StringL(), T$.StringL(), ["alias", "alias", "allScroll", "all-scroll", "basic", "default", "cell", "cell", "click", "pointer", "contextMenu", "context-menu", "copy", "copy", "forbidden", "not-allowed", "grab", "grab", "grabbing", "grabbing", "help", "help", "move", "move", "none", "none", "noDrop", "no-drop", "precise", "crosshair", "progress", "progress", "text", "text", "resizeColumn", "col-resize", "resizeDown", "s-resize", "resizeDownLeft", "sw-resize", "resizeDownRight", "se-resize", "resizeLeft", "w-resize", "resizeLeftRight", "ew-resize", "resizeRight", "e-resize", "resizeRow", "row-resize", "resizeUp", "n-resize", "resizeUpDown", "ns-resize", "resizeUpLeft", "nw-resize", "resizeUpRight", "ne-resize", "resizeUpLeftDownRight", "nwse-resize", "resizeUpRightDownLeft", "nesw-resize", "verticalText", "vertical-text", "wait", "wait", "zoomIn", "zoom-in", "zoomOut", "zoom-out"]);
    },
    get C764() {
      return C[764] = dart.const({
        __proto__: ui.Locale.prototype,
        [_countryCode$]: null,
        [scriptCode$]: null,
        [_languageCode$]: "und"
      });
    },
    get C766() {
      return C[766] = dart.const({
        __proto__: ui.Locale.prototype,
        [_countryCode$]: "US",
        [scriptCode$]: null,
        [_languageCode$]: "en"
      });
    },
    get C765() {
      return C[765] = dart.constList([C[766] || CT.C766], T$0.LocaleL());
    },
    get C767() {
      return C[767] = dart.const({
        __proto__: _engine.PointerSupportDetector.prototype
      });
    },
    get C768() {
      return C[768] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 5000000
      });
    },
    get C769() {
      return C[769] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.checkbox",
        index: 0
      });
    },
    get C770() {
      return C[770] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.radio",
        index: 1
      });
    },
    get C771() {
      return C[771] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.toggle",
        index: 2
      });
    },
    get C772() {
      return C[772] = dart.constList([C[769] || CT.C769, C[770] || CT.C770, C[771] || CT.C771], T$1._CheckableKindL());
    },
    get C773() {
      return C[773] = dart.const({
        __proto__: _engine.GestureMode.prototype,
        [_name$8]: "GestureMode.browserGestures",
        index: 1
      });
    },
    get C774() {
      return C[774] = dart.const({
        __proto__: _engine.GestureMode.prototype,
        [_name$8]: "GestureMode.pointerEvents",
        index: 0
      });
    },
    get C775() {
      return C[775] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.incrementable",
        index: 0
      });
    },
    get C776() {
      return C[776] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.scrollable",
        index: 1
      });
    },
    get C777() {
      return C[777] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.labelAndValue",
        index: 2
      });
    },
    get C778() {
      return C[778] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.tappable",
        index: 3
      });
    },
    get C779() {
      return C[779] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.textField",
        index: 4
      });
    },
    get C780() {
      return C[780] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.checkable",
        index: 5
      });
    },
    get C781() {
      return C[781] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.image",
        index: 6
      });
    },
    get C782() {
      return C[782] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.liveRegion",
        index: 7
      });
    },
    get C783() {
      return C[783] = dart.constList([C[775] || CT.C775, C[776] || CT.C776, C[777] || CT.C777, C[778] || CT.C778, C[779] || CT.C779, C[780] || CT.C780, C[781] || CT.C781, C[782] || CT.C782], T$1.RoleL());
    },
    get C784() {
      return C[784] = dart.const({
        __proto__: _engine.AccessibilityMode.prototype,
        [_name$8]: "AccessibilityMode.unknown",
        index: 0
      });
    },
    get C785() {
      return C[785] = dart.const({
        __proto__: _engine.AccessibilityMode.prototype,
        [_name$8]: "AccessibilityMode.known",
        index: 1
      });
    },
    get C786() {
      return C[786] = dart.constList([C[784] || CT.C784, C[785] || CT.C785], T$1.AccessibilityModeL());
    },
    get C787() {
      return C[787] = dart.constList([C[774] || CT.C774, C[773] || CT.C773], T$1.GestureModeL());
    },
    get C788() {
      return C[788] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 500000
      });
    },
    get C789() {
      return C[789] = dart.constList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup", "keyup", "keydown"], T$.StringL());
    },
    get C790() {
      return C[790] = dart.constList(["click", "scroll"], T$.StringL());
    },
    get C791() {
      return C[791] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.noOpinion",
        index: 0
      });
    },
    get C792() {
      return C[792] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.enabled",
        index: 1
      });
    },
    get C793() {
      return C[793] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.disabled",
        index: 2
      });
    },
    get C794() {
      return C[794] = dart.constList([C[791] || CT.C791, C[792] || CT.C792, C[793] || CT.C793], T$1.EnabledStateL());
    },
    get C795() {
      return C[795] = dart.constSet(T$.StringL(), ["click", "keyup", "keydown", "mouseup", "mousedown", "pointerdown", "pointerup"]);
    },
    get C796() {
      return C[796] = dart.constSet(T$.StringL(), ["click", "touchstart", "touchend", "pointerdown", "pointermove", "pointerup"]);
    },
    get C797() {
      return C[797] = dart.const({
        __proto__: _engine.StringCodec.prototype
      });
    },
    get C798() {
      return C[798] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Message corrupted"
      });
    },
    get C799() {
      return C[799] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Invalid method call"
      });
    },
    get C800() {
      return C[800] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Expected envelope, got nothing"
      });
    },
    get C801() {
      return C[801] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Invalid envelope"
      });
    },
    get C802() {
      return C[802] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 50000
      });
    },
    get C803() {
      return C[803] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CM",
        index: 0
      });
    },
    get C804() {
      return C[804] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BA",
        index: 1
      });
    },
    get C805() {
      return C[805] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.LF",
        index: 2
      });
    },
    get C806() {
      return C[806] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BK",
        index: 3
      });
    },
    get C807() {
      return C[807] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CR",
        index: 4
      });
    },
    get C808() {
      return C[808] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.SP",
        index: 5
      });
    },
    get C809() {
      return C[809] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EX",
        index: 6
      });
    },
    get C810() {
      return C[810] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.QU",
        index: 7
      });
    },
    get C811() {
      return C[811] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.AL",
        index: 8
      });
    },
    get C812() {
      return C[812] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.PR",
        index: 9
      });
    },
    get C813() {
      return C[813] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.PO",
        index: 10
      });
    },
    get C814() {
      return C[814] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.OP",
        index: 11
      });
    },
    get C815() {
      return C[815] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CP",
        index: 12
      });
    },
    get C816() {
      return C[816] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.IS",
        index: 13
      });
    },
    get C817() {
      return C[817] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.HY",
        index: 14
      });
    },
    get C818() {
      return C[818] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.SY",
        index: 15
      });
    },
    get C819() {
      return C[819] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.NU",
        index: 16
      });
    },
    get C820() {
      return C[820] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CL",
        index: 17
      });
    },
    get C821() {
      return C[821] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.GL",
        index: 18
      });
    },
    get C822() {
      return C[822] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BB",
        index: 19
      });
    },
    get C823() {
      return C[823] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.HL",
        index: 20
      });
    },
    get C824() {
      return C[824] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JL",
        index: 21
      });
    },
    get C825() {
      return C[825] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JV",
        index: 22
      });
    },
    get C826() {
      return C[826] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JT",
        index: 23
      });
    },
    get C827() {
      return C[827] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.NS",
        index: 24
      });
    },
    get C828() {
      return C[828] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ZW",
        index: 25
      });
    },
    get C829() {
      return C[829] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ZWJ",
        index: 26
      });
    },
    get C830() {
      return C[830] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.B2",
        index: 27
      });
    },
    get C831() {
      return C[831] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.IN",
        index: 28
      });
    },
    get C832() {
      return C[832] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.WJ",
        index: 29
      });
    },
    get C833() {
      return C[833] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ID",
        index: 30
      });
    },
    get C834() {
      return C[834] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EB",
        index: 31
      });
    },
    get C835() {
      return C[835] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.H2",
        index: 32
      });
    },
    get C836() {
      return C[836] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.H3",
        index: 33
      });
    },
    get C837() {
      return C[837] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CB",
        index: 34
      });
    },
    get C838() {
      return C[838] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.RI",
        index: 35
      });
    },
    get C839() {
      return C[839] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EM",
        index: 36
      });
    },
    get C840() {
      return C[840] = dart.constList([C[803] || CT.C803, C[804] || CT.C804, C[805] || CT.C805, C[806] || CT.C806, C[807] || CT.C807, C[808] || CT.C808, C[809] || CT.C809, C[810] || CT.C810, C[811] || CT.C811, C[812] || CT.C812, C[813] || CT.C813, C[814] || CT.C814, C[815] || CT.C815, C[816] || CT.C816, C[817] || CT.C817, C[818] || CT.C818, C[819] || CT.C819, C[820] || CT.C820, C[821] || CT.C821, C[822] || CT.C822, C[823] || CT.C823, C[824] || CT.C824, C[825] || CT.C825, C[826] || CT.C826, C[827] || CT.C827, C[828] || CT.C828, C[829] || CT.C829, C[830] || CT.C830, C[831] || CT.C831, C[832] || CT.C832, C[833] || CT.C833, C[834] || CT.C834, C[835] || CT.C835, C[836] || CT.C836, C[837] || CT.C837, C[838] || CT.C838, C[839] || CT.C839], T$1.LineCharPropertyL());
    },
    get C841() {
      return C[841] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.opportunity",
        index: 0
      });
    },
    get C842() {
      return C[842] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.prohibited",
        index: 1
      });
    },
    get C843() {
      return C[843] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.mandatory",
        index: 2
      });
    },
    get C844() {
      return C[844] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.endOfText",
        index: 3
      });
    },
    get C845() {
      return C[845] = dart.constList([C[841] || CT.C841, C[842] || CT.C842, C[843] || CT.C843, C[844] || CT.C844], T$1.LineBreakTypeL());
    },
    get C846() {
      return C[846] = dart.fn(_engine._newlinePredicate, T$1.intTobool());
    },
    get C847() {
      return C[847] = dart.const({
        __proto__: ui.TextPosition.prototype,
        [affinity$]: C[668] || CT.C668,
        [offset$1]: 0
      });
    },
    get C848() {
      return C[848] = dart.const({
        __proto__: _engine.LineBreakResult.prototype,
        [type$6]: C[843] || CT.C843,
        [indexWithoutTrailingSpaces$]: 0,
        [indexWithoutTrailingNewlines$]: 0,
        [index$2]: 0
      });
    },
    get C849() {
      return C[849] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.inside",
        index: 0
      });
    },
    get C850() {
      return C[850] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.higher",
        index: 1
      });
    },
    get C851() {
      return C[851] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.lower",
        index: 2
      });
    },
    get C852() {
      return C[852] = dart.constList([C[849] || CT.C849, C[850] || CT.C850, C[851] || CT.C851], T$1._ComparisonResultL());
    },
    get C853() {
      return C[853] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.DoubleQuote",
        index: 0
      });
    },
    get C854() {
      return C[854] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.SingleQuote",
        index: 1
      });
    },
    get C855() {
      return C[855] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.HebrewLetter",
        index: 2
      });
    },
    get C856() {
      return C[856] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.CR",
        index: 3
      });
    },
    get C857() {
      return C[857] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.LF",
        index: 4
      });
    },
    get C858() {
      return C[858] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Newline",
        index: 5
      });
    },
    get C859() {
      return C[859] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Extend",
        index: 6
      });
    },
    get C860() {
      return C[860] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.RegionalIndicator",
        index: 7
      });
    },
    get C861() {
      return C[861] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Format",
        index: 8
      });
    },
    get C862() {
      return C[862] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Katakana",
        index: 9
      });
    },
    get C863() {
      return C[863] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ALetter",
        index: 10
      });
    },
    get C864() {
      return C[864] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidLetter",
        index: 11
      });
    },
    get C865() {
      return C[865] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidNum",
        index: 12
      });
    },
    get C866() {
      return C[866] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidNumLet",
        index: 13
      });
    },
    get C867() {
      return C[867] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Numeric",
        index: 14
      });
    },
    get C868() {
      return C[868] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ExtendNumLet",
        index: 15
      });
    },
    get C869() {
      return C[869] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ZWJ",
        index: 16
      });
    },
    get C870() {
      return C[870] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.WSegSpace",
        index: 17
      });
    },
    get C871() {
      return C[871] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Unknown",
        index: 18
      });
    },
    get C872() {
      return C[872] = dart.constList([C[853] || CT.C853, C[854] || CT.C854, C[855] || CT.C855, C[856] || CT.C856, C[857] || CT.C857, C[858] || CT.C858, C[859] || CT.C859, C[860] || CT.C860, C[861] || CT.C861, C[862] || CT.C862, C[863] || CT.C863, C[864] || CT.C864, C[865] || CT.C865, C[866] || CT.C866, C[867] || CT.C867, C[868] || CT.C868, C[869] || CT.C869, C[870] || CT.C870, C[871] || CT.C871], T$1.WordCharPropertyL());
    },
    get C873() {
      return C[873] = dart.const({
        __proto__: _engine._FindBreakDirection.prototype,
        [step$]: 1
      });
    },
    get C874() {
      return C[874] = dart.const({
        __proto__: _engine._FindBreakDirection.prototype,
        [step$]: -1
      });
    },
    get C875() {
      return C[875] = dart.const({
        __proto__: _engine.TextInputType.prototype,
        [TextInputType_inputmodeAttribute]: "text"
      });
    },
    get C876() {
      return C[876] = dart.const({
        __proto__: _engine.NumberInputType.prototype,
        [NumberInputType_inputmodeAttribute]: "numeric"
      });
    },
    get C877() {
      return C[877] = dart.const({
        __proto__: _engine.DecimalInputType.prototype,
        [DecimalInputType_inputmodeAttribute]: "decimal"
      });
    },
    get C878() {
      return C[878] = dart.const({
        __proto__: _engine.PhoneInputType.prototype,
        [PhoneInputType_inputmodeAttribute]: "tel"
      });
    },
    get C879() {
      return C[879] = dart.const({
        __proto__: _engine.EmailInputType.prototype,
        [EmailInputType_inputmodeAttribute]: "email"
      });
    },
    get C880() {
      return C[880] = dart.const({
        __proto__: _engine.UrlInputType.prototype,
        [UrlInputType_inputmodeAttribute]: "url"
      });
    },
    get C881() {
      return C[881] = dart.const({
        __proto__: _engine.MultilineInputType.prototype,
        [MultilineInputType_inputmodeAttribute]: null
      });
    },
    get C882() {
      return C[882] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.words",
        index: 0
      });
    },
    get C883() {
      return C[883] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.sentences",
        index: 1
      });
    },
    get C884() {
      return C[884] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.characters",
        index: 2
      });
    },
    get C885() {
      return C[885] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.none",
        index: 3
      });
    },
    get C886() {
      return C[886] = dart.constList([C[882] || CT.C882, C[883] || CT.C883, C[884] || CT.C884, C[885] || CT.C885], T$1.TextCapitalizationL());
    },
    get C887() {
      return C[887] = dart.fn(_engine._emptyCallback, T$.dynamicTovoid());
    },
    get C888() {
      return C[888] = dart.const({
        __proto__: _engine.TextCapitalizationConfig.prototype,
        [textCapitalization]: C[885] || CT.C885
      });
    },
    get C889() {
      return C[889] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.identity",
        index: 0
      });
    },
    get C890() {
      return C[890] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.transform2d",
        index: 1
      });
    },
    get C891() {
      return C[891] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.complex",
        index: 2
      });
    },
    get C892() {
      return C[892] = dart.constList([C[889] || CT.C889, C[890] || CT.C890, C[891] || CT.C891], T$1.TransformKindL());
    },
    get C893() {
      return C[893] = dart.constList([], T$1.CodeunitRangeL());
    },
    get C894() {
      return C[894] = dart.constList(["dart:async-patch", "dart:async", "dart:_runtime"], T$.StringL());
    },
    get C895() {
      return C[895] = dart.const({
        __proto__: _engine.HashUrlStrategy.prototype,
        [_platformLocation$]: C[732] || CT.C732
      });
    },
    get C896() {
      return C[896] = dart.constSet(T$1.OperatingSystemL(), [C[706] || CT.C706, C[704] || CT.C704, C[705] || CT.C705]);
    },
    get C897() {
      return C[897] = dart.constList([0, 4, 12, 1, 5, 13, 3, 7, 15], T$0.intL());
    },
    get C898() {
      return C[898] = dart.constList(["attribute", "const", "uniform", "varying", "layout", "centroid", "flat", "smooth", "noperspective", "patch", "sample", "break", "continue", "do", "for", "while", "switch", "case", "default", "if", "else", "subroutine", "in", "out", "inout", "float", "double", "int", "void", "bool", "true", "false", "invariant", "discard", "return", "mat2", "mat3", "mat4", "dmat2", "dmat3", "dmat4", "mat2x2", "mat2x3", "mat2x4", "dmat2x2", "dmat2x3", "dmat2x4", "mat3x2", "mat3x3", "mat3x4", "dmat3x2", "dmat3x3", "dmat3x4", "mat4x2", "mat4x3", "mat4x4", "dmat4x2", "dmat4x3", "dmat4x4", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "dvec2", "dvec3", "dvec4", "uint", "uvec2", "uvec3", "uvec4", "lowp", "mediump", "highp", "precision", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow", "samplerCubeShadow", "sampler1DArray", "sampler2DArray", "sampler1DArrayShadow", "sampler2DArrayShadow", "isampler1D", "isampler2D", "isampler3D", "isamplerCube", "isampler1DArray", "isampler2DArray", "usampler1D", "usampler2D", "usampler3D", "usamplerCube", "usampler1DArray", "usampler2DArray", "sampler2DRect", "sampler2DRectShadow", "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray", "samplerCubeArray", "samplerCubeArrayShadow", "isamplerCubeArray", "usamplerCubeArray", "struct", "texture", "active", "asm", "cast", "class", "common", "enum", "extern", "external", "filter", "fixed", "fvec2", "fvec3", "fvec4", "goto", "half", "hvec2", "hvec3", "hvec4", "iimage1D", "iimage1DArray", "iimage2D", "iimage2DArray", "iimage3D", "iimageBuffer", "iimageCube", "image1D", "image1DArray", "image1DArrayShadow", "image1DShadow", "image2D", "image2DArray", "image2DArrayShadow", "image2DShadow", "image3D", "imageBuffer", "imageCube", "inline", "input", "interface", "long", "namespace", "noinline", "output", "packed", "partition", "public", "row_majo", "short", "sizeof", "static", "superp", "template", "this", "typedef", "uimage1D", "uimage1DArray", "uimage2D", "uimage2DArray", "uimage3D", "uimageBuffer", "uimageCube", "union", "unsigned", "using", "volatile"], T$.StringL());
    },
    get C899() {
      return C[899] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 1000000
      });
    },
    get C900() {
      return C[900] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 300000
      });
    },
    get C901() {
      return C[901] = dart.const({
        __proto__: ui.Color.prototype,
        [value$5]: 4294901760.0
      });
    },
    get C902() {
      return C[902] = dart.constSet(T$.StringL(), ["serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "math", "emoji", "fangsong"]);
    },
    get C903() {
      return C[903] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 120000000
      });
    },
    get C904() {
      return C[904] = dart.constList(["cache-control", "connection", "date", "pragma", "trailer", "transfer-encoding", "upgrade", "via", "warning"], T$.StringL());
    },
    get C905() {
      return C[905] = dart.constList(["allow", "content-encoding", "content-language", "content-length", "content-location", "content-md5", "content-range", "content-type", "expires", "last-modified"], T$.StringL());
    },
    get C906() {
      return C[906] = dart.constList(["accept-ranges", "age", "etag", "location", "proxy-authenticate", "retry-after", "server", "vary", "www-authenticate"], T$.StringL());
    },
    get C907() {
      return C[907] = dart.constList(["accept", "accept-charset", "accept-encoding", "accept-language", "authorization", "expect", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "max-forwards", "proxy-authorization", "range", "referer", "te", "user-agent"], T$.StringL());
    },
    get C908() {
      return C[908] = dart.constMap(T$.StringL(), T$.StringN(), []);
    },
    get C909() {
      return C[909] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 15000000
      });
    },
    get C910() {
      return C[910] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.notCompressed",
        index: 0
      });
    },
    get C911() {
      return C[911] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.decompressed",
        index: 1
      });
    },
    get C912() {
      return C[912] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.compressed",
        index: 2
      });
    },
    get C913() {
      return C[913] = dart.constList([C[910] || CT.C910, C[911] || CT.C911, C[912] || CT.C912], T$1.HttpClientResponseCompressionStateL());
    },
    get C914() {
      return C[914] = dart.constList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, 0, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], T$0.intL());
    },
    get C915() {
      return C[915] = dart.constList([3614090360.0, 3905402710.0, 606105819, 3250441966.0, 4118548399.0, 1200080426, 2821735955.0, 4249261313.0, 1770035416, 2336552879.0, 4294925233.0, 2304563134.0, 1804603682, 4254626195.0, 2792965006.0, 1236535329, 4129170786.0, 3225465664.0, 643717713, 3921069994.0, 3593408605.0, 38016083, 3634488961.0, 3889429448.0, 568446438, 3275163606.0, 4107603335.0, 1163531501, 2850285829.0, 4243563512.0, 1735328473, 2368359562.0, 4294588738.0, 2272392833.0, 1839030562, 4259657740.0, 2763975236.0, 1272893353, 4139469664.0, 3200236656.0, 681279174, 3936430074.0, 3572445317.0, 76029189, 3654602809.0, 3873151461.0, 530742520, 3299628645.0, 4096336452.0, 1126891415, 2878612391.0, 4237533241.0, 1700485571, 2399980690.0, 4293915773.0, 2240044497.0, 1873313359, 4264355552.0, 2734768916.0, 1309151649, 4149444226.0, 3174756917.0, 718787259, 3951481745.0], T$0.intL());
    },
    get C916() {
      return C[916] = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], T$0.intL());
    },
    get C917() {
      return C[917] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], dart.dynamic);
    },
    get C918() {
      return C[918] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dart.dynamic);
    },
    get C919() {
      return C[919] = dart.constList(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], dart.dynamic);
    },
    get C920() {
      return C[920] = dart.constList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], dart.dynamic);
    },
    get C921() {
      return C[921] = dart.constList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"], T$.StringL());
    },
    get C922() {
      return C[922] = dart.const({
        __proto__: _http._ToUint8List.prototype
      });
    },
    get C923() {
      return C[923] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding#isSet', __IOSink_encoding_isSet$));
    },
    get C924() {
      return C[924] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding', __IOSink_encoding$));
    },
    get C925() {
      return C[925] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding#isSet=', __IOSink_encoding_isSet_));
    },
    get C926() {
      return C[926] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding=', __IOSink_encoding_));
    },
    get C927() {
      return C[927] = dart.constList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70], T$0.intL());
    },
    get C928() {
      return C[928] = dart.constList([13, 10, 48, 13, 10, 13, 10], T$0.intL());
    },
    get C929() {
      return C[929] = dart.constList([48, 13, 10, 13, 10], T$0.intL());
    },
    get C930() {
      return C[930] = dart.fn(_http.HttpClient.findProxyFromEnvironment, T$1.Uri__ToString());
    },
    get C933() {
      return C[933] = dart.const({
        __proto__: _http._Proxy.prototype,
        [_Proxy_isDirect]: true,
        [_Proxy_password]: null,
        [_Proxy_username]: null,
        [_Proxy_port]: null,
        [_Proxy_host]: null
      });
    },
    get C932() {
      return C[932] = dart.constList([C[933] || CT.C933], T$1._ProxyL());
    },
    get C931() {
      return C[931] = dart.const({
        __proto__: _http._ProxyConfiguration.prototype,
        [_ProxyConfiguration_proxies]: C[932] || CT.C932
      });
    },
    get C934() {
      return C[934] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: -1
      });
    },
    get C935() {
      return C[935] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: 0
      });
    },
    get C936() {
      return C[936] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: 1
      });
    },
    get C937() {
      return C[937] = dart.constList([72, 84, 84, 80], T$0.intL());
    },
    get C938() {
      return C[938] = dart.constList([72, 84, 84, 80, 47, 49, 46], T$0.intL());
    },
    get C939() {
      return C[939] = dart.constList([72, 84, 84, 80, 47, 49, 46, 48], T$0.intL());
    },
    get C940() {
      return C[940] = dart.constList([72, 84, 84, 80, 47, 49, 46, 49], T$0.intL());
    },
    get C941() {
      return C[941] = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], T$0.boolL());
    },
    get C942() {
      return C[942] = dart.const({
        __proto__: _http.CompressionOptions.prototype,
        [enabled$]: true,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    },
    get C943() {
      return C[943] = dart.const({
        __proto__: _http.CompressionOptions.prototype,
        [enabled$]: false,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    },
    get C944() {
      return C[944] = dart.constList([0, 0, 255, 255], T$0.intL());
    },
    get C945() {
      return C[945] = dart.const({
        __proto__: _js_annotations._Anonymous.prototype
      });
    }
  }, false);
  core.Invocation = class Invocation extends core.Object {
    static method(memberName, positionalArguments, namedArguments = null) {
      if (memberName == null) dart.nullFailed(I[10], 20, 18, "memberName");
      return new core._Invocation.method(memberName, null, positionalArguments, namedArguments);
    }
    static genericMethod(memberName, typeArguments, positionalArguments, namedArguments = null) {
      if (memberName == null) dart.nullFailed(I[10], 31, 43, "memberName");
      return new core._Invocation.method(memberName, typeArguments, positionalArguments, namedArguments);
    }
    get typeArguments() {
      return C[0] || CT.C0;
    }
    get isAccessor() {
      return dart.test(this.isGetter) || dart.test(this.isSetter);
    }
  };
  (core.Invocation.new = function() {
    ;
  }).prototype = core.Invocation.prototype;
  dart.addTypeTests(core.Invocation);
  dart.addTypeCaches(core.Invocation);
  dart.setGetterSignature(core.Invocation, () => ({
    __proto__: dart.getGetters(core.Invocation.__proto__),
    typeArguments: core.List$(core.Type),
    isAccessor: core.bool
  }));
  dart.setLibraryUri(core.Invocation, I[8]);
  dart.InvocationImpl = class InvocationImpl extends core.Invocation {
    get memberName() {
      return this[memberName$];
    }
    set memberName(value) {
      super.memberName = value;
    }
    get positionalArguments() {
      return this[positionalArguments$];
    }
    set positionalArguments(value) {
      super.positionalArguments = value;
    }
    get namedArguments() {
      return this[namedArguments$];
    }
    set namedArguments(value) {
      super.namedArguments = value;
    }
    get typeArguments() {
      return this[typeArguments$];
    }
    set typeArguments(value) {
      super.typeArguments = value;
    }
    get isMethod() {
      return this[isMethod$];
    }
    set isMethod(value) {
      super.isMethod = value;
    }
    get isGetter() {
      return this[isGetter$];
    }
    set isGetter(value) {
      super.isGetter = value;
    }
    get isSetter() {
      return this[isSetter$];
    }
    set isSetter(value) {
      super.isSetter = value;
    }
    get failureMessage() {
      return this[failureMessage$];
    }
    set failureMessage(value) {
      super.failureMessage = value;
    }
    static _namedArgsToSymbols(namedArgs) {
      if (namedArgs == null) return const$0 || (const$0 = dart.constMap(T$.SymbolL(), dart.dynamic, []));
      return T$.MapOfSymbol$dynamic().unmodifiable(collection.LinkedHashMap.fromIterable(dart.getOwnPropertyNames(namedArgs), {
        key: dart._dartSymbol,
        value: k => namedArgs[k]
      }));
    }
  };
  (dart.InvocationImpl.new = function(memberName, positionalArguments, opts) {
    if (positionalArguments == null) dart.nullFailed(I[2], 20, 44, "positionalArguments");
    let namedArguments = opts && 'namedArguments' in opts ? opts.namedArguments : null;
    let typeArguments = opts && 'typeArguments' in opts ? opts.typeArguments : const$ || (const$ = dart.constList([], dart.dynamic));
    if (typeArguments == null) dart.nullFailed(I[2], 22, 12, "typeArguments");
    let isMethod = opts && 'isMethod' in opts ? opts.isMethod : false;
    if (isMethod == null) dart.nullFailed(I[2], 23, 12, "isMethod");
    let isGetter = opts && 'isGetter' in opts ? opts.isGetter : false;
    if (isGetter == null) dart.nullFailed(I[2], 24, 12, "isGetter");
    let isSetter = opts && 'isSetter' in opts ? opts.isSetter : false;
    if (isSetter == null) dart.nullFailed(I[2], 25, 12, "isSetter");
    let failureMessage = opts && 'failureMessage' in opts ? opts.failureMessage : "method not found";
    if (failureMessage == null) dart.nullFailed(I[2], 26, 12, "failureMessage");
    this[isMethod$] = isMethod;
    this[isGetter$] = isGetter;
    this[isSetter$] = isSetter;
    this[failureMessage$] = failureMessage;
    this[memberName$] = dart.test(isSetter) ? dart._setterSymbol(memberName) : dart._dartSymbol(memberName);
    this[positionalArguments$] = core.List.unmodifiable(positionalArguments);
    this[namedArguments$] = dart.InvocationImpl._namedArgsToSymbols(namedArguments);
    this[typeArguments$] = T$.ListOfType().unmodifiable(typeArguments[$map](dart.dynamic, dart.wrapType));
    dart.InvocationImpl.__proto__.new.call(this);
    ;
  }).prototype = dart.InvocationImpl.prototype;
  dart.addTypeTests(dart.InvocationImpl);
  dart.addTypeCaches(dart.InvocationImpl);
  dart.setLibraryUri(dart.InvocationImpl, I[9]);
  dart.setFieldSignature(dart.InvocationImpl, () => ({
    __proto__: dart.getFields(dart.InvocationImpl.__proto__),
    memberName: dart.finalFieldType(core.Symbol),
    positionalArguments: dart.finalFieldType(core.List),
    namedArguments: dart.finalFieldType(core.Map$(core.Symbol, dart.dynamic)),
    typeArguments: dart.finalFieldType(core.List$(core.Type)),
    isMethod: dart.finalFieldType(core.bool),
    isGetter: dart.finalFieldType(core.bool),
    isSetter: dart.finalFieldType(core.bool),
    failureMessage: dart.finalFieldType(core.String)
  }));
  var name$0 = dart.privateName(_debugger, "JsonMLConfig.name");
  _debugger.JsonMLConfig = class JsonMLConfig extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return "JsonMLConfig(" + dart.str(this.name) + ")";
    }
  };
  (_debugger.JsonMLConfig.new = function(name) {
    if (name == null) dart.nullFailed(I[11], 28, 27, "name");
    this[name$0] = name;
    ;
  }).prototype = _debugger.JsonMLConfig.prototype;
  dart.addTypeTests(_debugger.JsonMLConfig);
  dart.addTypeCaches(_debugger.JsonMLConfig);
  dart.setLibraryUri(_debugger.JsonMLConfig, I[12]);
  dart.setFieldSignature(_debugger.JsonMLConfig, () => ({
    __proto__: dart.getFields(_debugger.JsonMLConfig.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_debugger.JsonMLConfig, ['toString']);
  dart.defineLazy(_debugger.JsonMLConfig, {
    /*_debugger.JsonMLConfig.none*/get none() {
      return C[1] || CT.C1;
    },
    /*_debugger.JsonMLConfig.skipDart*/get skipDart() {
      return C[2] || CT.C2;
    },
    /*_debugger.JsonMLConfig.keyToString*/get keyToString() {
      return C[3] || CT.C3;
    },
    /*_debugger.JsonMLConfig.asClass*/get asClass() {
      return C[4] || CT.C4;
    },
    /*_debugger.JsonMLConfig.asObject*/get asObject() {
      return C[5] || CT.C5;
    },
    /*_debugger.JsonMLConfig.asMap*/get asMap() {
      return C[6] || CT.C6;
    }
  }, false);
  _debugger.JSNative = class JSNative extends core.Object {
    static getProperty(object, name) {
      return object[name];
    }
    static setProperty(object, name, value) {
      return object[name] = value;
    }
  };
  (_debugger.JSNative.new = function() {
    ;
  }).prototype = _debugger.JSNative.prototype;
  dart.addTypeTests(_debugger.JSNative);
  dart.addTypeCaches(_debugger.JSNative);
  dart.setLibraryUri(_debugger.JSNative, I[12]);
  var name$1 = dart.privateName(_debugger, "NameValuePair.name");
  var value$ = dart.privateName(_debugger, "NameValuePair.value");
  var config$ = dart.privateName(_debugger, "NameValuePair.config");
  var hideName$ = dart.privateName(_debugger, "NameValuePair.hideName");
  _debugger.NameValuePair = class NameValuePair extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get config() {
      return this[config$];
    }
    set config(value) {
      super.config = value;
    }
    get hideName() {
      return this[hideName$];
    }
    set hideName(value) {
      super.hideName = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!_debugger.NameValuePair.is(other)) return false;
      if (dart.test(this.hideName) || dart.test(other.hideName)) return this === other;
      return other.name == this.name;
    }
    get hashCode() {
      return dart.hashCode(this.name);
    }
    get displayName() {
      return dart.test(this.hideName) ? "" : this.name;
    }
  };
  (_debugger.NameValuePair.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : "";
    if (name == null) dart.nullFailed(I[11], 172, 13, "name");
    let value = opts && 'value' in opts ? opts.value : null;
    let config = opts && 'config' in opts ? opts.config : C[1] || CT.C1;
    if (config == null) dart.nullFailed(I[11], 174, 12, "config");
    let hideName = opts && 'hideName' in opts ? opts.hideName : false;
    if (hideName == null) dart.nullFailed(I[11], 175, 12, "hideName");
    this[name$1] = name;
    this[value$] = value;
    this[config$] = config;
    this[hideName$] = hideName;
    ;
  }).prototype = _debugger.NameValuePair.prototype;
  dart.addTypeTests(_debugger.NameValuePair);
  dart.addTypeCaches(_debugger.NameValuePair);
  dart.setGetterSignature(_debugger.NameValuePair, () => ({
    __proto__: dart.getGetters(_debugger.NameValuePair.__proto__),
    displayName: core.String
  }));
  dart.setLibraryUri(_debugger.NameValuePair, I[12]);
  dart.setFieldSignature(_debugger.NameValuePair, () => ({
    __proto__: dart.getFields(_debugger.NameValuePair.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.nullable(core.Object)),
    config: dart.finalFieldType(_debugger.JsonMLConfig),
    hideName: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(_debugger.NameValuePair, ['_equals']);
  dart.defineExtensionAccessors(_debugger.NameValuePair, ['hashCode']);
  var key$ = dart.privateName(_debugger, "MapEntry.key");
  var value$0 = dart.privateName(_debugger, "MapEntry.value");
  _debugger.MapEntry = class MapEntry extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
  };
  (_debugger.MapEntry.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[key$] = key;
    this[value$0] = value;
    ;
  }).prototype = _debugger.MapEntry.prototype;
  dart.addTypeTests(_debugger.MapEntry);
  dart.addTypeCaches(_debugger.MapEntry);
  dart.setLibraryUri(_debugger.MapEntry, I[12]);
  dart.setFieldSignature(_debugger.MapEntry, () => ({
    __proto__: dart.getFields(_debugger.MapEntry.__proto__),
    key: dart.finalFieldType(dart.nullable(core.Object)),
    value: dart.finalFieldType(dart.nullable(core.Object))
  }));
  var start$ = dart.privateName(_debugger, "IterableSpan.start");
  var end$ = dart.privateName(_debugger, "IterableSpan.end");
  var iterable$ = dart.privateName(_debugger, "IterableSpan.iterable");
  _debugger.IterableSpan = class IterableSpan extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get iterable() {
      return this[iterable$];
    }
    set iterable(value) {
      super.iterable = value;
    }
    get length() {
      return dart.notNull(this.end) - dart.notNull(this.start);
    }
    get maxPowerOfSubsetSize() {
      return (math.log(dart.notNull(this.length) - 0.5) / math.log(_debugger._maxSpanLength))[$truncate]();
    }
    get subsetSize() {
      return math.pow(_debugger._maxSpanLength, this.maxPowerOfSubsetSize)[$toInt]();
    }
    asMap() {
      return this.iterable[$skip](this.start)[$take](this.length)[$toList]()[$asMap]();
    }
    children() {
      let children = T$.JSArrayOfNameValuePair().of([]);
      if (dart.notNull(this.length) <= dart.notNull(_debugger._maxSpanLength)) {
        this.asMap()[$forEach](dart.fn((i, element) => {
          if (i == null) dart.nullFailed(I[11], 225, 24, "i");
          children[$add](new _debugger.NameValuePair.new({name: (dart.notNull(i) + dart.notNull(this.start))[$toString](), value: element}));
        }, T$.intAnddynamicTovoid()));
      } else {
        for (let i = this.start; dart.notNull(i) < dart.notNull(this.end); i = dart.notNull(i) + dart.notNull(this.subsetSize)) {
          let subSpan = new _debugger.IterableSpan.new(i, math.min(core.int, this.end, dart.notNull(this.subsetSize) + dart.notNull(i)), this.iterable);
          if (subSpan.length === 1) {
            children[$add](new _debugger.NameValuePair.new({name: dart.toString(i), value: this.iterable[$elementAt](i)}));
          } else {
            children[$add](new _debugger.NameValuePair.new({name: "[" + dart.str(i) + "..." + dart.str(dart.notNull(subSpan.end) - 1) + "]", value: subSpan, hideName: true}));
          }
        }
      }
      return children;
    }
  };
  (_debugger.IterableSpan.new = function(start, end, iterable) {
    if (start == null) dart.nullFailed(I[11], 203, 21, "start");
    if (end == null) dart.nullFailed(I[11], 203, 33, "end");
    if (iterable == null) dart.nullFailed(I[11], 203, 43, "iterable");
    this[start$] = start;
    this[end$] = end;
    this[iterable$] = iterable;
    ;
  }).prototype = _debugger.IterableSpan.prototype;
  dart.addTypeTests(_debugger.IterableSpan);
  dart.addTypeCaches(_debugger.IterableSpan);
  dart.setMethodSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getMethods(_debugger.IterableSpan.__proto__),
    asMap: dart.fnType(core.Map$(core.int, dart.dynamic), []),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [])
  }));
  dart.setGetterSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getGetters(_debugger.IterableSpan.__proto__),
    length: core.int,
    maxPowerOfSubsetSize: core.int,
    subsetSize: core.int
  }));
  dart.setLibraryUri(_debugger.IterableSpan, I[12]);
  dart.setFieldSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getFields(_debugger.IterableSpan.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int),
    iterable: dart.finalFieldType(core.Iterable)
  }));
  var name$2 = dart.privateName(_debugger, "Library.name");
  var object$ = dart.privateName(_debugger, "Library.object");
  _debugger.Library = class Library extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
  };
  (_debugger.Library.new = function(name, object) {
    if (name == null) dart.nullFailed(I[11], 248, 16, "name");
    if (object == null) dart.nullFailed(I[11], 248, 27, "object");
    this[name$2] = name;
    this[object$] = object;
    ;
  }).prototype = _debugger.Library.prototype;
  dart.addTypeTests(_debugger.Library);
  dart.addTypeCaches(_debugger.Library);
  dart.setLibraryUri(_debugger.Library, I[12]);
  dart.setFieldSignature(_debugger.Library, () => ({
    __proto__: dart.getFields(_debugger.Library.__proto__),
    name: dart.finalFieldType(core.String),
    object: dart.finalFieldType(core.Object)
  }));
  var object$0 = dart.privateName(_debugger, "NamedConstructor.object");
  _debugger.NamedConstructor = class NamedConstructor extends core.Object {
    get object() {
      return this[object$0];
    }
    set object(value) {
      super.object = value;
    }
  };
  (_debugger.NamedConstructor.new = function(object) {
    if (object == null) dart.nullFailed(I[11], 255, 25, "object");
    this[object$0] = object;
    ;
  }).prototype = _debugger.NamedConstructor.prototype;
  dart.addTypeTests(_debugger.NamedConstructor);
  dart.addTypeCaches(_debugger.NamedConstructor);
  dart.setLibraryUri(_debugger.NamedConstructor, I[12]);
  dart.setFieldSignature(_debugger.NamedConstructor, () => ({
    __proto__: dart.getFields(_debugger.NamedConstructor.__proto__),
    object: dart.finalFieldType(core.Object)
  }));
  var name$3 = dart.privateName(_debugger, "HeritageClause.name");
  var types$ = dart.privateName(_debugger, "HeritageClause.types");
  _debugger.HeritageClause = class HeritageClause extends core.Object {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get types() {
      return this[types$];
    }
    set types(value) {
      super.types = value;
    }
  };
  (_debugger.HeritageClause.new = function(name, types) {
    if (name == null) dart.nullFailed(I[11], 261, 23, "name");
    if (types == null) dart.nullFailed(I[11], 261, 34, "types");
    this[name$3] = name;
    this[types$] = types;
    ;
  }).prototype = _debugger.HeritageClause.prototype;
  dart.addTypeTests(_debugger.HeritageClause);
  dart.addTypeCaches(_debugger.HeritageClause);
  dart.setLibraryUri(_debugger.HeritageClause, I[12]);
  dart.setFieldSignature(_debugger.HeritageClause, () => ({
    __proto__: dart.getFields(_debugger.HeritageClause.__proto__),
    name: dart.finalFieldType(core.String),
    types: dart.finalFieldType(core.List)
  }));
  var _attributes = dart.privateName(_debugger, "_attributes");
  var __JsonMLElement__jsonML = dart.privateName(_debugger, "_#JsonMLElement#_jsonML");
  var __JsonMLElement__jsonML_isSet = dart.privateName(_debugger, "_#JsonMLElement#_jsonML#isSet");
  var _jsonML = dart.privateName(_debugger, "_jsonML");
  _debugger.JsonMLElement = class JsonMLElement extends core.Object {
    get [_jsonML]() {
      let t8;
      return dart.test(this[__JsonMLElement__jsonML_isSet]) ? (t8 = this[__JsonMLElement__jsonML], t8) : dart.throw(new _internal.LateError.fieldNI("_jsonML"));
    }
    set [_jsonML](t8) {
      if (t8 == null) dart.nullFailed(I[11], 285, 13, "null");
      this[__JsonMLElement__jsonML_isSet] = true;
      this[__JsonMLElement__jsonML] = t8;
    }
    appendChild(element) {
      this[_jsonML][$add](dart.dsend(element, 'toJsonML', []));
    }
    createChild(tagName) {
      if (tagName == null) dart.nullFailed(I[11], 296, 36, "tagName");
      let c = new _debugger.JsonMLElement.new(tagName);
      this[_jsonML][$add](c.toJsonML());
      return c;
    }
    createObjectTag(object) {
      let t9;
      t9 = this.createChild("object");
      return (() => {
        t9.addAttribute("object", object);
        return t9;
      })();
    }
    setStyle(style) {
      if (style == null) dart.nullFailed(I[11], 305, 24, "style");
      dart.dput(this[_attributes], 'style', style);
    }
    addStyle(style) {
      let t9;
      if (style == null) dart.nullFailed(I[11], 309, 19, "style");
      if (dart.dload(this[_attributes], 'style') == null) {
        dart.dput(this[_attributes], 'style', style);
      } else {
        t9 = this[_attributes];
        dart.dput(t9, 'style', dart.dsend(dart.dload(t9, 'style'), '+', [style]));
      }
    }
    addAttribute(key, value) {
      _debugger.JSNative.setProperty(this[_attributes], key, value);
    }
    createTextChild(text) {
      if (text == null) dart.nullFailed(I[11], 321, 26, "text");
      this[_jsonML][$add](text);
    }
    toJsonML() {
      return this[_jsonML];
    }
  };
  (_debugger.JsonMLElement.new = function(tagName) {
    this[_attributes] = null;
    this[__JsonMLElement__jsonML] = null;
    this[__JsonMLElement__jsonML_isSet] = false;
    this[_attributes] = {};
    this[_jsonML] = [tagName, this[_attributes]];
  }).prototype = _debugger.JsonMLElement.prototype;
  dart.addTypeTests(_debugger.JsonMLElement);
  dart.addTypeCaches(_debugger.JsonMLElement);
  dart.setMethodSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getMethods(_debugger.JsonMLElement.__proto__),
    appendChild: dart.fnType(dart.dynamic, [dart.dynamic]),
    createChild: dart.fnType(_debugger.JsonMLElement, [core.String]),
    createObjectTag: dart.fnType(_debugger.JsonMLElement, [dart.dynamic]),
    setStyle: dart.fnType(dart.void, [core.String]),
    addStyle: dart.fnType(dart.dynamic, [core.String]),
    addAttribute: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    createTextChild: dart.fnType(dart.dynamic, [core.String]),
    toJsonML: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getGetters(_debugger.JsonMLElement.__proto__),
    [_jsonML]: core.List
  }));
  dart.setSetterSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getSetters(_debugger.JsonMLElement.__proto__),
    [_jsonML]: core.List
  }));
  dart.setLibraryUri(_debugger.JsonMLElement, I[12]);
  dart.setFieldSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getFields(_debugger.JsonMLElement.__proto__),
    [_attributes]: dart.fieldType(dart.dynamic),
    [__JsonMLElement__jsonML]: dart.fieldType(dart.nullable(core.List)),
    [__JsonMLElement__jsonML_isSet]: dart.fieldType(core.bool)
  }));
  var customFormattersOn = dart.privateName(_debugger, "JsonMLFormatter.customFormattersOn");
  var _simpleFormatter$ = dart.privateName(_debugger, "_simpleFormatter");
  _debugger.JsonMLFormatter = class JsonMLFormatter extends core.Object {
    get customFormattersOn() {
      return this[customFormattersOn];
    }
    set customFormattersOn(value) {
      this[customFormattersOn] = value;
    }
    setMaxSpanLengthForTestingOnly(spanLength) {
      if (spanLength == null) dart.nullFailed(I[11], 363, 43, "spanLength");
      _debugger._maxSpanLength = spanLength;
    }
    header(object, config) {
      let t9;
      this.customFormattersOn = true;
      if (dart.equals(config, _debugger.JsonMLConfig.skipDart) || dart.test(_debugger.isNativeJavaScriptObject(object))) {
        return null;
      }
      let c = this[_simpleFormatter$].preview(object, config);
      if (c == null) return null;
      if (dart.equals(config, _debugger.JsonMLConfig.keyToString)) {
        c = dart.toString(object);
      }
      let element = (t9 = new _debugger.JsonMLElement.new("span"), (() => {
        t9.setStyle("background-color: #d9edf7;color: black");
        t9.createTextChild(c);
        return t9;
      })());
      return element.toJsonML();
    }
    hasBody(object, config) {
      return this[_simpleFormatter$].hasChildren(object, config);
    }
    body(object, config) {
      let t9, t9$, t9$0, t9$1, t9$2;
      let body = (t9 = new _debugger.JsonMLElement.new("ol"), (() => {
        t9.setStyle("list-style-type: none;" + "padding-left: 0px;" + "margin-top: 0px;" + "margin-bottom: 0px;" + "margin-left: 12px;");
        return t9;
      })());
      if (core.StackTrace.is(object)) {
        body.addStyle("background-color: thistle;color: rgb(196, 26, 22);");
      }
      let children = this[_simpleFormatter$].children(object, config);
      if (children == null) return body.toJsonML();
      for (let child of children) {
        let li = body.createChild("li");
        li.setStyle("padding-left: 13px;");
        let nameSpan = null;
        let valueStyle = "";
        if (!dart.test(child.hideName)) {
          nameSpan = (t9$ = new _debugger.JsonMLElement.new("span"), (() => {
            t9$.createTextChild(child.displayName[$isNotEmpty] ? dart.str(child.displayName) + ": " : "");
            t9$.setStyle("background-color: thistle; color: rgb(136, 19, 145); margin-right: -13px");
            return t9$;
          })());
          valueStyle = "margin-left: 13px";
        }
        if (_debugger._typeof(child.value) === "object" || _debugger._typeof(child.value) === "function") {
          let valueSpan = (t9$0 = new _debugger.JsonMLElement.new("span"), (() => {
            t9$0.setStyle(valueStyle);
            return t9$0;
          })());
          t9$1 = valueSpan.createObjectTag(child.value);
          (() => {
            t9$1.addAttribute("config", child.config);
            return t9$1;
          })();
          if (nameSpan != null) {
            li.appendChild(nameSpan);
          }
          li.appendChild(valueSpan);
        } else {
          let line = li.createChild("span");
          if (nameSpan != null) {
            line.appendChild(nameSpan);
          }
          line.appendChild((t9$2 = new _debugger.JsonMLElement.new("span"), (() => {
            t9$2.createTextChild(_debugger.safePreview(child.value, child.config));
            t9$2.setStyle(valueStyle);
            return t9$2;
          })()));
        }
      }
      return body.toJsonML();
    }
  };
  (_debugger.JsonMLFormatter.new = function(_simpleFormatter) {
    if (_simpleFormatter == null) dart.nullFailed(I[11], 361, 24, "_simpleFormatter");
    this[customFormattersOn] = false;
    this[_simpleFormatter$] = _simpleFormatter;
    ;
  }).prototype = _debugger.JsonMLFormatter.prototype;
  dart.addTypeTests(_debugger.JsonMLFormatter);
  dart.addTypeCaches(_debugger.JsonMLFormatter);
  dart.setMethodSignature(_debugger.JsonMLFormatter, () => ({
    __proto__: dart.getMethods(_debugger.JsonMLFormatter.__proto__),
    setMaxSpanLengthForTestingOnly: dart.fnType(dart.void, [core.int]),
    header: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    hasBody: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    body: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.JsonMLFormatter, I[12]);
  dart.setFieldSignature(_debugger.JsonMLFormatter, () => ({
    __proto__: dart.getFields(_debugger.JsonMLFormatter.__proto__),
    [_simpleFormatter$]: dart.fieldType(_debugger.DartFormatter),
    customFormattersOn: dart.fieldType(core.bool)
  }));
  _debugger.Formatter = class Formatter extends core.Object {};
  (_debugger.Formatter.new = function() {
    ;
  }).prototype = _debugger.Formatter.prototype;
  dart.addTypeTests(_debugger.Formatter);
  dart.addTypeCaches(_debugger.Formatter);
  dart.setLibraryUri(_debugger.Formatter, I[12]);
  var _formatters = dart.privateName(_debugger, "_formatters");
  var _printConsoleError = dart.privateName(_debugger, "_printConsoleError");
  _debugger.DartFormatter = class DartFormatter extends core.Object {
    preview(object, config) {
      try {
        if (object == null || typeof object == 'number' || typeof object == 'string' || dart.test(_debugger.isNativeJavaScriptObject(object))) {
          return dart.toString(object);
        }
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.preview(object);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return null;
    }
    hasChildren(object, config) {
      if (object == null) return false;
      try {
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.hasChildren(object);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("[hasChildren] Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return false;
    }
    children(object, config) {
      try {
        if (object != null) {
          for (let formatter of this[_formatters]) {
            if (dart.test(formatter.accept(object, config))) return formatter.children(object);
          }
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return T$.JSArrayOfNameValuePair().of([]);
    }
    [_printConsoleError](message) {
      if (message == null) dart.nullFailed(I[11], 523, 34, "message");
      return window.console.error(message);
    }
  };
  (_debugger.DartFormatter.new = function() {
    this[_formatters] = T$.JSArrayOfFormatter().of([new _debugger.ObjectInternalsFormatter.new(), new _debugger.ClassFormatter.new(), new _debugger.TypeFormatter.new(), new _debugger.NamedConstructorFormatter.new(), new _debugger.MapFormatter.new(), new _debugger.MapOverviewFormatter.new(), new _debugger.IterableFormatter.new(), new _debugger.IterableSpanFormatter.new(), new _debugger.MapEntryFormatter.new(), new _debugger.StackTraceFormatter.new(), new _debugger.ErrorAndExceptionFormatter.new(), new _debugger.FunctionFormatter.new(), new _debugger.HeritageClauseFormatter.new(), new _debugger.LibraryModuleFormatter.new(), new _debugger.LibraryFormatter.new(), new _debugger.ObjectFormatter.new()]);
    ;
  }).prototype = _debugger.DartFormatter.prototype;
  dart.addTypeTests(_debugger.DartFormatter);
  dart.addTypeCaches(_debugger.DartFormatter);
  dart.setMethodSignature(_debugger.DartFormatter, () => ({
    __proto__: dart.getMethods(_debugger.DartFormatter.__proto__),
    preview: dart.fnType(dart.nullable(core.String), [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic, dart.dynamic]),
    [_printConsoleError]: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(_debugger.DartFormatter, I[12]);
  dart.setFieldSignature(_debugger.DartFormatter, () => ({
    __proto__: dart.getFields(_debugger.DartFormatter.__proto__),
    [_formatters]: dart.finalFieldType(core.List$(_debugger.Formatter))
  }));
  _debugger.ObjectFormatter = class ObjectFormatter extends _debugger.Formatter {
    accept(object, config) {
      return !dart.test(_debugger.isNativeJavaScriptObject(object));
    }
    preview(object) {
      let typeName = _debugger.getObjectTypeName(object);
      try {
        let toString = dart.str(object);
        if (toString.length > dart.notNull(_debugger.maxFormatterStringLength)) {
          toString = toString[$substring](0, dart.notNull(_debugger.maxFormatterStringLength) - 3) + "...";
        }
        if (toString[$contains](typeName)) {
          return toString;
        } else {
          return toString + " (" + dart.str(typeName) + ")";
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return typeName;
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let type = dart.getType(object);
      let ret = new (T$._HashSetOfNameValuePair()).new();
      let fields = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getFields(type), fields, object, true);
      let getters = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getGetters(type), getters, object, true);
      ret.addAll(_debugger.sortProperties(fields));
      ret.addAll(_debugger.sortProperties(getters));
      _debugger.addMetadataChildren(object, ret);
      return ret[$toList]();
    }
  };
  (_debugger.ObjectFormatter.new = function() {
    ;
  }).prototype = _debugger.ObjectFormatter.prototype;
  dart.addTypeTests(_debugger.ObjectFormatter);
  dart.addTypeCaches(_debugger.ObjectFormatter);
  dart.setMethodSignature(_debugger.ObjectFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ObjectFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.ObjectFormatter, I[12]);
  _debugger.ObjectInternalsFormatter = class ObjectInternalsFormatter extends _debugger.ObjectFormatter {
    accept(object, config) {
      return dart.test(super.accept(object, config)) && dart.equals(config, _debugger.JsonMLConfig.asObject);
    }
    preview(object) {
      return _debugger.getObjectTypeName(object);
    }
  };
  (_debugger.ObjectInternalsFormatter.new = function() {
    ;
  }).prototype = _debugger.ObjectInternalsFormatter.prototype;
  dart.addTypeTests(_debugger.ObjectInternalsFormatter);
  dart.addTypeCaches(_debugger.ObjectInternalsFormatter);
  dart.setLibraryUri(_debugger.ObjectInternalsFormatter, I[12]);
  _debugger.LibraryModuleFormatter = class LibraryModuleFormatter extends core.Object {
    accept(object, config) {
      return dart.getModuleName(core.Object.as(object)) != null;
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let libraryNames = dart.nullCheck(dart.getModuleName(core.Object.as(object)))[$split]("/");
      if (dart.notNull(libraryNames[$length]) > 1 && libraryNames[$last] == libraryNames[$_get](dart.notNull(libraryNames[$length]) - 2)) {
        libraryNames[$_set](dart.notNull(libraryNames[$length]) - 1, "");
      }
      return "Library Module: " + dart.str(libraryNames[$join]("/"));
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      for (let name of _debugger.getOwnPropertyNames(object)) {
        let value = _debugger.safeGetProperty(core.Object.as(object), name);
        children.add(new _debugger.NameValuePair.new({name: name, value: new _debugger.Library.new(name, dart.nullCheck(value)), hideName: true}));
      }
      return children[$toList]();
    }
  };
  (_debugger.LibraryModuleFormatter.new = function() {
    ;
  }).prototype = _debugger.LibraryModuleFormatter.prototype;
  dart.addTypeTests(_debugger.LibraryModuleFormatter);
  dart.addTypeCaches(_debugger.LibraryModuleFormatter);
  _debugger.LibraryModuleFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.LibraryModuleFormatter, () => ({
    __proto__: dart.getMethods(_debugger.LibraryModuleFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.LibraryModuleFormatter, I[12]);
  var genericParameters = dart.privateName(_debugger, "LibraryFormatter.genericParameters");
  _debugger.LibraryFormatter = class LibraryFormatter extends core.Object {
    get genericParameters() {
      return this[genericParameters];
    }
    set genericParameters(value) {
      this[genericParameters] = value;
    }
    accept(object, config) {
      return _debugger.Library.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      return core.String.as(dart.dload(object, 'name'));
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      let objectProperties = _debugger.safeProperties(dart.dload(object, 'object'));
      dart.dsend(objectProperties, 'forEach', [dart.fn((name, value) => {
          if (dart.getGenericTypeCtor(value) != null) return;
          children.add(_debugger.NameValuePair.as(dart.isType(value) ? this.classChild(core.String.as(name), core.Object.as(value)) : new _debugger.NameValuePair.new({name: core.String.as(name), value: value})));
        }, T$.dynamicAnddynamicToNull())]);
      return children[$toList]();
    }
    classChild(name, child) {
      if (name == null) dart.nullFailed(I[11], 644, 21, "name");
      if (child == null) dart.nullFailed(I[11], 644, 34, "child");
      let typeName = _debugger.getTypeName(child);
      return new _debugger.NameValuePair.new({name: typeName, value: child, config: _debugger.JsonMLConfig.asClass});
    }
  };
  (_debugger.LibraryFormatter.new = function() {
    this[genericParameters] = new (T$.IdentityMapOfString$String()).new();
    ;
  }).prototype = _debugger.LibraryFormatter.prototype;
  dart.addTypeTests(_debugger.LibraryFormatter);
  dart.addTypeCaches(_debugger.LibraryFormatter);
  _debugger.LibraryFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.LibraryFormatter, () => ({
    __proto__: dart.getMethods(_debugger.LibraryFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
    classChild: dart.fnType(dart.dynamic, [core.String, core.Object])
  }));
  dart.setLibraryUri(_debugger.LibraryFormatter, I[12]);
  dart.setFieldSignature(_debugger.LibraryFormatter, () => ({
    __proto__: dart.getFields(_debugger.LibraryFormatter.__proto__),
    genericParameters: dart.fieldType(collection.HashMap$(core.String, core.String))
  }));
  _debugger.FunctionFormatter = class FunctionFormatter extends core.Object {
    accept(object, config) {
      if (_debugger._typeof(object) !== "function") return false;
      return dart.getReifiedType(object) != null;
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      try {
        return dart.typeName(dart.getReifiedType(object));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "signature", value: this.preview(object)}), new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
    }
  };
  (_debugger.FunctionFormatter.new = function() {
    ;
  }).prototype = _debugger.FunctionFormatter.prototype;
  dart.addTypeTests(_debugger.FunctionFormatter);
  dart.addTypeCaches(_debugger.FunctionFormatter);
  _debugger.FunctionFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.FunctionFormatter, () => ({
    __proto__: dart.getMethods(_debugger.FunctionFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.FunctionFormatter, I[12]);
  _debugger.MapOverviewFormatter = class MapOverviewFormatter extends core.Object {
    accept(object, config) {
      return core.Map.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let map = core.Map.as(object);
      try {
        return dart.str(_debugger.getObjectTypeName(map));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "[[instance view]]", value: object, config: _debugger.JsonMLConfig.asObject}), new _debugger.NameValuePair.new({name: "[[entries]]", value: object, config: _debugger.JsonMLConfig.asMap})]);
    }
  };
  (_debugger.MapOverviewFormatter.new = function() {
    ;
  }).prototype = _debugger.MapOverviewFormatter.prototype;
  dart.addTypeTests(_debugger.MapOverviewFormatter);
  dart.addTypeCaches(_debugger.MapOverviewFormatter);
  _debugger.MapOverviewFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapOverviewFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapOverviewFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapOverviewFormatter, I[12]);
  _debugger.MapFormatter = class MapFormatter extends core.Object {
    accept(object, config) {
      return _js_helper.InternalMap.is(object) || dart.equals(config, _debugger.JsonMLConfig.asMap);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let map = core.Map.as(object);
      try {
        return dart.str(_debugger.getObjectTypeName(map)) + " length " + dart.str(map[$length]);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      let map = core.Map.as(object);
      let entries = new (T$._HashSetOfNameValuePair()).new();
      map[$forEach](dart.fn((key, value) => {
        let entryWrapper = new _debugger.MapEntry.new({key: key, value: value});
        entries.add(new _debugger.NameValuePair.new({name: dart.toString(entries[$length]), value: entryWrapper}));
      }, T$.dynamicAnddynamicTovoid()));
      _debugger.addMetadataChildren(object, entries);
      return entries[$toList]();
    }
  };
  (_debugger.MapFormatter.new = function() {
    ;
  }).prototype = _debugger.MapFormatter.prototype;
  dart.addTypeTests(_debugger.MapFormatter);
  dart.addTypeCaches(_debugger.MapFormatter);
  _debugger.MapFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapFormatter, I[12]);
  _debugger.IterableFormatter = class IterableFormatter extends core.Object {
    accept(object, config) {
      return core.Iterable.is(object);
    }
    preview(object) {
      let iterable = core.Iterable.as(object);
      try {
        let length = iterable[$length];
        return dart.str(_debugger.getObjectTypeName(iterable)) + " length " + dart.str(length);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return dart.str(_debugger.getObjectTypeName(iterable));
        } else
          throw e;
      }
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      children.addAll(new _debugger.IterableSpan.new(0, core.int.as(dart.dload(object, 'length')), core.Iterable.as(object)).children());
      _debugger.addMetadataChildren(object, children);
      return children[$toList]();
    }
  };
  (_debugger.IterableFormatter.new = function() {
    ;
  }).prototype = _debugger.IterableFormatter.prototype;
  dart.addTypeTests(_debugger.IterableFormatter);
  dart.addTypeCaches(_debugger.IterableFormatter);
  _debugger.IterableFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.IterableFormatter, () => ({
    __proto__: dart.getMethods(_debugger.IterableFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.IterableFormatter, I[12]);
  _debugger.NamedConstructorFormatter = class NamedConstructorFormatter extends core.Object {
    accept(object, config) {
      return _debugger.NamedConstructor.is(object);
    }
    preview(object) {
      return "Named Constructor";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
    }
  };
  (_debugger.NamedConstructorFormatter.new = function() {
    ;
  }).prototype = _debugger.NamedConstructorFormatter.prototype;
  dart.addTypeTests(_debugger.NamedConstructorFormatter);
  dart.addTypeCaches(_debugger.NamedConstructorFormatter);
  _debugger.NamedConstructorFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.NamedConstructorFormatter, () => ({
    __proto__: dart.getMethods(_debugger.NamedConstructorFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.NamedConstructorFormatter, I[12]);
  _debugger.MapEntryFormatter = class MapEntryFormatter extends core.Object {
    accept(object, config) {
      return _debugger.MapEntry.is(object);
    }
    preview(object) {
      let entry = _debugger.MapEntry.as(object);
      return dart.str(_debugger.safePreview(entry.key, _debugger.JsonMLConfig.none)) + " => " + dart.str(_debugger.safePreview(entry.value, _debugger.JsonMLConfig.none));
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "key", value: dart.dload(object, 'key'), config: _debugger.JsonMLConfig.keyToString}), new _debugger.NameValuePair.new({name: "value", value: dart.dload(object, 'value')})]);
    }
  };
  (_debugger.MapEntryFormatter.new = function() {
    ;
  }).prototype = _debugger.MapEntryFormatter.prototype;
  dart.addTypeTests(_debugger.MapEntryFormatter);
  dart.addTypeCaches(_debugger.MapEntryFormatter);
  _debugger.MapEntryFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapEntryFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapEntryFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapEntryFormatter, I[12]);
  _debugger.HeritageClauseFormatter = class HeritageClauseFormatter extends core.Object {
    accept(object, config) {
      return _debugger.HeritageClause.is(object);
    }
    preview(object) {
      let clause = _debugger.HeritageClause.as(object);
      let typeNames = clause.types[$map](core.String, C[7] || CT.C7);
      return dart.str(clause.name) + " " + dart.str(typeNames[$join](", "));
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let clause = _debugger.HeritageClause.as(object);
      let children = T$.JSArrayOfNameValuePair().of([]);
      for (let type of clause.types) {
        children[$add](new _debugger.NameValuePair.new({value: type, config: _debugger.JsonMLConfig.asClass}));
      }
      return children;
    }
  };
  (_debugger.HeritageClauseFormatter.new = function() {
    ;
  }).prototype = _debugger.HeritageClauseFormatter.prototype;
  dart.addTypeTests(_debugger.HeritageClauseFormatter);
  dart.addTypeCaches(_debugger.HeritageClauseFormatter);
  _debugger.HeritageClauseFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.HeritageClauseFormatter, () => ({
    __proto__: dart.getMethods(_debugger.HeritageClauseFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.HeritageClauseFormatter, I[12]);
  _debugger.IterableSpanFormatter = class IterableSpanFormatter extends core.Object {
    accept(object, config) {
      return _debugger.IterableSpan.is(object);
    }
    preview(object) {
      return "[" + dart.str(dart.dload(object, 'start')) + "..." + dart.str(dart.dsend(dart.dload(object, 'end'), '-', [1])) + "]";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.ListOfNameValuePair().as(dart.dsend(object, 'children', []));
    }
  };
  (_debugger.IterableSpanFormatter.new = function() {
    ;
  }).prototype = _debugger.IterableSpanFormatter.prototype;
  dart.addTypeTests(_debugger.IterableSpanFormatter);
  dart.addTypeCaches(_debugger.IterableSpanFormatter);
  _debugger.IterableSpanFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.IterableSpanFormatter, () => ({
    __proto__: dart.getMethods(_debugger.IterableSpanFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.IterableSpanFormatter, I[12]);
  _debugger.ErrorAndExceptionFormatter = class ErrorAndExceptionFormatter extends _debugger.ObjectFormatter {
    accept(object, config) {
      return core.Error.is(object) || core.Exception.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let trace = dart.stackTrace(object);
      let line = dart.str(trace)[$split]("\n")[$firstWhere](dart.fn(l => {
        if (l == null) dart.nullFailed(I[11], 862, 10, "l");
        return l[$contains](_debugger.ErrorAndExceptionFormatter._pattern) && !l[$contains]("dart:sdk") && !l[$contains]("dart_sdk");
      }, T$.StringTobool()), {orElse: dart.fn(() => "", T$.VoidToString())});
      return line !== "" ? dart.str(object) + " at " + dart.str(line) : dart.str(object);
    }
    children(object) {
      let trace = dart.stackTrace(object);
      let entries = new (T$._HashSetOfNameValuePair()).new();
      entries.add(new _debugger.NameValuePair.new({name: "stackTrace", value: trace}));
      this.addInstanceMembers(object, entries);
      _debugger.addMetadataChildren(object, entries);
      return entries[$toList]();
    }
    addInstanceMembers(object, ret) {
      if (ret == null) dart.nullFailed(I[11], 880, 54, "ret");
      ret.add(new _debugger.NameValuePair.new({name: "[[instance members]]", value: object, config: _debugger.JsonMLConfig.asObject}));
    }
  };
  (_debugger.ErrorAndExceptionFormatter.new = function() {
    ;
  }).prototype = _debugger.ErrorAndExceptionFormatter.prototype;
  dart.addTypeTests(_debugger.ErrorAndExceptionFormatter);
  dart.addTypeCaches(_debugger.ErrorAndExceptionFormatter);
  dart.setMethodSignature(_debugger.ErrorAndExceptionFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ErrorAndExceptionFormatter.__proto__),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
    addInstanceMembers: dart.fnType(dart.void, [dart.dynamic, core.Set$(_debugger.NameValuePair)])
  }));
  dart.setLibraryUri(_debugger.ErrorAndExceptionFormatter, I[12]);
  dart.defineLazy(_debugger.ErrorAndExceptionFormatter, {
    /*_debugger.ErrorAndExceptionFormatter._pattern*/get _pattern() {
      return core.RegExp.new("\\d+\\:\\d+");
    }
  }, false);
  _debugger.StackTraceFormatter = class StackTraceFormatter extends core.Object {
    accept(object, config) {
      return core.StackTrace.is(object);
    }
    preview(object) {
      return "StackTrace";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return dart.toString(object)[$split]("\n")[$map](_debugger.NameValuePair, dart.fn(line => {
        if (line == null) dart.nullFailed(I[11], 901, 13, "line");
        return new _debugger.NameValuePair.new({value: line[$replaceFirst](core.RegExp.new("^\\s+at\\s"), ""), hideName: true});
      }, T$.StringToNameValuePair()))[$toList]();
    }
  };
  (_debugger.StackTraceFormatter.new = function() {
    ;
  }).prototype = _debugger.StackTraceFormatter.prototype;
  dart.addTypeTests(_debugger.StackTraceFormatter);
  dart.addTypeCaches(_debugger.StackTraceFormatter);
  _debugger.StackTraceFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.StackTraceFormatter, () => ({
    __proto__: dart.getMethods(_debugger.StackTraceFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.StackTraceFormatter, I[12]);
  _debugger.ClassFormatter = class ClassFormatter extends core.Object {
    accept(object, config) {
      return dart.equals(config, _debugger.JsonMLConfig.asClass);
    }
    preview(type) {
      let $implements = dart.getImplements(type);
      let typeName = _debugger.getTypeName(type);
      if ($implements != null) {
        let typeNames = $implements()[$map](core.String, C[7] || CT.C7);
        return dart.str(typeName) + " implements " + dart.str(typeNames[$join](", "));
      } else {
        return typeName;
      }
    }
    hasChildren(object) {
      return true;
    }
    children(type) {
      let t17, t17$;
      let ret = new (T$._HashSetOfNameValuePair()).new();
      let staticProperties = new (T$._HashSetOfNameValuePair()).new();
      let staticMethods = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getStaticFields(type), staticProperties, type, false);
      _debugger.addPropertiesFromSignature(dart.getStaticGetters(type), staticProperties, type, false);
      _debugger.addPropertiesFromSignature(dart.getStaticMethods(type), staticMethods, type, false);
      if (dart.test(staticProperties[$isNotEmpty]) || dart.test(staticMethods[$isNotEmpty])) {
        t17 = ret;
        (() => {
          t17.add(new _debugger.NameValuePair.new({value: "[[Static members]]", hideName: true}));
          t17.addAll(_debugger.sortProperties(staticProperties));
          t17.addAll(_debugger.sortProperties(staticMethods));
          return t17;
        })();
      }
      let instanceMethods = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getMethods(type), instanceMethods, type.prototype, false, {tagTypes: true});
      if (dart.test(instanceMethods[$isNotEmpty])) {
        t17$ = ret;
        (() => {
          t17$.add(new _debugger.NameValuePair.new({value: "[[Instance Methods]]", hideName: true}));
          t17$.addAll(_debugger.sortProperties(instanceMethods));
          return t17$;
        })();
      }
      let mixin = dart.getMixin(type);
      if (mixin != null) {
        ret.add(new _debugger.NameValuePair.new({name: "[[Mixins]]", value: new _debugger.HeritageClause.new("mixins", [mixin])}));
      }
      let baseProto = type.__proto__;
      if (baseProto != null && !dart.test(dart.isJsInterop(baseProto))) {
        ret.add(new _debugger.NameValuePair.new({name: "[[base class]]", value: baseProto, config: _debugger.JsonMLConfig.asClass}));
      }
      return ret[$toList]();
    }
  };
  (_debugger.ClassFormatter.new = function() {
    ;
  }).prototype = _debugger.ClassFormatter.prototype;
  dart.addTypeTests(_debugger.ClassFormatter);
  dart.addTypeCaches(_debugger.ClassFormatter);
  _debugger.ClassFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.ClassFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ClassFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.ClassFormatter, I[12]);
  _debugger.TypeFormatter = class TypeFormatter extends core.Object {
    accept(object, config) {
      return core.Type.is(object);
    }
    preview(object) {
      return dart.toString(object);
    }
    hasChildren(object) {
      return false;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([]);
    }
  };
  (_debugger.TypeFormatter.new = function() {
    ;
  }).prototype = _debugger.TypeFormatter.prototype;
  dart.addTypeTests(_debugger.TypeFormatter);
  dart.addTypeCaches(_debugger.TypeFormatter);
  _debugger.TypeFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.TypeFormatter, () => ({
    __proto__: dart.getMethods(_debugger.TypeFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.TypeFormatter, I[12]);
  _debugger._MethodStats = class _MethodStats extends core.Object {};
  (_debugger._MethodStats.new = function(typeName, frame) {
    if (typeName == null) dart.nullFailed(I[13], 13, 21, "typeName");
    if (frame == null) dart.nullFailed(I[13], 13, 36, "frame");
    this.count = 0.0;
    this.typeName = typeName;
    this.frame = frame;
    ;
  }).prototype = _debugger._MethodStats.prototype;
  dart.addTypeTests(_debugger._MethodStats);
  dart.addTypeCaches(_debugger._MethodStats);
  dart.setLibraryUri(_debugger._MethodStats, I[12]);
  dart.setFieldSignature(_debugger._MethodStats, () => ({
    __proto__: dart.getFields(_debugger._MethodStats.__proto__),
    typeName: dart.finalFieldType(core.String),
    frame: dart.finalFieldType(core.String),
    count: dart.fieldType(core.double)
  }));
  _debugger._CallMethodRecord = class _CallMethodRecord extends core.Object {};
  (_debugger._CallMethodRecord.new = function(jsError, type) {
    this.jsError = jsError;
    this.type = type;
    ;
  }).prototype = _debugger._CallMethodRecord.prototype;
  dart.addTypeTests(_debugger._CallMethodRecord);
  dart.addTypeCaches(_debugger._CallMethodRecord);
  dart.setLibraryUri(_debugger._CallMethodRecord, I[12]);
  dart.setFieldSignature(_debugger._CallMethodRecord, () => ({
    __proto__: dart.getFields(_debugger._CallMethodRecord.__proto__),
    jsError: dart.fieldType(dart.dynamic),
    type: dart.fieldType(dart.dynamic)
  }));
  _debugger._typeof = function _typeof(object) {
    return typeof object;
  };
  _debugger.getOwnPropertyNames = function getOwnPropertyNames(object) {
    return T$.JSArrayOfString().of(dart.getOwnPropertyNames(object));
  };
  _debugger.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
    return Object.getOwnPropertySymbols(object);
  };
  _debugger.addMetadataChildren = function addMetadataChildren(object, ret) {
    if (ret == null) dart.nullFailed(I[11], 63, 53, "ret");
    ret.add(new _debugger.NameValuePair.new({name: "[[class]]", value: dart.getReifiedType(object), config: _debugger.JsonMLConfig.asClass}));
  };
  _debugger.addPropertiesFromSignature = function addPropertiesFromSignature(sig, properties, object, walkPrototypeChain, opts) {
    let t17;
    if (properties == null) dart.nullFailed(I[11], 75, 29, "properties");
    if (walkPrototypeChain == null) dart.nullFailed(I[11], 75, 54, "walkPrototypeChain");
    let tagTypes = opts && 'tagTypes' in opts ? opts.tagTypes : false;
    let skippedNames = (t17 = new collection._HashSet.new(), (() => {
      t17.add("hashCode");
      return t17;
    })());
    let objectPrototype = Object.prototype;
    while (sig != null && !core.identical(sig, objectPrototype)) {
      for (let symbol of _debugger.getOwnPropertySymbols(sig)) {
        let dartName = _debugger.symbolName(symbol);
        let dartXPrefix = "dartx.";
        if (dartName[$startsWith](dartXPrefix)) {
          dartName = dartName[$substring](dartXPrefix.length);
        }
        if (dart.test(skippedNames.contains(dartName))) continue;
        let value = _debugger.safeGetProperty(core.Object.as(object), core.Object.as(symbol));
        if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
          dart.fn(value, sig[symbol]);
        }
        properties.add(new _debugger.NameValuePair.new({name: dartName, value: value}));
      }
      for (let name of _debugger.getOwnPropertyNames(sig)) {
        let value = _debugger.safeGetProperty(core.Object.as(object), name);
        if (dart.test(skippedNames.contains(name))) continue;
        if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
          dart.fn(value, sig[name]);
        }
        properties.add(new _debugger.NameValuePair.new({name: name, value: value}));
      }
      if (!dart.test(walkPrototypeChain)) break;
      sig = dart.getPrototypeOf(sig);
    }
  };
  _debugger.sortProperties = function sortProperties(properties) {
    if (properties == null) dart.nullFailed(I[11], 115, 60, "properties");
    let sortedProperties = properties[$toList]();
    sortedProperties[$sort](dart.fn((a, b) => {
      if (a == null) dart.nullFailed(I[11], 118, 26, "a");
      if (b == null) dart.nullFailed(I[11], 118, 29, "b");
      let aPrivate = a.name[$startsWith]("_");
      let bPrivate = b.name[$startsWith]("_");
      if (aPrivate !== bPrivate) return aPrivate ? 1 : -1;
      return a.name[$compareTo](b.name);
    }, T$.NameValuePairAndNameValuePairToint()));
    return sortedProperties;
  };
  _debugger.getObjectTypeName = function getObjectTypeName(object) {
    let reifiedType = dart.getReifiedType(object);
    if (reifiedType == null) {
      if (_debugger._typeof(object) === "function") {
        return "[[Raw JavaScript Function]]";
      }
      return "<Error getting type name>";
    }
    return _debugger.getTypeName(reifiedType);
  };
  _debugger.getTypeName = function getTypeName(type) {
    return dart.typeName(type);
  };
  _debugger.safePreview = function safePreview(object, config) {
    try {
      let preview = _debugger._devtoolsFormatter[_simpleFormatter$].preview(object, config);
      if (preview != null) return preview;
      return dart.toString(object);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return "<Exception thrown> " + dart.str(e);
      } else
        throw e$;
    }
  };
  _debugger.symbolName = function symbolName(symbol) {
    let name = dart.toString(symbol);
    if (!name[$startsWith]("Symbol(")) dart.assertFailed(null, I[11], 157, 10, "name.startsWith('Symbol(')");
    return name[$substring]("Symbol(".length, name.length - 1);
  };
  _debugger.hasMethod = function hasMethod$(object, name) {
    if (name == null) dart.nullFailed(I[11], 161, 31, "name");
    try {
      return dart.hasMethod(object, name);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return false;
      } else
        throw e$;
    }
  };
  _debugger.safeGetProperty = function safeGetProperty(protoChain, name) {
    if (protoChain == null) dart.nullFailed(I[11], 267, 32, "protoChain");
    if (name == null) dart.nullFailed(I[11], 267, 51, "name");
    try {
      return _debugger.JSNative.getProperty(protoChain, name);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return "<Exception thrown> " + dart.str(e);
      } else
        throw e$;
    }
  };
  _debugger.safeProperties = function safeProperties(object) {
    return T$.LinkedHashMapOfdynamic$ObjectN().fromIterable(_debugger.getOwnPropertyNames(object)[$where](dart.fn(each => {
      if (each == null) dart.nullFailed(I[11], 277, 17, "each");
      return _debugger.safeGetProperty(core.Object.as(object), each) != null;
    }, T$.StringTobool())), {key: dart.fn(name => name, T$.dynamicTodynamic()), value: dart.fn(name => _debugger.safeGetProperty(core.Object.as(object), core.Object.as(name)), T$.dynamicToObjectN())});
  };
  _debugger.isNativeJavaScriptObject = function isNativeJavaScriptObject(object) {
    let type = _debugger._typeof(object);
    if (type !== "object" && type !== "function") return true;
    if (dart.test(dart.isJsInterop(object)) && dart.getModuleName(core.Object.as(object)) == null) {
      return true;
    }
    return object instanceof Node;
  };
  _debugger.registerDevtoolsFormatter = function registerDevtoolsFormatter() {
    dart.global.devtoolsFormatters = [_debugger._devtoolsFormatter];
  };
  _debugger.getModuleNames = function getModuleNames$() {
    return dart.getModuleNames();
  };
  _debugger.getModuleLibraries = function getModuleLibraries$(name) {
    if (name == null) dart.nullFailed(I[11], 1015, 27, "name");
    return dart.getModuleLibraries(name);
  };
  _debugger.getDynamicStats = function getDynamicStats() {
    let t20;
    let callMethodStats = new (T$.IdentityMapOfString$_MethodStats()).new();
    if (dart.notNull(_debugger._callMethodRecords[$length]) > 0) {
      let recordRatio = dart.notNull(_debugger._totalCallRecords) / dart.notNull(_debugger._callMethodRecords[$length]);
      for (let record of _debugger._callMethodRecords) {
        let stackStr = record.jsError.stack;
        let frames = stackStr[$split]("\n");
        let src = frames[$skip](2)[$map](core.String, dart.fn(f => {
          if (f == null) dart.nullFailed(I[13], 66, 17, "f");
          return _debugger._frameMappingCache[$putIfAbsent](f, dart.fn(() => dart.nullCheck(_debugger.stackTraceMapper)("\n" + dart.str(f)), T$.VoidToString()));
        }, T$.StringToString()))[$firstWhere](dart.fn(f => {
          if (f == null) dart.nullFailed(I[13], 68, 24, "f");
          return !f[$startsWith]("dart:");
        }, T$.StringTobool()), {orElse: dart.fn(() => "", T$.VoidToString())});
        let actualTypeName = dart.typeName(record.type);
        t20 = callMethodStats[$putIfAbsent](actualTypeName + " <" + dart.str(src) + ">", dart.fn(() => new _debugger._MethodStats.new(actualTypeName, src), T$.VoidTo_MethodStats()));
        t20.count = dart.notNull(t20.count) + recordRatio;
      }
      if (_debugger._totalCallRecords != _debugger._callMethodRecords[$length]) {
        for (let k of callMethodStats[$keys][$toList]()) {
          let stats = dart.nullCheck(callMethodStats[$_get](k));
          let threshold = dart.notNull(_debugger._minCount) * recordRatio;
          if (dart.notNull(stats.count) + 0.001 < threshold) {
            callMethodStats[$remove](k);
          }
        }
      }
    }
    _debugger._callMethodRecords[$clear]();
    _debugger._totalCallRecords = 0;
    let keys = callMethodStats[$keys][$toList]();
    keys[$sort](dart.fn((a, b) => {
      if (a == null) dart.nullFailed(I[13], 94, 8, "a");
      if (b == null) dart.nullFailed(I[13], 94, 11, "b");
      return dart.nullCheck(callMethodStats[$_get](b)).count[$compareTo](dart.nullCheck(callMethodStats[$_get](a)).count);
    }, T$.StringAndStringToint()));
    let ret = T$.JSArrayOfListOfObject().of([]);
    for (let key of keys) {
      let stats = dart.nullCheck(callMethodStats[$_get](key));
      ret[$add](T$.JSArrayOfObject().of([stats.typeName, stats.frame, stats.count[$round]()]));
    }
    return ret;
  };
  _debugger.clearDynamicStats = function clearDynamicStats() {
    _debugger._callMethodRecords[$clear]();
  };
  _debugger.trackCall = function trackCall(obj) {
    if (!_debugger._trackProfile) return;
    let index = -1;
    _debugger._totalCallRecords = dart.notNull(_debugger._totalCallRecords) + 1;
    if (_debugger._callMethodRecords[$length] == _debugger._callRecordSampleSize) {
      index = Math.floor(Math.random() * _debugger._totalCallRecords);
      if (index >= dart.notNull(_debugger._callMethodRecords[$length])) return;
    }
    let record = new _debugger._CallMethodRecord.new(new Error(), dart.getReifiedType(obj));
    if (index === -1) {
      _debugger._callMethodRecords[$add](record);
    } else {
      _debugger._callMethodRecords[$_set](index, record);
    }
  };
  dart.copyProperties(_debugger, {
    get stackTraceMapper() {
      let _util = dart.global.$dartStackTraceUtility;
      return _util != null ? _util.mapper : null;
    },
    get _trackProfile() {
      return dart.__trackProfile;
    }
  });
  dart.defineLazy(_debugger, {
    /*_debugger._maxSpanLength*/get _maxSpanLength() {
      return 100;
    },
    set _maxSpanLength(_) {},
    /*_debugger._devtoolsFormatter*/get _devtoolsFormatter() {
      return new _debugger.JsonMLFormatter.new(new _debugger.DartFormatter.new());
    },
    set _devtoolsFormatter(_) {},
    /*_debugger.maxFormatterStringLength*/get maxFormatterStringLength() {
      return 100;
    },
    set maxFormatterStringLength(_) {},
    /*_debugger._callRecordSampleSize*/get _callRecordSampleSize() {
      return 5000;
    },
    set _callRecordSampleSize(_) {},
    /*_debugger._callMethodRecords*/get _callMethodRecords() {
      return T$.JSArrayOf_CallMethodRecord().of([]);
    },
    set _callMethodRecords(_) {},
    /*_debugger._totalCallRecords*/get _totalCallRecords() {
      return 0;
    },
    set _totalCallRecords(_) {},
    /*_debugger._minCount*/get _minCount() {
      return 2;
    },
    set _minCount(_) {},
    /*_debugger._frameMappingCache*/get _frameMappingCache() {
      return new (T$.IdentityMapOfString$String()).new();
    },
    set _frameMappingCache(_) {}
  }, false);
  var name$4 = dart.privateName(_foreign_helper, "JSExportName.name");
  _foreign_helper.JSExportName = class JSExportName extends core.Object {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_foreign_helper.JSExportName.new = function(name) {
    if (name == null) dart.nullFailed(I[14], 139, 27, "name");
    this[name$4] = name;
    ;
  }).prototype = _foreign_helper.JSExportName.prototype;
  dart.addTypeTests(_foreign_helper.JSExportName);
  dart.addTypeCaches(_foreign_helper.JSExportName);
  dart.setLibraryUri(_foreign_helper.JSExportName, I[15]);
  dart.setFieldSignature(_foreign_helper.JSExportName, () => ({
    __proto__: dart.getFields(_foreign_helper.JSExportName.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  var code$ = dart.privateName(_foreign_helper, "JS_CONST.code");
  _foreign_helper.JS_CONST = class JS_CONST extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
  };
  (_foreign_helper.JS_CONST.new = function(code) {
    if (code == null) dart.nullFailed(I[14], 259, 23, "code");
    this[code$] = code;
    ;
  }).prototype = _foreign_helper.JS_CONST.prototype;
  dart.addTypeTests(_foreign_helper.JS_CONST);
  dart.addTypeCaches(_foreign_helper.JS_CONST);
  dart.setLibraryUri(_foreign_helper.JS_CONST, I[15]);
  dart.setFieldSignature(_foreign_helper.JS_CONST, () => ({
    __proto__: dart.getFields(_foreign_helper.JS_CONST.__proto__),
    code: dart.finalFieldType(core.String)
  }));
  _foreign_helper._Rest = class _Rest extends core.Object {};
  (_foreign_helper._Rest.new = function() {
    ;
  }).prototype = _foreign_helper._Rest.prototype;
  dart.addTypeTests(_foreign_helper._Rest);
  dart.addTypeCaches(_foreign_helper._Rest);
  dart.setLibraryUri(_foreign_helper._Rest, I[15]);
  _foreign_helper.JS_DART_OBJECT_CONSTRUCTOR = function JS_DART_OBJECT_CONSTRUCTOR() {
  };
  _foreign_helper.JS_INTERCEPTOR_CONSTANT = function JS_INTERCEPTOR_CONSTANT(type) {
    if (type == null) dart.nullFailed(I[14], 157, 30, "type");
  };
  _foreign_helper.JS_EFFECT = function JS_EFFECT(code) {
    if (code == null) dart.nullFailed(I[14], 244, 25, "code");
    dart.dcall(code, [null]);
  };
  _foreign_helper.spread = function spread(args) {
    dart.throw(new core.StateError.new("The spread function cannot be called, " + "it should be compiled away."));
  };
  dart.defineLazy(_foreign_helper, {
    /*_foreign_helper.rest*/get rest() {
      return C[8] || CT.C8;
    }
  }, false);
  _interceptors.Interceptor = class Interceptor extends core.Object {
    toString() {
      return this.toString();
    }
  };
  (_interceptors.Interceptor.new = function() {
    ;
  }).prototype = _interceptors.Interceptor.prototype;
  dart.addTypeTests(_interceptors.Interceptor);
  dart.addTypeCaches(_interceptors.Interceptor);
  dart.setLibraryUri(_interceptors.Interceptor, I[16]);
  dart.defineExtensionMethods(_interceptors.Interceptor, ['toString']);
  _interceptors.JSBool = class JSBool extends _interceptors.Interceptor {
    [$toString]() {
      return String(this);
    }
    get [$hashCode]() {
      return this ? 2 * 3 * 23 * 3761 : 269 * 811;
    }
    [$bitAnd](other) {
      if (other == null) dart.argumentError(other);
      return other && this;
    }
    [$bitOr](other) {
      if (other == null) dart.argumentError(other);
      return other || this;
    }
    [$bitXor](other) {
      if (other == null) dart.argumentError(other);
      return this !== other;
    }
    get [$runtimeType]() {
      return dart.wrapType(core.bool);
    }
  };
  (_interceptors.JSBool.new = function() {
    _interceptors.JSBool.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSBool.prototype;
  dart.addTypeTests(_interceptors.JSBool);
  dart.addTypeCaches(_interceptors.JSBool);
  _interceptors.JSBool[dart.implements] = () => [core.bool];
  dart.setMethodSignature(_interceptors.JSBool, () => ({
    __proto__: dart.getMethods(_interceptors.JSBool.__proto__),
    [$bitAnd]: dart.fnType(core.bool, [core.bool]),
    [$bitOr]: dart.fnType(core.bool, [core.bool]),
    [$bitXor]: dart.fnType(core.bool, [core.bool])
  }));
  dart.setLibraryUri(_interceptors.JSBool, I[16]);
  dart.definePrimitiveHashCode(_interceptors.JSBool.prototype);
  dart.registerExtension("Boolean", _interceptors.JSBool);
  const _is_JSIndexable_default = Symbol('_is_JSIndexable_default');
  _interceptors.JSIndexable$ = dart.generic(E => {
    class JSIndexable extends core.Object {}
    (JSIndexable.new = function() {
      ;
    }).prototype = JSIndexable.prototype;
    dart.addTypeTests(JSIndexable);
    JSIndexable.prototype[_is_JSIndexable_default] = true;
    dart.addTypeCaches(JSIndexable);
    dart.setLibraryUri(JSIndexable, I[16]);
    return JSIndexable;
  });
  _interceptors.JSIndexable = _interceptors.JSIndexable$();
  dart.addTypeTests(_interceptors.JSIndexable, _is_JSIndexable_default);
  const _is_JSMutableIndexable_default = Symbol('_is_JSMutableIndexable_default');
  _interceptors.JSMutableIndexable$ = dart.generic(E => {
    class JSMutableIndexable extends _interceptors.JSIndexable$(E) {}
    (JSMutableIndexable.new = function() {
      ;
    }).prototype = JSMutableIndexable.prototype;
    dart.addTypeTests(JSMutableIndexable);
    JSMutableIndexable.prototype[_is_JSMutableIndexable_default] = true;
    dart.addTypeCaches(JSMutableIndexable);
    dart.setLibraryUri(JSMutableIndexable, I[16]);
    return JSMutableIndexable;
  });
  _interceptors.JSMutableIndexable = _interceptors.JSMutableIndexable$();
  dart.addTypeTests(_interceptors.JSMutableIndexable, _is_JSMutableIndexable_default);
  _interceptors.JSObject = class JSObject extends core.Object {};
  (_interceptors.JSObject.new = function() {
    ;
  }).prototype = _interceptors.JSObject.prototype;
  dart.addTypeTests(_interceptors.JSObject);
  dart.addTypeCaches(_interceptors.JSObject);
  dart.setLibraryUri(_interceptors.JSObject, I[16]);
  _interceptors.JavaScriptObject = class JavaScriptObject extends _interceptors.Interceptor {
    get hashCode() {
      return 0;
    }
    get runtimeType() {
      return dart.wrapType(_interceptors.JSObject);
    }
  };
  (_interceptors.JavaScriptObject.new = function() {
    _interceptors.JavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.JavaScriptObject);
  dart.addTypeCaches(_interceptors.JavaScriptObject);
  _interceptors.JavaScriptObject[dart.implements] = () => [_interceptors.JSObject];
  dart.setLibraryUri(_interceptors.JavaScriptObject, I[16]);
  dart.defineExtensionAccessors(_interceptors.JavaScriptObject, ['hashCode', 'runtimeType']);
  _interceptors.PlainJavaScriptObject = class PlainJavaScriptObject extends _interceptors.JavaScriptObject {};
  (_interceptors.PlainJavaScriptObject.new = function() {
    _interceptors.PlainJavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.PlainJavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.PlainJavaScriptObject);
  dart.addTypeCaches(_interceptors.PlainJavaScriptObject);
  dart.setLibraryUri(_interceptors.PlainJavaScriptObject, I[16]);
  _interceptors.UnknownJavaScriptObject = class UnknownJavaScriptObject extends _interceptors.JavaScriptObject {
    toString() {
      return String(this);
    }
  };
  (_interceptors.UnknownJavaScriptObject.new = function() {
    _interceptors.UnknownJavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.UnknownJavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.UnknownJavaScriptObject);
  dart.addTypeCaches(_interceptors.UnknownJavaScriptObject);
  dart.setLibraryUri(_interceptors.UnknownJavaScriptObject, I[16]);
  dart.defineExtensionMethods(_interceptors.UnknownJavaScriptObject, ['toString']);
  _interceptors.NativeError = class NativeError extends _interceptors.Interceptor {
    dartStack() {
      return this.stack;
    }
  };
  (_interceptors.NativeError.new = function() {
    _interceptors.NativeError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.NativeError.prototype;
  dart.addTypeTests(_interceptors.NativeError);
  dart.addTypeCaches(_interceptors.NativeError);
  dart.setMethodSignature(_interceptors.NativeError, () => ({
    __proto__: dart.getMethods(_interceptors.NativeError.__proto__),
    dartStack: dart.fnType(core.String, []),
    [$dartStack]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(_interceptors.NativeError, I[16]);
  dart.defineExtensionMethods(_interceptors.NativeError, ['dartStack']);
  var _fieldName = dart.privateName(_interceptors, "_fieldName");
  var _functionCallTarget = dart.privateName(_interceptors, "_functionCallTarget");
  var _receiver = dart.privateName(_interceptors, "_receiver");
  var _receiver$ = dart.privateName(core, "_receiver");
  var _arguments = dart.privateName(_interceptors, "_arguments");
  var _arguments$ = dart.privateName(core, "_arguments");
  var _memberName = dart.privateName(_interceptors, "_memberName");
  var _memberName$ = dart.privateName(core, "_memberName");
  var _invocation = dart.privateName(_interceptors, "_invocation");
  var _invocation$ = dart.privateName(core, "_invocation");
  var _namedArguments = dart.privateName(_interceptors, "_namedArguments");
  var _namedArguments$ = dart.privateName(core, "_namedArguments");
  _interceptors.JSNoSuchMethodError = class JSNoSuchMethodError extends _interceptors.NativeError {
    [_fieldName](message) {
      let t20;
      if (message == null) dart.nullFailed(I[17], 131, 29, "message");
      let match = _interceptors.JSNoSuchMethodError._nullError.firstMatch(message);
      if (match == null) return null;
      let name = dart.nullCheck(match._get(1));
      match = (t20 = _interceptors.JSNoSuchMethodError._extensionName.firstMatch(name), t20 == null ? _interceptors.JSNoSuchMethodError._privateName.firstMatch(name) : t20);
      return match != null ? match._get(1) : name;
    }
    [_functionCallTarget](message) {
      if (message == null) dart.nullFailed(I[17], 139, 38, "message");
      let match = _interceptors.JSNoSuchMethodError._notAFunction.firstMatch(message);
      return match != null ? match._get(1) : null;
    }
    [$dartStack]() {
      let stack = super[$dartStack]();
      stack = dart.notNull(this[$toString]()) + "\n" + dart.notNull(stack[$split]("\n")[$sublist](1)[$join]("\n"));
      return stack;
    }
    get [$stackTrace]() {
      return dart.stackTrace(this);
    }
    [$toString]() {
      let message = this.message;
      let callTarget = this[_functionCallTarget](message);
      if (callTarget != null) {
        return "NoSuchMethodError: tried to call a non-function, such as null: " + "'" + dart.str(callTarget) + "'";
      }
      let name = this[_fieldName](message);
      if (name == null) {
        return this.toString();
      }
      return "NoSuchMethodError: invalid member on null: '" + dart.str(name) + "'";
    }
    get [_receiver$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[9] || CT.C9));
    }
    get [_arguments$]() {
      return T$.ListN().as(this[$noSuchMethod](new core._Invocation.getter(C[10] || CT.C10)));
    }
    get [_memberName$]() {
      return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C[11] || CT.C11)));
    }
    get [_invocation$]() {
      return T$.InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C[12] || CT.C12)));
    }
    get [_namedArguments$]() {
      return T$.MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C[13] || CT.C13)));
    }
  };
  (_interceptors.JSNoSuchMethodError.new = function() {
    _interceptors.JSNoSuchMethodError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSNoSuchMethodError.prototype;
  dart.addTypeTests(_interceptors.JSNoSuchMethodError);
  dart.addTypeCaches(_interceptors.JSNoSuchMethodError);
  _interceptors.JSNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
  dart.setMethodSignature(_interceptors.JSNoSuchMethodError, () => ({
    __proto__: dart.getMethods(_interceptors.JSNoSuchMethodError.__proto__),
    [_fieldName]: dart.fnType(dart.nullable(core.String), [core.String]),
    [_functionCallTarget]: dart.fnType(dart.nullable(core.String), [core.String])
  }));
  dart.setGetterSignature(_interceptors.JSNoSuchMethodError, () => ({
    __proto__: dart.getGetters(_interceptors.JSNoSuchMethodError.__proto__),
    [$stackTrace]: core.StackTrace,
    [_receiver$]: dart.nullable(core.Object),
    [_arguments$]: dart.nullable(core.List),
    [_memberName$]: core.Symbol,
    [_invocation$]: dart.nullable(core.Invocation),
    [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
  }));
  dart.setLibraryUri(_interceptors.JSNoSuchMethodError, I[16]);
  dart.defineLazy(_interceptors.JSNoSuchMethodError, {
    /*_interceptors.JSNoSuchMethodError._nullError*/get _nullError() {
      return core.RegExp.new("^Cannot read property '(.+)' of null$");
    },
    /*_interceptors.JSNoSuchMethodError._notAFunction*/get _notAFunction() {
      return core.RegExp.new("^(.+) is not a function$");
    },
    /*_interceptors.JSNoSuchMethodError._extensionName*/get _extensionName() {
      return core.RegExp.new("^Symbol\\(dartx\\.(.+)\\)$");
    },
    /*_interceptors.JSNoSuchMethodError._privateName*/get _privateName() {
      return core.RegExp.new("^Symbol\\((_.+)\\)$");
    }
  }, false);
  dart.registerExtension("TypeError", _interceptors.JSNoSuchMethodError);
  _interceptors.JSFunction = class JSFunction extends _interceptors.Interceptor {
    [$toString]() {
      if (dart.isType(this)) return dart.typeName(this);
      return "Closure: " + dart.typeName(dart.getReifiedType(this)) + " from: " + this;
    }
    [$_equals](other) {
      if (other == null) return false;
      if (other == null) return false;
      let boundObj = this._boundObject;
      if (boundObj == null) return this === other;
      return boundObj === other._boundObject && this._boundMethod === other._boundMethod;
    }
    get [$hashCode]() {
      let boundObj = this._boundObject;
      if (boundObj == null) return core.identityHashCode(this);
      let boundMethod = this._boundMethod;
      let hash = 17 * 31 + dart.notNull(dart.hashCode(boundObj)) & 536870911;
      return hash * 31 + dart.notNull(core.identityHashCode(boundMethod)) & 536870911;
    }
    get [$runtimeType]() {
      return dart.wrapType(dart.getReifiedType(this));
    }
  };
  (_interceptors.JSFunction.new = function() {
    _interceptors.JSFunction.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSFunction.prototype;
  dart.addTypeTests(_interceptors.JSFunction);
  dart.addTypeCaches(_interceptors.JSFunction);
  dart.setLibraryUri(_interceptors.JSFunction, I[16]);
  dart.registerExtension("Function", _interceptors.JSFunction);
  _interceptors.JSNull = class JSNull extends core.Object {
    toString() {
      return "null";
    }
    noSuchMethod(i) {
      if (i == null) dart.nullFailed(I[17], 215, 27, "i");
      return dart.defaultNoSuchMethod(null, i);
    }
  };
  (_interceptors.JSNull.new = function() {
    ;
  }).prototype = _interceptors.JSNull.prototype;
  dart.addTypeTests(_interceptors.JSNull);
  dart.addTypeCaches(_interceptors.JSNull);
  dart.setLibraryUri(_interceptors.JSNull, I[16]);
  dart.defineExtensionMethods(_interceptors.JSNull, ['toString', 'noSuchMethod']);
  var _hasValue = dart.privateName(_interceptors, "_hasValue");
  var _hasValue$ = dart.privateName(core, "_hasValue");
  var _errorExplanation = dart.privateName(_interceptors, "_errorExplanation");
  var _errorExplanation$ = dart.privateName(core, "_errorExplanation");
  var _errorName = dart.privateName(_interceptors, "_errorName");
  var _errorName$ = dart.privateName(core, "_errorName");
  _interceptors.JSRangeError = class JSRangeError extends _interceptors.Interceptor {
    get [$stackTrace]() {
      return dart.stackTrace(this);
    }
    get [$invalidValue]() {
      return null;
    }
    get [$name]() {
      return null;
    }
    get [$message]() {
      return this.message;
    }
    [$toString]() {
      return "Invalid argument: " + dart.str(this[$message]);
    }
    get [_hasValue$]() {
      return core.bool.as(this[$noSuchMethod](new core._Invocation.getter(C[14] || CT.C14)));
    }
    get [_errorExplanation$]() {
      return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C[15] || CT.C15)));
    }
    get [_errorName$]() {
      return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C[16] || CT.C16)));
    }
  };
  (_interceptors.JSRangeError.new = function() {
    _interceptors.JSRangeError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSRangeError.prototype;
  dart.addTypeTests(_interceptors.JSRangeError);
  dart.addTypeCaches(_interceptors.JSRangeError);
  _interceptors.JSRangeError[dart.implements] = () => [core.ArgumentError];
  dart.setGetterSignature(_interceptors.JSRangeError, () => ({
    __proto__: dart.getGetters(_interceptors.JSRangeError.__proto__),
    [$stackTrace]: core.StackTrace,
    [$invalidValue]: dart.dynamic,
    [$name]: dart.nullable(core.String),
    [$message]: dart.dynamic,
    [_hasValue$]: core.bool,
    [_errorExplanation$]: core.String,
    [_errorName$]: core.String
  }));
  dart.setLibraryUri(_interceptors.JSRangeError, I[16]);
  dart.registerExtension("RangeError", _interceptors.JSRangeError);
  var _setLengthUnsafe = dart.privateName(_interceptors, "_setLengthUnsafe");
  var _removeWhere = dart.privateName(_interceptors, "_removeWhere");
  const _is_JSArray_default = Symbol('_is_JSArray_default');
  _interceptors.JSArray$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    var ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var ArrayIteratorOfE = () => (ArrayIteratorOfE = dart.constFn(_interceptors.ArrayIterator$(E)))();
    var ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    class JSArray extends core.Object {
      constructor() {
        return [];
      }
      static of(list) {
        list.__proto__ = JSArray.prototype;
        return list;
      }
      static fixed(list) {
        list.__proto__ = JSArray.prototype;
        list.fixed$length = Array;
        return list;
      }
      static unmodifiable(list) {
        list.__proto__ = JSArray.prototype;
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      }
      static markFixedList(list) {
        list.fixed$length = Array;
      }
      static markUnmodifiableList(list) {
        list.fixed$length = Array;
        list.immutable$list = Array;
      }
      [$checkMutable](reason) {
        if (this.immutable$list) {
          dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
        }
      }
      [$checkGrowable](reason) {
        if (this.fixed$length) {
          dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
        }
      }
      [$cast](R) {
        return core.List.castFrom(E, R, this);
      }
      [$add](value) {
        E.as(value);
        this[$checkGrowable]("add");
        this.push(value);
      }
      [$removeAt](index) {
        if (index == null) dart.argumentError(index);
        this[$checkGrowable]("removeAt");
        if (index < 0 || index >= this[$length]) {
          dart.throw(new core.RangeError.value(index));
        }
        return this.splice(index, 1)[0];
      }
      [$insert](index, value) {
        if (index == null) dart.argumentError(index);
        E.as(value);
        this[$checkGrowable]("insert");
        if (index < 0 || index > this[$length]) {
          dart.throw(new core.RangeError.value(index));
        }
        this.splice(index, 0, value);
      }
      [$insertAll](index, iterable) {
        if (index == null) dart.argumentError(index);
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[18], 93, 52, "iterable");
        this[$checkGrowable]("insertAll");
        core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
        if (!_internal.EfficientLengthIterable.is(iterable)) {
          iterable = iterable[$toList]();
        }
        let insertionLength = dart.notNull(iterable[$length]);
        this[_setLengthUnsafe](this[$length] + insertionLength);
        let end = index + insertionLength;
        this[$setRange](end, this[$length], this, index);
        this[$setRange](index, end, iterable);
      }
      [$setAll](index, iterable) {
        let t20;
        if (index == null) dart.argumentError(index);
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[18], 107, 49, "iterable");
        this[$checkMutable]("setAll");
        core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
        for (let element of iterable) {
          this[$_set]((t20 = index, index = t20 + 1, t20), element);
        }
      }
      [$removeLast]() {
        this[$checkGrowable]("removeLast");
        if (this[$length] === 0) dart.throw(_js_helper.diagnoseIndexError(this, -1));
        return this.pop();
      }
      [$remove](element) {
        this[$checkGrowable]("remove");
        let length = this[$length];
        for (let i = 0; i < length; i = i + 1) {
          if (dart.equals(this[$_get](i), element)) {
            this.splice(i, 1);
            return true;
          }
        }
        return false;
      }
      [$removeWhere](test) {
        if (test == null) dart.nullFailed(I[18], 136, 37, "test");
        this[$checkGrowable]("removeWhere");
        this[_removeWhere](test, true);
      }
      [$retainWhere](test) {
        if (test == null) dart.nullFailed(I[18], 141, 37, "test");
        this[$checkGrowable]("retainWhere");
        this[_removeWhere](test, false);
      }
      [_removeWhere](test, removeMatching) {
        if (test == null) dart.nullFailed(I[18], 146, 38, "test");
        if (removeMatching == null) dart.nullFailed(I[18], 146, 49, "removeMatching");
        let retained = [];
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (!dart.test(test(element)) === removeMatching) {
            retained.push(element);
          }
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (retained[$length] === end) return;
        this[$length] = retained[$length];
        let length = dart.notNull(retained[$length]);
        for (let i = 0; i < length; i = i + 1) {
          this[i] = retained[i];
        }
      }
      [$where](f) {
        if (f == null) dart.nullFailed(I[18], 175, 38, "f");
        return new (WhereIterableOfE()).new(this, f);
      }
      [$expand](T, f) {
        if (f == null) dart.nullFailed(I[18], 179, 49, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      [$addAll](collection) {
        IterableOfE().as(collection);
        if (collection == null) dart.nullFailed(I[18], 183, 27, "collection");
        let i = this[$length];
        this[$checkGrowable]("addAll");
        for (let e of collection) {
          if (!(i === this[$length] || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, I[18], 187, 14, "i == this.length || (throw ConcurrentModificationError(this))");
          i = i + 1;
          this.push(e);
        }
      }
      [$clear]() {
        this[$length] = 0;
      }
      [$forEach](f) {
        if (f == null) dart.nullFailed(I[18], 197, 33, "f");
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          f(element);
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      [$map](T, f) {
        if (f == null) dart.nullFailed(I[18], 206, 36, "f");
        return new (_internal.MappedListIterable$(E, T)).new(this, f);
      }
      [$join](separator = "") {
        if (separator == null) dart.nullFailed(I[18], 210, 23, "separator");
        let length = this[$length];
        let list = T$.ListOfString().filled(length, "");
        for (let i = 0; i < length; i = i + 1) {
          list[$_set](i, dart.str(this[$_get](i)));
        }
        return list.join(separator);
      }
      [$take](n) {
        if (n == null) dart.nullFailed(I[18], 219, 24, "n");
        return new (SubListIterableOfE()).new(this, 0, n);
      }
      [$takeWhile](test) {
        if (test == null) dart.nullFailed(I[18], 223, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      [$skip](n) {
        if (n == null) dart.nullFailed(I[18], 227, 24, "n");
        return new (SubListIterableOfE()).new(this, n, null);
      }
      [$skipWhile](test) {
        if (test == null) dart.nullFailed(I[18], 231, 42, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      [$reduce](combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[18], 235, 14, "combine");
        let length = this[$length];
        if (length === 0) dart.throw(_internal.IterableElementError.noElement());
        let value = this[$_get](0);
        for (let i = 1; i < length; i = i + 1) {
          let element = this[i];
          value = combine(value, element);
          if (length !== this[$length]) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return value;
      }
      [$fold](T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[18], 247, 68, "combine");
        let value = initialValue;
        let length = this[$length];
        for (let i = 0; i < length; i = i + 1) {
          let element = this[i];
          value = combine(value, element);
          if (this[$length] !== length) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return value;
      }
      [$firstWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 258, 33, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (dart.test(test(element))) return element;
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$lastWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 269, 32, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        for (let i = length - 1; i >= 0; i = i - 1) {
          let element = this[i];
          if (dart.test(test(element))) return element;
          if (length !== this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$singleWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 282, 34, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        let match = null;
        let matchFound = false;
        for (let i = 0; i < length; i = i + 1) {
          let element = this[i];
          if (dart.test(test(element))) {
            if (matchFound) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            matchFound = true;
            match = element;
          }
          if (length !== this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (matchFound) return E.as(match);
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$elementAt](index) {
        if (index == null) dart.nullFailed(I[18], 304, 19, "index");
        return this[$_get](index);
      }
      [$sublist](start, end = null) {
        if (start == null) dart.argumentError(start);
        if (start < 0 || start > this[$length]) {
          dart.throw(new core.RangeError.range(start, 0, this[$length], "start"));
        }
        if (end == null) {
          end = this[$length];
        } else {
          let _end = end;
          if (_end < start || _end > this[$length]) {
            dart.throw(new core.RangeError.range(end, start, this[$length], "end"));
          }
        }
        if (start === end) return JSArrayOfE().of([]);
        return JSArrayOfE().of(this.slice(start, end));
      }
      [$getRange](start, end) {
        if (start == null) dart.nullFailed(I[18], 325, 28, "start");
        if (end == null) dart.nullFailed(I[18], 325, 39, "end");
        core.RangeError.checkValidRange(start, end, this[$length]);
        return new (SubListIterableOfE()).new(this, start, end);
      }
      get [$first]() {
        if (this[$length] > 0) return this[$_get](0);
        dart.throw(_internal.IterableElementError.noElement());
      }
      get [$last]() {
        if (this[$length] > 0) return this[$_get](this[$length] - 1);
        dart.throw(_internal.IterableElementError.noElement());
      }
      get [$single]() {
        if (this[$length] === 1) return this[$_get](0);
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        dart.throw(_internal.IterableElementError.tooMany());
      }
      [$removeRange](start, end) {
        if (start == null) dart.argumentError(start);
        if (end == null) dart.argumentError(end);
        this[$checkGrowable]("removeRange");
        core.RangeError.checkValidRange(start, end, this[$length]);
        let deleteCount = end - start;
        this.splice(start, deleteCount);
      }
      [$setRange](start, end, iterable, skipCount = 0) {
        if (start == null) dart.argumentError(start);
        if (end == null) dart.argumentError(end);
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[18], 353, 71, "iterable");
        if (skipCount == null) dart.argumentError(skipCount);
        this[$checkMutable]("set range");
        core.RangeError.checkValidRange(start, end, this[$length]);
        let length = end - start;
        if (length === 0) return;
        core.RangeError.checkNotNegative(skipCount, "skipCount");
        let otherList = JSArrayOfE().of([]);
        let otherStart = 0;
        if (ListOfE().is(iterable)) {
          otherList = iterable;
          otherStart = skipCount;
        } else {
          otherList = iterable[$skip](skipCount)[$toList]({growable: false});
          otherStart = 0;
        }
        if (otherStart + length > dart.notNull(otherList[$length])) {
          dart.throw(_internal.IterableElementError.tooFew());
        }
        if (otherStart < start) {
          for (let i = length - 1; i >= 0; i = i - 1) {
            let element = otherList[$_get](otherStart + i);
            this[start + i] = element;
          }
        } else {
          for (let i = 0; i < length; i = i + 1) {
            let element = otherList[$_get](otherStart + i);
            this[start + i] = element;
          }
        }
      }
      [$fillRange](start, end, fillValue = null) {
        if (start == null) dart.argumentError(start);
        if (end == null) dart.argumentError(end);
        EN().as(fillValue);
        this[$checkMutable]("fill range");
        core.RangeError.checkValidRange(start, end, this[$length]);
        let checkedFillValue = E.as(fillValue);
        for (let i = start; i < end; i = i + 1) {
          this[i] = checkedFillValue;
        }
      }
      [$replaceRange](start, end, replacement) {
        if (start == null) dart.argumentError(start);
        if (end == null) dart.argumentError(end);
        IterableOfE().as(replacement);
        if (replacement == null) dart.nullFailed(I[18], 404, 61, "replacement");
        this[$checkGrowable]("replace range");
        core.RangeError.checkValidRange(start, end, this[$length]);
        if (!_internal.EfficientLengthIterable.is(replacement)) {
          replacement = replacement[$toList]();
        }
        let removeLength = end - start;
        let insertLength = dart.notNull(replacement[$length]);
        if (removeLength >= insertLength) {
          let delta = removeLength - insertLength;
          let insertEnd = start + insertLength;
          let newLength = this[$length] - delta;
          this[$setRange](start, insertEnd, replacement);
          if (delta !== 0) {
            this[$setRange](insertEnd, newLength, this, end);
            this[$length] = newLength;
          }
        } else {
          let delta = insertLength - removeLength;
          let newLength = this[$length] + delta;
          let insertEnd = start + insertLength;
          this[_setLengthUnsafe](newLength);
          this[$setRange](insertEnd, newLength, this, end);
          this[$setRange](start, insertEnd, replacement);
        }
      }
      [$any](test) {
        if (test == null) dart.nullFailed(I[18], 432, 29, "test");
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (dart.test(test(element))) return true;
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return false;
      }
      [$every](test) {
        if (test == null) dart.nullFailed(I[18], 442, 31, "test");
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (!dart.test(test(element))) return false;
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return true;
      }
      get [$reversed]() {
        return new (ReversedListIterableOfE()).new(this);
      }
      [$sort](compare = null) {
        this[$checkMutable]("sort");
        if (compare == null) {
          _internal.Sort.sort(E, this, dart.fn((a, b) => core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b)), T$.ObjectNAndObjectNToint()));
        } else {
          _internal.Sort.sort(E, this, compare);
        }
      }
      [$shuffle](random = null) {
        this[$checkMutable]("shuffle");
        if (random == null) random = math.Random.new();
        let length = this[$length];
        while (length > 1) {
          let pos = random.nextInt(length);
          length = length - 1;
          let tmp = this[$_get](length);
          this[$_set](length, this[$_get](pos));
          this[$_set](pos, tmp);
        }
      }
      [$indexOf](element, start = 0) {
        if (start == null) dart.argumentError(start);
        let length = this[$length];
        if (start >= length) {
          return -1;
        }
        if (start < 0) {
          start = 0;
        }
        for (let i = start; i < length; i = i + 1) {
          if (dart.equals(this[$_get](i), element)) {
            return i;
          }
        }
        return -1;
      }
      [$lastIndexOf](element, startIndex = null) {
        let t20;
        let start = (t20 = startIndex, t20 == null ? this[$length] - 1 : t20);
        if (start >= this[$length]) {
          start = this[$length] - 1;
        } else if (start < 0) {
          return -1;
        }
        for (let i = start; i >= 0; i = i - 1) {
          if (dart.equals(this[$_get](i), element)) {
            return i;
          }
        }
        return -1;
      }
      [$contains](other) {
        let length = this[$length];
        for (let i = 0; i < length; i = i + 1) {
          let element = this[i];
          if (dart.equals(element, other)) return true;
        }
        return false;
      }
      get [$isEmpty]() {
        return this[$length] === 0;
      }
      get [$isNotEmpty]() {
        return !this[$isEmpty];
      }
      [$toString]() {
        return collection.ListBase.listToString(this);
      }
      [$toList](opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.argumentError(growable);
        let list = this.slice();
        if (!growable) _interceptors.JSArray.markFixedList(list);
        return JSArrayOfE().of(list);
      }
      [$toSet]() {
        return LinkedHashSetOfE().from(this);
      }
      get [$iterator]() {
        return new (ArrayIteratorOfE()).new(this);
      }
      get [$hashCode]() {
        return core.identityHashCode(this);
      }
      [$_equals](other) {
        if (other == null) return false;
        return this === other;
      }
      get [$length]() {
        return this.length;
      }
      set [$length](newLength) {
        if (newLength == null) dart.argumentError(newLength);
        this[$checkGrowable]("set length");
        if (newLength < 0) {
          dart.throw(new core.RangeError.range(newLength, 0, null, "newLength"));
        }
        if (newLength > this[$length]) E.as(null);
        this.length = newLength;
      }
      [_setLengthUnsafe](newLength) {
        if (newLength == null) dart.nullFailed(I[18], 566, 29, "newLength");
        if (dart.notNull(newLength) < 0) {
          dart.throw(new core.RangeError.range(newLength, 0, null, "newLength"));
        }
        this.length = newLength;
      }
      [$_get](index) {
        if (index == null) dart.nullFailed(I[18], 576, 21, "index");
        if (index == null || index >= this.length || index < 0) {
          dart.throw(_js_helper.diagnoseIndexError(this, index));
        }
        return this[index];
      }
      [$_set](index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[18], 586, 25, "index");
        E.as(value);
        this[$checkMutable]("indexed set");
        if (index == null || index >= this.length || index < 0) {
          dart.throw(_js_helper.diagnoseIndexError(this, index));
        }
        this[index] = value;
        return value$;
      }
      [$asMap]() {
        return new (ListMapViewOfE()).new(this);
      }
      get [$runtimeType]() {
        return dart.wrapType(core.List$(E));
      }
      [$followedBy](other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(I[18], 603, 38, "other");
        return FollowedByIterableOfE().firstEfficient(this, other);
      }
      [$whereType](T) {
        return new (_internal.WhereTypeIterable$(T)).new(this);
      }
      [$plus](other) {
        ListOfE().as(other);
        if (other == null) dart.nullFailed(I[18], 608, 30, "other");
        return (() => {
          let t20 = ListOfE().of(this);
          t20[$addAll](other);
          return t20;
        })();
      }
      [$indexWhere](test, start = 0) {
        if (test == null) dart.nullFailed(I[18], 610, 35, "test");
        if (start == null) dart.nullFailed(I[18], 610, 46, "start");
        if (dart.notNull(start) >= this[$length]) return -1;
        if (dart.notNull(start) < 0) start = 0;
        for (let i = start; dart.notNull(i) < this[$length]; i = dart.notNull(i) + 1) {
          if (dart.test(test(this[$_get](i)))) return i;
        }
        return -1;
      }
      [$lastIndexWhere](test, start = null) {
        if (test == null) dart.nullFailed(I[18], 619, 39, "test");
        if (start == null) start = this[$length] - 1;
        if (dart.notNull(start) < 0) return -1;
        for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
          if (dart.test(test(this[$_get](i)))) return i;
        }
        return -1;
      }
      set [$first](element) {
        E.as(element);
        if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
        this[$_set](0, element);
      }
      set [$last](element) {
        E.as(element);
        if (this[$isEmpty]) dart.throw(new core.IndexError.new(0, this));
        this[$_set](this[$length] - 1, element);
      }
    }
    (JSArray.new = function() {
      ;
    }).prototype = JSArray.prototype;
    dart.setExtensionBaseClass(JSArray, dart.global.Array);
    JSArray.prototype[dart.isList] = true;
    dart.addTypeTests(JSArray);
    JSArray.prototype[_is_JSArray_default] = true;
    dart.addTypeCaches(JSArray);
    JSArray[dart.implements] = () => [core.List$(E), _interceptors.JSIndexable$(E)];
    dart.setMethodSignature(JSArray, () => ({
      __proto__: dart.getMethods(JSArray.__proto__),
      [$checkMutable]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [$checkGrowable]: dart.fnType(dart.dynamic, [dart.dynamic]),
      [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$removeAt]: dart.fnType(E, [core.int]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$removeLast]: dart.fnType(E, []),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [_removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$clear]: dart.fnType(dart.void, []),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$elementAt]: dart.fnType(E, [core.int]),
      [$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      [$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      [$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      [$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toSet]: dart.fnType(core.Set$(E), []),
      [_setLengthUnsafe]: dart.fnType(dart.void, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$asMap]: dart.fnType(core.Map$(core.int, E), []),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      [$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      [$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)])
    }));
    dart.setGetterSignature(JSArray, () => ({
      __proto__: dart.getGetters(JSArray.__proto__),
      [$first]: E,
      [$last]: E,
      [$single]: E,
      [$reversed]: core.Iterable$(E),
      [$isEmpty]: core.bool,
      [$isNotEmpty]: core.bool,
      [$iterator]: core.Iterator$(E),
      [$length]: core.int
    }));
    dart.setSetterSignature(JSArray, () => ({
      __proto__: dart.getSetters(JSArray.__proto__),
      [$length]: core.int,
      [$first]: dart.nullable(core.Object),
      [$last]: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(JSArray, I[16]);
    return JSArray;
  });
  _interceptors.JSArray = _interceptors.JSArray$();
  dart.addTypeTests(_interceptors.JSArray, _is_JSArray_default);
  dart.registerExtension("Array", _interceptors.JSArray);
  const _is_JSMutableArray_default = Symbol('_is_JSMutableArray_default');
  _interceptors.JSMutableArray$ = dart.generic(E => {
    class JSMutableArray extends _interceptors.JSArray$(E) {}
    (JSMutableArray.new = function() {
      JSMutableArray.__proto__.new.call(this);
      ;
    }).prototype = JSMutableArray.prototype;
    dart.addTypeTests(JSMutableArray);
    JSMutableArray.prototype[_is_JSMutableArray_default] = true;
    dart.addTypeCaches(JSMutableArray);
    JSMutableArray[dart.implements] = () => [_interceptors.JSMutableIndexable$(E)];
    dart.setLibraryUri(JSMutableArray, I[16]);
    return JSMutableArray;
  });
  _interceptors.JSMutableArray = _interceptors.JSMutableArray$();
  dart.addTypeTests(_interceptors.JSMutableArray, _is_JSMutableArray_default);
  const _is_JSFixedArray_default = Symbol('_is_JSFixedArray_default');
  _interceptors.JSFixedArray$ = dart.generic(E => {
    class JSFixedArray extends _interceptors.JSMutableArray$(E) {}
    (JSFixedArray.new = function() {
      JSFixedArray.__proto__.new.call(this);
      ;
    }).prototype = JSFixedArray.prototype;
    dart.addTypeTests(JSFixedArray);
    JSFixedArray.prototype[_is_JSFixedArray_default] = true;
    dart.addTypeCaches(JSFixedArray);
    dart.setLibraryUri(JSFixedArray, I[16]);
    return JSFixedArray;
  });
  _interceptors.JSFixedArray = _interceptors.JSFixedArray$();
  dart.addTypeTests(_interceptors.JSFixedArray, _is_JSFixedArray_default);
  const _is_JSExtendableArray_default = Symbol('_is_JSExtendableArray_default');
  _interceptors.JSExtendableArray$ = dart.generic(E => {
    class JSExtendableArray extends _interceptors.JSMutableArray$(E) {}
    (JSExtendableArray.new = function() {
      JSExtendableArray.__proto__.new.call(this);
      ;
    }).prototype = JSExtendableArray.prototype;
    dart.addTypeTests(JSExtendableArray);
    JSExtendableArray.prototype[_is_JSExtendableArray_default] = true;
    dart.addTypeCaches(JSExtendableArray);
    dart.setLibraryUri(JSExtendableArray, I[16]);
    return JSExtendableArray;
  });
  _interceptors.JSExtendableArray = _interceptors.JSExtendableArray$();
  dart.addTypeTests(_interceptors.JSExtendableArray, _is_JSExtendableArray_default);
  const _is_JSUnmodifiableArray_default = Symbol('_is_JSUnmodifiableArray_default');
  _interceptors.JSUnmodifiableArray$ = dart.generic(E => {
    class JSUnmodifiableArray extends _interceptors.JSArray$(E) {}
    (JSUnmodifiableArray.new = function() {
      JSUnmodifiableArray.__proto__.new.call(this);
      ;
    }).prototype = JSUnmodifiableArray.prototype;
    dart.addTypeTests(JSUnmodifiableArray);
    JSUnmodifiableArray.prototype[_is_JSUnmodifiableArray_default] = true;
    dart.addTypeCaches(JSUnmodifiableArray);
    dart.setLibraryUri(JSUnmodifiableArray, I[16]);
    return JSUnmodifiableArray;
  });
  _interceptors.JSUnmodifiableArray = _interceptors.JSUnmodifiableArray$();
  dart.addTypeTests(_interceptors.JSUnmodifiableArray, _is_JSUnmodifiableArray_default);
  var _current = dart.privateName(_interceptors, "_current");
  var _iterable = dart.privateName(_interceptors, "_iterable");
  var _length = dart.privateName(_interceptors, "_length");
  var _index = dart.privateName(_interceptors, "_index");
  const _is_ArrayIterator_default = Symbol('_is_ArrayIterator_default');
  _interceptors.ArrayIterator$ = dart.generic(E => {
    class ArrayIterator extends core.Object {
      get current() {
        return E.as(this[_current]);
      }
      moveNext() {
        let length = this[_iterable][$length];
        if (this[_length] !== length) {
          dart.throw(_js_helper.throwConcurrentModificationError(this[_iterable]));
        }
        if (this[_index] >= length) {
          this[_current] = null;
          return false;
        }
        this[_current] = this[_iterable][$_get](this[_index]);
        this[_index] = this[_index] + 1;
        return true;
      }
    }
    (ArrayIterator.new = function(iterable) {
      if (iterable == null) dart.nullFailed(I[18], 668, 28, "iterable");
      this[_current] = null;
      this[_iterable] = iterable;
      this[_length] = iterable[$length];
      this[_index] = 0;
      ;
    }).prototype = ArrayIterator.prototype;
    dart.addTypeTests(ArrayIterator);
    ArrayIterator.prototype[_is_ArrayIterator_default] = true;
    dart.addTypeCaches(ArrayIterator);
    ArrayIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(ArrayIterator, () => ({
      __proto__: dart.getMethods(ArrayIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(ArrayIterator, () => ({
      __proto__: dart.getGetters(ArrayIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(ArrayIterator, I[16]);
    dart.setFieldSignature(ArrayIterator, () => ({
      __proto__: dart.getFields(ArrayIterator.__proto__),
      [_iterable]: dart.finalFieldType(_interceptors.JSArray$(E)),
      [_length]: dart.finalFieldType(core.int),
      [_index]: dart.fieldType(core.int),
      [_current]: dart.fieldType(dart.nullable(E))
    }));
    return ArrayIterator;
  });
  _interceptors.ArrayIterator = _interceptors.ArrayIterator$();
  dart.addTypeTests(_interceptors.ArrayIterator, _is_ArrayIterator_default);
  var _isInt32 = dart.privateName(_interceptors, "_isInt32");
  var _tdivSlow = dart.privateName(_interceptors, "_tdivSlow");
  var _shlPositive = dart.privateName(_interceptors, "_shlPositive");
  var _shrOtherPositive = dart.privateName(_interceptors, "_shrOtherPositive");
  var _shrBothPositive = dart.privateName(_interceptors, "_shrBothPositive");
  _interceptors.JSNumber = class JSNumber extends _interceptors.Interceptor {
    [$compareTo](b) {
      core.num.as(b);
      if (b == null) dart.argumentError(b);
      if (this < b) {
        return -1;
      } else if (this > b) {
        return 1;
      } else if (this === b) {
        if (this === 0) {
          let bIsNegative = b[$isNegative];
          if (this[$isNegative] === bIsNegative) return 0;
          if (this[$isNegative]) return -1;
          return 1;
        }
        return 0;
      } else if (this[$isNaN]) {
        if (b[$isNaN]) {
          return 0;
        }
        return 1;
      } else {
        return -1;
      }
    }
    get [$isNegative]() {
      return this === 0 ? 1 / this < 0 : this < 0;
    }
    get [$isNaN]() {
      return isNaN(this);
    }
    get [$isInfinite]() {
      return this == 1 / 0 || this == -1 / 0;
    }
    get [$isFinite]() {
      return isFinite(this);
    }
    [$remainder](b) {
      if (b == null) dart.argumentError(b);
      return this % b;
    }
    [$abs]() {
      return Math.abs(this);
    }
    get [$sign]() {
      return _interceptors.JSNumber.as(this > 0 ? 1 : this < 0 ? -1 : this);
    }
    [$toInt]() {
      if (this >= -2147483648 && this <= 2147483647) {
        return this | 0;
      }
      if (isFinite(this)) {
        return this[$truncateToDouble]() + 0;
      }
      dart.throw(new core.UnsupportedError.new("" + this));
    }
    [$truncate]() {
      return this[$toInt]();
    }
    [$ceil]() {
      return this[$ceilToDouble]()[$toInt]();
    }
    [$floor]() {
      return this[$floorToDouble]()[$toInt]();
    }
    [$round]() {
      if (this > 0) {
        if (this !== 1 / 0) {
          return Math.round(this);
        }
      } else if (this > -1 / 0) {
        return 0 - Math.round(0 - this);
      }
      dart.throw(new core.UnsupportedError.new("" + this));
    }
    [$ceilToDouble]() {
      return Math.ceil(this);
    }
    [$floorToDouble]() {
      return Math.floor(this);
    }
    [$roundToDouble]() {
      if (this < 0) {
        return -Math.round(-this);
      } else {
        return Math.round(this);
      }
    }
    [$truncateToDouble]() {
      return this < 0 ? this[$ceilToDouble]() : this[$floorToDouble]();
    }
    [$clamp](lowerLimit, upperLimit) {
      if (lowerLimit == null) dart.argumentError(lowerLimit);
      if (upperLimit == null) dart.argumentError(upperLimit);
      if (lowerLimit[$compareTo](upperLimit) > 0) {
        dart.throw(_js_helper.argumentErrorValue(lowerLimit));
      }
      if (this[$compareTo](lowerLimit) < 0) return lowerLimit;
      if (this[$compareTo](upperLimit) > 0) return upperLimit;
      return this;
    }
    [$toDouble]() {
      return this;
    }
    [$toStringAsFixed](fractionDigits) {
      if (fractionDigits == null) dart.argumentError(fractionDigits);
      if (fractionDigits < 0 || fractionDigits > 20) {
        dart.throw(new core.RangeError.range(fractionDigits, 0, 20, "fractionDigits"));
      }
      let result = this.toFixed(fractionDigits);
      if (this === 0 && this[$isNegative]) return "-" + result;
      return result;
    }
    [$toStringAsExponential](fractionDigits = null) {
      let result = null;
      if (fractionDigits != null) {
        let _fractionDigits = fractionDigits;
        if (_fractionDigits < 0 || _fractionDigits > 20) {
          dart.throw(new core.RangeError.range(_fractionDigits, 0, 20, "fractionDigits"));
        }
        result = this.toExponential(_fractionDigits);
      } else {
        result = this.toExponential();
      }
      if (this === 0 && this[$isNegative]) return "-" + dart.str(result);
      return result;
    }
    [$toStringAsPrecision](precision) {
      if (precision == null) dart.argumentError(precision);
      if (precision < 1 || precision > 21) {
        dart.throw(new core.RangeError.range(precision, 1, 21, "precision"));
      }
      let result = this.toPrecision(precision);
      if (this === 0 && this[$isNegative]) return "-" + result;
      return result;
    }
    [$toRadixString](radix) {
      if (radix == null) dart.argumentError(radix);
      if (radix < 2 || radix > 36) {
        dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
      }
      let result = this.toString(radix);
      if (result[$codeUnitAt](result.length - 1) !== 41) {
        return result;
      }
      return _interceptors.JSNumber._handleIEtoString(result);
    }
    static _handleIEtoString(result) {
      if (result == null) dart.nullFailed(I[19], 194, 42, "result");
      let match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null) {
        dart.throw(new core.UnsupportedError.new("Unexpected toString result: " + dart.str(result)));
      }
      result = match[$_get](1);
      let exponent = +match[$_get](3);
      if (match[$_get](2) != null) {
        result = result + match[$_get](2);
        exponent = exponent - match[$_get](2).length;
      }
      return dart.notNull(result) + "0"[$times](exponent);
    }
    [$toString]() {
      if (this === 0 && 1 / this < 0) {
        return "-0.0";
      } else {
        return "" + this;
      }
    }
    get [$hashCode]() {
      let intValue = this | 0;
      if (this === intValue) return 536870911 & intValue;
      let absolute = Math.abs(this);
      let lnAbsolute = Math.log(absolute);
      let log2 = lnAbsolute / 0.6931471805599453;
      let floorLog2 = log2 | 0;
      let factor = Math.pow(2, floorLog2);
      let scaled = absolute < 1 ? absolute / factor : factor / absolute;
      let rescaled1 = scaled * 9007199254740992;
      let rescaled2 = scaled * 3542243181176521;
      let d1 = rescaled1 | 0;
      let d2 = rescaled2 | 0;
      let d3 = floorLog2;
      let h = 536870911 & (d1 + d2) * (601 * 997) + d3 * 1259;
      return h;
    }
    [$_negate]() {
      return -this;
    }
    [$plus](other) {
      if (other == null) dart.argumentError(other);
      return this + other;
    }
    [$minus](other) {
      if (other == null) dart.argumentError(other);
      return this - other;
    }
    [$divide](other) {
      if (other == null) dart.argumentError(other);
      return this / other;
    }
    [$times](other) {
      if (other == null) dart.argumentError(other);
      return this * other;
    }
    [$modulo](other) {
      if (other == null) dart.argumentError(other);
      let result = this % other;
      if (result === 0) return _interceptors.JSNumber.as(0);
      if (result > 0) return result;
      if (other < 0) {
        return result - other;
      } else {
        return result + other;
      }
    }
    [_isInt32](value) {
      return (value | 0) === value;
    }
    [$floorDivide](other) {
      if (other == null) dart.argumentError(other);
      if (this[_isInt32](this) && this[_isInt32](other) && 0 !== other && -1 !== other) {
        return this / other | 0;
      } else {
        return this[_tdivSlow](other);
      }
    }
    [_tdivSlow](other) {
      if (other == null) dart.nullFailed(I[19], 308, 21, "other");
      return (this / other)[$toInt]();
    }
    [$leftShift](other) {
      if (other == null) dart.argumentError(other);
      if (other < 0) _js_helper.throwArgumentErrorValue(other);
      return this[_shlPositive](other);
    }
    [_shlPositive](other) {
      return other > 31 ? 0 : this << other >>> 0;
    }
    [$rightShift](other) {
      if (other == null) dart.argumentError(other);
      if (other < 0) _js_helper.throwArgumentErrorValue(other);
      return this[_shrOtherPositive](other);
    }
    [_shrOtherPositive](other) {
      return this > 0 ? this[_shrBothPositive](other) : this >> (other > 31 ? 31 : other) >>> 0;
    }
    [_shrBothPositive](other) {
      return other > 31 ? 0 : this >>> other;
    }
    [$bitAnd](other) {
      if (other == null) dart.argumentError(other);
      return (this & other) >>> 0;
    }
    [$bitOr](other) {
      if (other == null) dart.argumentError(other);
      return (this | other) >>> 0;
    }
    [$bitXor](other) {
      if (other == null) dart.argumentError(other);
      return (this ^ other) >>> 0;
    }
    [$lessThan](other) {
      if (other == null) dart.argumentError(other);
      return this < other;
    }
    [$greaterThan](other) {
      if (other == null) dart.argumentError(other);
      return this > other;
    }
    [$lessOrEquals](other) {
      if (other == null) dart.argumentError(other);
      return this <= other;
    }
    [$greaterOrEquals](other) {
      if (other == null) dart.argumentError(other);
      return this >= other;
    }
    get [$isEven]() {
      return (this & 1) === 0;
    }
    get [$isOdd]() {
      return (this & 1) === 1;
    }
    [$toUnsigned](width) {
      if (width == null) dart.argumentError(width);
      return (this & (1)[$leftShift](width) - 1) >>> 0;
    }
    [$toSigned](width) {
      if (width == null) dart.argumentError(width);
      let signMask = (1)[$leftShift](width - 1);
      return ((this & signMask - 1) >>> 0) - ((this & signMask) >>> 0);
    }
    get [$bitLength]() {
      let nonneg = this < 0 ? -this - 1 : this;
      let wordBits = 32;
      while (nonneg >= 4294967296) {
        nonneg = (nonneg / 4294967296)[$truncate]();
        wordBits = wordBits + 32;
      }
      return wordBits - _interceptors.JSNumber._clz32(nonneg);
    }
    static _clz32(uint32) {
      return 32 - _interceptors.JSNumber._bitCount(_interceptors.JSNumber._spread(uint32));
    }
    [$modPow](e, m) {
      if (e == null) dart.argumentError(e);
      if (m == null) dart.argumentError(m);
      if (e < 0) dart.throw(new core.RangeError.range(e, 0, null, "exponent"));
      if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
      if (e === 0) return 1;
      if (this < -9007199254740991.0 || this > 9007199254740991.0) {
        dart.throw(new core.RangeError.range(this, -9007199254740991.0, 9007199254740991.0, "receiver"));
      }
      if (e > 9007199254740991.0) {
        dart.throw(new core.RangeError.range(e, 0, 9007199254740991.0, "exponent"));
      }
      if (m > 9007199254740991.0) {
        dart.throw(new core.RangeError.range(e, 1, 9007199254740991.0, "modulus"));
      }
      if (m > 94906265) {
        return core._BigIntImpl.from(this).modPow(core._BigIntImpl.from(e), core._BigIntImpl.from(m)).toInt();
      }
      let b = this;
      if (b < 0 || b > m) {
        b = b[$modulo](m);
      }
      let r = 1;
      while (e > 0) {
        if (e[$isOdd]) {
          r = (r * b)[$modulo](m);
        }
        e = (e / 2)[$truncate]();
        b = (b * b)[$modulo](m);
      }
      return r;
    }
    static _binaryGcd(x, y, inv) {
      let s = 1;
      if (!inv) {
        while (x[$isEven] && y[$isEven]) {
          x = (x / 2)[$truncate]();
          y = (y / 2)[$truncate]();
          s = s * 2;
        }
        if (y[$isOdd]) {
          let t = x;
          x = y;
          y = t;
        }
      }
      let ac = x[$isEven];
      let u = x;
      let v = y;
      let a = 1;
      let b = 0;
      let c = 0;
      let d = 1;
      do {
        while (u[$isEven]) {
          u = (u / 2)[$truncate]();
          if (ac) {
            if (!a[$isEven] || !b[$isEven]) {
              a = a + y;
              b = b - x;
            }
            a = (a / 2)[$truncate]();
          } else if (!b[$isEven]) {
            b = b - x;
          }
          b = (b / 2)[$truncate]();
        }
        while (v[$isEven]) {
          v = (v / 2)[$truncate]();
          if (ac) {
            if (!c[$isEven] || !d[$isEven]) {
              c = c + y;
              d = d - x;
            }
            c = (c / 2)[$truncate]();
          } else if (!d[$isEven]) {
            d = d - x;
          }
          d = (d / 2)[$truncate]();
        }
        if (u >= v) {
          u = u - v;
          if (ac) a = a - c;
          b = b - d;
        } else {
          v = v - u;
          if (ac) c = c - a;
          d = d - b;
        }
      } while (u !== 0);
      if (!inv) return s * v;
      if (v !== 1) dart.throw(core.Exception.new("Not coprime"));
      if (d < 0) {
        d = d + x;
        if (d < 0) d = d + x;
      } else if (d > x) {
        d = d - x;
        if (d > x) d = d - x;
      }
      return d;
    }
    [$modInverse](m) {
      if (m == null) dart.argumentError(m);
      if (m <= 0) dart.throw(new core.RangeError.range(m, 1, null, "modulus"));
      if (m === 1) return 0;
      let t = this;
      if (t < 0 || t >= m) t = t[$modulo](m);
      if (t === 1) return 1;
      if (t === 0 || t[$isEven] && m[$isEven]) {
        dart.throw(core.Exception.new("Not coprime"));
      }
      return _interceptors.JSNumber._binaryGcd(m, t, true);
    }
    [$gcd](other) {
      if (other == null) dart.argumentError(other);
      if (!core.int.is(this)) _js_helper.throwArgumentErrorValue(this);
      let x = this[$abs]();
      let y = other[$abs]();
      if (x === 0) return y;
      if (y === 0) return x;
      if (x === 1 || y === 1) return 1;
      return _interceptors.JSNumber._binaryGcd(x, y, false);
    }
    static _bitCount(i) {
      i = _interceptors.JSNumber._shru(i, 0) - (_interceptors.JSNumber._shru(i, 1) & 1431655765);
      i = (i & 858993459) + (_interceptors.JSNumber._shru(i, 2) & 858993459);
      i = 252645135 & i + _interceptors.JSNumber._shru(i, 4);
      i = i + _interceptors.JSNumber._shru(i, 8);
      i = i + _interceptors.JSNumber._shru(i, 16);
      return i & 63;
    }
    static _shru(value, shift) {
      if (value == null) dart.nullFailed(I[19], 607, 24, "value");
      if (shift == null) dart.nullFailed(I[19], 607, 35, "shift");
      return value >>> shift;
    }
    static _shrs(value, shift) {
      if (value == null) dart.nullFailed(I[19], 610, 24, "value");
      if (shift == null) dart.nullFailed(I[19], 610, 35, "shift");
      return value >> shift;
    }
    static _ors(a, b) {
      if (a == null) dart.nullFailed(I[19], 613, 23, "a");
      if (b == null) dart.nullFailed(I[19], 613, 30, "b");
      return a | b;
    }
    static _spread(i) {
      i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 1));
      i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 2));
      i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 4));
      i = _interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 8));
      i = _interceptors.JSNumber._shru(_interceptors.JSNumber._ors(i, _interceptors.JSNumber._shrs(i, 16)), 0);
      return i;
    }
    [$bitNot]() {
      return ~this >>> 0;
    }
  };
  (_interceptors.JSNumber.new = function() {
    _interceptors.JSNumber.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSNumber.prototype;
  dart.addTypeTests(_interceptors.JSNumber);
  dart.addTypeCaches(_interceptors.JSNumber);
  _interceptors.JSNumber[dart.implements] = () => [core.int, core.double];
  dart.setMethodSignature(_interceptors.JSNumber, () => ({
    __proto__: dart.getMethods(_interceptors.JSNumber.__proto__),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$remainder]: dart.fnType(_interceptors.JSNumber, [core.num]),
    [$abs]: dart.fnType(_interceptors.JSNumber, []),
    [$toInt]: dart.fnType(core.int, []),
    [$truncate]: dart.fnType(core.int, []),
    [$ceil]: dart.fnType(core.int, []),
    [$floor]: dart.fnType(core.int, []),
    [$round]: dart.fnType(core.int, []),
    [$ceilToDouble]: dart.fnType(core.double, []),
    [$floorToDouble]: dart.fnType(core.double, []),
    [$roundToDouble]: dart.fnType(core.double, []),
    [$truncateToDouble]: dart.fnType(core.double, []),
    [$clamp]: dart.fnType(core.num, [core.num, core.num]),
    [$toDouble]: dart.fnType(core.double, []),
    [$toStringAsFixed]: dart.fnType(core.String, [core.int]),
    [$toStringAsExponential]: dart.fnType(core.String, [], [dart.nullable(core.int)]),
    [$toStringAsPrecision]: dart.fnType(core.String, [core.int]),
    [$toRadixString]: dart.fnType(core.String, [core.int]),
    [$_negate]: dart.fnType(_interceptors.JSNumber, []),
    [$plus]: dart.fnType(_interceptors.JSNumber, [core.num]),
    [$minus]: dart.fnType(_interceptors.JSNumber, [core.num]),
    [$divide]: dart.fnType(core.double, [core.num]),
    [$times]: dart.fnType(_interceptors.JSNumber, [core.num]),
    [$modulo]: dart.fnType(_interceptors.JSNumber, [core.num]),
    [_isInt32]: dart.fnType(core.bool, [core.num]),
    [$floorDivide]: dart.fnType(core.int, [core.num]),
    [_tdivSlow]: dart.fnType(core.int, [core.num]),
    [$leftShift]: dart.fnType(core.int, [core.num]),
    [_shlPositive]: dart.fnType(core.int, [core.num]),
    [$rightShift]: dart.fnType(core.int, [core.num]),
    [_shrOtherPositive]: dart.fnType(core.int, [core.num]),
    [_shrBothPositive]: dart.fnType(core.int, [core.num]),
    [$bitAnd]: dart.fnType(core.int, [core.num]),
    [$bitOr]: dart.fnType(core.int, [core.num]),
    [$bitXor]: dart.fnType(core.int, [core.num]),
    [$lessThan]: dart.fnType(core.bool, [core.num]),
    [$greaterThan]: dart.fnType(core.bool, [core.num]),
    [$lessOrEquals]: dart.fnType(core.bool, [core.num]),
    [$greaterOrEquals]: dart.fnType(core.bool, [core.num]),
    [$toUnsigned]: dart.fnType(core.int, [core.int]),
    [$toSigned]: dart.fnType(core.int, [core.int]),
    [$modPow]: dart.fnType(core.int, [core.int, core.int]),
    [$modInverse]: dart.fnType(core.int, [core.int]),
    [$gcd]: dart.fnType(core.int, [core.int]),
    [$bitNot]: dart.fnType(core.int, [])
  }));
  dart.setGetterSignature(_interceptors.JSNumber, () => ({
    __proto__: dart.getGetters(_interceptors.JSNumber.__proto__),
    [$isNegative]: core.bool,
    [$isNaN]: core.bool,
    [$isInfinite]: core.bool,
    [$isFinite]: core.bool,
    [$sign]: _interceptors.JSNumber,
    [$isEven]: core.bool,
    [$isOdd]: core.bool,
    [$bitLength]: core.int
  }));
  dart.setLibraryUri(_interceptors.JSNumber, I[16]);
  dart.defineLazy(_interceptors.JSNumber, {
    /*_interceptors.JSNumber._MIN_INT32*/get _MIN_INT32() {
      return -2147483648;
    },
    /*_interceptors.JSNumber._MAX_INT32*/get _MAX_INT32() {
      return 2147483647;
    }
  }, false);
  dart.definePrimitiveHashCode(_interceptors.JSNumber.prototype);
  dart.registerExtension("Number", _interceptors.JSNumber);
  var _defaultSplit = dart.privateName(_interceptors, "_defaultSplit");
  _interceptors.JSString = class JSString extends _interceptors.Interceptor {
    [$codeUnitAt](index) {
      if (index == null) dart.argumentError(index);
      let len = this.length;
      if (index < 0 || index >= len) {
        dart.throw(new core.IndexError.new(index, this, "index", null, len));
      }
      return this.charCodeAt(index);
    }
    [$allMatches](string, start = 0) {
      if (string == null) dart.argumentError(string);
      if (start == null) dart.argumentError(start);
      let len = string.length;
      if (0 > start || start > len) {
        dart.throw(new core.RangeError.range(start, 0, len));
      }
      return _js_helper.allMatchesInStringUnchecked(this, string, start);
    }
    [$matchAsPrefix](string, start = 0) {
      if (string == null) dart.argumentError(string);
      if (start == null) dart.argumentError(start);
      let stringLength = string.length;
      if (start < 0 || start > stringLength) {
        dart.throw(new core.RangeError.range(start, 0, stringLength));
      }
      let thisLength = this.length;
      if (start + thisLength > stringLength) return null;
      for (let i = 0; i < thisLength; i = i + 1) {
        if (string[$codeUnitAt](start + i) !== this[$codeUnitAt](i)) {
          return null;
        }
      }
      return new _js_helper.StringMatch.new(start, string, this);
    }
    [$plus](other) {
      if (other == null) dart.argumentError(other);
      return this + other;
    }
    [$endsWith](other) {
      if (other == null) dart.argumentError(other);
      let otherLength = other.length;
      let thisLength = this.length;
      if (otherLength > thisLength) return false;
      return other === this[$substring](thisLength - otherLength);
    }
    [$replaceAll](from, to) {
      if (from == null) dart.nullFailed(I[20], 67, 29, "from");
      if (to == null) dart.argumentError(to);
      return _js_helper.stringReplaceAllUnchecked(this, from, to);
    }
    [$replaceAllMapped](from, convert) {
      if (from == null) dart.nullFailed(I[20], 72, 35, "from");
      if (convert == null) dart.nullFailed(I[20], 72, 64, "convert");
      return this[$splitMapJoin](from, {onMatch: convert});
    }
    [$splitMapJoin](from, opts) {
      if (from == null) dart.nullFailed(I[20], 77, 31, "from");
      let onMatch = opts && 'onMatch' in opts ? opts.onMatch : null;
      let onNonMatch = opts && 'onNonMatch' in opts ? opts.onNonMatch : null;
      return _js_helper.stringReplaceAllFuncUnchecked(this, from, onMatch, onNonMatch);
    }
    [$replaceFirst](from, to, startIndex = 0) {
      if (from == null) dart.nullFailed(I[20], 83, 31, "from");
      if (to == null) dart.argumentError(to);
      if (startIndex == null) dart.argumentError(startIndex);
      core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
      return _js_helper.stringReplaceFirstUnchecked(this, from, to, startIndex);
    }
    [$replaceFirstMapped](from, replace, startIndex = 0) {
      if (from == null) dart.nullFailed(I[20], 91, 15, "from");
      if (replace == null) dart.argumentError(replace);
      if (startIndex == null) dart.argumentError(startIndex);
      core.RangeError.checkValueInInterval(startIndex, 0, this.length, "startIndex");
      return _js_helper.stringReplaceFirstMappedUnchecked(this, from, replace, startIndex);
    }
    [$split](pattern) {
      if (pattern == null) dart.argumentError(pattern);
      if (typeof pattern == 'string') {
        return T$.JSArrayOfString().of(this.split(pattern));
      } else if (_js_helper.JSSyntaxRegExp.is(pattern) && _js_helper.regExpCaptureCount(pattern) === 0) {
        let re = _js_helper.regExpGetNative(pattern);
        return T$.JSArrayOfString().of(this.split(re));
      } else {
        return this[_defaultSplit](pattern);
      }
    }
    [$replaceRange](start, end, replacement) {
      if (start == null) dart.argumentError(start);
      if (replacement == null) dart.argumentError(replacement);
      let e = core.RangeError.checkValidRange(start, end, this.length);
      return _js_helper.stringReplaceRangeUnchecked(this, start, e, replacement);
    }
    [_defaultSplit](pattern) {
      if (pattern == null) dart.nullFailed(I[20], 117, 38, "pattern");
      let result = T$.JSArrayOfString().of([]);
      let start = 0;
      let length = 1;
      for (let match of pattern[$allMatches](this)) {
        let matchStart = match.start;
        let matchEnd = match.end;
        length = matchEnd - matchStart;
        if (length === 0 && start === matchStart) {
          continue;
        }
        let end = matchStart;
        result[$add](this[$substring](start, end));
        start = matchEnd;
      }
      if (start < this.length || length > 0) {
        result[$add](this[$substring](start));
      }
      return result;
    }
    [$startsWith](pattern, index = 0) {
      if (pattern == null) dart.nullFailed(I[20], 148, 27, "pattern");
      if (index == null) dart.argumentError(index);
      let length = this.length;
      if (index < 0 || index > length) {
        dart.throw(new core.RangeError.range(index, 0, this.length));
      }
      if (typeof pattern == 'string') {
        let other = pattern;
        let otherLength = other.length;
        let endIndex = index + otherLength;
        if (endIndex > length) return false;
        return other === this.substring(index, endIndex);
      }
      return pattern[$matchAsPrefix](this, index) != null;
    }
    [$substring](startIndex, _endIndex = null) {
      let t21;
      if (startIndex == null) dart.argumentError(startIndex);
      let length = this.length;
      let endIndex = (t21 = _endIndex, t21 == null ? length : t21);
      if (startIndex < 0) dart.throw(new core.RangeError.value(startIndex));
      if (startIndex > dart.notNull(endIndex)) dart.throw(new core.RangeError.value(startIndex));
      if (dart.notNull(endIndex) > length) dart.throw(new core.RangeError.value(endIndex));
      return this.substring(startIndex, endIndex);
    }
    [$toLowerCase]() {
      return this.toLowerCase();
    }
    [$toUpperCase]() {
      return this.toUpperCase();
    }
    static _isWhitespace(codeUnit) {
      if (codeUnit < 256) {
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
          {
            return true;
          }
          default:
          {
            return false;
          }
        }
      }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
        {
          return true;
        }
        default:
        {
          return false;
        }
      }
    }
    static _skipLeadingWhitespace(string, index) {
      if (string == null) dart.nullFailed(I[20], 247, 44, "string");
      if (index == null) dart.argumentError(index);
      let stringLength = string.length;
      while (index < stringLength) {
        let codeUnit = string[$codeUnitAt](index);
        if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
          break;
        }
        index = index + 1;
      }
      return index;
    }
    static _skipTrailingWhitespace(string, index) {
      if (string == null) dart.nullFailed(I[20], 266, 45, "string");
      if (index == null) dart.argumentError(index);
      while (index > 0) {
        let codeUnit = string[$codeUnitAt](index - 1);
        if (codeUnit !== 32 && codeUnit !== 13 && !_interceptors.JSString._isWhitespace(codeUnit)) {
          break;
        }
        index = index - 1;
      }
      return index;
    }
    [$trim]() {
      let result = this.trim();
      let length = result.length;
      if (length === 0) return result;
      let firstCode = result[$codeUnitAt](0);
      let startIndex = 0;
      if (firstCode === 133) {
        startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
        if (startIndex === length) return "";
      }
      let endIndex = length;
      let lastCode = result[$codeUnitAt](endIndex - 1);
      if (lastCode === 133) {
        endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
      }
      if (startIndex === 0 && endIndex === length) return result;
      return result.substring(startIndex, endIndex);
    }
    [$trimLeft]() {
      let result = null;
      let startIndex = 0;
      if (typeof this.trimLeft != "undefined") {
        result = this.trimLeft();
        if (result.length === 0) return result;
        let firstCode = result[$codeUnitAt](0);
        if (firstCode === 133) {
          startIndex = _interceptors.JSString._skipLeadingWhitespace(result, 1);
        }
      } else {
        result = this;
        startIndex = _interceptors.JSString._skipLeadingWhitespace(this, 0);
      }
      if (startIndex === 0) return result;
      if (startIndex === result.length) return "";
      return result.substring(startIndex);
    }
    [$trimRight]() {
      let result = null;
      let endIndex = 0;
      if (typeof this.trimRight != "undefined") {
        result = this.trimRight();
        endIndex = result.length;
        if (endIndex === 0) return result;
        let lastCode = result[$codeUnitAt](endIndex - 1);
        if (lastCode === 133) {
          endIndex = _interceptors.JSString._skipTrailingWhitespace(result, endIndex - 1);
        }
      } else {
        result = this;
        endIndex = _interceptors.JSString._skipTrailingWhitespace(this, this.length);
      }
      if (endIndex === result.length) return result;
      if (endIndex === 0) return "";
      return result.substring(0, endIndex);
    }
    [$times](times) {
      if (times == null) dart.argumentError(times);
      if (0 >= times) return "";
      if (times === 1 || this.length === 0) return this;
      if (times !== times >>> 0) {
        dart.throw(C[17] || CT.C17);
      }
      let result = "";
      let s = this;
      while (true) {
        if ((times & 1) === 1) result = s + result;
        times = times >>> 1;
        if (times === 0) break;
        s = s + s;
      }
      return result;
    }
    [$padLeft](width, padding = " ") {
      if (width == null) dart.argumentError(width);
      if (padding == null) dart.nullFailed(I[20], 390, 48, "padding");
      let delta = width - this.length;
      if (delta <= 0) return this;
      return padding[$times](delta) + this;
    }
    [$padRight](width, padding = " ") {
      if (width == null) dart.argumentError(width);
      if (padding == null) dart.nullFailed(I[20], 397, 49, "padding");
      let delta = width - this.length;
      if (delta <= 0) return this;
      return this[$plus](padding[$times](delta));
    }
    get [$codeUnits]() {
      return new _internal.CodeUnits.new(this);
    }
    get [$runes]() {
      return new core.Runes.new(this);
    }
    [$indexOf](pattern, start = 0) {
      if (pattern == null) dart.argumentError(pattern);
      if (start == null) dart.argumentError(start);
      if (start < 0 || start > this.length) {
        dart.throw(new core.RangeError.range(start, 0, this.length));
      }
      if (typeof pattern == 'string') {
        return _js_helper.stringIndexOfStringUnchecked(this, pattern, start);
      }
      if (_js_helper.JSSyntaxRegExp.is(pattern)) {
        let re = pattern;
        let match = _js_helper.firstMatchAfter(re, this, start);
        return match == null ? -1 : match.start;
      }
      let length = this.length;
      for (let i = start; i <= length; i = i + 1) {
        if (pattern[$matchAsPrefix](this, i) != null) return i;
      }
      return -1;
    }
    [$lastIndexOf](pattern, _start = null) {
      let t21;
      if (pattern == null) dart.argumentError(pattern);
      let length = this.length;
      let start = (t21 = _start, t21 == null ? length : t21);
      if (dart.notNull(start) < 0 || dart.notNull(start) > length) {
        dart.throw(new core.RangeError.range(start, 0, length));
      }
      if (typeof pattern == 'string') {
        let other = pattern;
        if (dart.notNull(start) + other.length > length) {
          start = length - other.length;
        }
        return _js_helper.stringLastIndexOfUnchecked(this, other, start);
      }
      for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
        if (pattern[$matchAsPrefix](this, i) != null) return i;
      }
      return -1;
    }
    [$contains](other, startIndex = 0) {
      if (other == null) dart.argumentError(other);
      if (startIndex == null) dart.argumentError(startIndex);
      if (startIndex < 0 || startIndex > this.length) {
        dart.throw(new core.RangeError.range(startIndex, 0, this.length));
      }
      return _js_helper.stringContainsUnchecked(this, other, startIndex);
    }
    get [$isEmpty]() {
      return this.length === 0;
    }
    get [$isNotEmpty]() {
      return !this[$isEmpty];
    }
    [$compareTo](other) {
      core.String.as(other);
      if (other == null) dart.argumentError(other);
      return this === other ? 0 : this < other ? -1 : 1;
    }
    [$toString]() {
      return this;
    }
    get [$hashCode]() {
      let hash = 0;
      let length = this.length;
      for (let i = 0; i < length; i = i + 1) {
        hash = 536870911 & hash + this.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash = hash ^ hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash = hash ^ hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    }
    get [$runtimeType]() {
      return dart.wrapType(core.String);
    }
    get [$length]() {
      return this.length;
    }
    [$_get](index) {
      if (index == null) dart.argumentError(index);
      if (index >= this.length || index < 0) {
        dart.throw(_js_helper.diagnoseIndexError(this, index));
      }
      return this[index];
    }
  };
  (_interceptors.JSString.new = function() {
    _interceptors.JSString.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSString.prototype;
  dart.addTypeTests(_interceptors.JSString);
  dart.addTypeCaches(_interceptors.JSString);
  _interceptors.JSString[dart.implements] = () => [core.String, _interceptors.JSIndexable$(core.String)];
  dart.setMethodSignature(_interceptors.JSString, () => ({
    __proto__: dart.getMethods(_interceptors.JSString.__proto__),
    [$codeUnitAt]: dart.fnType(core.int, [core.int]),
    [$allMatches]: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    [$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    [$plus]: dart.fnType(core.String, [core.String]),
    [$endsWith]: dart.fnType(core.bool, [core.String]),
    [$replaceAll]: dart.fnType(core.String, [core.Pattern, core.String]),
    [$replaceAllMapped]: dart.fnType(core.String, [core.Pattern, dart.fnType(core.String, [core.Match])]),
    [$splitMapJoin]: dart.fnType(core.String, [core.Pattern], {onMatch: dart.nullable(dart.fnType(core.String, [core.Match])), onNonMatch: dart.nullable(dart.fnType(core.String, [core.String]))}, {}),
    [$replaceFirst]: dart.fnType(core.String, [core.Pattern, core.String], [core.int]),
    [$replaceFirstMapped]: dart.fnType(core.String, [core.Pattern, dart.fnType(core.String, [core.Match])], [core.int]),
    [$split]: dart.fnType(core.List$(core.String), [core.Pattern]),
    [$replaceRange]: dart.fnType(core.String, [core.int, dart.nullable(core.int), core.String]),
    [_defaultSplit]: dart.fnType(core.List$(core.String), [core.Pattern]),
    [$startsWith]: dart.fnType(core.bool, [core.Pattern], [core.int]),
    [$substring]: dart.fnType(core.String, [core.int], [dart.nullable(core.int)]),
    [$toLowerCase]: dart.fnType(core.String, []),
    [$toUpperCase]: dart.fnType(core.String, []),
    [$trim]: dart.fnType(core.String, []),
    [$trimLeft]: dart.fnType(core.String, []),
    [$trimRight]: dart.fnType(core.String, []),
    [$times]: dart.fnType(core.String, [core.int]),
    [$padLeft]: dart.fnType(core.String, [core.int], [core.String]),
    [$padRight]: dart.fnType(core.String, [core.int], [core.String]),
    [$indexOf]: dart.fnType(core.int, [core.Pattern], [core.int]),
    [$lastIndexOf]: dart.fnType(core.int, [core.Pattern], [dart.nullable(core.int)]),
    [$contains]: dart.fnType(core.bool, [core.Pattern], [core.int]),
    [$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(_interceptors.JSString, () => ({
    __proto__: dart.getGetters(_interceptors.JSString.__proto__),
    [$codeUnits]: core.List$(core.int),
    [$runes]: core.Runes,
    [$isEmpty]: core.bool,
    [$isNotEmpty]: core.bool,
    [$length]: core.int
  }));
  dart.setLibraryUri(_interceptors.JSString, I[16]);
  dart.definePrimitiveHashCode(_interceptors.JSString.prototype);
  dart.registerExtension("String", _interceptors.JSString);
  _interceptors.getInterceptor = function getInterceptor(obj) {
    return obj;
  };
  _interceptors.findInterceptorConstructorForType = function findInterceptorConstructorForType(type) {
  };
  _interceptors.findConstructorForNativeSubclassType = function findConstructorForNativeSubclassType(type, name) {
    if (name == null) dart.nullFailed(I[17], 239, 57, "name");
  };
  _interceptors.getNativeInterceptor = function getNativeInterceptor(object) {
  };
  _interceptors.setDispatchProperty = function setDispatchProperty(object, value) {
  };
  _interceptors.findInterceptorForType = function findInterceptorForType(type) {
  };
  dart.defineLazy(_interceptors, {
    /*_interceptors.jsNull*/get jsNull() {
      return new _interceptors.JSNull.new();
    }
  }, false);
  var _string$ = dart.privateName(_internal, "_string");
  var _closeGap = dart.privateName(collection, "_closeGap");
  var _filter = dart.privateName(collection, "_filter");
  const _is_ListMixin_default = Symbol('_is_ListMixin_default');
  collection.ListMixin$ = dart.generic(E => {
    var ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
    var JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    var ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
    class ListMixin extends core.Object {
      get iterator() {
        return new (ListIteratorOfE()).new(this);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[23], 78, 19, "index");
        return this[$_get](index);
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(I[23], 80, 38, "other");
        return FollowedByIterableOfE().firstEfficient(this, other);
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[23], 83, 21, "action");
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          action(this[$_get](i));
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
      }
      get isEmpty() {
        return this[$length] === 0;
      }
      get isNotEmpty() {
        return !dart.test(this[$isEmpty]);
      }
      get first() {
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        return this[$_get](0);
      }
      set first(value) {
        E.as(value);
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        this[$_set](0, value);
      }
      get last() {
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        return this[$_get](dart.notNull(this[$length]) - 1);
      }
      set last(value) {
        E.as(value);
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        this[$_set](dart.notNull(this[$length]) - 1, value);
      }
      get single() {
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        if (dart.notNull(this[$length]) > 1) dart.throw(_internal.IterableElementError.tooMany());
        return this[$_get](0);
      }
      contains(element) {
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.equals(this[$_get](i), element)) return true;
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      every(test) {
        if (test == null) dart.nullFailed(I[23], 135, 19, "test");
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (!dart.test(test(this[$_get](i)))) return false;
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return true;
      }
      any(test) {
        if (test == null) dart.nullFailed(I[23], 146, 17, "test");
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.test(test(this[$_get](i)))) return true;
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[23], 157, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          let element = this[$_get](i);
          if (dart.test(test(element))) return element;
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[23], 170, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
          let element = this[$_get](i);
          if (dart.test(test(element))) return element;
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[23], 183, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        let match = null;
        let match$35isSet = false;
        function match$35get() {
          return match$35isSet ? match : dart.throw(new _internal.LateError.localNI("match"));
        }
        dart.fn(match$35get, VoidToE());
        function match$35set(t24) {
          match$35isSet = true;
          return match = t24;
        }
        dart.fn(match$35set, ETodynamic());
        let matchFound = false;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          let element = this[$_get](i);
          if (dart.test(test(element))) {
            if (matchFound) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            matchFound = true;
            match$35set(element);
          }
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (matchFound) return match$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      join(separator = "") {
        let t26;
        if (separator == null) dart.nullFailed(I[23], 205, 23, "separator");
        if (this[$length] === 0) return "";
        let buffer = (t26 = new core.StringBuffer.new(), (() => {
          t26.writeAll(this, separator);
          return t26;
        })());
        return dart.toString(buffer);
      }
      where(test) {
        if (test == null) dart.nullFailed(I[23], 211, 26, "test");
        return new (WhereIterableOfE()).new(this, test);
      }
      whereType(T) {
        return new (_internal.WhereTypeIterable$(T)).new(this);
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[23], 215, 24, "f");
        return new (_internal.MappedListIterable$(E, T)).new(this, f);
      }
      expand(T, f) {
        if (f == null) dart.nullFailed(I[23], 217, 37, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[23], 220, 14, "combine");
        let length = this[$length];
        if (length === 0) dart.throw(_internal.IterableElementError.noElement());
        let value = this[$_get](0);
        for (let i = 1; i < dart.notNull(length); i = i + 1) {
          value = combine(value, this[$_get](i));
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return value;
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[23], 233, 31, "combine");
        let value = initialValue;
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          value = combine(value, this[$_get](i));
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return value;
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[23], 245, 24, "count");
        return new (SubListIterableOfE()).new(this, count, null);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[23], 247, 30, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[23], 251, 24, "count");
        return new (SubListIterableOfE()).new(this, 0, count);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[23], 253, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[23], 257, 24, "growable");
        if (dart.test(this[$isEmpty])) return ListOfE().empty({growable: growable});
        let first = this[$_get](0);
        let result = ListOfE().filled(this[$length], first, {growable: growable});
        for (let i = 1; i < dart.notNull(this[$length]); i = i + 1) {
          result[$_set](i, this[$_get](i));
        }
        return result;
      }
      toSet() {
        let result = new (_HashSetOfE()).new();
        for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
          result.add(this[$_get](i));
        }
        return result;
      }
      add(element) {
        let t26;
        E.as(element);
        this[$_set]((t26 = this[$length], this[$length] = dart.notNull(t26) + 1, t26), element);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[23], 281, 27, "iterable");
        let i = this[$length];
        for (let element of iterable) {
          if (!(this[$length] == i || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, I[23], 284, 14, "this.length == i || (throw ConcurrentModificationError(this))");
          this[$add](element);
          i = dart.notNull(i) + 1;
        }
      }
      remove(element) {
        for (let i = 0; i < dart.notNull(this[$length]); i = i + 1) {
          if (dart.equals(this[$_get](i), element)) {
            this[_closeGap](i, i + 1);
            return true;
          }
        }
        return false;
      }
      [_closeGap](start, end) {
        if (start == null) dart.nullFailed(I[23], 302, 22, "start");
        if (end == null) dart.nullFailed(I[23], 302, 33, "end");
        let length = this[$length];
        if (!(0 <= dart.notNull(start))) dart.assertFailed(null, I[23], 304, 12, "0 <= start");
        if (!(dart.notNull(start) < dart.notNull(end))) dart.assertFailed(null, I[23], 305, 12, "start < end");
        if (!(dart.notNull(end) <= dart.notNull(length))) dart.assertFailed(null, I[23], 306, 12, "end <= length");
        let size = dart.notNull(end) - dart.notNull(start);
        for (let i = end; dart.notNull(i) < dart.notNull(length); i = dart.notNull(i) + 1) {
          this[$_set](dart.notNull(i) - size, this[$_get](i));
        }
        this[$length] = dart.notNull(length) - size;
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[23], 314, 25, "test");
        this[_filter](test, false);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[23], 318, 25, "test");
        this[_filter](test, true);
      }
      [_filter](test, retainMatching) {
        if (test == null) dart.nullFailed(I[23], 322, 21, "test");
        if (retainMatching == null) dart.nullFailed(I[23], 322, 43, "retainMatching");
        let retained = JSArrayOfE().of([]);
        let length = this[$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          let element = this[$_get](i);
          if (test(element) == retainMatching) {
            retained[$add](element);
          }
          if (length != this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (retained[$length] != this[$length]) {
          this[$setRange](0, retained[$length], retained);
          this[$length] = retained[$length];
        }
      }
      clear() {
        this[$length] = 0;
      }
      cast(R) {
        return core.List.castFrom(E, R, this);
      }
      removeLast() {
        if (this[$length] === 0) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let result = this[$_get](dart.notNull(this[$length]) - 1);
        this[$length] = dart.notNull(this[$length]) - 1;
        return result;
      }
      sort(compare = null) {
        let t26;
        _internal.Sort.sort(E, this, (t26 = compare, t26 == null ? C[18] || CT.C18 : t26));
      }
      static _compareAny(a, b) {
        return core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b));
      }
      shuffle(random = null) {
        random == null ? random = math.Random.new() : null;
        if (random == null) dart.throw("!");
        let length = this[$length];
        while (dart.notNull(length) > 1) {
          let pos = random.nextInt(length);
          length = dart.notNull(length) - 1;
          let tmp = this[$_get](length);
          this[$_set](length, this[$_get](pos));
          this[$_set](pos, tmp);
        }
      }
      asMap() {
        return new (ListMapViewOfE()).new(this);
      }
      ['+'](other) {
        ListOfE().as(other);
        if (other == null) dart.nullFailed(I[23], 380, 30, "other");
        return (() => {
          let t26 = ListOfE().of(this);
          t26[$addAll](other);
          return t26;
        })();
      }
      sublist(start, end = null) {
        if (start == null) dart.nullFailed(I[23], 382, 23, "start");
        let listLength = this[$length];
        end == null ? end = listLength : null;
        if (end == null) dart.throw("!");
        core.RangeError.checkValidRange(start, end, listLength);
        return ListOfE().from(this[$getRange](start, end));
      }
      getRange(start, end) {
        if (start == null) dart.nullFailed(I[23], 391, 28, "start");
        if (end == null) dart.nullFailed(I[23], 391, 39, "end");
        core.RangeError.checkValidRange(start, end, this[$length]);
        return new (SubListIterableOfE()).new(this, start, end);
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[23], 396, 24, "start");
        if (end == null) dart.nullFailed(I[23], 396, 35, "end");
        core.RangeError.checkValidRange(start, end, this[$length]);
        if (dart.notNull(end) > dart.notNull(start)) {
          this[_closeGap](start, end);
        }
      }
      fillRange(start, end, fill = null) {
        if (start == null) dart.nullFailed(I[23], 403, 22, "start");
        if (end == null) dart.nullFailed(I[23], 403, 33, "end");
        EN().as(fill);
        let value = E.as(fill);
        core.RangeError.checkValidRange(start, end, this[$length]);
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          this[$_set](i, value);
        }
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[23], 413, 21, "start");
        if (end == null) dart.nullFailed(I[23], 413, 32, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[23], 413, 49, "iterable");
        if (skipCount == null) dart.nullFailed(I[23], 413, 64, "skipCount");
        core.RangeError.checkValidRange(start, end, this[$length]);
        let length = dart.notNull(end) - dart.notNull(start);
        if (length === 0) return;
        core.RangeError.checkNotNegative(skipCount, "skipCount");
        let otherList = null;
        let otherStart = null;
        if (ListOfE().is(iterable)) {
          otherList = iterable;
          otherStart = skipCount;
        } else {
          otherList = iterable[$skip](skipCount)[$toList]({growable: false});
          otherStart = 0;
        }
        if (dart.notNull(otherStart) + length > dart.notNull(otherList[$length])) {
          dart.throw(_internal.IterableElementError.tooFew());
        }
        if (dart.notNull(otherStart) < dart.notNull(start)) {
          for (let i = length - 1; i >= 0; i = i - 1) {
            this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
          }
        } else {
          for (let i = 0; i < length; i = i + 1) {
            this[$_set](dart.notNull(start) + i, otherList[$_get](dart.notNull(otherStart) + i));
          }
        }
      }
      replaceRange(start, end, newContents) {
        if (start == null) dart.nullFailed(I[23], 444, 25, "start");
        if (end == null) dart.nullFailed(I[23], 444, 36, "end");
        IterableOfE().as(newContents);
        if (newContents == null) dart.nullFailed(I[23], 444, 53, "newContents");
        core.RangeError.checkValidRange(start, end, this[$length]);
        if (start == this[$length]) {
          this[$addAll](newContents);
          return;
        }
        if (!_internal.EfficientLengthIterable.is(newContents)) {
          newContents = newContents[$toList]();
        }
        let removeLength = dart.notNull(end) - dart.notNull(start);
        let insertLength = newContents[$length];
        if (removeLength >= dart.notNull(insertLength)) {
          let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
          this[$setRange](start, insertEnd, newContents);
          if (removeLength > dart.notNull(insertLength)) {
            this[_closeGap](insertEnd, end);
          }
        } else if (end == this[$length]) {
          let i = start;
          for (let element of newContents) {
            if (dart.notNull(i) < dart.notNull(end)) {
              this[$_set](i, element);
            } else {
              this[$add](element);
            }
            i = dart.notNull(i) + 1;
          }
        } else {
          let delta = dart.notNull(insertLength) - removeLength;
          let oldLength = this[$length];
          let insertEnd = dart.notNull(start) + dart.notNull(insertLength);
          for (let i = dart.notNull(oldLength) - delta; i < dart.notNull(oldLength); i = i + 1) {
            this[$add](this[$_get](i > 0 ? i : 0));
          }
          if (insertEnd < dart.notNull(oldLength)) {
            this[$setRange](insertEnd, oldLength, this, end);
          }
          this[$setRange](start, insertEnd, newContents);
        }
      }
      indexOf(element, start = 0) {
        if (start == null) dart.nullFailed(I[23], 485, 37, "start");
        if (dart.notNull(start) < 0) start = 0;
        for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
          if (dart.equals(this[$_get](i), element)) return i;
        }
        return -1;
      }
      indexWhere(test, start = 0) {
        if (test == null) dart.nullFailed(I[23], 493, 23, "test");
        if (start == null) dart.nullFailed(I[23], 493, 45, "start");
        if (dart.notNull(start) < 0) start = 0;
        for (let i = start; dart.notNull(i) < dart.notNull(this[$length]); i = dart.notNull(i) + 1) {
          if (dart.test(test(this[$_get](i)))) return i;
        }
        return -1;
      }
      lastIndexOf(element, start = null) {
        if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
        if (start == null) dart.throw("!");
        for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
          if (dart.equals(this[$_get](i), element)) return i;
        }
        return -1;
      }
      lastIndexWhere(test, start = null) {
        if (test == null) dart.nullFailed(I[23], 513, 27, "test");
        if (start == null || dart.notNull(start) >= dart.notNull(this[$length])) start = dart.notNull(this[$length]) - 1;
        if (start == null) dart.throw("!");
        for (let i = start; dart.notNull(i) >= 0; i = dart.notNull(i) - 1) {
          if (dart.test(test(this[$_get](i)))) return i;
        }
        return -1;
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[23], 525, 19, "index");
        E.as(element);
        _internal.checkNotNullable(core.int, index, "index");
        let length = this[$length];
        core.RangeError.checkValueInInterval(index, 0, length, "index");
        this[$add](element);
        if (index != length) {
          this[$setRange](dart.notNull(index) + 1, dart.notNull(length) + 1, this, index);
          this[$_set](index, element);
        }
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[23], 536, 18, "index");
        let result = this[$_get](index);
        this[_closeGap](index, dart.notNull(index) + 1);
        return result;
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(I[23], 542, 22, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[23], 542, 41, "iterable");
        core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
        if (index == this[$length]) {
          this[$addAll](iterable);
          return;
        }
        if (!_internal.EfficientLengthIterable.is(iterable) || iterable === this) {
          iterable = iterable[$toList]();
        }
        let insertionLength = iterable[$length];
        if (insertionLength === 0) {
          return;
        }
        let oldLength = this[$length];
        for (let i = dart.notNull(oldLength) - dart.notNull(insertionLength); i < dart.notNull(oldLength); i = i + 1) {
          this[$add](this[$_get](i > 0 ? i : 0));
        }
        if (iterable[$length] != insertionLength) {
          this[$length] = dart.notNull(this[$length]) - dart.notNull(insertionLength);
          dart.throw(new core.ConcurrentModificationError.new(iterable));
        }
        let oldCopyStart = dart.notNull(index) + dart.notNull(insertionLength);
        if (oldCopyStart < dart.notNull(oldLength)) {
          this[$setRange](oldCopyStart, oldLength, this, index);
        }
        this[$setAll](index, iterable);
      }
      setAll(index, iterable) {
        let t27;
        if (index == null) dart.nullFailed(I[23], 575, 19, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[23], 575, 38, "iterable");
        if (core.List.is(iterable)) {
          this[$setRange](index, dart.notNull(index) + dart.notNull(iterable[$length]), iterable);
        } else {
          for (let element of iterable) {
            this[$_set]((t27 = index, index = dart.notNull(t27) + 1, t27), element);
          }
        }
      }
      get reversed() {
        return new (ReversedListIterableOfE()).new(this);
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "[", "]");
      }
    }
    (ListMixin.new = function() {
      ;
    }).prototype = ListMixin.prototype;
    ListMixin.prototype[dart.isList] = true;
    dart.addTypeTests(ListMixin);
    ListMixin.prototype[_is_ListMixin_default] = true;
    dart.addTypeCaches(ListMixin);
    ListMixin[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(ListMixin, () => ({
      __proto__: dart.getMethods(ListMixin.__proto__),
      elementAt: dart.fnType(E, [core.int]),
      [$elementAt]: dart.fnType(E, [core.int]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      join: dart.fnType(core.String, [], [core.String]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [_closeGap]: dart.fnType(dart.void, [core.int, core.int]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [_filter]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      removeLast: dart.fnType(E, []),
      [$removeLast]: dart.fnType(E, []),
      sort: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      shuffle: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      asMap: dart.fnType(core.Map$(core.int, E), []),
      [$asMap]: dart.fnType(core.Map$(core.int, E), []),
      '+': dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      [$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      sublist: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      getRange: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      [$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      removeRange: dart.fnType(dart.void, [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      fillRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      setRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      indexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      [$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      indexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      [$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      lastIndexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      [$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      lastIndexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      [$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      removeAt: dart.fnType(E, [core.int]),
      [$removeAt]: dart.fnType(E, [core.int]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      setAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ListMixin, () => ({
      __proto__: dart.getGetters(ListMixin.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E),
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      first: E,
      [$first]: E,
      last: E,
      [$last]: E,
      single: E,
      [$single]: E,
      reversed: core.Iterable$(E),
      [$reversed]: core.Iterable$(E)
    }));
    dart.setSetterSignature(ListMixin, () => ({
      __proto__: dart.getSetters(ListMixin.__proto__),
      first: dart.nullable(core.Object),
      [$first]: dart.nullable(core.Object),
      last: dart.nullable(core.Object),
      [$last]: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(ListMixin, I[24]);
    dart.defineExtensionMethods(ListMixin, [
      'elementAt',
      'followedBy',
      'forEach',
      'contains',
      'every',
      'any',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'join',
      'where',
      'whereType',
      'map',
      'expand',
      'reduce',
      'fold',
      'skip',
      'skipWhile',
      'take',
      'takeWhile',
      'toList',
      'toSet',
      'add',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'cast',
      'removeLast',
      'sort',
      'shuffle',
      'asMap',
      '+',
      'sublist',
      'getRange',
      'removeRange',
      'fillRange',
      'setRange',
      'replaceRange',
      'indexOf',
      'indexWhere',
      'lastIndexOf',
      'lastIndexWhere',
      'insert',
      'removeAt',
      'insertAll',
      'setAll',
      'toString'
    ]);
    dart.defineExtensionAccessors(ListMixin, [
      'iterator',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last',
      'single',
      'reversed'
    ]);
    return ListMixin;
  });
  collection.ListMixin = collection.ListMixin$();
  dart.addTypeTests(collection.ListMixin, _is_ListMixin_default);
  const _is_ListBase_default = Symbol('_is_ListBase_default');
  collection.ListBase$ = dart.generic(E => {
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(E));
    class ListBase extends Object_ListMixin$36 {
      static listToString(list) {
        if (list == null) dart.nullFailed(I[23], 42, 35, "list");
        return collection.IterableBase.iterableToFullString(list, "[", "]");
      }
    }
    (ListBase.new = function() {
      ;
    }).prototype = ListBase.prototype;
    dart.addTypeTests(ListBase);
    ListBase.prototype[_is_ListBase_default] = true;
    dart.addTypeCaches(ListBase);
    dart.setLibraryUri(ListBase, I[24]);
    return ListBase;
  });
  collection.ListBase = collection.ListBase$();
  dart.addTypeTests(collection.ListBase, _is_ListBase_default);
  const _is_UnmodifiableListMixin_default = Symbol('_is_UnmodifiableListMixin_default');
  _internal.UnmodifiableListMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    class UnmodifiableListMixin extends core.Object {
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[22], 89, 25, "index");
        E.as(value);
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
        return value$;
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[22], 94, 18, "newLength");
        dart.throw(new core.UnsupportedError.new("Cannot change the length of an unmodifiable list"));
      }
      set first(element) {
        E.as(element);
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      set last(element) {
        E.as(element);
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      setAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 108, 19, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 108, 35, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      add(value) {
        E.as(value);
        dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[22], 118, 19, "index");
        E.as(element);
        dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
      }
      insertAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 123, 22, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 123, 38, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 128, 27, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to an unmodifiable list"));
      }
      remove(element) {
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[22], 138, 25, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[22], 143, 25, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      sort(compare = null) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      shuffle(random = null) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      clear() {
        dart.throw(new core.UnsupportedError.new("Cannot clear an unmodifiable list"));
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[22], 163, 18, "index");
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      removeLast() {
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[22], 173, 21, "start");
        if (end == null) dart.nullFailed(I[22], 173, 32, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 173, 49, "iterable");
        if (skipCount == null) dart.nullFailed(I[22], 173, 64, "skipCount");
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[22], 178, 24, "start");
        if (end == null) dart.nullFailed(I[22], 178, 35, "end");
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(I[22], 183, 25, "start");
        if (end == null) dart.nullFailed(I[22], 183, 36, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 183, 53, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot remove from an unmodifiable list"));
      }
      fillRange(start, end, fillValue = null) {
        if (start == null) dart.nullFailed(I[22], 188, 22, "start");
        if (end == null) dart.nullFailed(I[22], 188, 33, "end");
        EN().as(fillValue);
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable list"));
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (UnmodifiableListMixin.new = function() {
      ;
    }).prototype = UnmodifiableListMixin.prototype;
    UnmodifiableListMixin.prototype[dart.isList] = true;
    dart.addTypeTests(UnmodifiableListMixin);
    UnmodifiableListMixin.prototype[_is_UnmodifiableListMixin_default] = true;
    dart.addTypeCaches(UnmodifiableListMixin);
    UnmodifiableListMixin[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(UnmodifiableListMixin, () => ({
      __proto__: dart.getMethods(UnmodifiableListMixin.__proto__),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      setAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      sort: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      shuffle: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      removeAt: dart.fnType(E, [core.int]),
      [$removeAt]: dart.fnType(E, [core.int]),
      removeLast: dart.fnType(E, []),
      [$removeLast]: dart.fnType(E, []),
      setRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      removeRange: dart.fnType(dart.void, [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      fillRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)])
    }));
    dart.setSetterSignature(UnmodifiableListMixin, () => ({
      __proto__: dart.getSetters(UnmodifiableListMixin.__proto__),
      length: core.int,
      [$length]: core.int,
      first: dart.nullable(core.Object),
      [$first]: dart.nullable(core.Object),
      last: dart.nullable(core.Object),
      [$last]: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(UnmodifiableListMixin, I[25]);
    dart.defineExtensionMethods(UnmodifiableListMixin, [
      '_set',
      'setAll',
      'add',
      'insert',
      'insertAll',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'sort',
      'shuffle',
      'clear',
      'removeAt',
      'removeLast',
      'setRange',
      'removeRange',
      'replaceRange',
      'fillRange'
    ]);
    dart.defineExtensionAccessors(UnmodifiableListMixin, ['length', 'first', 'last']);
    return UnmodifiableListMixin;
  });
  _internal.UnmodifiableListMixin = _internal.UnmodifiableListMixin$();
  dart.addTypeTests(_internal.UnmodifiableListMixin, _is_UnmodifiableListMixin_default);
  const _is_UnmodifiableListBase_default = Symbol('_is_UnmodifiableListBase_default');
  _internal.UnmodifiableListBase$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    const ListBase_UnmodifiableListMixin$36 = class ListBase_UnmodifiableListMixin extends collection.ListBase$(E) {};
    (ListBase_UnmodifiableListMixin$36.new = function() {
    }).prototype = ListBase_UnmodifiableListMixin$36.prototype;
    dart.applyMixin(ListBase_UnmodifiableListMixin$36, _internal.UnmodifiableListMixin$(E));
    class UnmodifiableListBase extends ListBase_UnmodifiableListMixin$36 {
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[22], 208, 16, "newLength");
        return super.length = newLength;
      }
      set first(element) {
        E.as(element);
        return super.first = element;
      }
      get first() {
        return super.first;
      }
      set last(element) {
        E.as(element);
        return super.last = element;
      }
      get last() {
        return super.last;
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[22], 208, 16, "index");
        E.as(value);
        super._set(index, value);
        return value$;
      }
      setAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 208, 16, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 208, 16, "iterable");
        return super.setAll(at, iterable);
      }
      add(value) {
        E.as(value);
        return super.add(value);
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[22], 208, 16, "index");
        E.as(element);
        return super.insert(index, element);
      }
      insertAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 208, 16, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 208, 16, "iterable");
        return super.insertAll(at, iterable);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 208, 16, "iterable");
        return super.addAll(iterable);
      }
      remove(element) {
        return super.remove(element);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[22], 208, 16, "test");
        return super.removeWhere(test);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[22], 208, 16, "test");
        return super.retainWhere(test);
      }
      sort(compare = null) {
        return super.sort(compare);
      }
      shuffle(random = null) {
        return super.shuffle(random);
      }
      clear() {
        return super.clear();
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[22], 208, 16, "index");
        return super.removeAt(index);
      }
      removeLast() {
        return super.removeLast();
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[22], 208, 16, "start");
        if (end == null) dart.nullFailed(I[22], 208, 16, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 208, 16, "iterable");
        if (skipCount == null) dart.nullFailed(I[22], 208, 16, "skipCount");
        return super.setRange(start, end, iterable, skipCount);
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[22], 208, 16, "start");
        if (end == null) dart.nullFailed(I[22], 208, 16, "end");
        return super.removeRange(start, end);
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(I[22], 208, 16, "start");
        if (end == null) dart.nullFailed(I[22], 208, 16, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 208, 16, "iterable");
        return super.replaceRange(start, end, iterable);
      }
      fillRange(start, end, fillValue = null) {
        if (start == null) dart.nullFailed(I[22], 208, 16, "start");
        if (end == null) dart.nullFailed(I[22], 208, 16, "end");
        EN().as(fillValue);
        return super.fillRange(start, end, fillValue);
      }
    }
    (UnmodifiableListBase.new = function() {
      ;
    }).prototype = UnmodifiableListBase.prototype;
    dart.addTypeTests(UnmodifiableListBase);
    UnmodifiableListBase.prototype[_is_UnmodifiableListBase_default] = true;
    dart.addTypeCaches(UnmodifiableListBase);
    dart.setMethodSignature(UnmodifiableListBase, () => ({
      __proto__: dart.getMethods(UnmodifiableListBase.__proto__),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
    }));
    dart.setSetterSignature(UnmodifiableListBase, () => ({
      __proto__: dart.getSetters(UnmodifiableListBase.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(UnmodifiableListBase, I[25]);
    dart.defineExtensionMethods(UnmodifiableListBase, [
      '_set',
      'setAll',
      'add',
      'insert',
      'insertAll',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'sort',
      'shuffle',
      'clear',
      'removeAt',
      'removeLast',
      'setRange',
      'removeRange',
      'replaceRange',
      'fillRange'
    ]);
    dart.defineExtensionAccessors(UnmodifiableListBase, ['length', 'first', 'last']);
    return UnmodifiableListBase;
  });
  _internal.UnmodifiableListBase = _internal.UnmodifiableListBase$();
  dart.addTypeTests(_internal.UnmodifiableListBase, _is_UnmodifiableListBase_default);
  core.num = class num extends core.Object {
    static is(o) {
      return typeof o == "number";
    }
    static as(o) {
      if (typeof o == "number") return o;
      return dart.as(o, core.num);
    }
    static parse(input, onError = null) {
      if (input == null) dart.nullFailed(I[26], 483, 27, "input");
      let result = core.num.tryParse(input);
      if (result != null) return result;
      if (onError == null) dart.throw(new core.FormatException.new(input));
      return onError(input);
    }
    static tryParse(input) {
      let t27;
      if (input == null) dart.nullFailed(I[26], 494, 31, "input");
      let source = input[$trim]();
      t27 = core.int.tryParse(source);
      return t27 == null ? core.double.tryParse(source) : t27;
    }
  };
  (core.num.new = function() {
    ;
  }).prototype = core.num.prototype;
  dart.addTypeCaches(core.num);
  core.num[dart.implements] = () => [core.Comparable$(core.num)];
  dart.setLibraryUri(core.num, I[8]);
  core.int = class int extends core.num {
    static is(o) {
      return typeof o == "number" && Math.floor(o) == o;
    }
    static as(o) {
      if (typeof o == "number" && Math.floor(o) == o) {
        return o;
      }
      return dart.as(o, core.int);
    }
    static fromEnvironment(name, opts) {
      if (name == null) dart.nullFailed(I[7], 187, 38, "name");
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : 0;
      if (defaultValue == null) dart.nullFailed(I[7], 187, 49, "defaultValue");
      dart.throw(new core.UnsupportedError.new("int.fromEnvironment can only be used as a const constructor"));
    }
    static parse(source, opts) {
      if (source == null) dart.nullFailed(I[7], 173, 27, "source");
      let radix = opts && 'radix' in opts ? opts.radix : null;
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let value = core.int.tryParse(source, {radix: radix});
      if (value != null) return value;
      if (onError != null) return onError(source);
      dart.throw(new core.FormatException.new(source));
    }
    static tryParse(source, opts) {
      if (source == null) dart.nullFailed(I[7], 182, 31, "source");
      let radix = opts && 'radix' in opts ? opts.radix : null;
      return _js_helper.Primitives.parseInt(source, radix);
    }
  };
  dart.addTypeCaches(core.int);
  dart.setLibraryUri(core.int, I[8]);
  _internal.CodeUnits = class CodeUnits extends _internal.UnmodifiableListBase$(core.int) {
    get length() {
      return this[_string$].length;
    }
    set length(value) {
      super.length = value;
    }
    _get(i) {
      if (i == null) dart.nullFailed(I[21], 77, 23, "i");
      return this[_string$][$codeUnitAt](i);
    }
    static stringOf(u) {
      if (u == null) dart.nullFailed(I[21], 79, 36, "u");
      return u[_string$];
    }
  };
  (_internal.CodeUnits.new = function(_string) {
    if (_string == null) dart.nullFailed(I[21], 74, 18, "_string");
    this[_string$] = _string;
    ;
  }).prototype = _internal.CodeUnits.prototype;
  dart.addTypeTests(_internal.CodeUnits);
  dart.addTypeCaches(_internal.CodeUnits);
  dart.setMethodSignature(_internal.CodeUnits, () => ({
    __proto__: dart.getMethods(_internal.CodeUnits.__proto__),
    _get: dart.fnType(core.int, [core.int]),
    [$_get]: dart.fnType(core.int, [core.int])
  }));
  dart.setGetterSignature(_internal.CodeUnits, () => ({
    __proto__: dart.getGetters(_internal.CodeUnits.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_internal.CodeUnits, I[25]);
  dart.setFieldSignature(_internal.CodeUnits, () => ({
    __proto__: dart.getFields(_internal.CodeUnits.__proto__),
    [_string$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_internal.CodeUnits, ['_get']);
  dart.defineExtensionAccessors(_internal.CodeUnits, ['length']);
  var name$5 = dart.privateName(_internal, "ExternalName.name");
  _internal.ExternalName = class ExternalName extends core.Object {
    get name() {
      return this[name$5];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_internal.ExternalName.new = function(name) {
    if (name == null) dart.nullFailed(I[21], 92, 27, "name");
    this[name$5] = name;
    ;
  }).prototype = _internal.ExternalName.prototype;
  dart.addTypeTests(_internal.ExternalName);
  dart.addTypeCaches(_internal.ExternalName);
  dart.setLibraryUri(_internal.ExternalName, I[25]);
  dart.setFieldSignature(_internal.ExternalName, () => ({
    __proto__: dart.getFields(_internal.ExternalName.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  _internal.SystemHash = class SystemHash extends core.Object {
    static combine(hash, value) {
      if (hash == null) dart.nullFailed(I[21], 165, 26, "hash");
      if (value == null) dart.nullFailed(I[21], 165, 36, "value");
      hash = 536870911 & dart.notNull(hash) + dart.notNull(value);
      hash = 536870911 & dart.notNull(hash) + ((524287 & dart.notNull(hash)) << 10);
      return (dart.notNull(hash) ^ hash[$rightShift](6)) >>> 0;
    }
    static finish(hash) {
      if (hash == null) dart.nullFailed(I[21], 171, 25, "hash");
      hash = 536870911 & dart.notNull(hash) + ((67108863 & dart.notNull(hash)) << 3);
      hash = (dart.notNull(hash) ^ hash[$rightShift](11)) >>> 0;
      return 536870911 & dart.notNull(hash) + ((16383 & dart.notNull(hash)) << 15);
    }
    static hash2(v1, v2) {
      if (v1 == null) dart.nullFailed(I[21], 177, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 177, 32, "v2");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      return _internal.SystemHash.finish(hash);
    }
    static hash3(v1, v2, v3) {
      if (v1 == null) dart.nullFailed(I[21], 184, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 184, 32, "v2");
      if (v3 == null) dart.nullFailed(I[21], 184, 40, "v3");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      return _internal.SystemHash.finish(hash);
    }
    static hash4(v1, v2, v3, v4) {
      if (v1 == null) dart.nullFailed(I[21], 192, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 192, 32, "v2");
      if (v3 == null) dart.nullFailed(I[21], 192, 40, "v3");
      if (v4 == null) dart.nullFailed(I[21], 192, 48, "v4");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      return _internal.SystemHash.finish(hash);
    }
    static hash5(v1, v2, v3, v4, v5) {
      if (v1 == null) dart.nullFailed(I[21], 201, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 201, 32, "v2");
      if (v3 == null) dart.nullFailed(I[21], 201, 40, "v3");
      if (v4 == null) dart.nullFailed(I[21], 201, 48, "v4");
      if (v5 == null) dart.nullFailed(I[21], 201, 56, "v5");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      return _internal.SystemHash.finish(hash);
    }
    static hash6(v1, v2, v3, v4, v5, v6) {
      if (v1 == null) dart.nullFailed(I[21], 211, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 211, 32, "v2");
      if (v3 == null) dart.nullFailed(I[21], 211, 40, "v3");
      if (v4 == null) dart.nullFailed(I[21], 211, 48, "v4");
      if (v5 == null) dart.nullFailed(I[21], 211, 56, "v5");
      if (v6 == null) dart.nullFailed(I[21], 211, 64, "v6");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      hash = _internal.SystemHash.combine(hash, v6);
      return _internal.SystemHash.finish(hash);
    }
    static hash7(v1, v2, v3, v4, v5, v6, v7) {
      if (v1 == null) dart.nullFailed(I[21], 222, 24, "v1");
      if (v2 == null) dart.nullFailed(I[21], 222, 32, "v2");
      if (v3 == null) dart.nullFailed(I[21], 222, 40, "v3");
      if (v4 == null) dart.nullFailed(I[21], 222, 48, "v4");
      if (v5 == null) dart.nullFailed(I[21], 222, 56, "v5");
      if (v6 == null) dart.nullFailed(I[21], 222, 64, "v6");
      if (v7 == null) dart.nullFailed(I[21], 222, 72, "v7");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      hash = _internal.SystemHash.combine(hash, v6);
      hash = _internal.SystemHash.combine(hash, v7);
      return _internal.SystemHash.finish(hash);
    }
    static hash8(v1, v2, v3, v4, v5, v6, v7, v8) {
      if (v1 == null) dart.nullFailed(I[21], 235, 11, "v1");
      if (v2 == null) dart.nullFailed(I[21], 235, 19, "v2");
      if (v3 == null) dart.nullFailed(I[21], 235, 27, "v3");
      if (v4 == null) dart.nullFailed(I[21], 235, 35, "v4");
      if (v5 == null) dart.nullFailed(I[21], 235, 43, "v5");
      if (v6 == null) dart.nullFailed(I[21], 235, 51, "v6");
      if (v7 == null) dart.nullFailed(I[21], 235, 59, "v7");
      if (v8 == null) dart.nullFailed(I[21], 235, 67, "v8");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      hash = _internal.SystemHash.combine(hash, v6);
      hash = _internal.SystemHash.combine(hash, v7);
      hash = _internal.SystemHash.combine(hash, v8);
      return _internal.SystemHash.finish(hash);
    }
    static hash9(v1, v2, v3, v4, v5, v6, v7, v8, v9) {
      if (v1 == null) dart.nullFailed(I[21], 249, 11, "v1");
      if (v2 == null) dart.nullFailed(I[21], 249, 19, "v2");
      if (v3 == null) dart.nullFailed(I[21], 249, 27, "v3");
      if (v4 == null) dart.nullFailed(I[21], 249, 35, "v4");
      if (v5 == null) dart.nullFailed(I[21], 249, 43, "v5");
      if (v6 == null) dart.nullFailed(I[21], 249, 51, "v6");
      if (v7 == null) dart.nullFailed(I[21], 249, 59, "v7");
      if (v8 == null) dart.nullFailed(I[21], 249, 67, "v8");
      if (v9 == null) dart.nullFailed(I[21], 249, 75, "v9");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      hash = _internal.SystemHash.combine(hash, v6);
      hash = _internal.SystemHash.combine(hash, v7);
      hash = _internal.SystemHash.combine(hash, v8);
      hash = _internal.SystemHash.combine(hash, v9);
      return _internal.SystemHash.finish(hash);
    }
    static hash10(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) {
      if (v1 == null) dart.nullFailed(I[21], 263, 25, "v1");
      if (v2 == null) dart.nullFailed(I[21], 263, 33, "v2");
      if (v3 == null) dart.nullFailed(I[21], 263, 41, "v3");
      if (v4 == null) dart.nullFailed(I[21], 263, 49, "v4");
      if (v5 == null) dart.nullFailed(I[21], 263, 57, "v5");
      if (v6 == null) dart.nullFailed(I[21], 263, 65, "v6");
      if (v7 == null) dart.nullFailed(I[21], 263, 73, "v7");
      if (v8 == null) dart.nullFailed(I[21], 264, 11, "v8");
      if (v9 == null) dart.nullFailed(I[21], 264, 19, "v9");
      if (v10 == null) dart.nullFailed(I[21], 264, 27, "v10");
      let hash = 0;
      hash = _internal.SystemHash.combine(hash, v1);
      hash = _internal.SystemHash.combine(hash, v2);
      hash = _internal.SystemHash.combine(hash, v3);
      hash = _internal.SystemHash.combine(hash, v4);
      hash = _internal.SystemHash.combine(hash, v5);
      hash = _internal.SystemHash.combine(hash, v6);
      hash = _internal.SystemHash.combine(hash, v7);
      hash = _internal.SystemHash.combine(hash, v8);
      hash = _internal.SystemHash.combine(hash, v9);
      hash = _internal.SystemHash.combine(hash, v10);
      return _internal.SystemHash.finish(hash);
    }
    static smear(x) {
      if (x == null) dart.nullFailed(I[21], 290, 24, "x");
      x = (dart.notNull(x) ^ x[$rightShift](16)) >>> 0;
      x = (dart.notNull(x) * 2146121005 & 4294967295) >>> 0;
      x = (dart.notNull(x) ^ x[$rightShift](15)) >>> 0;
      x = (dart.notNull(x) * 2221713035 & 4294967295) >>> 0;
      x = (dart.notNull(x) ^ x[$rightShift](16)) >>> 0;
      return x;
    }
  };
  (_internal.SystemHash.new = function() {
    ;
  }).prototype = _internal.SystemHash.prototype;
  dart.addTypeTests(_internal.SystemHash);
  dart.addTypeCaches(_internal.SystemHash);
  dart.setLibraryUri(_internal.SystemHash, I[25]);
  var version$ = dart.privateName(_internal, "Since.version");
  _internal.Since = class Since extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
  };
  (_internal.Since.new = function(version) {
    if (version == null) dart.nullFailed(I[21], 389, 20, "version");
    this[version$] = version;
    ;
  }).prototype = _internal.Since.prototype;
  dart.addTypeTests(_internal.Since);
  dart.addTypeCaches(_internal.Since);
  dart.setLibraryUri(_internal.Since, I[25]);
  dart.setFieldSignature(_internal.Since, () => ({
    __proto__: dart.getFields(_internal.Since.__proto__),
    version: dart.finalFieldType(core.String)
  }));
  var _name$ = dart.privateName(_internal, "_name");
  core.Error = class Error extends core.Object {
    static safeToString(object) {
      if (typeof object == 'number' || typeof object == 'boolean' || object == null) {
        return dart.toString(object);
      }
      if (typeof object == 'string') {
        return core.Error._stringToSafeString(object);
      }
      return core.Error._objectToString(object);
    }
    static _stringToSafeString(string) {
      if (string == null) dart.nullFailed(I[7], 281, 44, "string");
      return JSON.stringify(string);
    }
    static _objectToString(object) {
      if (object == null) dart.nullFailed(I[7], 276, 40, "object");
      return "Instance of '" + dart.typeName(dart.getReifiedType(object)) + "'";
    }
    get stackTrace() {
      return dart.stackTraceForError(this);
    }
  };
  (core.Error.new = function() {
    ;
  }).prototype = core.Error.prototype;
  dart.addTypeTests(core.Error);
  dart.addTypeCaches(core.Error);
  dart.setGetterSignature(core.Error, () => ({
    __proto__: dart.getGetters(core.Error.__proto__),
    stackTrace: dart.nullable(core.StackTrace),
    [$stackTrace]: dart.nullable(core.StackTrace)
  }));
  dart.setLibraryUri(core.Error, I[8]);
  dart.defineExtensionAccessors(core.Error, ['stackTrace']);
  const _is_NotNullableError_default = Symbol('_is_NotNullableError_default');
  _internal.NotNullableError$ = dart.generic(T => {
    class NotNullableError extends core.Error {
      toString() {
        return "Null is not a valid value for the parameter '" + dart.str(this[_name$]) + "' of type '" + dart.str(dart.wrapType(T)) + "'";
      }
    }
    (NotNullableError.new = function(_name) {
      if (_name == null) dart.nullFailed(I[21], 412, 25, "_name");
      this[_name$] = _name;
      NotNullableError.__proto__.new.call(this);
      ;
    }).prototype = NotNullableError.prototype;
    dart.addTypeTests(NotNullableError);
    NotNullableError.prototype[_is_NotNullableError_default] = true;
    dart.addTypeCaches(NotNullableError);
    NotNullableError[dart.implements] = () => [core.TypeError];
    dart.setLibraryUri(NotNullableError, I[25]);
    dart.setFieldSignature(NotNullableError, () => ({
      __proto__: dart.getFields(NotNullableError.__proto__),
      [_name$]: dart.finalFieldType(core.String)
    }));
    dart.defineExtensionMethods(NotNullableError, ['toString']);
    return NotNullableError;
  });
  _internal.NotNullableError = _internal.NotNullableError$();
  dart.addTypeTests(_internal.NotNullableError, _is_NotNullableError_default);
  _internal.HttpStatus = class HttpStatus extends core.Object {};
  (_internal.HttpStatus.new = function() {
    ;
  }).prototype = _internal.HttpStatus.prototype;
  dart.addTypeTests(_internal.HttpStatus);
  dart.addTypeCaches(_internal.HttpStatus);
  dart.setLibraryUri(_internal.HttpStatus, I[25]);
  dart.defineLazy(_internal.HttpStatus, {
    /*_internal.HttpStatus.continue__*/get continue__() {
      return 100;
    },
    /*_internal.HttpStatus.switchingProtocols*/get switchingProtocols() {
      return 101;
    },
    /*_internal.HttpStatus.processing*/get processing() {
      return 102;
    },
    /*_internal.HttpStatus.ok*/get ok() {
      return 200;
    },
    /*_internal.HttpStatus.created*/get created() {
      return 201;
    },
    /*_internal.HttpStatus.accepted*/get accepted() {
      return 202;
    },
    /*_internal.HttpStatus.nonAuthoritativeInformation*/get nonAuthoritativeInformation() {
      return 203;
    },
    /*_internal.HttpStatus.noContent*/get noContent() {
      return 204;
    },
    /*_internal.HttpStatus.resetContent*/get resetContent() {
      return 205;
    },
    /*_internal.HttpStatus.partialContent*/get partialContent() {
      return 206;
    },
    /*_internal.HttpStatus.multiStatus*/get multiStatus() {
      return 207;
    },
    /*_internal.HttpStatus.alreadyReported*/get alreadyReported() {
      return 208;
    },
    /*_internal.HttpStatus.imUsed*/get imUsed() {
      return 226;
    },
    /*_internal.HttpStatus.multipleChoices*/get multipleChoices() {
      return 300;
    },
    /*_internal.HttpStatus.movedPermanently*/get movedPermanently() {
      return 301;
    },
    /*_internal.HttpStatus.found*/get found() {
      return 302;
    },
    /*_internal.HttpStatus.movedTemporarily*/get movedTemporarily() {
      return 302;
    },
    /*_internal.HttpStatus.seeOther*/get seeOther() {
      return 303;
    },
    /*_internal.HttpStatus.notModified*/get notModified() {
      return 304;
    },
    /*_internal.HttpStatus.useProxy*/get useProxy() {
      return 305;
    },
    /*_internal.HttpStatus.temporaryRedirect*/get temporaryRedirect() {
      return 307;
    },
    /*_internal.HttpStatus.permanentRedirect*/get permanentRedirect() {
      return 308;
    },
    /*_internal.HttpStatus.badRequest*/get badRequest() {
      return 400;
    },
    /*_internal.HttpStatus.unauthorized*/get unauthorized() {
      return 401;
    },
    /*_internal.HttpStatus.paymentRequired*/get paymentRequired() {
      return 402;
    },
    /*_internal.HttpStatus.forbidden*/get forbidden() {
      return 403;
    },
    /*_internal.HttpStatus.notFound*/get notFound() {
      return 404;
    },
    /*_internal.HttpStatus.methodNotAllowed*/get methodNotAllowed() {
      return 405;
    },
    /*_internal.HttpStatus.notAcceptable*/get notAcceptable() {
      return 406;
    },
    /*_internal.HttpStatus.proxyAuthenticationRequired*/get proxyAuthenticationRequired() {
      return 407;
    },
    /*_internal.HttpStatus.requestTimeout*/get requestTimeout() {
      return 408;
    },
    /*_internal.HttpStatus.conflict*/get conflict() {
      return 409;
    },
    /*_internal.HttpStatus.gone*/get gone() {
      return 410;
    },
    /*_internal.HttpStatus.lengthRequired*/get lengthRequired() {
      return 411;
    },
    /*_internal.HttpStatus.preconditionFailed*/get preconditionFailed() {
      return 412;
    },
    /*_internal.HttpStatus.requestEntityTooLarge*/get requestEntityTooLarge() {
      return 413;
    },
    /*_internal.HttpStatus.requestUriTooLong*/get requestUriTooLong() {
      return 414;
    },
    /*_internal.HttpStatus.unsupportedMediaType*/get unsupportedMediaType() {
      return 415;
    },
    /*_internal.HttpStatus.requestedRangeNotSatisfiable*/get requestedRangeNotSatisfiable() {
      return 416;
    },
    /*_internal.HttpStatus.expectationFailed*/get expectationFailed() {
      return 417;
    },
    /*_internal.HttpStatus.misdirectedRequest*/get misdirectedRequest() {
      return 421;
    },
    /*_internal.HttpStatus.unprocessableEntity*/get unprocessableEntity() {
      return 422;
    },
    /*_internal.HttpStatus.locked*/get locked() {
      return 423;
    },
    /*_internal.HttpStatus.failedDependency*/get failedDependency() {
      return 424;
    },
    /*_internal.HttpStatus.upgradeRequired*/get upgradeRequired() {
      return 426;
    },
    /*_internal.HttpStatus.preconditionRequired*/get preconditionRequired() {
      return 428;
    },
    /*_internal.HttpStatus.tooManyRequests*/get tooManyRequests() {
      return 429;
    },
    /*_internal.HttpStatus.requestHeaderFieldsTooLarge*/get requestHeaderFieldsTooLarge() {
      return 431;
    },
    /*_internal.HttpStatus.connectionClosedWithoutResponse*/get connectionClosedWithoutResponse() {
      return 444;
    },
    /*_internal.HttpStatus.unavailableForLegalReasons*/get unavailableForLegalReasons() {
      return 451;
    },
    /*_internal.HttpStatus.clientClosedRequest*/get clientClosedRequest() {
      return 499;
    },
    /*_internal.HttpStatus.internalServerError*/get internalServerError() {
      return 500;
    },
    /*_internal.HttpStatus.notImplemented*/get notImplemented() {
      return 501;
    },
    /*_internal.HttpStatus.badGateway*/get badGateway() {
      return 502;
    },
    /*_internal.HttpStatus.serviceUnavailable*/get serviceUnavailable() {
      return 503;
    },
    /*_internal.HttpStatus.gatewayTimeout*/get gatewayTimeout() {
      return 504;
    },
    /*_internal.HttpStatus.httpVersionNotSupported*/get httpVersionNotSupported() {
      return 505;
    },
    /*_internal.HttpStatus.variantAlsoNegotiates*/get variantAlsoNegotiates() {
      return 506;
    },
    /*_internal.HttpStatus.insufficientStorage*/get insufficientStorage() {
      return 507;
    },
    /*_internal.HttpStatus.loopDetected*/get loopDetected() {
      return 508;
    },
    /*_internal.HttpStatus.notExtended*/get notExtended() {
      return 510;
    },
    /*_internal.HttpStatus.networkAuthenticationRequired*/get networkAuthenticationRequired() {
      return 511;
    },
    /*_internal.HttpStatus.networkConnectTimeoutError*/get networkConnectTimeoutError() {
      return 599;
    },
    /*_internal.HttpStatus.CONTINUE*/get CONTINUE() {
      return 100;
    },
    /*_internal.HttpStatus.SWITCHING_PROTOCOLS*/get SWITCHING_PROTOCOLS() {
      return 101;
    },
    /*_internal.HttpStatus.OK*/get OK() {
      return 200;
    },
    /*_internal.HttpStatus.CREATED*/get CREATED() {
      return 201;
    },
    /*_internal.HttpStatus.ACCEPTED*/get ACCEPTED() {
      return 202;
    },
    /*_internal.HttpStatus.NON_AUTHORITATIVE_INFORMATION*/get NON_AUTHORITATIVE_INFORMATION() {
      return 203;
    },
    /*_internal.HttpStatus.NO_CONTENT*/get NO_CONTENT() {
      return 204;
    },
    /*_internal.HttpStatus.RESET_CONTENT*/get RESET_CONTENT() {
      return 205;
    },
    /*_internal.HttpStatus.PARTIAL_CONTENT*/get PARTIAL_CONTENT() {
      return 206;
    },
    /*_internal.HttpStatus.MULTIPLE_CHOICES*/get MULTIPLE_CHOICES() {
      return 300;
    },
    /*_internal.HttpStatus.MOVED_PERMANENTLY*/get MOVED_PERMANENTLY() {
      return 301;
    },
    /*_internal.HttpStatus.FOUND*/get FOUND() {
      return 302;
    },
    /*_internal.HttpStatus.MOVED_TEMPORARILY*/get MOVED_TEMPORARILY() {
      return 302;
    },
    /*_internal.HttpStatus.SEE_OTHER*/get SEE_OTHER() {
      return 303;
    },
    /*_internal.HttpStatus.NOT_MODIFIED*/get NOT_MODIFIED() {
      return 304;
    },
    /*_internal.HttpStatus.USE_PROXY*/get USE_PROXY() {
      return 305;
    },
    /*_internal.HttpStatus.TEMPORARY_REDIRECT*/get TEMPORARY_REDIRECT() {
      return 307;
    },
    /*_internal.HttpStatus.BAD_REQUEST*/get BAD_REQUEST() {
      return 400;
    },
    /*_internal.HttpStatus.UNAUTHORIZED*/get UNAUTHORIZED() {
      return 401;
    },
    /*_internal.HttpStatus.PAYMENT_REQUIRED*/get PAYMENT_REQUIRED() {
      return 402;
    },
    /*_internal.HttpStatus.FORBIDDEN*/get FORBIDDEN() {
      return 403;
    },
    /*_internal.HttpStatus.NOT_FOUND*/get NOT_FOUND() {
      return 404;
    },
    /*_internal.HttpStatus.METHOD_NOT_ALLOWED*/get METHOD_NOT_ALLOWED() {
      return 405;
    },
    /*_internal.HttpStatus.NOT_ACCEPTABLE*/get NOT_ACCEPTABLE() {
      return 406;
    },
    /*_internal.HttpStatus.PROXY_AUTHENTICATION_REQUIRED*/get PROXY_AUTHENTICATION_REQUIRED() {
      return 407;
    },
    /*_internal.HttpStatus.REQUEST_TIMEOUT*/get REQUEST_TIMEOUT() {
      return 408;
    },
    /*_internal.HttpStatus.CONFLICT*/get CONFLICT() {
      return 409;
    },
    /*_internal.HttpStatus.GONE*/get GONE() {
      return 410;
    },
    /*_internal.HttpStatus.LENGTH_REQUIRED*/get LENGTH_REQUIRED() {
      return 411;
    },
    /*_internal.HttpStatus.PRECONDITION_FAILED*/get PRECONDITION_FAILED() {
      return 412;
    },
    /*_internal.HttpStatus.REQUEST_ENTITY_TOO_LARGE*/get REQUEST_ENTITY_TOO_LARGE() {
      return 413;
    },
    /*_internal.HttpStatus.REQUEST_URI_TOO_LONG*/get REQUEST_URI_TOO_LONG() {
      return 414;
    },
    /*_internal.HttpStatus.UNSUPPORTED_MEDIA_TYPE*/get UNSUPPORTED_MEDIA_TYPE() {
      return 415;
    },
    /*_internal.HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE*/get REQUESTED_RANGE_NOT_SATISFIABLE() {
      return 416;
    },
    /*_internal.HttpStatus.EXPECTATION_FAILED*/get EXPECTATION_FAILED() {
      return 417;
    },
    /*_internal.HttpStatus.UPGRADE_REQUIRED*/get UPGRADE_REQUIRED() {
      return 426;
    },
    /*_internal.HttpStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
      return 500;
    },
    /*_internal.HttpStatus.NOT_IMPLEMENTED*/get NOT_IMPLEMENTED() {
      return 501;
    },
    /*_internal.HttpStatus.BAD_GATEWAY*/get BAD_GATEWAY() {
      return 502;
    },
    /*_internal.HttpStatus.SERVICE_UNAVAILABLE*/get SERVICE_UNAVAILABLE() {
      return 503;
    },
    /*_internal.HttpStatus.GATEWAY_TIMEOUT*/get GATEWAY_TIMEOUT() {
      return 504;
    },
    /*_internal.HttpStatus.HTTP_VERSION_NOT_SUPPORTED*/get HTTP_VERSION_NOT_SUPPORTED() {
      return 505;
    },
    /*_internal.HttpStatus.NETWORK_CONNECT_TIMEOUT_ERROR*/get NETWORK_CONNECT_TIMEOUT_ERROR() {
      return 599;
    }
  }, false);
  var _source$ = dart.privateName(_internal, "_source");
  var _add = dart.privateName(async, "_add");
  var _closeUnchecked = dart.privateName(async, "_closeUnchecked");
  var _addError = dart.privateName(async, "_addError");
  var _completeError = dart.privateName(async, "_completeError");
  var _complete = dart.privateName(async, "_complete");
  var _sink$ = dart.privateName(async, "_sink");
  async.Stream$ = dart.generic(T => {
    var _AsBroadcastStreamOfT = () => (_AsBroadcastStreamOfT = dart.constFn(async._AsBroadcastStream$(T)))();
    var _WhereStreamOfT = () => (_WhereStreamOfT = dart.constFn(async._WhereStream$(T)))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var _HandleErrorStreamOfT = () => (_HandleErrorStreamOfT = dart.constFn(async._HandleErrorStream$(T)))();
    var StreamConsumerOfT = () => (StreamConsumerOfT = dart.constFn(async.StreamConsumer$(T)))();
    var TAndTToT = () => (TAndTToT = dart.constFn(dart.fnType(T, [T, T])))();
    var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
    var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
    var TTodynamic = () => (TTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T])))();
    var TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var _FutureOfListOfT = () => (_FutureOfListOfT = dart.constFn(async._Future$(ListOfT())))();
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
    var _FutureOfSetOfT = () => (_FutureOfSetOfT = dart.constFn(async._Future$(SetOfT())))();
    var _TakeStreamOfT = () => (_TakeStreamOfT = dart.constFn(async._TakeStream$(T)))();
    var _TakeWhileStreamOfT = () => (_TakeWhileStreamOfT = dart.constFn(async._TakeWhileStream$(T)))();
    var _SkipStreamOfT = () => (_SkipStreamOfT = dart.constFn(async._SkipStream$(T)))();
    var _SkipWhileStreamOfT = () => (_SkipWhileStreamOfT = dart.constFn(async._SkipWhileStream$(T)))();
    var _DistinctStreamOfT = () => (_DistinctStreamOfT = dart.constFn(async._DistinctStream$(T)))();
    var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
    var _SyncBroadcastStreamControllerOfT = () => (_SyncBroadcastStreamControllerOfT = dart.constFn(async._SyncBroadcastStreamController$(T)))();
    var _SyncStreamControllerOfT = () => (_SyncStreamControllerOfT = dart.constFn(async._SyncStreamController$(T)))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    var _ControllerEventSinkWrapperOfT = () => (_ControllerEventSinkWrapperOfT = dart.constFn(async._ControllerEventSinkWrapper$(T)))();
    class Stream extends core.Object {
      static value(value) {
        let t27;
        return (t27 = new (async._AsyncStreamController$(T)).new(null, null, null, null), (() => {
          t27[_add](value);
          t27[_closeUnchecked]();
          return t27;
        })()).stream;
      }
      static error(error, stackTrace = null) {
        let t28, t27;
        if (error == null) dart.nullFailed(I[28], 143, 31, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        return (t27 = new (async._AsyncStreamController$(T)).new(null, null, null, null), (() => {
          t27[_addError](error, (t28 = stackTrace, t28 == null ? async.AsyncError.defaultStackTrace(error) : t28));
          t27[_closeUnchecked]();
          return t27;
        })()).stream;
      }
      static fromFuture(future) {
        if (future == null) dart.nullFailed(I[28], 156, 39, "future");
        let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
        future.then(core.Null, dart.fn(value => {
          controller[_add](value);
          controller[_closeUnchecked]();
        }, dart.fnType(core.Null, [T])), {onError: dart.fn((error, stackTrace) => {
            controller[_addError](core.Object.as(error), core.StackTrace.as(stackTrace));
            controller[_closeUnchecked]();
          }, T$.dynamicAnddynamicToNull())});
        return controller.stream;
      }
      static fromFutures(futures) {
        if (futures == null) dart.nullFailed(I[28], 185, 50, "futures");
        let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
        let count = 0;
        function onValue(value) {
          if (!dart.test(controller.isClosed)) {
            controller[_add](value);
            if ((count = count - 1) === 0) controller[_closeUnchecked]();
          }
        }
        dart.fn(onValue, dart.fnType(dart.void, [T]));
        function onError(error, stack) {
          if (error == null) dart.nullFailed(I[28], 199, 25, "error");
          if (stack == null) dart.nullFailed(I[28], 199, 43, "stack");
          if (!dart.test(controller.isClosed)) {
            controller[_addError](error, stack);
            if ((count = count - 1) === 0) controller[_closeUnchecked]();
          }
        }
        dart.fn(onError, T$.ObjectAndStackTraceTovoid());
        for (let future of futures) {
          count = count + 1;
          future.then(dart.void, onValue, {onError: onError});
        }
        if (count === 0) async.scheduleMicrotask(dart.bind(controller, 'close'));
        return controller.stream;
      }
      static fromIterable(elements) {
        if (elements == null) dart.nullFailed(I[28], 229, 43, "elements");
        return new (async._GeneratedStreamImpl$(T)).new(dart.fn(() => new (async._IterablePendingEvents$(T)).new(elements), dart.fnType(async._IterablePendingEvents$(T), [])));
      }
      static multi(onListen, opts) {
        if (onListen == null) dart.nullFailed(I[28], 298, 64, "onListen");
        let isBroadcast = opts && 'isBroadcast' in opts ? opts.isBroadcast : false;
        if (isBroadcast == null) dart.nullFailed(I[28], 299, 13, "isBroadcast");
        return new (async._MultiStream$(T)).new(onListen, isBroadcast);
      }
      static periodic(period, computation = null) {
        if (period == null) dart.nullFailed(I[28], 315, 36, "period");
        if (computation == null && !dart.test(_internal.typeAcceptsNull(T))) {
          dart.throw(new core.ArgumentError.value(null, "computation", "Must not be omitted when the event type is non-nullable"));
        }
        let controller = new (async._SyncStreamController$(T)).new(null, null, null, null);
        let watch = new core.Stopwatch.new();
        controller.onListen = dart.fn(() => {
          let t28;
          let computationCount = 0;
          function sendEvent(_) {
            let t27;
            watch.reset();
            if (computation != null) {
              let event = null;
              try {
                event = computation((t27 = computationCount, computationCount = t27 + 1, t27));
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  controller.addError(e, s);
                  return;
                } else
                  throw e$;
              }
              controller.add(event);
            } else {
              controller.add(T.as(null));
            }
          }
          dart.fn(sendEvent, T$.dynamicTovoid());
          let timer = async.Timer.periodic(period, sendEvent);
          t28 = controller;
          (() => {
            t28.onCancel = dart.fn(() => {
              timer.cancel();
              return async.Future._nullFuture;
            }, T$.VoidTo_FutureOfNull());
            t28.onPause = dart.fn(() => {
              watch.stop();
              timer.cancel();
            }, T$.VoidTovoid());
            t28.onResume = dart.fn(() => {
              let elapsed = watch.elapsed;
              watch.start();
              timer = async.Timer.new(period['-'](elapsed), dart.fn(() => {
                timer = async.Timer.periodic(period, sendEvent);
                sendEvent(null);
              }, T$.VoidTovoid()));
            }, T$.VoidTovoid());
            return t28;
          })();
        }, T$.VoidTovoid());
        return controller.stream;
      }
      static eventTransformed(source, mapSink) {
        if (source == null) dart.nullFailed(I[28], 403, 23, "source");
        if (mapSink == null) dart.nullFailed(I[28], 403, 50, "mapSink");
        return new (async._BoundSinkStream$(dart.dynamic, T)).new(source, mapSink);
      }
      static castFrom(S, T, source) {
        if (source == null) dart.nullFailed(I[28], 413, 45, "source");
        return new (_internal.CastStream$(S, T)).new(source);
      }
      get isBroadcast() {
        return false;
      }
      asBroadcastStream(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return new (_AsBroadcastStreamOfT()).new(this, onListen, onCancel);
      }
      where(test) {
        if (test == null) dart.nullFailed(I[28], 493, 24, "test");
        return new (_WhereStreamOfT()).new(this, test);
      }
      map(S, convert) {
        if (convert == null) dart.nullFailed(I[28], 521, 22, "convert");
        return new (async._MapStream$(T, S)).new(this, convert);
      }
      asyncMap(E, convert) {
        if (convert == null) dart.nullFailed(I[28], 533, 37, "convert");
        let controller = null;
        if (dart.test(this.isBroadcast)) {
          controller = new (async._SyncBroadcastStreamController$(E)).new(null, null);
        } else {
          controller = new (async._SyncStreamController$(E)).new(null, null, null, null);
        }
        controller.onListen = dart.fn(() => {
          let t29;
          let subscription = this.listen(null, {onError: dart.bind(controller, _addError), onDone: dart.bind(controller, 'close')});
          function add(value) {
            controller.add(value);
          }
          dart.fn(add, dart.fnType(T$.FutureNOfNull(), [E]));
          let addError = dart.bind(controller, _addError);
          let resume = dart.bind(subscription, 'resume');
          subscription.onData(dart.fn(event => {
            let newValue = null;
            try {
              newValue = convert(event);
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                controller.addError(e, s);
                return;
              } else
                throw e$;
            }
            if (async.Future$(E).is(newValue)) {
              subscription.pause();
              newValue.then(core.Null, add, {onError: addError}).whenComplete(resume);
            } else {
              controller.add(E.as(newValue));
            }
          }, TTovoid()));
          controller.onCancel = dart.bind(subscription, 'cancel');
          if (!dart.test(this.isBroadcast)) {
            t29 = controller;
            (() => {
              t29.onPause = dart.bind(subscription, 'pause');
              t29.onResume = resume;
              return t29;
            })();
          }
        }, T$.VoidTovoid());
        return controller.stream;
      }
      asyncExpand(E, convert) {
        if (convert == null) dart.nullFailed(I[28], 593, 39, "convert");
        let controller = null;
        if (dart.test(this.isBroadcast)) {
          controller = new (async._SyncBroadcastStreamController$(E)).new(null, null);
        } else {
          controller = new (async._SyncStreamController$(E)).new(null, null, null, null);
        }
        controller.onListen = dart.fn(() => {
          let t30;
          let subscription = this.listen(null, {onError: dart.bind(controller, _addError), onDone: dart.bind(controller, 'close')});
          subscription.onData(dart.fn(event => {
            let newStream = null;
            try {
              newStream = convert(event);
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                controller.addError(e, s);
                return;
              } else
                throw e$;
            }
            if (newStream != null) {
              subscription.pause();
              controller.addStream(newStream).whenComplete(dart.bind(subscription, 'resume'));
            }
          }, TTovoid()));
          controller.onCancel = dart.bind(subscription, 'cancel');
          if (!dart.test(this.isBroadcast)) {
            t30 = controller;
            (() => {
              t30.onPause = dart.bind(subscription, 'pause');
              t30.onResume = dart.bind(subscription, 'resume');
              return t30;
            })();
          }
        }, T$.VoidTovoid());
        return controller.stream;
      }
      handleError(onError, opts) {
        if (onError == null) dart.nullFailed(I[28], 658, 34, "onError");
        let test = opts && 'test' in opts ? opts.test : null;
        return new (_HandleErrorStreamOfT()).new(this, onError, test);
      }
      expand(S, convert) {
        if (convert == null) dart.nullFailed(I[28], 679, 35, "convert");
        return new (async._ExpandStream$(T, S)).new(this, convert);
      }
      pipe(streamConsumer) {
        StreamConsumerOfT().as(streamConsumer);
        if (streamConsumer == null) dart.nullFailed(I[28], 697, 33, "streamConsumer");
        return streamConsumer.addStream(this).then(dart.dynamic, dart.fn(_ => streamConsumer.close(), T$.dynamicToFuture()));
      }
      transform(S, streamTransformer) {
        async.StreamTransformer$(T, S).as(streamTransformer);
        if (streamTransformer == null) dart.nullFailed(I[28], 726, 50, "streamTransformer");
        return streamTransformer.bind(this);
      }
      reduce(combine) {
        TAndTToT().as(combine);
        if (combine == null) dart.nullFailed(I[28], 747, 22, "combine");
        let result = new (_FutureOfT()).new();
        let seenFirst = false;
        let value = null;
        let value$35isSet = false;
        function value$35get() {
          return value$35isSet ? value : dart.throw(new _internal.LateError.localNI("value"));
        }
        dart.fn(value$35get, VoidToT());
        function value$35set(t33) {
          value$35isSet = true;
          return value = t33;
        }
        dart.fn(value$35set, TTodynamic());
        let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
            if (!seenFirst) {
              try {
                dart.throw(_internal.IterableElementError.noElement());
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  async._completeWithErrorCallback(result, e, s);
                } else
                  throw e$;
              }
            } else {
              result[_complete](value$35get());
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          if (seenFirst) {
            async._runUserCode(T, dart.fn(() => combine(value$35get(), element), VoidToT()), dart.fn(newValue => {
              value$35set(newValue);
            }, TToNull()), async._cancelAndErrorClosure(subscription, result));
          } else {
            value$35set(element);
            seenFirst = true;
          }
        }, TTovoid()));
        return result;
      }
      fold(S, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[28], 794, 39, "combine");
        let result = new (async._Future$(S)).new();
        let value = initialValue;
        let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
            result[_complete](value);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          async._runUserCode(S, dart.fn(() => combine(value, element), dart.fnType(S, [])), dart.fn(newValue => {
            value = newValue;
          }, dart.fnType(core.Null, [S])), async._cancelAndErrorClosure(subscription, result));
        }, TTovoid()));
        return result;
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[28], 821, 31, "separator");
        let result = new (T$._FutureOfString()).new();
        let buffer = new core.StringBuffer.new();
        let first = true;
        let subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
            result[_complete](buffer.toString());
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(separator[$isEmpty] ? dart.fn(element => {
          try {
            buffer.write(element);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._cancelAndErrorWithReplacement(subscription, result, e, s);
            } else
              throw e$;
          }
        }, TTovoid()) : dart.fn(element => {
          if (!first) {
            buffer.write(separator);
          }
          first = false;
          try {
            buffer.write(element);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._cancelAndErrorWithReplacement(subscription, result, e, s);
            } else
              throw e$;
          }
        }, TTovoid()));
        return result;
      }
      contains(needle) {
        let future = new (T$._FutureOfbool()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](false);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          async._runUserCode(core.bool, dart.fn(() => dart.equals(element, needle), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 868, 53, "isMatch");
            if (dart.test(isMatch)) {
              async._cancelAndValue(subscription, future, true);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[28], 885, 23, "action");
        let future = new async._Future.new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](null);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          async._runUserCode(dart.void, dart.fn(() => action(element), T$.VoidTovoid()), dart.fn(_ => {
          }, T$.voidToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      every(test) {
        if (test == null) dart.nullFailed(I[28], 910, 27, "test");
        let future = new (T$._FutureOfbool()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](true);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          async._runUserCode(core.bool, dart.fn(() => test(element), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 917, 47, "isMatch");
            if (!dart.test(isMatch)) {
              async._cancelAndValue(subscription, future, false);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      any(test) {
        if (test == null) dart.nullFailed(I[28], 938, 25, "test");
        let future = new (T$._FutureOfbool()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](false);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(element => {
          async._runUserCode(core.bool, dart.fn(() => test(element), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 945, 47, "isMatch");
            if (dart.test(isMatch)) {
              async._cancelAndValue(subscription, future, true);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      get length() {
        let future = new (T$._FutureOfint()).new();
        let count = 0;
        this.listen(dart.fn(_ => {
          count = count + 1;
        }, TTovoid()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](count);
          }, T$.VoidTovoid()), cancelOnError: true});
        return future;
      }
      get isEmpty() {
        let future = new (T$._FutureOfbool()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](true);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(_ => {
          async._cancelAndValue(subscription, future, false);
        }, TTovoid()));
        return future;
      }
      cast(R) {
        return async.Stream.castFrom(T, R, this);
      }
      toList() {
        let result = JSArrayOfT().of([]);
        let future = new (_FutureOfListOfT()).new();
        this.listen(dart.fn(data => {
          result[$add](data);
        }, TTovoid()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](result);
          }, T$.VoidTovoid()), cancelOnError: true});
        return future;
      }
      toSet() {
        let result = new (_HashSetOfT()).new();
        let future = new (_FutureOfSetOfT()).new();
        this.listen(dart.fn(data => {
          result.add(data);
        }, TTovoid()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            future[_complete](result);
          }, T$.VoidTovoid()), cancelOnError: true});
        return future;
      }
      drain(E, futureValue = null) {
        if (futureValue == null) {
          futureValue = E.as(futureValue);
        }
        return this.listen(null, {cancelOnError: true}).asFuture(E, futureValue);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[28], 1104, 22, "count");
        return new (_TakeStreamOfT()).new(this, count);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[28], 1128, 28, "test");
        return new (_TakeWhileStreamOfT()).new(this, test);
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[28], 1145, 22, "count");
        return new (_SkipStreamOfT()).new(this, count);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[28], 1165, 28, "test");
        return new (_SkipWhileStreamOfT()).new(this, test);
      }
      distinct(equals = null) {
        return new (_DistinctStreamOfT()).new(this, equals);
      }
      get first() {
        let future = new (_FutureOfT()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          async._cancelAndValue(subscription, future, value);
        }, TTovoid()));
        return future;
      }
      get last() {
        let future = new (_FutureOfT()).new();
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToT());
        function result$35set(t42) {
          result$35isSet = true;
          return result = t42;
        }
        dart.fn(result$35set, TTodynamic());
        let foundResult = false;
        this.listen(dart.fn(value => {
          foundResult = true;
          result$35set(value);
        }, TTovoid()), {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            if (foundResult) {
              future[_complete](result$35get());
              return;
            }
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        return future;
      }
      get single() {
        let future = new (_FutureOfT()).new();
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToT());
        function result$35set(t48) {
          result$35isSet = true;
          return result = t48;
        }
        dart.fn(result$35set, TTodynamic());
        let foundResult = false;
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            if (foundResult) {
              future[_complete](result$35get());
              return;
            }
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          if (foundResult) {
            try {
              dart.throw(_internal.IterableElementError.tooMany());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._cancelAndErrorWithReplacement(subscription, future, e, s);
              } else
                throw e$;
            }
            return;
          }
          foundResult = true;
          result$35set(value);
        }, TTovoid()));
        return future;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[28], 1320, 29, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        let future = new (_FutureOfT()).new();
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            if (orElse != null) {
              async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
              return;
            }
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          async._runUserCode(core.bool, dart.fn(() => test(value), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 1337, 45, "isMatch");
            if (dart.test(isMatch)) {
              async._cancelAndValue(subscription, future, value);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[28], 1355, 28, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        let future = new (_FutureOfT()).new();
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToT());
        function result$35set(t56) {
          result$35isSet = true;
          return result = t56;
        }
        dart.fn(result$35set, TTodynamic());
        let foundResult = false;
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            if (foundResult) {
              future[_complete](result$35get());
              return;
            }
            if (orElse != null) {
              async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
              return;
            }
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          async._runUserCode(core.bool, dart.fn(() => test(value), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 1377, 45, "isMatch");
            if (dart.test(isMatch)) {
              foundResult = true;
              result$35set(value);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[28], 1391, 30, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        let future = new (_FutureOfT()).new();
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToT());
        function result$35set(t62) {
          result$35isSet = true;
          return result = t62;
        }
        dart.fn(result$35set, TTodynamic());
        let foundResult = false;
        let subscription = this.listen(null, {onError: dart.bind(future, _completeError), onDone: dart.fn(() => {
            if (foundResult) {
              future[_complete](result$35get());
              return;
            }
            if (orElse != null) {
              async._runUserCode(T, orElse, dart.bind(future, _complete), dart.bind(future, _completeError));
              return;
            }
            try {
              dart.throw(_internal.IterableElementError.noElement());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(future, e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          async._runUserCode(core.bool, dart.fn(() => test(value), T$.VoidTobool()), dart.fn(isMatch => {
            if (isMatch == null) dart.nullFailed(I[28], 1413, 45, "isMatch");
            if (dart.test(isMatch)) {
              if (foundResult) {
                try {
                  dart.throw(_internal.IterableElementError.tooMany());
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  let s = dart.stackTrace(e$);
                  if (core.Object.is(e)) {
                    async._cancelAndErrorWithReplacement(subscription, future, e, s);
                  } else
                    throw e$;
                }
                return;
              }
              foundResult = true;
              result$35set(value);
            }
          }, T$.boolToNull()), async._cancelAndErrorClosure(subscription, future));
        }, TTovoid()));
        return future;
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[28], 1445, 27, "index");
        core.RangeError.checkNotNegative(index, "index");
        let result = new (_FutureOfT()).new();
        let elementIndex = 0;
        let subscription = null;
        subscription = this.listen(null, {onError: dart.bind(result, _completeError), onDone: dart.fn(() => {
            result[_completeError](new core.IndexError.new(index, this, "index", null, elementIndex), core.StackTrace.empty);
          }, T$.VoidTovoid()), cancelOnError: true});
        subscription.onData(dart.fn(value => {
          if (index === elementIndex) {
            async._cancelAndValue(subscription, result, value);
            return;
          }
          elementIndex = elementIndex + 1;
        }, TTovoid()));
        return result;
      }
      timeout(timeLimit, opts) {
        if (timeLimit == null) dart.nullFailed(I[28], 1492, 30, "timeLimit");
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        let controller = null;
        if (dart.test(this.isBroadcast)) {
          controller = new (_SyncBroadcastStreamControllerOfT()).new(null, null);
        } else {
          controller = new (_SyncStreamControllerOfT()).new(null, null, null, null);
        }
        let zone = async.Zone.current;
        let timeoutCallback = null;
        if (onTimeout == null) {
          timeoutCallback = dart.fn(() => {
            controller.addError(new async.TimeoutException.new("No stream event", timeLimit), null);
          }, T$.VoidTovoid());
        } else {
          let registeredOnTimeout = zone.registerUnaryCallback(dart.void, EventSinkOfT(), onTimeout);
          let wrapper = new (_ControllerEventSinkWrapperOfT()).new(null);
          timeoutCallback = dart.fn(() => {
            wrapper[_sink$] = controller;
            zone.runUnaryGuarded(_ControllerEventSinkWrapperOfT(), registeredOnTimeout, wrapper);
            wrapper[_sink$] = null;
          }, T$.VoidTovoid());
        }
        controller.onListen = dart.fn(() => {
          let t66, t66$;
          let timer = zone.createTimer(timeLimit, timeoutCallback);
          let subscription = this.listen(null);
          t66 = subscription;
          (() => {
            t66.onData(dart.fn(event => {
              timer.cancel();
              timer = zone.createTimer(timeLimit, timeoutCallback);
              controller.add(event);
            }, TTovoid()));
            t66.onError(dart.fn((error, stackTrace) => {
              if (error == null) dart.nullFailed(I[28], 1536, 27, "error");
              if (stackTrace == null) dart.nullFailed(I[28], 1536, 45, "stackTrace");
              timer.cancel();
              timer = zone.createTimer(timeLimit, timeoutCallback);
              controller[_addError](error, stackTrace);
            }, T$.ObjectAndStackTraceToNull()));
            t66.onDone(dart.fn(() => {
              timer.cancel();
              controller.close();
            }, T$.VoidTovoid()));
            return t66;
          })();
          controller.onCancel = dart.fn(() => {
            timer.cancel();
            return subscription.cancel();
          }, T$.VoidToFutureOfvoid());
          if (!dart.test(this.isBroadcast)) {
            t66$ = controller;
            (() => {
              t66$.onPause = dart.fn(() => {
                timer.cancel();
                subscription.pause();
              }, T$.VoidTovoid());
              t66$.onResume = dart.fn(() => {
                subscription.resume();
                timer = zone.createTimer(timeLimit, timeoutCallback);
              }, T$.VoidTovoid());
              return t66$;
            })();
          }
        }, T$.VoidTovoid());
        return controller.stream;
      }
    }
    (Stream.new = function() {
      ;
    }).prototype = Stream.prototype;
    (Stream._internal = function() {
      ;
    }).prototype = Stream.prototype;
    dart.addTypeTests(Stream);
    Stream.prototype[dart.isStream] = true;
    dart.addTypeCaches(Stream);
    dart.setMethodSignature(Stream, () => ({
      __proto__: dart.getMethods(Stream.__proto__),
      asBroadcastStream: dart.fnType(async.Stream$(T), [], {onCancel: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)])), onListen: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      where: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
      map: dart.gFnType(S => [async.Stream$(S), [dart.fnType(S, [T])]], S => [dart.nullable(core.Object)]),
      asyncMap: dart.gFnType(E => [async.Stream$(E), [dart.fnType(async.FutureOr$(E), [T])]], E => [dart.nullable(core.Object)]),
      asyncExpand: dart.gFnType(E => [async.Stream$(E), [dart.fnType(dart.nullable(async.Stream$(E)), [T])]], E => [dart.nullable(core.Object)]),
      handleError: dart.fnType(async.Stream$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [dart.dynamic]))}, {}),
      expand: dart.gFnType(S => [async.Stream$(S), [dart.fnType(core.Iterable$(S), [T])]], S => [dart.nullable(core.Object)]),
      pipe: dart.fnType(async.Future, [dart.nullable(core.Object)]),
      transform: dart.gFnType(S => [async.Stream$(S), [dart.nullable(core.Object)]], S => [dart.nullable(core.Object)]),
      reduce: dart.fnType(async.Future$(T), [dart.nullable(core.Object)]),
      fold: dart.gFnType(S => [async.Future$(S), [S, dart.fnType(S, [S, T])]], S => [dart.nullable(core.Object)]),
      join: dart.fnType(async.Future$(core.String), [], [core.String]),
      contains: dart.fnType(async.Future$(core.bool), [dart.nullable(core.Object)]),
      forEach: dart.fnType(async.Future, [dart.fnType(dart.void, [T])]),
      every: dart.fnType(async.Future$(core.bool), [dart.fnType(core.bool, [T])]),
      any: dart.fnType(async.Future$(core.bool), [dart.fnType(core.bool, [T])]),
      cast: dart.gFnType(R => [async.Stream$(R), []], R => [dart.nullable(core.Object)]),
      toList: dart.fnType(async.Future$(core.List$(T)), []),
      toSet: dart.fnType(async.Future$(core.Set$(T)), []),
      drain: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      take: dart.fnType(async.Stream$(T), [core.int]),
      takeWhile: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
      skip: dart.fnType(async.Stream$(T), [core.int]),
      skipWhile: dart.fnType(async.Stream$(T), [dart.fnType(core.bool, [T])]),
      distinct: dart.fnType(async.Stream$(T), [], [dart.nullable(dart.fnType(core.bool, [T, T]))]),
      firstWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      lastWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      singleWhere: dart.fnType(async.Future$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      elementAt: dart.fnType(async.Future$(T), [core.int]),
      timeout: dart.fnType(async.Stream$(T), [core.Duration], {onTimeout: dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))}, {})
    }));
    dart.setGetterSignature(Stream, () => ({
      __proto__: dart.getGetters(Stream.__proto__),
      isBroadcast: core.bool,
      length: async.Future$(core.int),
      isEmpty: async.Future$(core.bool),
      first: async.Future$(T),
      last: async.Future$(T),
      single: async.Future$(T)
    }));
    dart.setLibraryUri(Stream, I[29]);
    return Stream;
  });
  async.Stream = async.Stream$();
  dart.addTypeTests(async.Stream, dart.isStream);
  const _is_CastStream_default = Symbol('_is_CastStream_default');
  _internal.CastStream$ = dart.generic((S, T) => {
    var CastStreamSubscriptionOfS$T = () => (CastStreamSubscriptionOfS$T = dart.constFn(_internal.CastStreamSubscription$(S, T)))();
    class CastStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[_source$].isBroadcast;
      }
      listen(onData, opts) {
        let t27;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        t27 = new (CastStreamSubscriptionOfS$T()).new(this[_source$].listen(null, {onDone: onDone, cancelOnError: cancelOnError}));
        return (() => {
          t27.onData(onData);
          t27.onError(onError);
          return t27;
        })();
      }
      cast(R) {
        return new (_internal.CastStream$(S, R)).new(this[_source$]);
      }
    }
    (CastStream.new = function(_source) {
      if (_source == null) dart.nullFailed(I[27], 11, 19, "_source");
      this[_source$] = _source;
      CastStream.__proto__.new.call(this);
      ;
    }).prototype = CastStream.prototype;
    dart.addTypeTests(CastStream);
    CastStream.prototype[_is_CastStream_default] = true;
    dart.addTypeCaches(CastStream);
    dart.setMethodSignature(CastStream, () => ({
      __proto__: dart.getMethods(CastStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      cast: dart.gFnType(R => [async.Stream$(R), []], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastStream, I[25]);
    dart.setFieldSignature(CastStream, () => ({
      __proto__: dart.getFields(CastStream.__proto__),
      [_source$]: dart.finalFieldType(async.Stream$(S))
    }));
    return CastStream;
  });
  _internal.CastStream = _internal.CastStream$();
  dart.addTypeTests(_internal.CastStream, _is_CastStream_default);
  var _zone = dart.privateName(_internal, "_zone");
  var _handleData = dart.privateName(_internal, "_handleData");
  var _handleError = dart.privateName(_internal, "_handleError");
  var _onData = dart.privateName(_internal, "_onData");
  const _is_CastStreamSubscription_default = Symbol('_is_CastStreamSubscription_default');
  _internal.CastStreamSubscription$ = dart.generic((S, T) => {
    class CastStreamSubscription extends core.Object {
      cancel() {
        return this[_source$].cancel();
      }
      onData(handleData) {
        this[_handleData] = handleData == null ? null : this[_zone].registerUnaryCallback(dart.dynamic, T, handleData);
      }
      onError(handleError) {
        this[_source$].onError(handleError);
        if (handleError == null) {
          this[_handleError] = null;
        } else if (T$.ObjectAndStackTraceTovoid().is(handleError)) {
          this[_handleError] = this[_zone].registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, handleError);
        } else if (T$.ObjectTovoid().is(handleError)) {
          this[_handleError] = this[_zone].registerUnaryCallback(dart.dynamic, core.Object, handleError);
        } else {
          dart.throw(new core.ArgumentError.new("handleError callback must take either an Object " + "(the error), or both an Object (the error) and a StackTrace."));
        }
      }
      onDone(handleDone) {
        this[_source$].onDone(handleDone);
      }
      [_onData](data) {
        S.as(data);
        if (this[_handleData] == null) return;
        let targetData = null;
        try {
          targetData = T.as(data);
        } catch (e) {
          let error = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(error)) {
            let handleError = this[_handleError];
            if (handleError == null) {
              this[_zone].handleUncaughtError(error, stack);
            } else if (T$.ObjectAndStackTraceTovoid().is(handleError)) {
              this[_zone].runBinaryGuarded(core.Object, core.StackTrace, handleError, error, stack);
            } else {
              this[_zone].runUnaryGuarded(core.Object, T$.ObjectTovoid().as(handleError), error);
            }
            return;
          } else
            throw e;
        }
        this[_zone].runUnaryGuarded(T, dart.nullCheck(this[_handleData]), targetData);
      }
      pause(resumeSignal = null) {
        this[_source$].pause(resumeSignal);
      }
      resume() {
        this[_source$].resume();
      }
      get isPaused() {
        return this[_source$].isPaused;
      }
      asFuture(E, futureValue = null) {
        return this[_source$].asFuture(E, futureValue);
      }
    }
    (CastStreamSubscription.new = function(_source) {
      if (_source == null) dart.nullFailed(I[27], 37, 31, "_source");
      this[_zone] = async.Zone.current;
      this[_handleData] = null;
      this[_handleError] = null;
      this[_source$] = _source;
      this[_source$].onData(dart.bind(this, _onData));
    }).prototype = CastStreamSubscription.prototype;
    CastStreamSubscription.prototype[dart.isStreamSubscription] = true;
    dart.addTypeTests(CastStreamSubscription);
    CastStreamSubscription.prototype[_is_CastStreamSubscription_default] = true;
    dart.addTypeCaches(CastStreamSubscription);
    CastStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
    dart.setMethodSignature(CastStreamSubscription, () => ({
      __proto__: dart.getMethods(CastStreamSubscription.__proto__),
      cancel: dart.fnType(async.Future, []),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      [_onData]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future)]),
      resume: dart.fnType(dart.void, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(CastStreamSubscription, () => ({
      __proto__: dart.getGetters(CastStreamSubscription.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(CastStreamSubscription, I[25]);
    dart.setFieldSignature(CastStreamSubscription, () => ({
      __proto__: dart.getFields(CastStreamSubscription.__proto__),
      [_source$]: dart.finalFieldType(async.StreamSubscription$(S)),
      [_zone]: dart.finalFieldType(async.Zone),
      [_handleData]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      [_handleError]: dart.fieldType(dart.nullable(core.Function))
    }));
    return CastStreamSubscription;
  });
  _internal.CastStreamSubscription = _internal.CastStreamSubscription$();
  dart.addTypeTests(_internal.CastStreamSubscription, _is_CastStreamSubscription_default);
  const _is_StreamTransformerBase_default = Symbol('_is_StreamTransformerBase_default');
  async.StreamTransformerBase$ = dart.generic((S, T) => {
    class StreamTransformerBase extends core.Object {
      cast(RS, RT) {
        return async.StreamTransformer.castFrom(S, T, RS, RT, this);
      }
    }
    (StreamTransformerBase.new = function() {
      ;
    }).prototype = StreamTransformerBase.prototype;
    dart.addTypeTests(StreamTransformerBase);
    StreamTransformerBase.prototype[_is_StreamTransformerBase_default] = true;
    dart.addTypeCaches(StreamTransformerBase);
    StreamTransformerBase[dart.implements] = () => [async.StreamTransformer$(S, T)];
    dart.setMethodSignature(StreamTransformerBase, () => ({
      __proto__: dart.getMethods(StreamTransformerBase.__proto__),
      cast: dart.gFnType((RS, RT) => [async.StreamTransformer$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StreamTransformerBase, I[29]);
    return StreamTransformerBase;
  });
  async.StreamTransformerBase = async.StreamTransformerBase$();
  dart.addTypeTests(async.StreamTransformerBase, _is_StreamTransformerBase_default);
  const _is_CastStreamTransformer_default = Symbol('_is_CastStreamTransformer_default');
  _internal.CastStreamTransformer$ = dart.generic((SS, ST, TS, TT) => {
    var StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
    class CastStreamTransformer extends async.StreamTransformerBase$(TS, TT) {
      cast(RS, RT) {
        return new (_internal.CastStreamTransformer$(SS, ST, RS, RT)).new(this[_source$]);
      }
      bind(stream) {
        StreamOfTS().as(stream);
        if (stream == null) dart.nullFailed(I[27], 108, 30, "stream");
        return this[_source$].bind(stream.cast(SS)).cast(TT);
      }
    }
    (CastStreamTransformer.new = function(_source) {
      if (_source == null) dart.nullFailed(I[27], 104, 30, "_source");
      this[_source$] = _source;
      CastStreamTransformer.__proto__.new.call(this);
      ;
    }).prototype = CastStreamTransformer.prototype;
    dart.addTypeTests(CastStreamTransformer);
    CastStreamTransformer.prototype[_is_CastStreamTransformer_default] = true;
    dart.addTypeCaches(CastStreamTransformer);
    dart.setMethodSignature(CastStreamTransformer, () => ({
      __proto__: dart.getMethods(CastStreamTransformer.__proto__),
      cast: dart.gFnType((RS, RT) => [async.StreamTransformer$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      bind: dart.fnType(async.Stream$(TT), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastStreamTransformer, I[25]);
    dart.setFieldSignature(CastStreamTransformer, () => ({
      __proto__: dart.getFields(CastStreamTransformer.__proto__),
      [_source$]: dart.finalFieldType(async.StreamTransformer$(SS, ST))
    }));
    return CastStreamTransformer;
  });
  _internal.CastStreamTransformer = _internal.CastStreamTransformer$();
  dart.addTypeTests(_internal.CastStreamTransformer, _is_CastStreamTransformer_default);
  const _is_Converter_default = Symbol('_is_Converter_default');
  convert.Converter$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class Converter extends async.StreamTransformerBase$(S, T) {
      static castFrom(SS, ST, TS, TT, source) {
        if (source == null) dart.nullFailed(I[30], 21, 71, "source");
        return new (_internal.CastConverter$(SS, ST, TS, TT)).new(source);
      }
      fuse(TT, other) {
        convert.Converter$(T, TT).as(other);
        if (other == null) dart.nullFailed(I[30], 31, 46, "other");
        return new (convert._FusedConverter$(S, T, TT)).new(this, other);
      }
      startChunkedConversion(sink) {
        SinkOfT().as(sink);
        if (sink == null) dart.nullFailed(I[30], 39, 42, "sink");
        dart.throw(new core.UnsupportedError.new("This converter does not support chunked conversions: " + dart.str(this)));
      }
      bind(stream) {
        StreamOfS().as(stream);
        if (stream == null) dart.nullFailed(I[30], 44, 28, "stream");
        return StreamOfT().eventTransformed(stream, dart.fn(sink => {
          if (sink == null) dart.nullFailed(I[30], 46, 28, "sink");
          return new convert._ConverterStreamEventSink.new(this, sink);
        }, T$.EventSinkTo_ConverterStreamEventSink()));
      }
      cast(RS, RT) {
        return convert.Converter.castFrom(S, T, RS, RT, this);
      }
    }
    (Converter.new = function() {
      Converter.__proto__.new.call(this);
      ;
    }).prototype = Converter.prototype;
    dart.addTypeTests(Converter);
    Converter.prototype[_is_Converter_default] = true;
    dart.addTypeCaches(Converter);
    dart.setMethodSignature(Converter, () => ({
      __proto__: dart.getMethods(Converter.__proto__),
      fuse: dart.gFnType(TT => [convert.Converter$(S, TT), [dart.nullable(core.Object)]], TT => [dart.nullable(core.Object)]),
      startChunkedConversion: dart.fnType(core.Sink$(S), [dart.nullable(core.Object)]),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)]),
      cast: dart.gFnType((RS, RT) => [convert.Converter$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Converter, I[31]);
    return Converter;
  });
  convert.Converter = convert.Converter$();
  dart.addTypeTests(convert.Converter, _is_Converter_default);
  const _is_CastConverter_default = Symbol('_is_CastConverter_default');
  _internal.CastConverter$ = dart.generic((SS, ST, TS, TT) => {
    var StreamOfTS = () => (StreamOfTS = dart.constFn(async.Stream$(TS)))();
    class CastConverter extends convert.Converter$(TS, TT) {
      convert(input) {
        TS.as(input);
        return TT.as(this[_source$].convert(SS.as(input)));
      }
      bind(stream) {
        StreamOfTS().as(stream);
        if (stream == null) dart.nullFailed(I[27], 120, 30, "stream");
        return this[_source$].bind(stream.cast(SS)).cast(TT);
      }
      cast(RS, RT) {
        return new (_internal.CastConverter$(SS, ST, RS, RT)).new(this[_source$]);
      }
    }
    (CastConverter.new = function(_source) {
      if (_source == null) dart.nullFailed(I[27], 114, 22, "_source");
      this[_source$] = _source;
      CastConverter.__proto__.new.call(this);
      ;
    }).prototype = CastConverter.prototype;
    dart.addTypeTests(CastConverter);
    CastConverter.prototype[_is_CastConverter_default] = true;
    dart.addTypeCaches(CastConverter);
    dart.setMethodSignature(CastConverter, () => ({
      __proto__: dart.getMethods(CastConverter.__proto__),
      convert: dart.fnType(TT, [dart.nullable(core.Object)]),
      cast: dart.gFnType((RS, RT) => [convert.Converter$(RS, RT), []], (RS, RT) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastConverter, I[25]);
    dart.setFieldSignature(CastConverter, () => ({
      __proto__: dart.getFields(CastConverter.__proto__),
      [_source$]: dart.finalFieldType(convert.Converter$(SS, ST))
    }));
    return CastConverter;
  });
  _internal.CastConverter = _internal.CastConverter$();
  dart.addTypeTests(_internal.CastConverter, _is_CastConverter_default);
  _internal.BytesBuilder = class BytesBuilder extends core.Object {
    static new(opts) {
      let copy = opts && 'copy' in opts ? opts.copy : true;
      if (copy == null) dart.nullFailed(I[32], 30, 30, "copy");
      return dart.test(copy) ? new _internal._CopyingBytesBuilder.new() : new _internal._BytesBuilder.new();
    }
  };
  (_internal.BytesBuilder[dart.mixinNew] = function() {
  }).prototype = _internal.BytesBuilder.prototype;
  dart.addTypeTests(_internal.BytesBuilder);
  dart.addTypeCaches(_internal.BytesBuilder);
  dart.setLibraryUri(_internal.BytesBuilder, I[25]);
  var _length$ = dart.privateName(_internal, "_length");
  var _buffer = dart.privateName(_internal, "_buffer");
  var _grow = dart.privateName(_internal, "_grow");
  var _clear = dart.privateName(_internal, "_clear");
  _internal._CopyingBytesBuilder = class _CopyingBytesBuilder extends core.Object {
    add(bytes) {
      if (bytes == null) dart.nullFailed(I[32], 89, 22, "bytes");
      let byteCount = bytes[$length];
      if (byteCount === 0) return;
      let required = dart.notNull(this[_length$]) + dart.notNull(byteCount);
      if (dart.notNull(this[_buffer][$length]) < required) {
        this[_grow](required);
      }
      if (!(dart.notNull(this[_buffer][$length]) >= required)) dart.assertFailed(null, I[32], 96, 12, "_buffer.length >= required");
      if (typed_data.Uint8List.is(bytes)) {
        this[_buffer][$setRange](this[_length$], required, bytes);
      } else {
        for (let i = 0; i < dart.notNull(byteCount); i = i + 1) {
          this[_buffer][$_set](dart.notNull(this[_length$]) + i, bytes[$_get](i));
        }
      }
      this[_length$] = required;
    }
    addByte(byte) {
      if (byte == null) dart.nullFailed(I[32], 107, 20, "byte");
      if (this[_buffer][$length] == this[_length$]) {
        this[_grow](this[_length$]);
      }
      if (!(dart.notNull(this[_buffer][$length]) > dart.notNull(this[_length$]))) dart.assertFailed(null, I[32], 113, 12, "_buffer.length > _length");
      this[_buffer][$_set](this[_length$], byte);
      this[_length$] = dart.notNull(this[_length$]) + 1;
    }
    [_grow](required) {
      if (required == null) dart.nullFailed(I[32], 118, 18, "required");
      let newSize = dart.notNull(required) * 2;
      if (dart.notNull(newSize) < 1024) {
        newSize = 1024;
      } else {
        newSize = _internal._CopyingBytesBuilder._pow2roundup(newSize);
      }
      let newBuffer = _native_typed_data.NativeUint8List.new(newSize);
      newBuffer[$setRange](0, this[_buffer][$length], this[_buffer]);
      this[_buffer] = newBuffer;
    }
    takeBytes() {
      if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
      let buffer = typed_data.Uint8List.view(this[_buffer][$buffer], this[_buffer][$offsetInBytes], this[_length$]);
      this[_clear]();
      return buffer;
    }
    toBytes() {
      if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
      return _native_typed_data.NativeUint8List.fromList(typed_data.Uint8List.view(this[_buffer][$buffer], this[_buffer][$offsetInBytes], this[_length$]));
    }
    get length() {
      return this[_length$];
    }
    get isEmpty() {
      return this[_length$] === 0;
    }
    get isNotEmpty() {
      return this[_length$] !== 0;
    }
    clear() {
      this[_clear]();
    }
    [_clear]() {
      this[_length$] = 0;
      this[_buffer] = _internal._CopyingBytesBuilder._emptyList;
    }
    static _pow2roundup(x) {
      if (x == null) dart.nullFailed(I[32], 161, 31, "x");
      if (!(dart.notNull(x) > 0)) dart.assertFailed(null, I[32], 162, 12, "x > 0");
      x = dart.notNull(x) - 1;
      x = (dart.notNull(x) | x[$rightShift](1)) >>> 0;
      x = (dart.notNull(x) | x[$rightShift](2)) >>> 0;
      x = (dart.notNull(x) | x[$rightShift](4)) >>> 0;
      x = (dart.notNull(x) | x[$rightShift](8)) >>> 0;
      x = (dart.notNull(x) | x[$rightShift](16)) >>> 0;
      return dart.notNull(x) + 1;
    }
  };
  (_internal._CopyingBytesBuilder.new = function() {
    this[_length$] = 0;
    this[_buffer] = _internal._CopyingBytesBuilder._emptyList;
    ;
  }).prototype = _internal._CopyingBytesBuilder.prototype;
  dart.addTypeTests(_internal._CopyingBytesBuilder);
  dart.addTypeCaches(_internal._CopyingBytesBuilder);
  _internal._CopyingBytesBuilder[dart.implements] = () => [_internal.BytesBuilder];
  dart.setMethodSignature(_internal._CopyingBytesBuilder, () => ({
    __proto__: dart.getMethods(_internal._CopyingBytesBuilder.__proto__),
    add: dart.fnType(dart.void, [core.List$(core.int)]),
    addByte: dart.fnType(dart.void, [core.int]),
    [_grow]: dart.fnType(dart.void, [core.int]),
    takeBytes: dart.fnType(typed_data.Uint8List, []),
    toBytes: dart.fnType(typed_data.Uint8List, []),
    clear: dart.fnType(dart.void, []),
    [_clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_internal._CopyingBytesBuilder, () => ({
    __proto__: dart.getGetters(_internal._CopyingBytesBuilder.__proto__),
    length: core.int,
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(_internal._CopyingBytesBuilder, I[25]);
  dart.setFieldSignature(_internal._CopyingBytesBuilder, () => ({
    __proto__: dart.getFields(_internal._CopyingBytesBuilder.__proto__),
    [_length$]: dart.fieldType(core.int),
    [_buffer]: dart.fieldType(typed_data.Uint8List)
  }));
  dart.defineLazy(_internal._CopyingBytesBuilder, {
    /*_internal._CopyingBytesBuilder._initSize*/get _initSize() {
      return 1024;
    },
    /*_internal._CopyingBytesBuilder._emptyList*/get _emptyList() {
      return _native_typed_data.NativeUint8List.new(0);
    }
  }, false);
  var _chunks = dart.privateName(_internal, "_chunks");
  _internal._BytesBuilder = class _BytesBuilder extends core.Object {
    add(bytes) {
      if (bytes == null) dart.nullFailed(I[32], 181, 22, "bytes");
      let typedBytes = null;
      if (typed_data.Uint8List.is(bytes)) {
        typedBytes = bytes;
      } else {
        typedBytes = _native_typed_data.NativeUint8List.fromList(bytes);
      }
      this[_chunks][$add](typedBytes);
      this[_length$] = dart.notNull(this[_length$]) + dart.notNull(typedBytes[$length]);
    }
    addByte(byte) {
      let t67;
      if (byte == null) dart.nullFailed(I[32], 192, 20, "byte");
      this[_chunks][$add]((t67 = _native_typed_data.NativeUint8List.new(1), (() => {
        t67[$_set](0, byte);
        return t67;
      })()));
      this[_length$] = dart.notNull(this[_length$]) + 1;
    }
    takeBytes() {
      if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
      if (this[_chunks][$length] === 1) {
        let buffer = this[_chunks][$_get](0);
        this[_clear]();
        return buffer;
      }
      let buffer = _native_typed_data.NativeUint8List.new(this[_length$]);
      let offset = 0;
      for (let chunk of this[_chunks]) {
        buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
        offset = offset + dart.notNull(chunk[$length]);
      }
      this[_clear]();
      return buffer;
    }
    toBytes() {
      if (this[_length$] === 0) return _internal._CopyingBytesBuilder._emptyList;
      let buffer = _native_typed_data.NativeUint8List.new(this[_length$]);
      let offset = 0;
      for (let chunk of this[_chunks]) {
        buffer[$setRange](offset, offset + dart.notNull(chunk[$length]), chunk);
        offset = offset + dart.notNull(chunk[$length]);
      }
      return buffer;
    }
    get length() {
      return this[_length$];
    }
    get isEmpty() {
      return this[_length$] === 0;
    }
    get isNotEmpty() {
      return this[_length$] !== 0;
    }
    clear() {
      this[_clear]();
    }
    [_clear]() {
      this[_length$] = 0;
      this[_chunks][$clear]();
    }
  };
  (_internal._BytesBuilder.new = function() {
    this[_length$] = 0;
    this[_chunks] = T$.JSArrayOfUint8List().of([]);
    ;
  }).prototype = _internal._BytesBuilder.prototype;
  dart.addTypeTests(_internal._BytesBuilder);
  dart.addTypeCaches(_internal._BytesBuilder);
  _internal._BytesBuilder[dart.implements] = () => [_internal.BytesBuilder];
  dart.setMethodSignature(_internal._BytesBuilder, () => ({
    __proto__: dart.getMethods(_internal._BytesBuilder.__proto__),
    add: dart.fnType(dart.void, [core.List$(core.int)]),
    addByte: dart.fnType(dart.void, [core.int]),
    takeBytes: dart.fnType(typed_data.Uint8List, []),
    toBytes: dart.fnType(typed_data.Uint8List, []),
    clear: dart.fnType(dart.void, []),
    [_clear]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_internal._BytesBuilder, () => ({
    __proto__: dart.getGetters(_internal._BytesBuilder.__proto__),
    length: core.int,
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(_internal._BytesBuilder, I[25]);
  dart.setFieldSignature(_internal._BytesBuilder, () => ({
    __proto__: dart.getFields(_internal._BytesBuilder.__proto__),
    [_length$]: dart.fieldType(core.int),
    [_chunks]: dart.finalFieldType(core.List$(typed_data.Uint8List))
  }));
  core.Iterable$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
    class Iterable extends core.Object {
      static generate(count, generator = null) {
        if (count == null) dart.nullFailed(I[34], 102, 33, "count");
        if (dart.notNull(count) <= 0) return new (_internal.EmptyIterable$(E)).new();
        return new (core._GeneratorIterable$(E)).new(count, generator);
      }
      static castFrom(S, T, source) {
        if (source == null) dart.nullFailed(I[34], 119, 49, "source");
        return _internal.CastIterable$(S, T).new(source);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
      cast(R) {
        return core.Iterable.castFrom(E, R, this);
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(I[34], 165, 38, "other");
        let self = this;
        if (EfficientLengthIterableOfE().is(self)) {
          return FollowedByIterableOfE().firstEfficient(self, other);
        }
        return new (FollowedByIterableOfE()).new(this, other);
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[34], 185, 24, "f");
        return _internal.MappedIterable$(E, T).new(this, f);
      }
      where(test) {
        if (test == null) dart.nullFailed(I[34], 199, 26, "test");
        return new (WhereIterableOfE()).new(this, test);
      }
      whereType(T) {
        return new (_internal.WhereTypeIterable$(T)).new(this);
      }
      expand(T, f) {
        if (f == null) dart.nullFailed(I[34], 230, 37, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      contains(element) {
        for (let e of this) {
          if (dart.equals(e, element)) return true;
        }
        return false;
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[34], 256, 21, "f");
        for (let element of this)
          f(element);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[34], 280, 14, "combine");
        let iterator = this[$iterator];
        if (!dart.test(iterator.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let value = iterator.current;
        while (dart.test(iterator.moveNext())) {
          value = combine(value, iterator.current);
        }
        return value;
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[34], 309, 31, "combine");
        let value = initialValue;
        for (let element of this)
          value = combine(value, element);
        return value;
      }
      every(test) {
        if (test == null) dart.nullFailed(I[34], 319, 19, "test");
        for (let element of this) {
          if (!dart.test(test(element))) return false;
        }
        return true;
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[34], 332, 23, "separator");
        let iterator = this[$iterator];
        if (!dart.test(iterator.moveNext())) return "";
        let buffer = new core.StringBuffer.new();
        if (separator == null || separator === "") {
          do {
            buffer.write(dart.toString(iterator.current));
          } while (dart.test(iterator.moveNext()));
        } else {
          buffer.write(dart.toString(iterator.current));
          while (dart.test(iterator.moveNext())) {
            buffer.write(separator);
            buffer.write(dart.toString(iterator.current));
          }
        }
        return buffer.toString();
      }
      any(test) {
        if (test == null) dart.nullFailed(I[34], 354, 17, "test");
        for (let element of this) {
          if (dart.test(test(element))) return true;
        }
        return false;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[34], 365, 24, "growable");
        return ListOfE().of(this, {growable: growable});
      }
      toSet() {
        return LinkedHashSetOfE().of(this);
      }
      get length() {
        if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, I[34], 384, 12, "this is! EfficientLengthIterable");
        let count = 0;
        let it = this[$iterator];
        while (dart.test(it.moveNext())) {
          count = count + 1;
        }
        return count;
      }
      get isEmpty() {
        return !dart.test(this[$iterator].moveNext());
      }
      get isNotEmpty() {
        return !dart.test(this[$isEmpty]);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[34], 412, 24, "count");
        return TakeIterableOfE().new(this, count);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[34], 424, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[34], 442, 24, "count");
        return SkipIterableOfE().new(this, count);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[34], 456, 30, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      get first() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        return it.current;
      }
      get last() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let result = null;
        do {
          result = it.current;
        } while (dart.test(it.moveNext()));
        return result;
      }
      get single() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
        let result = it.current;
        if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
        return result;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[34], 511, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        for (let element of this) {
          if (dart.test(test(element))) return element;
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[34], 531, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t70) {
          result$35isSet = true;
          return result = t70;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[34], 552, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t75) {
          result$35isSet = true;
          return result = t75;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            if (foundMatching) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[34], 578, 19, "index");
        core.RangeError.checkNotNegative(index, "index");
        let elementIndex = 0;
        for (let element of this) {
          if (index === elementIndex) return element;
          elementIndex = elementIndex + 1;
        }
        dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
      }
      toString() {
        return collection.IterableBase.iterableToShortString(this, "(", ")");
      }
    }
    (Iterable.new = function() {
      ;
    }).prototype = Iterable.prototype;
    dart.addTypeTests(Iterable);
    Iterable.prototype[dart.isIterable] = true;
    dart.addTypeCaches(Iterable);
    dart.setMethodSignature(Iterable, () => ({
      __proto__: dart.getMethods(Iterable.__proto__),
      cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      join: dart.fnType(core.String, [], [core.String]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), []),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      elementAt: dart.fnType(E, [core.int]),
      [$elementAt]: dart.fnType(E, [core.int])
    }));
    dart.setGetterSignature(Iterable, () => ({
      __proto__: dart.getGetters(Iterable.__proto__),
      length: core.int,
      [$length]: core.int,
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      first: E,
      [$first]: E,
      last: E,
      [$last]: E,
      single: E,
      [$single]: E
    }));
    dart.setLibraryUri(Iterable, I[8]);
    dart.defineExtensionMethods(Iterable, [
      'cast',
      'followedBy',
      'map',
      'where',
      'whereType',
      'expand',
      'contains',
      'forEach',
      'reduce',
      'fold',
      'every',
      'join',
      'any',
      'toList',
      'toSet',
      'take',
      'takeWhile',
      'skip',
      'skipWhile',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'elementAt',
      'toString'
    ]);
    dart.defineExtensionAccessors(Iterable, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last',
      'single'
    ]);
    return Iterable;
  });
  core.Iterable = core.Iterable$();
  dart.addTypeTests(core.Iterable, dart.isIterable);
  const _is__CastIterableBase_default = Symbol('_is__CastIterableBase_default');
  _internal._CastIterableBase$ = dart.generic((S, T) => {
    var CastIteratorOfS$T = () => (CastIteratorOfS$T = dart.constFn(_internal.CastIterator$(S, T)))();
    var CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
    var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
    var VoidToS = () => (VoidToS = dart.constFn(dart.fnType(S, [])))();
    var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
    var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
    class _CastIterableBase extends core.Iterable$(T) {
      get iterator() {
        return new (CastIteratorOfS$T()).new(this[_source$][$iterator]);
      }
      get length() {
        return this[_source$][$length];
      }
      get isEmpty() {
        return this[_source$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_source$][$isNotEmpty];
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[33], 39, 24, "count");
        return CastIterableOfS$T().new(this[_source$][$skip](count));
      }
      take(count) {
        if (count == null) dart.nullFailed(I[33], 40, 24, "count");
        return CastIterableOfS$T().new(this[_source$][$take](count));
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[33], 42, 19, "index");
        return T.as(this[_source$][$elementAt](index));
      }
      get first() {
        return T.as(this[_source$][$first]);
      }
      get last() {
        return T.as(this[_source$][$last]);
      }
      get single() {
        return T.as(this[_source$][$single]);
      }
      contains(other) {
        return this[_source$][$contains](other);
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[33], 51, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        return T.as(this[_source$][$lastWhere](dart.fn(element => test(T.as(element)), STobool()), {orElse: orElse == null ? null : dart.fn(() => S.as(orElse()), VoidToS())}));
      }
      toString() {
        return dart.toString(this[_source$]);
      }
    }
    (_CastIterableBase.new = function() {
      _CastIterableBase.__proto__.new.call(this);
      ;
    }).prototype = _CastIterableBase.prototype;
    dart.addTypeTests(_CastIterableBase);
    _CastIterableBase.prototype[_is__CastIterableBase_default] = true;
    dart.addTypeCaches(_CastIterableBase);
    dart.setGetterSignature(_CastIterableBase, () => ({
      __proto__: dart.getGetters(_CastIterableBase.__proto__),
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T)
    }));
    dart.setLibraryUri(_CastIterableBase, I[25]);
    dart.defineExtensionMethods(_CastIterableBase, [
      'skip',
      'take',
      'elementAt',
      'contains',
      'lastWhere',
      'toString'
    ]);
    dart.defineExtensionAccessors(_CastIterableBase, [
      'iterator',
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last',
      'single'
    ]);
    return _CastIterableBase;
  });
  _internal._CastIterableBase = _internal._CastIterableBase$();
  dart.addTypeTests(_internal._CastIterableBase, _is__CastIterableBase_default);
  const _is_CastIterator_default = Symbol('_is_CastIterator_default');
  _internal.CastIterator$ = dart.generic((S, T) => {
    class CastIterator extends core.Object {
      moveNext() {
        return this[_source$].moveNext();
      }
      get current() {
        return T.as(this[_source$].current);
      }
    }
    (CastIterator.new = function(_source) {
      if (_source == null) dart.nullFailed(I[33], 60, 21, "_source");
      this[_source$] = _source;
      ;
    }).prototype = CastIterator.prototype;
    dart.addTypeTests(CastIterator);
    CastIterator.prototype[_is_CastIterator_default] = true;
    dart.addTypeCaches(CastIterator);
    CastIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(CastIterator, () => ({
      __proto__: dart.getMethods(CastIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(CastIterator, () => ({
      __proto__: dart.getGetters(CastIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(CastIterator, I[25]);
    dart.setFieldSignature(CastIterator, () => ({
      __proto__: dart.getFields(CastIterator.__proto__),
      [_source$]: dart.fieldType(core.Iterator$(S))
    }));
    return CastIterator;
  });
  _internal.CastIterator = _internal.CastIterator$();
  dart.addTypeTests(_internal.CastIterator, _is_CastIterator_default);
  var _source$0 = dart.privateName(_internal, "CastIterable._source");
  const _is_CastIterable_default = Symbol('_is_CastIterable_default');
  _internal.CastIterable$ = dart.generic((S, T) => {
    class CastIterable extends _internal._CastIterableBase$(S, T) {
      get [_source$]() {
        return this[_source$0];
      }
      set [_source$](value) {
        super[_source$] = value;
      }
      static new(source) {
        if (source == null) dart.nullFailed(I[33], 70, 36, "source");
        if (_internal.EfficientLengthIterable$(S).is(source)) {
          return new (_internal._EfficientLengthCastIterable$(S, T)).new(source);
        }
        return new (_internal.CastIterable$(S, T)).__(source);
      }
      cast(R) {
        return _internal.CastIterable$(S, R).new(this[_source$]);
      }
    }
    (CastIterable.__ = function(_source) {
      if (_source == null) dart.nullFailed(I[33], 68, 23, "_source");
      this[_source$0] = _source;
      CastIterable.__proto__.new.call(this);
      ;
    }).prototype = CastIterable.prototype;
    dart.addTypeTests(CastIterable);
    CastIterable.prototype[_is_CastIterable_default] = true;
    dart.addTypeCaches(CastIterable);
    dart.setMethodSignature(CastIterable, () => ({
      __proto__: dart.getMethods(CastIterable.__proto__),
      cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastIterable, I[25]);
    dart.setFieldSignature(CastIterable, () => ({
      __proto__: dart.getFields(CastIterable.__proto__),
      [_source$]: dart.finalFieldType(core.Iterable$(S))
    }));
    dart.defineExtensionMethods(CastIterable, ['cast']);
    return CastIterable;
  });
  _internal.CastIterable = _internal.CastIterable$();
  dart.addTypeTests(_internal.CastIterable, _is_CastIterable_default);
  const _is__EfficientLengthCastIterable_default = Symbol('_is__EfficientLengthCastIterable_default');
  _internal._EfficientLengthCastIterable$ = dart.generic((S, T) => {
    class _EfficientLengthCastIterable extends _internal.CastIterable$(S, T) {}
    (_EfficientLengthCastIterable.new = function(source) {
      if (source == null) dart.nullFailed(I[33], 82, 59, "source");
      _EfficientLengthCastIterable.__proto__.__.call(this, source);
      ;
    }).prototype = _EfficientLengthCastIterable.prototype;
    dart.addTypeTests(_EfficientLengthCastIterable);
    _EfficientLengthCastIterable.prototype[_is__EfficientLengthCastIterable_default] = true;
    dart.addTypeCaches(_EfficientLengthCastIterable);
    _EfficientLengthCastIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
    dart.setLibraryUri(_EfficientLengthCastIterable, I[25]);
    return _EfficientLengthCastIterable;
  });
  _internal._EfficientLengthCastIterable = _internal._EfficientLengthCastIterable$();
  dart.addTypeTests(_internal._EfficientLengthCastIterable, _is__EfficientLengthCastIterable_default);
  const _is__CastListBase_default = Symbol('_is__CastListBase_default');
  _internal._CastListBase$ = dart.generic((S, T) => {
    var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
    var SAndSToint = () => (SAndSToint = dart.constFn(dart.fnType(core.int, [S, S])))();
    var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
    var CastIterableOfS$T = () => (CastIterableOfS$T = dart.constFn(_internal.CastIterable$(S, T)))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    const _CastIterableBase_ListMixin$36 = class _CastIterableBase_ListMixin extends _internal._CastIterableBase$(S, T) {};
    (_CastIterableBase_ListMixin$36.new = function() {
      _CastIterableBase_ListMixin$36.__proto__.new.call(this);
    }).prototype = _CastIterableBase_ListMixin$36.prototype;
    dart.applyMixin(_CastIterableBase_ListMixin$36, collection.ListMixin$(T));
    class _CastListBase extends _CastIterableBase_ListMixin$36 {
      _get(index) {
        if (index == null) dart.nullFailed(I[33], 99, 21, "index");
        return T.as(this[_source$][$_get](index));
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[33], 101, 25, "index");
        T.as(value);
        this[_source$][$_set](index, S.as(value));
        return value$;
      }
      set length(length) {
        if (length == null) dart.nullFailed(I[33], 105, 23, "length");
        this[_source$][$length] = length;
      }
      get length() {
        return super.length;
      }
      add(value) {
        T.as(value);
        this[_source$][$add](S.as(value));
      }
      addAll(values) {
        IterableOfT().as(values);
        if (values == null) dart.nullFailed(I[33], 113, 27, "values");
        this[_source$][$addAll](CastIterableOfT$S().new(values));
      }
      sort(compare = null) {
        this[_source$][$sort](compare == null ? null : dart.fn((v1, v2) => compare(T.as(v1), T.as(v2)), SAndSToint()));
      }
      shuffle(random = null) {
        this[_source$][$shuffle](random);
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[33], 126, 19, "index");
        T.as(element);
        this[_source$][$insert](index, S.as(element));
      }
      insertAll(index, elements) {
        if (index == null) dart.nullFailed(I[33], 130, 22, "index");
        IterableOfT().as(elements);
        if (elements == null) dart.nullFailed(I[33], 130, 41, "elements");
        this[_source$][$insertAll](index, CastIterableOfT$S().new(elements));
      }
      setAll(index, elements) {
        if (index == null) dart.nullFailed(I[33], 134, 19, "index");
        IterableOfT().as(elements);
        if (elements == null) dart.nullFailed(I[33], 134, 38, "elements");
        this[_source$][$setAll](index, CastIterableOfT$S().new(elements));
      }
      remove(value) {
        return this[_source$][$remove](value);
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[33], 140, 18, "index");
        return T.as(this[_source$][$removeAt](index));
      }
      removeLast() {
        return T.as(this[_source$][$removeLast]());
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[33], 144, 25, "test");
        this[_source$][$removeWhere](dart.fn(element => test(T.as(element)), STobool()));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[33], 148, 25, "test");
        this[_source$][$retainWhere](dart.fn(element => test(T.as(element)), STobool()));
      }
      getRange(start, end) {
        if (start == null) dart.nullFailed(I[33], 152, 28, "start");
        if (end == null) dart.nullFailed(I[33], 152, 39, "end");
        return CastIterableOfS$T().new(this[_source$][$getRange](start, end));
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[33], 155, 21, "start");
        if (end == null) dart.nullFailed(I[33], 155, 32, "end");
        IterableOfT().as(iterable);
        if (iterable == null) dart.nullFailed(I[33], 155, 49, "iterable");
        if (skipCount == null) dart.nullFailed(I[33], 155, 64, "skipCount");
        this[_source$][$setRange](start, end, CastIterableOfT$S().new(iterable), skipCount);
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[33], 159, 24, "start");
        if (end == null) dart.nullFailed(I[33], 159, 35, "end");
        this[_source$][$removeRange](start, end);
      }
      fillRange(start, end, fillValue = null) {
        if (start == null) dart.nullFailed(I[33], 163, 22, "start");
        if (end == null) dart.nullFailed(I[33], 163, 33, "end");
        TN().as(fillValue);
        this[_source$][$fillRange](start, end, S.as(fillValue));
      }
      replaceRange(start, end, replacement) {
        if (start == null) dart.nullFailed(I[33], 167, 25, "start");
        if (end == null) dart.nullFailed(I[33], 167, 36, "end");
        IterableOfT().as(replacement);
        if (replacement == null) dart.nullFailed(I[33], 167, 53, "replacement");
        this[_source$][$replaceRange](start, end, CastIterableOfT$S().new(replacement));
      }
    }
    (_CastListBase.new = function() {
      _CastListBase.__proto__.new.call(this);
      ;
    }).prototype = _CastListBase.prototype;
    dart.addTypeTests(_CastListBase);
    _CastListBase.prototype[_is__CastListBase_default] = true;
    dart.addTypeCaches(_CastListBase);
    dart.setMethodSignature(_CastListBase, () => ({
      __proto__: dart.getMethods(_CastListBase.__proto__),
      _get: dart.fnType(T, [core.int]),
      [$_get]: dart.fnType(T, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
    }));
    dart.setSetterSignature(_CastListBase, () => ({
      __proto__: dart.getSetters(_CastListBase.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_CastListBase, I[25]);
    dart.defineExtensionMethods(_CastListBase, [
      '_get',
      '_set',
      'add',
      'addAll',
      'sort',
      'shuffle',
      'insert',
      'insertAll',
      'setAll',
      'remove',
      'removeAt',
      'removeLast',
      'removeWhere',
      'retainWhere',
      'getRange',
      'setRange',
      'removeRange',
      'fillRange',
      'replaceRange'
    ]);
    dart.defineExtensionAccessors(_CastListBase, ['length']);
    return _CastListBase;
  });
  _internal._CastListBase = _internal._CastListBase$();
  dart.addTypeTests(_internal._CastListBase, _is__CastListBase_default);
  var _source$1 = dart.privateName(_internal, "CastList._source");
  const _is_CastList_default = Symbol('_is_CastList_default');
  _internal.CastList$ = dart.generic((S, T) => {
    class CastList extends _internal._CastListBase$(S, T) {
      get [_source$]() {
        return this[_source$1];
      }
      set [_source$](value) {
        super[_source$] = value;
      }
      cast(R) {
        return new (_internal.CastList$(S, R)).new(this[_source$]);
      }
    }
    (CastList.new = function(_source) {
      if (_source == null) dart.nullFailed(I[33], 174, 17, "_source");
      this[_source$1] = _source;
      CastList.__proto__.new.call(this);
      ;
    }).prototype = CastList.prototype;
    dart.addTypeTests(CastList);
    CastList.prototype[_is_CastList_default] = true;
    dart.addTypeCaches(CastList);
    dart.setMethodSignature(CastList, () => ({
      __proto__: dart.getMethods(CastList.__proto__),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastList, I[25]);
    dart.setFieldSignature(CastList, () => ({
      __proto__: dart.getFields(CastList.__proto__),
      [_source$]: dart.finalFieldType(core.List$(S))
    }));
    dart.defineExtensionMethods(CastList, ['cast']);
    return CastList;
  });
  _internal.CastList = _internal.CastList$();
  dart.addTypeTests(_internal.CastList, _is_CastList_default);
  var _source$2 = dart.privateName(_internal, "CastSet._source");
  var _emptySet$ = dart.privateName(_internal, "_emptySet");
  var _conditionalAdd = dart.privateName(_internal, "_conditionalAdd");
  var _clone = dart.privateName(_internal, "_clone");
  const _is_CastSet_default = Symbol('_is_CastSet_default');
  _internal.CastSet$ = dart.generic((S, T) => {
    var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
    var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
    var CastSetOfS$T = () => (CastSetOfS$T = dart.constFn(_internal.CastSet$(S, T)))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
    class CastSet extends _internal._CastIterableBase$(S, T) {
      get [_source$]() {
        return this[_source$2];
      }
      set [_source$](value) {
        super[_source$] = value;
      }
      static _defaultEmptySet(R) {
        return new (collection._HashSet$(R)).new();
      }
      cast(R) {
        return new (_internal.CastSet$(S, R)).new(this[_source$], this[_emptySet$]);
      }
      add(value) {
        T.as(value);
        return this[_source$].add(S.as(value));
      }
      addAll(elements) {
        IterableOfT().as(elements);
        if (elements == null) dart.nullFailed(I[33], 194, 27, "elements");
        this[_source$].addAll(CastIterableOfT$S().new(elements));
      }
      remove(object) {
        return this[_source$].remove(object);
      }
      removeAll(objects) {
        if (objects == null) dart.nullFailed(I[33], 200, 36, "objects");
        this[_source$].removeAll(objects);
      }
      retainAll(objects) {
        if (objects == null) dart.nullFailed(I[33], 204, 36, "objects");
        this[_source$].retainAll(objects);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[33], 208, 25, "test");
        this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[33], 212, 25, "test");
        this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
      }
      containsAll(objects) {
        if (objects == null) dart.nullFailed(I[33], 216, 38, "objects");
        return this[_source$].containsAll(objects);
      }
      intersection(other) {
        if (other == null) dart.nullFailed(I[33], 218, 36, "other");
        if (this[_emptySet$] != null) return this[_conditionalAdd](other, true);
        return new (CastSetOfS$T()).new(this[_source$].intersection(other), null);
      }
      difference(other) {
        if (other == null) dart.nullFailed(I[33], 223, 34, "other");
        if (this[_emptySet$] != null) return this[_conditionalAdd](other, false);
        return new (CastSetOfS$T()).new(this[_source$].difference(other), null);
      }
      [_conditionalAdd](other, otherContains) {
        if (other == null) dart.nullFailed(I[33], 228, 39, "other");
        if (otherContains == null) dart.nullFailed(I[33], 228, 51, "otherContains");
        let emptySet = this[_emptySet$];
        let result = emptySet == null ? new (_HashSetOfT()).new() : emptySet(T);
        for (let element of this[_source$]) {
          let castElement = T.as(element);
          if (otherContains == other.contains(castElement)) result.add(castElement);
        }
        return result;
      }
      union(other) {
        let t77;
        SetOfT().as(other);
        if (other == null) dart.nullFailed(I[33], 238, 23, "other");
        t77 = this[_clone]();
        return (() => {
          t77.addAll(other);
          return t77;
        })();
      }
      clear() {
        this[_source$].clear();
      }
      [_clone]() {
        let emptySet = this[_emptySet$];
        let result = emptySet == null ? new (_HashSetOfT()).new() : emptySet(T);
        result.addAll(this);
        return result;
      }
      toSet() {
        return this[_clone]();
      }
      lookup(key) {
        return T.as(this[_source$].lookup(key));
      }
    }
    (CastSet.new = function(_source, _emptySet) {
      if (_source == null) dart.nullFailed(I[33], 187, 16, "_source");
      this[_source$2] = _source;
      this[_emptySet$] = _emptySet;
      CastSet.__proto__.new.call(this);
      ;
    }).prototype = CastSet.prototype;
    dart.addTypeTests(CastSet);
    CastSet.prototype[_is_CastSet_default] = true;
    dart.addTypeCaches(CastSet);
    CastSet[dart.implements] = () => [core.Set$(T)];
    dart.setMethodSignature(CastSet, () => ({
      __proto__: dart.getMethods(CastSet.__proto__),
      cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      intersection: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object))]),
      [_conditionalAdd]: dart.fnType(core.Set$(T), [core.Set$(dart.nullable(core.Object)), core.bool]),
      union: dart.fnType(core.Set$(T), [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [_clone]: dart.fnType(core.Set$(T), []),
      lookup: dart.fnType(T, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(CastSet, I[25]);
    dart.setFieldSignature(CastSet, () => ({
      __proto__: dart.getFields(CastSet.__proto__),
      [_source$]: dart.finalFieldType(core.Set$(S)),
      [_emptySet$]: dart.finalFieldType(dart.nullable(dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)])))
    }));
    dart.defineExtensionMethods(CastSet, ['cast', 'toSet']);
    return CastSet;
  });
  _internal.CastSet = _internal.CastSet$();
  dart.addTypeTests(_internal.CastSet, _is_CastSet_default);
  const _is_MapMixin_default = Symbol('_is_MapMixin_default');
  collection.MapMixin$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var KToMapEntryOfK$V = () => (KToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [K])))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var JSArrayOfK = () => (JSArrayOfK = dart.constFn(_interceptors.JSArray$(K)))();
    var _MapBaseValueIterableOfK$V = () => (_MapBaseValueIterableOfK$V = dart.constFn(collection._MapBaseValueIterable$(K, V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class MapMixin extends core.Object {
      cast(RK, RV) {
        return core.Map.castFrom(K, V, RK, RV, this);
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[35], 121, 21, "action");
        for (let key of this[$keys]) {
          action(key, V.as(this[$_get](key)));
        }
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[35], 127, 25, "other");
        for (let key of other[$keys]) {
          this[$_set](key, V.as(other[$_get](key)));
        }
      }
      containsValue(value) {
        for (let key of this[$keys]) {
          if (dart.equals(this[$_get](key), value)) return true;
        }
        return false;
      }
      putIfAbsent(key, ifAbsent) {
        let t78, t77;
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[35], 140, 26, "ifAbsent");
        if (dart.test(this[$containsKey](key))) {
          return V.as(this[$_get](key));
        }
        t77 = key;
        t78 = ifAbsent();
        this[$_set](t77, t78);
        return t78;
      }
      update(key, update, opts) {
        let t78, t77, t78$, t77$;
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[35], 147, 21, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        if (dart.test(this[$containsKey](key))) {
          t77 = key;
          t78 = update(V.as(this[$_get](key)));
          this[$_set](t77, t78);
          return t78;
        }
        if (ifAbsent != null) {
          t77$ = key;
          t78$ = ifAbsent();
          this[$_set](t77$, t78$);
          return t78$;
        }
        dart.throw(new core.ArgumentError.value(key, "key", "Key not in map."));
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[35], 157, 20, "update");
        for (let key of this[$keys]) {
          this[$_set](key, update(key, V.as(this[$_get](key))));
        }
      }
      get entries() {
        return this[$keys][$map](MapEntryOfK$V(), dart.fn(key => new (MapEntryOfK$V()).__(key, V.as(this[$_get](key))), KToMapEntryOfK$V()));
      }
      map(K2, V2, transform) {
        if (transform == null) dart.nullFailed(I[35], 167, 44, "transform");
        let result = new (_js_helper.LinkedMap$(K2, V2)).new();
        for (let key of this[$keys]) {
          let entry = transform(key, V.as(this[$_get](key)));
          result[$_set](entry.key, entry.value);
        }
        return result;
      }
      addEntries(newEntries) {
        IterableOfMapEntryOfK$V().as(newEntries);
        if (newEntries == null) dart.nullFailed(I[35], 176, 44, "newEntries");
        for (let entry of newEntries) {
          this[$_set](entry.key, entry.value);
        }
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[35], 182, 25, "test");
        let keysToRemove = JSArrayOfK().of([]);
        for (let key of this[$keys]) {
          if (dart.test(test(key, V.as(this[$_get](key))))) keysToRemove[$add](key);
        }
        for (let key of keysToRemove) {
          this[$remove](key);
        }
      }
      containsKey(key) {
        return this[$keys][$contains](key);
      }
      get length() {
        return this[$keys][$length];
      }
      get isEmpty() {
        return this[$keys][$isEmpty];
      }
      get isNotEmpty() {
        return this[$keys][$isNotEmpty];
      }
      get values() {
        return new (_MapBaseValueIterableOfK$V()).new(this);
      }
      toString() {
        return collection.MapBase.mapToString(this);
      }
    }
    (MapMixin.new = function() {
      ;
    }).prototype = MapMixin.prototype;
    MapMixin.prototype[dart.isMap] = true;
    dart.addTypeTests(MapMixin);
    MapMixin.prototype[_is_MapMixin_default] = true;
    dart.addTypeCaches(MapMixin);
    MapMixin[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(MapMixin, () => ({
      __proto__: dart.getMethods(MapMixin.__proto__),
      cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(MapMixin, () => ({
      __proto__: dart.getGetters(MapMixin.__proto__),
      entries: core.Iterable$(core.MapEntry$(K, V)),
      [$entries]: core.Iterable$(core.MapEntry$(K, V)),
      length: core.int,
      [$length]: core.int,
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      values: core.Iterable$(V),
      [$values]: core.Iterable$(V)
    }));
    dart.setLibraryUri(MapMixin, I[24]);
    dart.defineExtensionMethods(MapMixin, [
      'cast',
      'forEach',
      'addAll',
      'containsValue',
      'putIfAbsent',
      'update',
      'updateAll',
      'map',
      'addEntries',
      'removeWhere',
      'containsKey',
      'toString'
    ]);
    dart.defineExtensionAccessors(MapMixin, [
      'entries',
      'length',
      'isEmpty',
      'isNotEmpty',
      'values'
    ]);
    return MapMixin;
  });
  collection.MapMixin = collection.MapMixin$();
  dart.addTypeTests(collection.MapMixin, _is_MapMixin_default);
  const _is_MapBase_default = Symbol('_is_MapBase_default');
  collection.MapBase$ = dart.generic((K, V) => {
    class MapBase extends collection.MapMixin$(K, V) {
      static mapToString(m) {
        if (m == null) dart.nullFailed(I[35], 22, 51, "m");
        if (dart.test(collection._isToStringVisiting(m))) {
          return "{...}";
        }
        let result = new core.StringBuffer.new();
        try {
          collection._toStringVisiting[$add](m);
          result.write("{");
          let first = true;
          m[$forEach](dart.fn((k, v) => {
            if (!first) {
              result.write(", ");
            }
            first = false;
            result.write(k);
            result.write(": ");
            result.write(v);
          }, T$.ObjectNAndObjectNTovoid()));
          result.write("}");
        } finally {
          if (!core.identical(collection._toStringVisiting[$last], m)) dart.assertFailed(null, I[35], 44, 14, "identical(_toStringVisiting.last, m)");
          collection._toStringVisiting[$removeLast]();
        }
        return result.toString();
      }
      static _id(x) {
        return x;
      }
      static _fillMapWithMappedIterable(map, iterable, key, value) {
        if (map == null) dart.nullFailed(I[35], 58, 29, "map");
        if (iterable == null) dart.nullFailed(I[35], 59, 25, "iterable");
        key == null ? key = C[19] || CT.C19 : null;
        value == null ? value = C[19] || CT.C19 : null;
        if (key == null) dart.throw("!");
        if (value == null) dart.throw("!");
        for (let element of iterable) {
          map[$_set](key(element), value(element));
        }
      }
      static _fillMapWithIterables(map, keys, values) {
        if (map == null) dart.nullFailed(I[35], 77, 59, "map");
        if (keys == null) dart.nullFailed(I[35], 78, 25, "keys");
        if (values == null) dart.nullFailed(I[35], 78, 49, "values");
        let keyIterator = keys[$iterator];
        let valueIterator = values[$iterator];
        let hasNextKey = keyIterator.moveNext();
        let hasNextValue = valueIterator.moveNext();
        while (dart.test(hasNextKey) && dart.test(hasNextValue)) {
          map[$_set](keyIterator.current, valueIterator.current);
          hasNextKey = keyIterator.moveNext();
          hasNextValue = valueIterator.moveNext();
        }
        if (dart.test(hasNextKey) || dart.test(hasNextValue)) {
          dart.throw(new core.ArgumentError.new("Iterables do not have same length."));
        }
      }
    }
    (MapBase.new = function() {
      ;
    }).prototype = MapBase.prototype;
    dart.addTypeTests(MapBase);
    MapBase.prototype[_is_MapBase_default] = true;
    dart.addTypeCaches(MapBase);
    dart.setLibraryUri(MapBase, I[24]);
    return MapBase;
  });
  collection.MapBase = collection.MapBase$();
  dart.addTypeTests(collection.MapBase, _is_MapBase_default);
  const _is_CastMap_default = Symbol('_is_CastMap_default');
  _internal.CastMap$ = dart.generic((SK, SV, K, V) => {
    var CastMapOfK$V$SK$SV = () => (CastMapOfK$V$SK$SV = dart.constFn(_internal.CastMap$(K, V, SK, SV)))();
    var SKAndSVTovoid = () => (SKAndSVTovoid = dart.constFn(dart.fnType(dart.void, [SK, SV])))();
    var CastIterableOfSK$K = () => (CastIterableOfSK$K = dart.constFn(_internal.CastIterable$(SK, K)))();
    var SKAndSVToSV = () => (SKAndSVToSV = dart.constFn(dart.fnType(SV, [SK, SV])))();
    var MapEntryOfSK$SV = () => (MapEntryOfSK$SV = dart.constFn(core.MapEntry$(SK, SV)))();
    var MapEntryOfSK$SVToMapEntryOfK$V = () => (MapEntryOfSK$SVToMapEntryOfK$V = dart.constFn(dart.fnType(MapEntryOfK$V(), [MapEntryOfSK$SV()])))();
    var SKAndSVTobool = () => (SKAndSVTobool = dart.constFn(dart.fnType(core.bool, [SK, SV])))();
    var VoidToSV = () => (VoidToSV = dart.constFn(dart.fnType(SV, [])))();
    var CastIterableOfSV$V = () => (CastIterableOfSV$V = dart.constFn(_internal.CastIterable$(SV, V)))();
    var SVToSV = () => (SVToSV = dart.constFn(dart.fnType(SV, [SV])))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class CastMap extends collection.MapBase$(K, V) {
      cast(RK, RV) {
        return new (_internal.CastMap$(SK, SV, RK, RV)).new(this[_source$]);
      }
      containsValue(value) {
        return this[_source$][$containsValue](value);
      }
      containsKey(key) {
        return this[_source$][$containsKey](key);
      }
      _get(key) {
        return VN().as(this[_source$][$_get](key));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        this[_source$][$_set](SK.as(key), SV.as(value));
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[33], 273, 37, "ifAbsent");
        return V.as(this[_source$][$putIfAbsent](SK.as(key), dart.fn(() => SV.as(ifAbsent()), VoidToSV())));
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[33], 276, 25, "other");
        this[_source$][$addAll](new (CastMapOfK$V$SK$SV()).new(other));
      }
      remove(key) {
        return V.as(this[_source$][$remove](key));
      }
      clear() {
        this[_source$][$clear]();
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[33], 286, 21, "f");
        this[_source$][$forEach](dart.fn((key, value) => {
          f(K.as(key), V.as(value));
        }, SKAndSVTovoid()));
      }
      get keys() {
        return CastIterableOfSK$K().new(this[_source$][$keys]);
      }
      get values() {
        return CastIterableOfSV$V().new(this[_source$][$values]);
      }
      get length() {
        return this[_source$][$length];
      }
      get isEmpty() {
        return this[_source$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_source$][$isNotEmpty];
      }
      update(key, update, opts) {
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[33], 302, 21, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return V.as(this[_source$][$update](SK.as(key), dart.fn(value => SV.as(update(V.as(value))), SVToSV()), {ifAbsent: ifAbsent == null ? null : dart.fn(() => SV.as(ifAbsent()), VoidToSV())}));
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[33], 307, 20, "update");
        this[_source$][$updateAll](dart.fn((key, value) => SV.as(update(K.as(key), V.as(value))), SKAndSVToSV()));
      }
      get entries() {
        return this[_source$][$entries][$map](MapEntryOfK$V(), dart.fn(e => {
          if (e == null) dart.nullFailed(I[33], 313, 27, "e");
          return new (MapEntryOfK$V()).__(K.as(e.key), V.as(e.value));
        }, MapEntryOfSK$SVToMapEntryOfK$V()));
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(I[33], 316, 44, "entries");
        for (let entry of entries) {
          this[_source$][$_set](SK.as(entry.key), SV.as(entry.value));
        }
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[33], 322, 25, "test");
        this[_source$][$removeWhere](dart.fn((key, value) => test(K.as(key), V.as(value)), SKAndSVTobool()));
      }
    }
    (CastMap.new = function(_source) {
      if (_source == null) dart.nullFailed(I[33], 259, 16, "_source");
      this[_source$] = _source;
      ;
    }).prototype = CastMap.prototype;
    dart.addTypeTests(CastMap);
    CastMap.prototype[_is_CastMap_default] = true;
    dart.addTypeCaches(CastMap);
    dart.setMethodSignature(CastMap, () => ({
      __proto__: dart.getMethods(CastMap.__proto__),
      cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(V, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(V, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(CastMap, () => ({
      __proto__: dart.getGetters(CastMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(CastMap, I[25]);
    dart.setFieldSignature(CastMap, () => ({
      __proto__: dart.getFields(CastMap.__proto__),
      [_source$]: dart.finalFieldType(core.Map$(SK, SV))
    }));
    dart.defineExtensionMethods(CastMap, [
      'cast',
      'containsValue',
      'containsKey',
      '_get',
      '_set',
      'putIfAbsent',
      'addAll',
      'remove',
      'clear',
      'forEach',
      'update',
      'updateAll',
      'addEntries',
      'removeWhere'
    ]);
    dart.defineExtensionAccessors(CastMap, [
      'keys',
      'values',
      'length',
      'isEmpty',
      'isNotEmpty',
      'entries'
    ]);
    return CastMap;
  });
  _internal.CastMap = _internal.CastMap$();
  dart.addTypeTests(_internal.CastMap, _is_CastMap_default);
  var _source$3 = dart.privateName(_internal, "CastQueue._source");
  const _is_CastQueue_default = Symbol('_is_CastQueue_default');
  _internal.CastQueue$ = dart.generic((S, T) => {
    var CastIterableOfT$S = () => (CastIterableOfT$S = dart.constFn(_internal.CastIterable$(T, S)))();
    var STobool = () => (STobool = dart.constFn(dart.fnType(core.bool, [S])))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    class CastQueue extends _internal._CastIterableBase$(S, T) {
      get [_source$]() {
        return this[_source$3];
      }
      set [_source$](value) {
        super[_source$] = value;
      }
      cast(R) {
        return new (_internal.CastQueue$(S, R)).new(this[_source$]);
      }
      removeFirst() {
        return T.as(this[_source$].removeFirst());
      }
      removeLast() {
        return T.as(this[_source$].removeLast());
      }
      add(value) {
        T.as(value);
        this[_source$].add(S.as(value));
      }
      addFirst(value) {
        T.as(value);
        this[_source$].addFirst(S.as(value));
      }
      addLast(value) {
        T.as(value);
        this[_source$].addLast(S.as(value));
      }
      remove(other) {
        return this[_source$].remove(other);
      }
      addAll(elements) {
        IterableOfT().as(elements);
        if (elements == null) dart.nullFailed(I[33], 348, 27, "elements");
        this[_source$].addAll(CastIterableOfT$S().new(elements));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[33], 352, 25, "test");
        this[_source$].removeWhere(dart.fn(element => test(T.as(element)), STobool()));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[33], 356, 25, "test");
        this[_source$].retainWhere(dart.fn(element => test(T.as(element)), STobool()));
      }
      clear() {
        this[_source$].clear();
      }
    }
    (CastQueue.new = function(_source) {
      if (_source == null) dart.nullFailed(I[33], 329, 18, "_source");
      this[_source$3] = _source;
      CastQueue.__proto__.new.call(this);
      ;
    }).prototype = CastQueue.prototype;
    dart.addTypeTests(CastQueue);
    CastQueue.prototype[_is_CastQueue_default] = true;
    dart.addTypeCaches(CastQueue);
    CastQueue[dart.implements] = () => [collection.Queue$(T)];
    dart.setMethodSignature(CastQueue, () => ({
      __proto__: dart.getMethods(CastQueue.__proto__),
      cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(T, []),
      removeLast: dart.fnType(T, []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [T])]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(CastQueue, I[25]);
    dart.setFieldSignature(CastQueue, () => ({
      __proto__: dart.getFields(CastQueue.__proto__),
      [_source$]: dart.finalFieldType(collection.Queue$(S))
    }));
    dart.defineExtensionMethods(CastQueue, ['cast']);
    return CastQueue;
  });
  _internal.CastQueue = _internal.CastQueue$();
  dart.addTypeTests(_internal.CastQueue, _is_CastQueue_default);
  var _message$ = dart.privateName(_internal, "_message");
  _internal.LateError = class LateError extends core.Error {
    toString() {
      let message = this[_message$];
      return message != null ? "LateInitializationError: " + dart.str(message) : "LateInitializationError";
    }
  };
  (_internal.LateError.new = function(_message = null) {
    this[_message$] = _message;
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.fieldADI = function(fieldName) {
    if (fieldName == null) dart.nullFailed(I[36], 16, 29, "fieldName");
    this[_message$] = "Field '" + dart.str(fieldName) + "' has been assigned during initialization.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.localADI = function(localName) {
    if (localName == null) dart.nullFailed(I[36], 20, 29, "localName");
    this[_message$] = "Local '" + dart.str(localName) + "' has been assigned during initialization.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.fieldNI = function(fieldName) {
    if (fieldName == null) dart.nullFailed(I[36], 25, 28, "fieldName");
    this[_message$] = "Field '" + dart.str(fieldName) + "' has not been initialized.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.localNI = function(localName) {
    if (localName == null) dart.nullFailed(I[36], 28, 28, "localName");
    this[_message$] = "Local '" + dart.str(localName) + "' has not been initialized.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.fieldAI = function(fieldName) {
    if (fieldName == null) dart.nullFailed(I[36], 31, 28, "fieldName");
    this[_message$] = "Field '" + dart.str(fieldName) + "' has already been initialized.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  (_internal.LateError.localAI = function(localName) {
    if (localName == null) dart.nullFailed(I[36], 34, 28, "localName");
    this[_message$] = "Local '" + dart.str(localName) + "' has already been initialized.";
    _internal.LateError.__proto__.new.call(this);
    ;
  }).prototype = _internal.LateError.prototype;
  dart.addTypeTests(_internal.LateError);
  dart.addTypeCaches(_internal.LateError);
  dart.setLibraryUri(_internal.LateError, I[25]);
  dart.setFieldSignature(_internal.LateError, () => ({
    __proto__: dart.getFields(_internal.LateError.__proto__),
    [_message$]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(_internal.LateError, ['toString']);
  _internal.ReachabilityError = class ReachabilityError extends core.Error {
    toString() {
      let message = this[_message$];
      return message != null ? "ReachabilityError: " + dart.str(message) : "ReachabilityError";
    }
  };
  (_internal.ReachabilityError.new = function(_message = null) {
    this[_message$] = _message;
    _internal.ReachabilityError.__proto__.new.call(this);
    ;
  }).prototype = _internal.ReachabilityError.prototype;
  dart.addTypeTests(_internal.ReachabilityError);
  dart.addTypeCaches(_internal.ReachabilityError);
  dart.setLibraryUri(_internal.ReachabilityError, I[25]);
  dart.setFieldSignature(_internal.ReachabilityError, () => ({
    __proto__: dart.getFields(_internal.ReachabilityError.__proto__),
    [_message$]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(_internal.ReachabilityError, ['toString']);
  const _is_EfficientLengthIterable_default = Symbol('_is_EfficientLengthIterable_default');
  _internal.EfficientLengthIterable$ = dart.generic(T => {
    class EfficientLengthIterable extends core.Iterable$(T) {}
    (EfficientLengthIterable.new = function() {
      EfficientLengthIterable.__proto__.new.call(this);
      ;
    }).prototype = EfficientLengthIterable.prototype;
    dart.addTypeTests(EfficientLengthIterable);
    EfficientLengthIterable.prototype[_is_EfficientLengthIterable_default] = true;
    dart.addTypeCaches(EfficientLengthIterable);
    dart.setLibraryUri(EfficientLengthIterable, I[25]);
    return EfficientLengthIterable;
  });
  _internal.EfficientLengthIterable = _internal.EfficientLengthIterable$();
  dart.addTypeTests(_internal.EfficientLengthIterable, _is_EfficientLengthIterable_default);
  const _is_ListIterable_default = Symbol('_is_ListIterable_default');
  _internal.ListIterable$ = dart.generic(E => {
    var ListIteratorOfE = () => (ListIteratorOfE = dart.constFn(_internal.ListIterator$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
    class ListIterable extends _internal.EfficientLengthIterable$(E) {
      get iterator() {
        return new (ListIteratorOfE()).new(this);
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[37], 36, 21, "action");
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          action(this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
      }
      get isEmpty() {
        return this.length === 0;
      }
      get first() {
        if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
        return this.elementAt(0);
      }
      get last() {
        if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
        return this.elementAt(dart.notNull(this.length) - 1);
      }
      get single() {
        if (this.length === 0) dart.throw(_internal.IterableElementError.noElement());
        if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
        return this.elementAt(0);
      }
      contains(element) {
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.equals(this.elementAt(i), element)) return true;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      every(test) {
        if (test == null) dart.nullFailed(I[37], 75, 19, "test");
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (!dart.test(test(this.elementAt(i)))) return false;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return true;
      }
      any(test) {
        if (test == null) dart.nullFailed(I[37], 86, 17, "test");
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (dart.test(test(this.elementAt(i)))) return true;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 97, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          let element = this.elementAt(i);
          if (dart.test(test(element))) return element;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 110, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this.length;
        for (let i = dart.notNull(length) - 1; i >= 0; i = i - 1) {
          let element = this.elementAt(i);
          if (dart.test(test(element))) return element;
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 123, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this.length;
        let match = null;
        let match$35isSet = false;
        function match$35get() {
          return match$35isSet ? match : dart.throw(new _internal.LateError.localNI("match"));
        }
        dart.fn(match$35get, VoidToE());
        function match$35set(t80) {
          match$35isSet = true;
          return match = t80;
        }
        dart.fn(match$35set, ETodynamic());
        let matchFound = false;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          let element = this.elementAt(i);
          if (dart.test(test(element))) {
            if (matchFound) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            matchFound = true;
            match$35set(element);
          }
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (matchFound) return match$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[37], 145, 23, "separator");
        let length = this.length;
        if (!separator[$isEmpty]) {
          if (length === 0) return "";
          let first = dart.str(this.elementAt(0));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          let buffer = new core.StringBuffer.new(first);
          for (let i = 1; i < dart.notNull(length); i = i + 1) {
            buffer.write(separator);
            buffer.write(this.elementAt(i));
            if (length != this.length) {
              dart.throw(new core.ConcurrentModificationError.new(this));
            }
          }
          return buffer.toString();
        } else {
          let buffer = new core.StringBuffer.new();
          for (let i = 0; i < dart.notNull(length); i = i + 1) {
            buffer.write(this.elementAt(i));
            if (length != this.length) {
              dart.throw(new core.ConcurrentModificationError.new(this));
            }
          }
          return buffer.toString();
        }
      }
      where(test) {
        if (test == null) dart.nullFailed(I[37], 174, 26, "test");
        return super[$where](test);
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[37], 176, 24, "f");
        return new (_internal.MappedListIterable$(E, T)).new(this, f);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[37], 178, 14, "combine");
        let length = this.length;
        if (length === 0) dart.throw(_internal.IterableElementError.noElement());
        let value = this.elementAt(0);
        for (let i = 1; i < dart.notNull(length); i = i + 1) {
          value = combine(value, this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return value;
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[37], 191, 31, "combine");
        let value = initialValue;
        let length = this.length;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          value = combine(value, this.elementAt(i));
          if (length != this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return value;
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[37], 203, 24, "count");
        return new (SubListIterableOfE()).new(this, count, null);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[37], 205, 30, "test");
        return super[$skipWhile](test);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[37], 207, 24, "count");
        return new (SubListIterableOfE()).new(this, 0, count);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[37], 209, 30, "test");
        return super[$takeWhile](test);
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[37], 211, 24, "growable");
        return ListOfE().of(this, {growable: growable});
      }
      toSet() {
        let result = new (_HashSetOfE()).new();
        for (let i = 0; i < dart.notNull(this.length); i = i + 1) {
          result.add(this.elementAt(i));
        }
        return result;
      }
    }
    (ListIterable.new = function() {
      ListIterable.__proto__.new.call(this);
      ;
    }).prototype = ListIterable.prototype;
    dart.addTypeTests(ListIterable);
    ListIterable.prototype[_is_ListIterable_default] = true;
    dart.addTypeCaches(ListIterable);
    dart.setMethodSignature(ListIterable, () => ({
      __proto__: dart.getMethods(ListIterable.__proto__),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ListIterable, () => ({
      __proto__: dart.getGetters(ListIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(ListIterable, I[25]);
    dart.defineExtensionMethods(ListIterable, [
      'forEach',
      'contains',
      'every',
      'any',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'join',
      'where',
      'map',
      'reduce',
      'fold',
      'skip',
      'skipWhile',
      'take',
      'takeWhile',
      'toList',
      'toSet'
    ]);
    dart.defineExtensionAccessors(ListIterable, [
      'iterator',
      'isEmpty',
      'first',
      'last',
      'single'
    ]);
    return ListIterable;
  });
  _internal.ListIterable = _internal.ListIterable$();
  dart.addTypeTests(_internal.ListIterable, _is_ListIterable_default);
  var _iterable$ = dart.privateName(_internal, "_iterable");
  var _start$ = dart.privateName(_internal, "_start");
  var _endOrLength$ = dart.privateName(_internal, "_endOrLength");
  var _endIndex = dart.privateName(_internal, "_endIndex");
  var _startIndex = dart.privateName(_internal, "_startIndex");
  const _is_SubListIterable_default = Symbol('_is_SubListIterable_default');
  _internal.SubListIterable$ = dart.generic(E => {
    var EmptyIterableOfE = () => (EmptyIterableOfE = dart.constFn(_internal.EmptyIterable$(E)))();
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    class SubListIterable extends _internal.ListIterable$(E) {
      get [_endIndex]() {
        let length = this[_iterable$][$length];
        let endOrLength = this[_endOrLength$];
        if (endOrLength == null || dart.notNull(endOrLength) > dart.notNull(length)) return length;
        return endOrLength;
      }
      get [_startIndex]() {
        let length = this[_iterable$][$length];
        if (dart.notNull(this[_start$]) > dart.notNull(length)) return length;
        return this[_start$];
      }
      get length() {
        let length = this[_iterable$][$length];
        if (dart.notNull(this[_start$]) >= dart.notNull(length)) return 0;
        let endOrLength = this[_endOrLength$];
        if (endOrLength == null || dart.notNull(endOrLength) >= dart.notNull(length)) {
          return dart.notNull(length) - dart.notNull(this[_start$]);
        }
        return dart.notNull(endOrLength) - dart.notNull(this[_start$]);
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[37], 262, 19, "index");
        let realIndex = dart.notNull(this[_startIndex]) + dart.notNull(index);
        if (dart.notNull(index) < 0 || realIndex >= dart.notNull(this[_endIndex])) {
          dart.throw(new core.IndexError.new(index, this, "index"));
        }
        return this[_iterable$][$elementAt](realIndex);
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[37], 270, 24, "count");
        core.RangeError.checkNotNegative(count, "count");
        let newStart = dart.notNull(this[_start$]) + dart.notNull(count);
        let endOrLength = this[_endOrLength$];
        if (endOrLength != null && newStart >= dart.notNull(endOrLength)) {
          return new (EmptyIterableOfE()).new();
        }
        return new (SubListIterableOfE()).new(this[_iterable$], newStart, this[_endOrLength$]);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[37], 280, 24, "count");
        core.RangeError.checkNotNegative(count, "count");
        let endOrLength = this[_endOrLength$];
        if (endOrLength == null) {
          return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], dart.notNull(this[_start$]) + dart.notNull(count));
        } else {
          let newEnd = dart.notNull(this[_start$]) + dart.notNull(count);
          if (dart.notNull(endOrLength) < newEnd) return this;
          return new (SubListIterableOfE()).new(this[_iterable$], this[_start$], newEnd);
        }
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[37], 292, 24, "growable");
        let start = this[_start$];
        let end = this[_iterable$][$length];
        let endOrLength = this[_endOrLength$];
        if (endOrLength != null && dart.notNull(endOrLength) < dart.notNull(end)) end = endOrLength;
        let length = dart.notNull(end) - dart.notNull(start);
        if (length <= 0) return ListOfE().empty({growable: growable});
        let result = ListOfE().filled(length, this[_iterable$][$elementAt](start), {growable: growable});
        for (let i = 1; i < length; i = i + 1) {
          result[$_set](i, this[_iterable$][$elementAt](dart.notNull(start) + i));
          if (dart.notNull(this[_iterable$][$length]) < dart.notNull(end)) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return result;
      }
    }
    (SubListIterable.new = function(_iterable, _start, _endOrLength) {
      if (_iterable == null) dart.nullFailed(I[37], 228, 24, "_iterable");
      if (_start == null) dart.nullFailed(I[37], 228, 40, "_start");
      this[_iterable$] = _iterable;
      this[_start$] = _start;
      this[_endOrLength$] = _endOrLength;
      SubListIterable.__proto__.new.call(this);
      core.RangeError.checkNotNegative(this[_start$], "start");
      let endOrLength = this[_endOrLength$];
      if (endOrLength != null) {
        core.RangeError.checkNotNegative(endOrLength, "end");
        if (dart.notNull(this[_start$]) > dart.notNull(endOrLength)) {
          dart.throw(new core.RangeError.range(this[_start$], 0, endOrLength, "start"));
        }
      }
    }).prototype = SubListIterable.prototype;
    dart.addTypeTests(SubListIterable);
    SubListIterable.prototype[_is_SubListIterable_default] = true;
    dart.addTypeCaches(SubListIterable);
    dart.setGetterSignature(SubListIterable, () => ({
      __proto__: dart.getGetters(SubListIterable.__proto__),
      [_endIndex]: core.int,
      [_startIndex]: core.int
    }));
    dart.setLibraryUri(SubListIterable, I[25]);
    dart.setFieldSignature(SubListIterable, () => ({
      __proto__: dart.getFields(SubListIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_start$]: dart.finalFieldType(core.int),
      [_endOrLength$]: dart.finalFieldType(dart.nullable(core.int))
    }));
    dart.defineExtensionMethods(SubListIterable, ['elementAt', 'skip', 'take', 'toList']);
    dart.defineExtensionAccessors(SubListIterable, ['length']);
    return SubListIterable;
  });
  _internal.SubListIterable = _internal.SubListIterable$();
  dart.addTypeTests(_internal.SubListIterable, _is_SubListIterable_default);
  var _current$ = dart.privateName(_internal, "_current");
  var _index$ = dart.privateName(_internal, "_index");
  const _is_ListIterator_default = Symbol('_is_ListIterator_default');
  _internal.ListIterator$ = dart.generic(E => {
    class ListIterator extends core.Object {
      get current() {
        return E.as(this[_current$]);
      }
      moveNext() {
        let length = this[_iterable$][$length];
        if (this[_length$] != length) {
          dart.throw(new core.ConcurrentModificationError.new(this[_iterable$]));
        }
        if (dart.notNull(this[_index$]) >= dart.notNull(length)) {
          this[_current$] = null;
          return false;
        }
        this[_current$] = this[_iterable$][$elementAt](this[_index$]);
        this[_index$] = dart.notNull(this[_index$]) + 1;
        return true;
      }
    }
    (ListIterator.new = function(iterable) {
      if (iterable == null) dart.nullFailed(I[37], 323, 28, "iterable");
      this[_current$] = null;
      this[_iterable$] = iterable;
      this[_length$] = iterable[$length];
      this[_index$] = 0;
      ;
    }).prototype = ListIterator.prototype;
    dart.addTypeTests(ListIterator);
    ListIterator.prototype[_is_ListIterator_default] = true;
    dart.addTypeCaches(ListIterator);
    ListIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(ListIterator, () => ({
      __proto__: dart.getMethods(ListIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(ListIterator, () => ({
      __proto__: dart.getGetters(ListIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(ListIterator, I[25]);
    dart.setFieldSignature(ListIterator, () => ({
      __proto__: dart.getFields(ListIterator.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_length$]: dart.finalFieldType(core.int),
      [_index$]: dart.fieldType(core.int),
      [_current$]: dart.fieldType(dart.nullable(E))
    }));
    return ListIterator;
  });
  _internal.ListIterator = _internal.ListIterator$();
  dart.addTypeTests(_internal.ListIterator, _is_ListIterator_default);
  var _f$ = dart.privateName(_internal, "_f");
  const _is_MappedIterable_default = Symbol('_is_MappedIterable_default');
  _internal.MappedIterable$ = dart.generic((S, T) => {
    var MappedIteratorOfS$T = () => (MappedIteratorOfS$T = dart.constFn(_internal.MappedIterator$(S, T)))();
    class MappedIterable extends core.Iterable$(T) {
      static new(iterable, $function) {
        if (iterable == null) dart.nullFailed(I[37], 352, 38, "iterable");
        if ($function == null) dart.nullFailed(I[37], 352, 50, "function");
        if (_internal.EfficientLengthIterable.is(iterable)) {
          return new (_internal.EfficientLengthMappedIterable$(S, T)).new(iterable, $function);
        }
        return new (_internal.MappedIterable$(S, T)).__(iterable, $function);
      }
      get iterator() {
        return new (MappedIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
      }
      get length() {
        return this[_iterable$][$length];
      }
      get isEmpty() {
        return this[_iterable$][$isEmpty];
      }
      get first() {
        let t82;
        t82 = this[_iterable$][$first];
        return this[_f$](t82);
      }
      get last() {
        let t82;
        t82 = this[_iterable$][$last];
        return this[_f$](t82);
      }
      get single() {
        let t82;
        t82 = this[_iterable$][$single];
        return this[_f$](t82);
      }
      elementAt(index) {
        let t82;
        if (index == null) dart.nullFailed(I[37], 371, 19, "index");
        t82 = this[_iterable$][$elementAt](index);
        return this[_f$](t82);
      }
    }
    (MappedIterable.__ = function(_iterable, _f) {
      if (_iterable == null) dart.nullFailed(I[37], 359, 25, "_iterable");
      if (_f == null) dart.nullFailed(I[37], 359, 41, "_f");
      this[_iterable$] = _iterable;
      this[_f$] = _f;
      MappedIterable.__proto__.new.call(this);
      ;
    }).prototype = MappedIterable.prototype;
    dart.addTypeTests(MappedIterable);
    MappedIterable.prototype[_is_MappedIterable_default] = true;
    dart.addTypeCaches(MappedIterable);
    dart.setGetterSignature(MappedIterable, () => ({
      __proto__: dart.getGetters(MappedIterable.__proto__),
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T)
    }));
    dart.setLibraryUri(MappedIterable, I[25]);
    dart.setFieldSignature(MappedIterable, () => ({
      __proto__: dart.getFields(MappedIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(S)),
      [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
    }));
    dart.defineExtensionMethods(MappedIterable, ['elementAt']);
    dart.defineExtensionAccessors(MappedIterable, [
      'iterator',
      'length',
      'isEmpty',
      'first',
      'last',
      'single'
    ]);
    return MappedIterable;
  });
  _internal.MappedIterable = _internal.MappedIterable$();
  dart.addTypeTests(_internal.MappedIterable, _is_MappedIterable_default);
  const _is_EfficientLengthMappedIterable_default = Symbol('_is_EfficientLengthMappedIterable_default');
  _internal.EfficientLengthMappedIterable$ = dart.generic((S, T) => {
    class EfficientLengthMappedIterable extends _internal.MappedIterable$(S, T) {}
    (EfficientLengthMappedIterable.new = function(iterable, $function) {
      if (iterable == null) dart.nullFailed(I[37], 376, 45, "iterable");
      if ($function == null) dart.nullFailed(I[37], 376, 57, "function");
      EfficientLengthMappedIterable.__proto__.__.call(this, iterable, $function);
      ;
    }).prototype = EfficientLengthMappedIterable.prototype;
    dart.addTypeTests(EfficientLengthMappedIterable);
    EfficientLengthMappedIterable.prototype[_is_EfficientLengthMappedIterable_default] = true;
    dart.addTypeCaches(EfficientLengthMappedIterable);
    EfficientLengthMappedIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(T)];
    dart.setLibraryUri(EfficientLengthMappedIterable, I[25]);
    return EfficientLengthMappedIterable;
  });
  _internal.EfficientLengthMappedIterable = _internal.EfficientLengthMappedIterable$();
  dart.addTypeTests(_internal.EfficientLengthMappedIterable, _is_EfficientLengthMappedIterable_default);
  var _iterator$ = dart.privateName(_internal, "_iterator");
  const _is_Iterator_default = Symbol('_is_Iterator_default');
  core.Iterator$ = dart.generic(E => {
    class Iterator extends core.Object {}
    (Iterator.new = function() {
      ;
    }).prototype = Iterator.prototype;
    dart.addTypeTests(Iterator);
    Iterator.prototype[_is_Iterator_default] = true;
    dart.addTypeCaches(Iterator);
    dart.setLibraryUri(Iterator, I[8]);
    return Iterator;
  });
  core.Iterator = core.Iterator$();
  dart.addTypeTests(core.Iterator, _is_Iterator_default);
  const _is_MappedIterator_default = Symbol('_is_MappedIterator_default');
  _internal.MappedIterator$ = dart.generic((S, T) => {
    class MappedIterator extends core.Iterator$(T) {
      moveNext() {
        let t82;
        if (dart.test(this[_iterator$].moveNext())) {
          this[_current$] = (t82 = this[_iterator$].current, this[_f$](t82));
          return true;
        }
        this[_current$] = null;
        return false;
      }
      get current() {
        return T.as(this[_current$]);
      }
    }
    (MappedIterator.new = function(_iterator, _f) {
      if (_iterator == null) dart.nullFailed(I[37], 385, 23, "_iterator");
      if (_f == null) dart.nullFailed(I[37], 385, 39, "_f");
      this[_current$] = null;
      this[_iterator$] = _iterator;
      this[_f$] = _f;
      ;
    }).prototype = MappedIterator.prototype;
    dart.addTypeTests(MappedIterator);
    MappedIterator.prototype[_is_MappedIterator_default] = true;
    dart.addTypeCaches(MappedIterator);
    dart.setMethodSignature(MappedIterator, () => ({
      __proto__: dart.getMethods(MappedIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(MappedIterator, () => ({
      __proto__: dart.getGetters(MappedIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(MappedIterator, I[25]);
    dart.setFieldSignature(MappedIterator, () => ({
      __proto__: dart.getFields(MappedIterator.__proto__),
      [_current$]: dart.fieldType(dart.nullable(T)),
      [_iterator$]: dart.finalFieldType(core.Iterator$(S)),
      [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
    }));
    return MappedIterator;
  });
  _internal.MappedIterator = _internal.MappedIterator$();
  dart.addTypeTests(_internal.MappedIterator, _is_MappedIterator_default);
  const _is_MappedListIterable_default = Symbol('_is_MappedListIterable_default');
  _internal.MappedListIterable$ = dart.generic((S, T) => {
    class MappedListIterable extends _internal.ListIterable$(T) {
      get length() {
        return this[_source$][$length];
      }
      elementAt(index) {
        let t82;
        if (index == null) dart.nullFailed(I[37], 411, 19, "index");
        t82 = this[_source$][$elementAt](index);
        return this[_f$](t82);
      }
    }
    (MappedListIterable.new = function(_source, _f) {
      if (_source == null) dart.nullFailed(I[37], 408, 27, "_source");
      if (_f == null) dart.nullFailed(I[37], 408, 41, "_f");
      this[_source$] = _source;
      this[_f$] = _f;
      MappedListIterable.__proto__.new.call(this);
      ;
    }).prototype = MappedListIterable.prototype;
    dart.addTypeTests(MappedListIterable);
    MappedListIterable.prototype[_is_MappedListIterable_default] = true;
    dart.addTypeCaches(MappedListIterable);
    dart.setLibraryUri(MappedListIterable, I[25]);
    dart.setFieldSignature(MappedListIterable, () => ({
      __proto__: dart.getFields(MappedListIterable.__proto__),
      [_source$]: dart.finalFieldType(core.Iterable$(S)),
      [_f$]: dart.finalFieldType(dart.fnType(T, [S]))
    }));
    dart.defineExtensionMethods(MappedListIterable, ['elementAt']);
    dart.defineExtensionAccessors(MappedListIterable, ['length']);
    return MappedListIterable;
  });
  _internal.MappedListIterable = _internal.MappedListIterable$();
  dart.addTypeTests(_internal.MappedListIterable, _is_MappedListIterable_default);
  const _is_WhereIterable_default = Symbol('_is_WhereIterable_default');
  _internal.WhereIterable$ = dart.generic(E => {
    var WhereIteratorOfE = () => (WhereIteratorOfE = dart.constFn(_internal.WhereIterator$(E)))();
    class WhereIterable extends core.Iterable$(E) {
      get iterator() {
        return new (WhereIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[37], 425, 24, "f");
        return new (_internal.MappedIterable$(E, T)).__(this, f);
      }
    }
    (WhereIterable.new = function(_iterable, _f) {
      if (_iterable == null) dart.nullFailed(I[37], 420, 22, "_iterable");
      if (_f == null) dart.nullFailed(I[37], 420, 38, "_f");
      this[_iterable$] = _iterable;
      this[_f$] = _f;
      WhereIterable.__proto__.new.call(this);
      ;
    }).prototype = WhereIterable.prototype;
    dart.addTypeTests(WhereIterable);
    WhereIterable.prototype[_is_WhereIterable_default] = true;
    dart.addTypeCaches(WhereIterable);
    dart.setMethodSignature(WhereIterable, () => ({
      __proto__: dart.getMethods(WhereIterable.__proto__),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(WhereIterable, () => ({
      __proto__: dart.getGetters(WhereIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(WhereIterable, I[25]);
    dart.setFieldSignature(WhereIterable, () => ({
      __proto__: dart.getFields(WhereIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
    }));
    dart.defineExtensionMethods(WhereIterable, ['map']);
    dart.defineExtensionAccessors(WhereIterable, ['iterator']);
    return WhereIterable;
  });
  _internal.WhereIterable = _internal.WhereIterable$();
  dart.addTypeTests(_internal.WhereIterable, _is_WhereIterable_default);
  const _is_WhereIterator_default = Symbol('_is_WhereIterator_default');
  _internal.WhereIterator$ = dart.generic(E => {
    class WhereIterator extends core.Iterator$(E) {
      moveNext() {
        let t82;
        while (dart.test(this[_iterator$].moveNext())) {
          if (dart.test((t82 = this[_iterator$].current, this[_f$](t82)))) {
            return true;
          }
        }
        return false;
      }
      get current() {
        return this[_iterator$].current;
      }
    }
    (WhereIterator.new = function(_iterator, _f) {
      if (_iterator == null) dart.nullFailed(I[37], 432, 22, "_iterator");
      if (_f == null) dart.nullFailed(I[37], 432, 38, "_f");
      this[_iterator$] = _iterator;
      this[_f$] = _f;
      ;
    }).prototype = WhereIterator.prototype;
    dart.addTypeTests(WhereIterator);
    WhereIterator.prototype[_is_WhereIterator_default] = true;
    dart.addTypeCaches(WhereIterator);
    dart.setMethodSignature(WhereIterator, () => ({
      __proto__: dart.getMethods(WhereIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(WhereIterator, () => ({
      __proto__: dart.getGetters(WhereIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(WhereIterator, I[25]);
    dart.setFieldSignature(WhereIterator, () => ({
      __proto__: dart.getFields(WhereIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
    }));
    return WhereIterator;
  });
  _internal.WhereIterator = _internal.WhereIterator$();
  dart.addTypeTests(_internal.WhereIterator, _is_WhereIterator_default);
  const _is_ExpandIterable_default = Symbol('_is_ExpandIterable_default');
  _internal.ExpandIterable$ = dart.generic((S, T) => {
    var ExpandIteratorOfS$T = () => (ExpandIteratorOfS$T = dart.constFn(_internal.ExpandIterator$(S, T)))();
    class ExpandIterable extends core.Iterable$(T) {
      get iterator() {
        return new (ExpandIteratorOfS$T()).new(this[_iterable$][$iterator], this[_f$]);
      }
    }
    (ExpandIterable.new = function(_iterable, _f) {
      if (_iterable == null) dart.nullFailed(I[37], 452, 23, "_iterable");
      if (_f == null) dart.nullFailed(I[37], 452, 39, "_f");
      this[_iterable$] = _iterable;
      this[_f$] = _f;
      ExpandIterable.__proto__.new.call(this);
      ;
    }).prototype = ExpandIterable.prototype;
    dart.addTypeTests(ExpandIterable);
    ExpandIterable.prototype[_is_ExpandIterable_default] = true;
    dart.addTypeCaches(ExpandIterable);
    dart.setGetterSignature(ExpandIterable, () => ({
      __proto__: dart.getGetters(ExpandIterable.__proto__),
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T)
    }));
    dart.setLibraryUri(ExpandIterable, I[25]);
    dart.setFieldSignature(ExpandIterable, () => ({
      __proto__: dart.getFields(ExpandIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(S)),
      [_f$]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S]))
    }));
    dart.defineExtensionAccessors(ExpandIterable, ['iterator']);
    return ExpandIterable;
  });
  _internal.ExpandIterable = _internal.ExpandIterable$();
  dart.addTypeTests(_internal.ExpandIterable, _is_ExpandIterable_default);
  var _currentExpansion = dart.privateName(_internal, "_currentExpansion");
  const _is_ExpandIterator_default = Symbol('_is_ExpandIterator_default');
  _internal.ExpandIterator$ = dart.generic((S, T) => {
    class ExpandIterator extends core.Object {
      get current() {
        return T.as(this[_current$]);
      }
      moveNext() {
        let t82;
        if (this[_currentExpansion] == null) return false;
        while (!dart.test(dart.nullCheck(this[_currentExpansion]).moveNext())) {
          this[_current$] = null;
          if (dart.test(this[_iterator$].moveNext())) {
            this[_currentExpansion] = null;
            this[_currentExpansion] = (t82 = this[_iterator$].current, this[_f$](t82))[$iterator];
          } else {
            return false;
          }
        }
        this[_current$] = dart.nullCheck(this[_currentExpansion]).current;
        return true;
      }
    }
    (ExpandIterator.new = function(_iterator, _f) {
      if (_iterator == null) dart.nullFailed(I[37], 466, 23, "_iterator");
      if (_f == null) dart.nullFailed(I[37], 466, 39, "_f");
      this[_currentExpansion] = C[20] || CT.C20;
      this[_current$] = null;
      this[_iterator$] = _iterator;
      this[_f$] = _f;
      ;
    }).prototype = ExpandIterator.prototype;
    dart.addTypeTests(ExpandIterator);
    ExpandIterator.prototype[_is_ExpandIterator_default] = true;
    dart.addTypeCaches(ExpandIterator);
    ExpandIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(ExpandIterator, () => ({
      __proto__: dart.getMethods(ExpandIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(ExpandIterator, () => ({
      __proto__: dart.getGetters(ExpandIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(ExpandIterator, I[25]);
    dart.setFieldSignature(ExpandIterator, () => ({
      __proto__: dart.getFields(ExpandIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(S)),
      [_f$]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S])),
      [_currentExpansion]: dart.fieldType(dart.nullable(core.Iterator$(T))),
      [_current$]: dart.fieldType(dart.nullable(T))
    }));
    return ExpandIterator;
  });
  _internal.ExpandIterator = _internal.ExpandIterator$();
  dart.addTypeTests(_internal.ExpandIterator, _is_ExpandIterator_default);
  var _takeCount$ = dart.privateName(_internal, "_takeCount");
  const _is_TakeIterable_default = Symbol('_is_TakeIterable_default');
  _internal.TakeIterable$ = dart.generic(E => {
    var TakeIteratorOfE = () => (TakeIteratorOfE = dart.constFn(_internal.TakeIterator$(E)))();
    class TakeIterable extends core.Iterable$(E) {
      static new(iterable, takeCount) {
        if (iterable == null) dart.nullFailed(I[37], 492, 36, "iterable");
        if (takeCount == null) dart.nullFailed(I[37], 492, 50, "takeCount");
        core.ArgumentError.checkNotNull(core.int, takeCount, "takeCount");
        core.RangeError.checkNotNegative(takeCount, "takeCount");
        if (_internal.EfficientLengthIterable.is(iterable)) {
          return new (_internal.EfficientLengthTakeIterable$(E)).new(iterable, takeCount);
        }
        return new (_internal.TakeIterable$(E)).__(iterable, takeCount);
      }
      get iterator() {
        return new (TakeIteratorOfE()).new(this[_iterable$][$iterator], this[_takeCount$]);
      }
    }
    (TakeIterable.__ = function(_iterable, _takeCount) {
      if (_iterable == null) dart.nullFailed(I[37], 501, 23, "_iterable");
      if (_takeCount == null) dart.nullFailed(I[37], 501, 39, "_takeCount");
      this[_iterable$] = _iterable;
      this[_takeCount$] = _takeCount;
      TakeIterable.__proto__.new.call(this);
      ;
    }).prototype = TakeIterable.prototype;
    dart.addTypeTests(TakeIterable);
    TakeIterable.prototype[_is_TakeIterable_default] = true;
    dart.addTypeCaches(TakeIterable);
    dart.setGetterSignature(TakeIterable, () => ({
      __proto__: dart.getGetters(TakeIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(TakeIterable, I[25]);
    dart.setFieldSignature(TakeIterable, () => ({
      __proto__: dart.getFields(TakeIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_takeCount$]: dart.finalFieldType(core.int)
    }));
    dart.defineExtensionAccessors(TakeIterable, ['iterator']);
    return TakeIterable;
  });
  _internal.TakeIterable = _internal.TakeIterable$();
  dart.addTypeTests(_internal.TakeIterable, _is_TakeIterable_default);
  const _is_EfficientLengthTakeIterable_default = Symbol('_is_EfficientLengthTakeIterable_default');
  _internal.EfficientLengthTakeIterable$ = dart.generic(E => {
    class EfficientLengthTakeIterable extends _internal.TakeIterable$(E) {
      get length() {
        let iterableLength = this[_iterable$][$length];
        if (dart.notNull(iterableLength) > dart.notNull(this[_takeCount$])) return this[_takeCount$];
        return iterableLength;
      }
    }
    (EfficientLengthTakeIterable.new = function(iterable, takeCount) {
      if (iterable == null) dart.nullFailed(I[37], 510, 43, "iterable");
      if (takeCount == null) dart.nullFailed(I[37], 510, 57, "takeCount");
      EfficientLengthTakeIterable.__proto__.__.call(this, iterable, takeCount);
      ;
    }).prototype = EfficientLengthTakeIterable.prototype;
    dart.addTypeTests(EfficientLengthTakeIterable);
    EfficientLengthTakeIterable.prototype[_is_EfficientLengthTakeIterable_default] = true;
    dart.addTypeCaches(EfficientLengthTakeIterable);
    EfficientLengthTakeIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
    dart.setLibraryUri(EfficientLengthTakeIterable, I[25]);
    dart.defineExtensionAccessors(EfficientLengthTakeIterable, ['length']);
    return EfficientLengthTakeIterable;
  });
  _internal.EfficientLengthTakeIterable = _internal.EfficientLengthTakeIterable$();
  dart.addTypeTests(_internal.EfficientLengthTakeIterable, _is_EfficientLengthTakeIterable_default);
  var _remaining$ = dart.privateName(_internal, "_remaining");
  const _is_TakeIterator_default = Symbol('_is_TakeIterator_default');
  _internal.TakeIterator$ = dart.generic(E => {
    class TakeIterator extends core.Iterator$(E) {
      moveNext() {
        this[_remaining$] = dart.notNull(this[_remaining$]) - 1;
        if (dart.notNull(this[_remaining$]) >= 0) {
          return this[_iterator$].moveNext();
        }
        this[_remaining$] = -1;
        return false;
      }
      get current() {
        if (dart.notNull(this[_remaining$]) < 0) return E.as(null);
        return this[_iterator$].current;
      }
    }
    (TakeIterator.new = function(_iterator, _remaining) {
      if (_iterator == null) dart.nullFailed(I[37], 524, 21, "_iterator");
      if (_remaining == null) dart.nullFailed(I[37], 524, 37, "_remaining");
      this[_iterator$] = _iterator;
      this[_remaining$] = _remaining;
      if (!(dart.notNull(this[_remaining$]) >= 0)) dart.assertFailed(null, I[37], 525, 12, "_remaining >= 0");
    }).prototype = TakeIterator.prototype;
    dart.addTypeTests(TakeIterator);
    TakeIterator.prototype[_is_TakeIterator_default] = true;
    dart.addTypeCaches(TakeIterator);
    dart.setMethodSignature(TakeIterator, () => ({
      __proto__: dart.getMethods(TakeIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(TakeIterator, () => ({
      __proto__: dart.getGetters(TakeIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(TakeIterator, I[25]);
    dart.setFieldSignature(TakeIterator, () => ({
      __proto__: dart.getFields(TakeIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
      [_remaining$]: dart.fieldType(core.int)
    }));
    return TakeIterator;
  });
  _internal.TakeIterator = _internal.TakeIterator$();
  dart.addTypeTests(_internal.TakeIterator, _is_TakeIterator_default);
  const _is_TakeWhileIterable_default = Symbol('_is_TakeWhileIterable_default');
  _internal.TakeWhileIterable$ = dart.generic(E => {
    var TakeWhileIteratorOfE = () => (TakeWhileIteratorOfE = dart.constFn(_internal.TakeWhileIterator$(E)))();
    class TakeWhileIterable extends core.Iterable$(E) {
      get iterator() {
        return new (TakeWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
      }
    }
    (TakeWhileIterable.new = function(_iterable, _f) {
      if (_iterable == null) dart.nullFailed(I[37], 551, 26, "_iterable");
      if (_f == null) dart.nullFailed(I[37], 551, 42, "_f");
      this[_iterable$] = _iterable;
      this[_f$] = _f;
      TakeWhileIterable.__proto__.new.call(this);
      ;
    }).prototype = TakeWhileIterable.prototype;
    dart.addTypeTests(TakeWhileIterable);
    TakeWhileIterable.prototype[_is_TakeWhileIterable_default] = true;
    dart.addTypeCaches(TakeWhileIterable);
    dart.setGetterSignature(TakeWhileIterable, () => ({
      __proto__: dart.getGetters(TakeWhileIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(TakeWhileIterable, I[25]);
    dart.setFieldSignature(TakeWhileIterable, () => ({
      __proto__: dart.getFields(TakeWhileIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
    }));
    dart.defineExtensionAccessors(TakeWhileIterable, ['iterator']);
    return TakeWhileIterable;
  });
  _internal.TakeWhileIterable = _internal.TakeWhileIterable$();
  dart.addTypeTests(_internal.TakeWhileIterable, _is_TakeWhileIterable_default);
  var _isFinished = dart.privateName(_internal, "_isFinished");
  const _is_TakeWhileIterator_default = Symbol('_is_TakeWhileIterator_default');
  _internal.TakeWhileIterator$ = dart.generic(E => {
    class TakeWhileIterator extends core.Iterator$(E) {
      moveNext() {
        let t82;
        if (dart.test(this[_isFinished])) return false;
        if (!dart.test(this[_iterator$].moveNext()) || !dart.test((t82 = this[_iterator$].current, this[_f$](t82)))) {
          this[_isFinished] = true;
          return false;
        }
        return true;
      }
      get current() {
        if (dart.test(this[_isFinished])) return E.as(null);
        return this[_iterator$].current;
      }
    }
    (TakeWhileIterator.new = function(_iterator, _f) {
      if (_iterator == null) dart.nullFailed(I[37], 563, 26, "_iterator");
      if (_f == null) dart.nullFailed(I[37], 563, 42, "_f");
      this[_isFinished] = false;
      this[_iterator$] = _iterator;
      this[_f$] = _f;
      ;
    }).prototype = TakeWhileIterator.prototype;
    dart.addTypeTests(TakeWhileIterator);
    TakeWhileIterator.prototype[_is_TakeWhileIterator_default] = true;
    dart.addTypeCaches(TakeWhileIterator);
    dart.setMethodSignature(TakeWhileIterator, () => ({
      __proto__: dart.getMethods(TakeWhileIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(TakeWhileIterator, () => ({
      __proto__: dart.getGetters(TakeWhileIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(TakeWhileIterator, I[25]);
    dart.setFieldSignature(TakeWhileIterator, () => ({
      __proto__: dart.getFields(TakeWhileIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E])),
      [_isFinished]: dart.fieldType(core.bool)
    }));
    return TakeWhileIterator;
  });
  _internal.TakeWhileIterator = _internal.TakeWhileIterator$();
  dart.addTypeTests(_internal.TakeWhileIterator, _is_TakeWhileIterator_default);
  var _skipCount$ = dart.privateName(_internal, "_skipCount");
  const _is_SkipIterable_default = Symbol('_is_SkipIterable_default');
  _internal.SkipIterable$ = dart.generic(E => {
    var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
    var SkipIteratorOfE = () => (SkipIteratorOfE = dart.constFn(_internal.SkipIterator$(E)))();
    class SkipIterable extends core.Iterable$(E) {
      static new(iterable, count) {
        if (iterable == null) dart.nullFailed(I[37], 584, 36, "iterable");
        if (count == null) dart.nullFailed(I[37], 584, 50, "count");
        if (_internal.EfficientLengthIterable.is(iterable)) {
          return _internal.EfficientLengthSkipIterable$(E).new(iterable, count);
        }
        return new (_internal.SkipIterable$(E)).__(iterable, _internal._checkCount(count));
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[37], 593, 24, "count");
        return new (SkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
      }
      get iterator() {
        return new (SkipIteratorOfE()).new(this[_iterable$][$iterator], this[_skipCount$]);
      }
    }
    (SkipIterable.__ = function(_iterable, _skipCount) {
      if (_iterable == null) dart.nullFailed(I[37], 591, 23, "_iterable");
      if (_skipCount == null) dart.nullFailed(I[37], 591, 39, "_skipCount");
      this[_iterable$] = _iterable;
      this[_skipCount$] = _skipCount;
      SkipIterable.__proto__.new.call(this);
      ;
    }).prototype = SkipIterable.prototype;
    dart.addTypeTests(SkipIterable);
    SkipIterable.prototype[_is_SkipIterable_default] = true;
    dart.addTypeCaches(SkipIterable);
    dart.setGetterSignature(SkipIterable, () => ({
      __proto__: dart.getGetters(SkipIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(SkipIterable, I[25]);
    dart.setFieldSignature(SkipIterable, () => ({
      __proto__: dart.getFields(SkipIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_skipCount$]: dart.finalFieldType(core.int)
    }));
    dart.defineExtensionMethods(SkipIterable, ['skip']);
    dart.defineExtensionAccessors(SkipIterable, ['iterator']);
    return SkipIterable;
  });
  _internal.SkipIterable = _internal.SkipIterable$();
  dart.addTypeTests(_internal.SkipIterable, _is_SkipIterable_default);
  const _is_EfficientLengthSkipIterable_default = Symbol('_is_EfficientLengthSkipIterable_default');
  _internal.EfficientLengthSkipIterable$ = dart.generic(E => {
    var EfficientLengthSkipIterableOfE = () => (EfficientLengthSkipIterableOfE = dart.constFn(_internal.EfficientLengthSkipIterable$(E)))();
    class EfficientLengthSkipIterable extends _internal.SkipIterable$(E) {
      static new(iterable, count) {
        if (iterable == null) dart.nullFailed(I[37], 604, 51, "iterable");
        if (count == null) dart.nullFailed(I[37], 604, 65, "count");
        return new (_internal.EfficientLengthSkipIterable$(E)).__(iterable, _internal._checkCount(count));
      }
      get length() {
        let length = dart.notNull(this[_iterable$][$length]) - dart.notNull(this[_skipCount$]);
        if (length >= 0) return length;
        return 0;
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[37], 617, 24, "count");
        return new (EfficientLengthSkipIterableOfE()).__(this[_iterable$], dart.notNull(this[_skipCount$]) + dart.notNull(_internal._checkCount(count)));
      }
    }
    (EfficientLengthSkipIterable.__ = function(iterable, count) {
      if (iterable == null) dart.nullFailed(I[37], 608, 45, "iterable");
      if (count == null) dart.nullFailed(I[37], 608, 59, "count");
      EfficientLengthSkipIterable.__proto__.__.call(this, iterable, count);
      ;
    }).prototype = EfficientLengthSkipIterable.prototype;
    dart.addTypeTests(EfficientLengthSkipIterable);
    EfficientLengthSkipIterable.prototype[_is_EfficientLengthSkipIterable_default] = true;
    dart.addTypeCaches(EfficientLengthSkipIterable);
    EfficientLengthSkipIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
    dart.setLibraryUri(EfficientLengthSkipIterable, I[25]);
    dart.defineExtensionMethods(EfficientLengthSkipIterable, ['skip']);
    dart.defineExtensionAccessors(EfficientLengthSkipIterable, ['length']);
    return EfficientLengthSkipIterable;
  });
  _internal.EfficientLengthSkipIterable = _internal.EfficientLengthSkipIterable$();
  dart.addTypeTests(_internal.EfficientLengthSkipIterable, _is_EfficientLengthSkipIterable_default);
  const _is_SkipIterator_default = Symbol('_is_SkipIterator_default');
  _internal.SkipIterator$ = dart.generic(E => {
    class SkipIterator extends core.Iterator$(E) {
      moveNext() {
        for (let i = 0; i < dart.notNull(this[_skipCount$]); i = i + 1)
          this[_iterator$].moveNext();
        this[_skipCount$] = 0;
        return this[_iterator$].moveNext();
      }
      get current() {
        return this[_iterator$].current;
      }
    }
    (SkipIterator.new = function(_iterator, _skipCount) {
      if (_iterator == null) dart.nullFailed(I[37], 633, 21, "_iterator");
      if (_skipCount == null) dart.nullFailed(I[37], 633, 37, "_skipCount");
      this[_iterator$] = _iterator;
      this[_skipCount$] = _skipCount;
      if (!(dart.notNull(this[_skipCount$]) >= 0)) dart.assertFailed(null, I[37], 634, 12, "_skipCount >= 0");
    }).prototype = SkipIterator.prototype;
    dart.addTypeTests(SkipIterator);
    SkipIterator.prototype[_is_SkipIterator_default] = true;
    dart.addTypeCaches(SkipIterator);
    dart.setMethodSignature(SkipIterator, () => ({
      __proto__: dart.getMethods(SkipIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(SkipIterator, () => ({
      __proto__: dart.getGetters(SkipIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(SkipIterator, I[25]);
    dart.setFieldSignature(SkipIterator, () => ({
      __proto__: dart.getFields(SkipIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
      [_skipCount$]: dart.fieldType(core.int)
    }));
    return SkipIterator;
  });
  _internal.SkipIterator = _internal.SkipIterator$();
  dart.addTypeTests(_internal.SkipIterator, _is_SkipIterator_default);
  const _is_SkipWhileIterable_default = Symbol('_is_SkipWhileIterable_default');
  _internal.SkipWhileIterable$ = dart.generic(E => {
    var SkipWhileIteratorOfE = () => (SkipWhileIteratorOfE = dart.constFn(_internal.SkipWhileIterator$(E)))();
    class SkipWhileIterable extends core.Iterable$(E) {
      get iterator() {
        return new (SkipWhileIteratorOfE()).new(this[_iterable$][$iterator], this[_f$]);
      }
    }
    (SkipWhileIterable.new = function(_iterable, _f) {
      if (_iterable == null) dart.nullFailed(I[37], 650, 26, "_iterable");
      if (_f == null) dart.nullFailed(I[37], 650, 42, "_f");
      this[_iterable$] = _iterable;
      this[_f$] = _f;
      SkipWhileIterable.__proto__.new.call(this);
      ;
    }).prototype = SkipWhileIterable.prototype;
    dart.addTypeTests(SkipWhileIterable);
    SkipWhileIterable.prototype[_is_SkipWhileIterable_default] = true;
    dart.addTypeCaches(SkipWhileIterable);
    dart.setGetterSignature(SkipWhileIterable, () => ({
      __proto__: dart.getGetters(SkipWhileIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(SkipWhileIterable, I[25]);
    dart.setFieldSignature(SkipWhileIterable, () => ({
      __proto__: dart.getFields(SkipWhileIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E]))
    }));
    dart.defineExtensionAccessors(SkipWhileIterable, ['iterator']);
    return SkipWhileIterable;
  });
  _internal.SkipWhileIterable = _internal.SkipWhileIterable$();
  dart.addTypeTests(_internal.SkipWhileIterable, _is_SkipWhileIterable_default);
  var _hasSkipped = dart.privateName(_internal, "_hasSkipped");
  const _is_SkipWhileIterator_default = Symbol('_is_SkipWhileIterator_default');
  _internal.SkipWhileIterator$ = dart.generic(E => {
    class SkipWhileIterator extends core.Iterator$(E) {
      moveNext() {
        let t82;
        if (!dart.test(this[_hasSkipped])) {
          this[_hasSkipped] = true;
          while (dart.test(this[_iterator$].moveNext())) {
            if (!dart.test((t82 = this[_iterator$].current, this[_f$](t82)))) return true;
          }
        }
        return this[_iterator$].moveNext();
      }
      get current() {
        return this[_iterator$].current;
      }
    }
    (SkipWhileIterator.new = function(_iterator, _f) {
      if (_iterator == null) dart.nullFailed(I[37], 662, 26, "_iterator");
      if (_f == null) dart.nullFailed(I[37], 662, 42, "_f");
      this[_hasSkipped] = false;
      this[_iterator$] = _iterator;
      this[_f$] = _f;
      ;
    }).prototype = SkipWhileIterator.prototype;
    dart.addTypeTests(SkipWhileIterator);
    SkipWhileIterator.prototype[_is_SkipWhileIterator_default] = true;
    dart.addTypeCaches(SkipWhileIterator);
    dart.setMethodSignature(SkipWhileIterator, () => ({
      __proto__: dart.getMethods(SkipWhileIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(SkipWhileIterator, () => ({
      __proto__: dart.getGetters(SkipWhileIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(SkipWhileIterator, I[25]);
    dart.setFieldSignature(SkipWhileIterator, () => ({
      __proto__: dart.getFields(SkipWhileIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(E)),
      [_f$]: dart.finalFieldType(dart.fnType(core.bool, [E])),
      [_hasSkipped]: dart.fieldType(core.bool)
    }));
    return SkipWhileIterator;
  });
  _internal.SkipWhileIterator = _internal.SkipWhileIterator$();
  dart.addTypeTests(_internal.SkipWhileIterator, _is_SkipWhileIterator_default);
  const _is_EmptyIterable_default = Symbol('_is_EmptyIterable_default');
  _internal.EmptyIterable$ = dart.generic(E => {
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
    class EmptyIterable extends _internal.EfficientLengthIterable$(E) {
      get iterator() {
        return C[20] || CT.C20;
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[37], 685, 21, "action");
      }
      get isEmpty() {
        return true;
      }
      get length() {
        return 0;
      }
      get first() {
        dart.throw(_internal.IterableElementError.noElement());
      }
      get last() {
        dart.throw(_internal.IterableElementError.noElement());
      }
      get single() {
        dart.throw(_internal.IterableElementError.noElement());
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[37], 703, 19, "index");
        dart.throw(new core.RangeError.range(index, 0, 0, "index"));
      }
      contains(element) {
        return false;
      }
      every(test) {
        if (test == null) dart.nullFailed(I[37], 709, 19, "test");
        return true;
      }
      any(test) {
        if (test == null) dart.nullFailed(I[37], 711, 17, "test");
        return false;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 713, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 718, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[37], 723, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[37], 728, 23, "separator");
        return "";
      }
      where(test) {
        if (test == null) dart.nullFailed(I[37], 730, 26, "test");
        return this;
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[37], 732, 24, "f");
        return new (_internal.EmptyIterable$(T)).new();
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[37], 734, 14, "combine");
        dart.throw(_internal.IterableElementError.noElement());
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[37], 738, 31, "combine");
        return initialValue;
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[37], 742, 24, "count");
        core.RangeError.checkNotNegative(count, "count");
        return this;
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[37], 747, 30, "test");
        return this;
      }
      take(count) {
        if (count == null) dart.nullFailed(I[37], 749, 24, "count");
        core.RangeError.checkNotNegative(count, "count");
        return this;
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[37], 754, 30, "test");
        return this;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[37], 756, 24, "growable");
        return ListOfE().empty({growable: growable});
      }
      toSet() {
        return new (_HashSetOfE()).new();
      }
    }
    (EmptyIterable.new = function() {
      EmptyIterable.__proto__.new.call(this);
      ;
    }).prototype = EmptyIterable.prototype;
    dart.addTypeTests(EmptyIterable);
    EmptyIterable.prototype[_is_EmptyIterable_default] = true;
    dart.addTypeCaches(EmptyIterable);
    dart.setMethodSignature(EmptyIterable, () => ({
      __proto__: dart.getMethods(EmptyIterable.__proto__),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(EmptyIterable, () => ({
      __proto__: dart.getGetters(EmptyIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(EmptyIterable, I[25]);
    dart.defineExtensionMethods(EmptyIterable, [
      'forEach',
      'elementAt',
      'contains',
      'every',
      'any',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'join',
      'where',
      'map',
      'reduce',
      'fold',
      'skip',
      'skipWhile',
      'take',
      'takeWhile',
      'toList',
      'toSet'
    ]);
    dart.defineExtensionAccessors(EmptyIterable, [
      'iterator',
      'isEmpty',
      'length',
      'first',
      'last',
      'single'
    ]);
    return EmptyIterable;
  });
  _internal.EmptyIterable = _internal.EmptyIterable$();
  dart.addTypeTests(_internal.EmptyIterable, _is_EmptyIterable_default);
  const _is_EmptyIterator_default = Symbol('_is_EmptyIterator_default');
  _internal.EmptyIterator$ = dart.generic(E => {
    class EmptyIterator extends core.Object {
      moveNext() {
        return false;
      }
      get current() {
        dart.throw(_internal.IterableElementError.noElement());
      }
    }
    (EmptyIterator.new = function() {
      ;
    }).prototype = EmptyIterator.prototype;
    dart.addTypeTests(EmptyIterator);
    EmptyIterator.prototype[_is_EmptyIterator_default] = true;
    dart.addTypeCaches(EmptyIterator);
    EmptyIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(EmptyIterator, () => ({
      __proto__: dart.getMethods(EmptyIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(EmptyIterator, () => ({
      __proto__: dart.getGetters(EmptyIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(EmptyIterator, I[25]);
    return EmptyIterator;
  });
  _internal.EmptyIterator = _internal.EmptyIterator$();
  dart.addTypeTests(_internal.EmptyIterator, _is_EmptyIterator_default);
  var _first$ = dart.privateName(_internal, "_first");
  var _second$ = dart.privateName(_internal, "_second");
  const _is_FollowedByIterable_default = Symbol('_is_FollowedByIterable_default');
  _internal.FollowedByIterable$ = dart.generic(E => {
    var FollowedByIteratorOfE = () => (FollowedByIteratorOfE = dart.constFn(_internal.FollowedByIterator$(E)))();
    class FollowedByIterable extends core.Iterable$(E) {
      static firstEfficient(first, second) {
        if (first == null) dart.nullFailed(I[37], 776, 34, "first");
        if (second == null) dart.nullFailed(I[37], 776, 53, "second");
        if (_internal.EfficientLengthIterable$(E).is(second)) {
          return new (_internal.EfficientLengthFollowedByIterable$(E)).new(first, second);
        }
        return new (_internal.FollowedByIterable$(E)).new(first, second);
      }
      get iterator() {
        return new (FollowedByIteratorOfE()).new(this[_first$], this[_second$]);
      }
      get length() {
        return dart.notNull(this[_first$][$length]) + dart.notNull(this[_second$][$length]);
      }
      get isEmpty() {
        return dart.test(this[_first$][$isEmpty]) && dart.test(this[_second$][$isEmpty]);
      }
      get isNotEmpty() {
        return dart.test(this[_first$][$isNotEmpty]) || dart.test(this[_second$][$isNotEmpty]);
      }
      contains(value) {
        return dart.test(this[_first$][$contains](value)) || dart.test(this[_second$][$contains](value));
      }
      get first() {
        let iterator = this[_first$][$iterator];
        if (dart.test(iterator.moveNext())) return iterator.current;
        return this[_second$][$first];
      }
      get last() {
        let iterator = this[_second$][$iterator];
        if (dart.test(iterator.moveNext())) {
          let last = iterator.current;
          while (dart.test(iterator.moveNext()))
            last = iterator.current;
          return last;
        }
        return this[_first$][$last];
      }
    }
    (FollowedByIterable.new = function(_first, _second) {
      if (_first == null) dart.nullFailed(I[37], 773, 27, "_first");
      if (_second == null) dart.nullFailed(I[37], 773, 40, "_second");
      this[_first$] = _first;
      this[_second$] = _second;
      FollowedByIterable.__proto__.new.call(this);
      ;
    }).prototype = FollowedByIterable.prototype;
    dart.addTypeTests(FollowedByIterable);
    FollowedByIterable.prototype[_is_FollowedByIterable_default] = true;
    dart.addTypeCaches(FollowedByIterable);
    dart.setGetterSignature(FollowedByIterable, () => ({
      __proto__: dart.getGetters(FollowedByIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(FollowedByIterable, I[25]);
    dart.setFieldSignature(FollowedByIterable, () => ({
      __proto__: dart.getFields(FollowedByIterable.__proto__),
      [_first$]: dart.finalFieldType(core.Iterable$(E)),
      [_second$]: dart.finalFieldType(core.Iterable$(E))
    }));
    dart.defineExtensionMethods(FollowedByIterable, ['contains']);
    dart.defineExtensionAccessors(FollowedByIterable, [
      'iterator',
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last'
    ]);
    return FollowedByIterable;
  });
  _internal.FollowedByIterable = _internal.FollowedByIterable$();
  dart.addTypeTests(_internal.FollowedByIterable, _is_FollowedByIterable_default);
  const _is_EfficientLengthFollowedByIterable_default = Symbol('_is_EfficientLengthFollowedByIterable_default');
  _internal.EfficientLengthFollowedByIterable$ = dart.generic(E => {
    class EfficientLengthFollowedByIterable extends _internal.FollowedByIterable$(E) {
      elementAt(index) {
        if (index == null) dart.nullFailed(I[37], 819, 19, "index");
        let firstLength = this[_first$][$length];
        if (dart.notNull(index) < dart.notNull(firstLength)) return this[_first$][$elementAt](index);
        return this[_second$][$elementAt](dart.notNull(index) - dart.notNull(firstLength));
      }
      get first() {
        if (dart.test(this[_first$][$isNotEmpty])) return this[_first$][$first];
        return this[_second$][$first];
      }
      get last() {
        if (dart.test(this[_second$][$isNotEmpty])) return this[_second$][$last];
        return this[_first$][$last];
      }
    }
    (EfficientLengthFollowedByIterable.new = function(first, second) {
      if (first == null) dart.nullFailed(I[37], 816, 34, "first");
      if (second == null) dart.nullFailed(I[37], 816, 68, "second");
      EfficientLengthFollowedByIterable.__proto__.new.call(this, first, second);
      ;
    }).prototype = EfficientLengthFollowedByIterable.prototype;
    dart.addTypeTests(EfficientLengthFollowedByIterable);
    EfficientLengthFollowedByIterable.prototype[_is_EfficientLengthFollowedByIterable_default] = true;
    dart.addTypeCaches(EfficientLengthFollowedByIterable);
    EfficientLengthFollowedByIterable[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
    dart.setLibraryUri(EfficientLengthFollowedByIterable, I[25]);
    dart.defineExtensionMethods(EfficientLengthFollowedByIterable, ['elementAt']);
    dart.defineExtensionAccessors(EfficientLengthFollowedByIterable, ['first', 'last']);
    return EfficientLengthFollowedByIterable;
  });
  _internal.EfficientLengthFollowedByIterable = _internal.EfficientLengthFollowedByIterable$();
  dart.addTypeTests(_internal.EfficientLengthFollowedByIterable, _is_EfficientLengthFollowedByIterable_default);
  var _nextIterable$ = dart.privateName(_internal, "_nextIterable");
  var _currentIterator = dart.privateName(_internal, "_currentIterator");
  const _is_FollowedByIterator_default = Symbol('_is_FollowedByIterator_default');
  _internal.FollowedByIterator$ = dart.generic(E => {
    class FollowedByIterator extends core.Object {
      moveNext() {
        if (dart.test(this[_currentIterator].moveNext())) return true;
        if (this[_nextIterable$] != null) {
          this[_currentIterator] = dart.nullCheck(this[_nextIterable$])[$iterator];
          this[_nextIterable$] = null;
          return this[_currentIterator].moveNext();
        }
        return false;
      }
      get current() {
        return this[_currentIterator].current;
      }
    }
    (FollowedByIterator.new = function(first, _nextIterable) {
      if (first == null) dart.nullFailed(I[37], 840, 34, "first");
      this[_nextIterable$] = _nextIterable;
      this[_currentIterator] = first[$iterator];
      ;
    }).prototype = FollowedByIterator.prototype;
    dart.addTypeTests(FollowedByIterator);
    FollowedByIterator.prototype[_is_FollowedByIterator_default] = true;
    dart.addTypeCaches(FollowedByIterator);
    FollowedByIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(FollowedByIterator, () => ({
      __proto__: dart.getMethods(FollowedByIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(FollowedByIterator, () => ({
      __proto__: dart.getGetters(FollowedByIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(FollowedByIterator, I[25]);
    dart.setFieldSignature(FollowedByIterator, () => ({
      __proto__: dart.getFields(FollowedByIterator.__proto__),
      [_currentIterator]: dart.fieldType(core.Iterator$(E)),
      [_nextIterable$]: dart.fieldType(dart.nullable(core.Iterable$(E)))
    }));
    return FollowedByIterator;
  });
  _internal.FollowedByIterator = _internal.FollowedByIterator$();
  dart.addTypeTests(_internal.FollowedByIterator, _is_FollowedByIterator_default);
  const _is_WhereTypeIterable_default = Symbol('_is_WhereTypeIterable_default');
  _internal.WhereTypeIterable$ = dart.generic(T => {
    var WhereTypeIteratorOfT = () => (WhereTypeIteratorOfT = dart.constFn(_internal.WhereTypeIterator$(T)))();
    class WhereTypeIterable extends core.Iterable$(T) {
      get iterator() {
        return new (WhereTypeIteratorOfT()).new(this[_source$][$iterator]);
      }
    }
    (WhereTypeIterable.new = function(_source) {
      if (_source == null) dart.nullFailed(I[37], 858, 26, "_source");
      this[_source$] = _source;
      WhereTypeIterable.__proto__.new.call(this);
      ;
    }).prototype = WhereTypeIterable.prototype;
    dart.addTypeTests(WhereTypeIterable);
    WhereTypeIterable.prototype[_is_WhereTypeIterable_default] = true;
    dart.addTypeCaches(WhereTypeIterable);
    dart.setGetterSignature(WhereTypeIterable, () => ({
      __proto__: dart.getGetters(WhereTypeIterable.__proto__),
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T)
    }));
    dart.setLibraryUri(WhereTypeIterable, I[25]);
    dart.setFieldSignature(WhereTypeIterable, () => ({
      __proto__: dart.getFields(WhereTypeIterable.__proto__),
      [_source$]: dart.finalFieldType(core.Iterable$(dart.nullable(core.Object)))
    }));
    dart.defineExtensionAccessors(WhereTypeIterable, ['iterator']);
    return WhereTypeIterable;
  });
  _internal.WhereTypeIterable = _internal.WhereTypeIterable$();
  dart.addTypeTests(_internal.WhereTypeIterable, _is_WhereTypeIterable_default);
  const _is_WhereTypeIterator_default = Symbol('_is_WhereTypeIterator_default');
  _internal.WhereTypeIterator$ = dart.generic(T => {
    class WhereTypeIterator extends core.Object {
      moveNext() {
        while (dart.test(this[_source$].moveNext())) {
          if (T.is(this[_source$].current)) return true;
        }
        return false;
      }
      get current() {
        return T.as(this[_source$].current);
      }
    }
    (WhereTypeIterator.new = function(_source) {
      if (_source == null) dart.nullFailed(I[37], 864, 26, "_source");
      this[_source$] = _source;
      ;
    }).prototype = WhereTypeIterator.prototype;
    dart.addTypeTests(WhereTypeIterator);
    WhereTypeIterator.prototype[_is_WhereTypeIterator_default] = true;
    dart.addTypeCaches(WhereTypeIterator);
    WhereTypeIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(WhereTypeIterator, () => ({
      __proto__: dart.getMethods(WhereTypeIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(WhereTypeIterator, () => ({
      __proto__: dart.getGetters(WhereTypeIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(WhereTypeIterator, I[25]);
    dart.setFieldSignature(WhereTypeIterator, () => ({
      __proto__: dart.getFields(WhereTypeIterator.__proto__),
      [_source$]: dart.finalFieldType(core.Iterator$(dart.nullable(core.Object)))
    }));
    return WhereTypeIterator;
  });
  _internal.WhereTypeIterator = _internal.WhereTypeIterator$();
  dart.addTypeTests(_internal.WhereTypeIterator, _is_WhereTypeIterator_default);
  _internal.IterableElementError = class IterableElementError extends core.Object {
    static noElement() {
      return new core.StateError.new("No element");
    }
    static tooMany() {
      return new core.StateError.new("Too many elements");
    }
    static tooFew() {
      return new core.StateError.new("Too few elements");
    }
  };
  (_internal.IterableElementError.new = function() {
    ;
  }).prototype = _internal.IterableElementError.prototype;
  dart.addTypeTests(_internal.IterableElementError);
  dart.addTypeCaches(_internal.IterableElementError);
  dart.setLibraryUri(_internal.IterableElementError, I[25]);
  const _is_FixedLengthListMixin_default = Symbol('_is_FixedLengthListMixin_default');
  _internal.FixedLengthListMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class FixedLengthListMixin extends core.Object {
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[22], 14, 18, "newLength");
        dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
      }
      add(value) {
        E.as(value);
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      insert(index, value) {
        if (index == null) dart.nullFailed(I[22], 25, 19, "index");
        E.as(value);
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      insertAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 30, 22, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 30, 38, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 35, 27, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot add to a fixed-length list"));
      }
      remove(element) {
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[22], 45, 25, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[22], 50, 25, "test");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      clear() {
        dart.throw(new core.UnsupportedError.new("Cannot clear a fixed-length list"));
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[22], 60, 18, "index");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeLast() {
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[22], 70, 24, "start");
        if (end == null) dart.nullFailed(I[22], 70, 35, "end");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(I[22], 75, 25, "start");
        if (end == null) dart.nullFailed(I[22], 75, 36, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 75, 53, "iterable");
        dart.throw(new core.UnsupportedError.new("Cannot remove from a fixed-length list"));
      }
    }
    (FixedLengthListMixin.new = function() {
      ;
    }).prototype = FixedLengthListMixin.prototype;
    dart.addTypeTests(FixedLengthListMixin);
    FixedLengthListMixin.prototype[_is_FixedLengthListMixin_default] = true;
    dart.addTypeCaches(FixedLengthListMixin);
    dart.setMethodSignature(FixedLengthListMixin, () => ({
      __proto__: dart.getMethods(FixedLengthListMixin.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      removeAt: dart.fnType(E, [core.int]),
      [$removeAt]: dart.fnType(E, [core.int]),
      removeLast: dart.fnType(E, []),
      [$removeLast]: dart.fnType(E, []),
      removeRange: dart.fnType(dart.void, [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)])
    }));
    dart.setSetterSignature(FixedLengthListMixin, () => ({
      __proto__: dart.getSetters(FixedLengthListMixin.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(FixedLengthListMixin, I[25]);
    dart.defineExtensionMethods(FixedLengthListMixin, [
      'add',
      'insert',
      'insertAll',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'removeAt',
      'removeLast',
      'removeRange',
      'replaceRange'
    ]);
    dart.defineExtensionAccessors(FixedLengthListMixin, ['length']);
    return FixedLengthListMixin;
  });
  _internal.FixedLengthListMixin = _internal.FixedLengthListMixin$();
  dart.addTypeTests(_internal.FixedLengthListMixin, _is_FixedLengthListMixin_default);
  const _is_FixedLengthListBase_default = Symbol('_is_FixedLengthListBase_default');
  _internal.FixedLengthListBase$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    const ListBase_FixedLengthListMixin$36 = class ListBase_FixedLengthListMixin extends collection.ListBase$(E) {};
    (ListBase_FixedLengthListMixin$36.new = function() {
    }).prototype = ListBase_FixedLengthListMixin$36.prototype;
    dart.applyMixin(ListBase_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(E));
    class FixedLengthListBase extends ListBase_FixedLengthListMixin$36 {
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[22], 199, 16, "newLength");
        return super[$length] = newLength;
      }
      add(value) {
        E.as(value);
        return super[$add](value);
      }
      insert(index, value) {
        if (index == null) dart.nullFailed(I[22], 199, 16, "index");
        E.as(value);
        return super[$insert](index, value);
      }
      insertAll(at, iterable) {
        if (at == null) dart.nullFailed(I[22], 199, 16, "at");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 199, 16, "iterable");
        return super[$insertAll](at, iterable);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 199, 16, "iterable");
        return super[$addAll](iterable);
      }
      remove(element) {
        return super[$remove](element);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[22], 199, 16, "test");
        return super[$removeWhere](test);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[22], 199, 16, "test");
        return super[$retainWhere](test);
      }
      clear() {
        return super[$clear]();
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[22], 199, 16, "index");
        return super[$removeAt](index);
      }
      removeLast() {
        return super[$removeLast]();
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[22], 199, 16, "start");
        if (end == null) dart.nullFailed(I[22], 199, 16, "end");
        return super[$removeRange](start, end);
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(I[22], 199, 16, "start");
        if (end == null) dart.nullFailed(I[22], 199, 16, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[22], 199, 16, "iterable");
        return super[$replaceRange](start, end, iterable);
      }
    }
    (FixedLengthListBase.new = function() {
      ;
    }).prototype = FixedLengthListBase.prototype;
    dart.addTypeTests(FixedLengthListBase);
    FixedLengthListBase.prototype[_is_FixedLengthListBase_default] = true;
    dart.addTypeCaches(FixedLengthListBase);
    dart.setSetterSignature(FixedLengthListBase, () => ({
      __proto__: dart.getSetters(FixedLengthListBase.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(FixedLengthListBase, I[25]);
    dart.defineExtensionMethods(FixedLengthListBase, [
      'add',
      'insert',
      'insertAll',
      'addAll',
      'remove',
      'removeWhere',
      'retainWhere',
      'clear',
      'removeAt',
      'removeLast',
      'removeRange',
      'replaceRange'
    ]);
    dart.defineExtensionAccessors(FixedLengthListBase, ['length']);
    return FixedLengthListBase;
  });
  _internal.FixedLengthListBase = _internal.FixedLengthListBase$();
  dart.addTypeTests(_internal.FixedLengthListBase, _is_FixedLengthListBase_default);
  var _backedList$ = dart.privateName(_internal, "_backedList");
  _internal._ListIndicesIterable = class _ListIndicesIterable extends _internal.ListIterable$(core.int) {
    get length() {
      return this[_backedList$][$length];
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(I[22], 217, 21, "index");
      core.RangeError.checkValidIndex(index, this);
      return index;
    }
  };
  (_internal._ListIndicesIterable.new = function(_backedList) {
    if (_backedList == null) dart.nullFailed(I[22], 214, 29, "_backedList");
    this[_backedList$] = _backedList;
    _internal._ListIndicesIterable.__proto__.new.call(this);
    ;
  }).prototype = _internal._ListIndicesIterable.prototype;
  dart.addTypeTests(_internal._ListIndicesIterable);
  dart.addTypeCaches(_internal._ListIndicesIterable);
  dart.setLibraryUri(_internal._ListIndicesIterable, I[25]);
  dart.setFieldSignature(_internal._ListIndicesIterable, () => ({
    __proto__: dart.getFields(_internal._ListIndicesIterable.__proto__),
    [_backedList$]: dart.fieldType(core.List)
  }));
  dart.defineExtensionMethods(_internal._ListIndicesIterable, ['elementAt']);
  dart.defineExtensionAccessors(_internal._ListIndicesIterable, ['length']);
  var _values$ = dart.privateName(_internal, "_values");
  const _is__UnmodifiableMapMixin_default = Symbol('_is__UnmodifiableMapMixin_default');
  collection._UnmodifiableMapMixin$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class _UnmodifiableMapMixin extends core.Object {
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
        return value$;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[35], 273, 25, "other");
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(I[35], 278, 44, "entries");
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      clear() {
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      remove(key) {
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[35], 293, 25, "test");
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[35], 298, 26, "ifAbsent");
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      update(key, update, opts) {
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[35], 303, 21, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[35], 308, 20, "update");
        dart.throw(new core.UnsupportedError.new("Cannot modify unmodifiable map"));
      }
    }
    (_UnmodifiableMapMixin.new = function() {
      ;
    }).prototype = _UnmodifiableMapMixin.prototype;
    _UnmodifiableMapMixin.prototype[dart.isMap] = true;
    dart.addTypeTests(_UnmodifiableMapMixin);
    _UnmodifiableMapMixin.prototype[_is__UnmodifiableMapMixin_default] = true;
    dart.addTypeCaches(_UnmodifiableMapMixin);
    _UnmodifiableMapMixin[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(_UnmodifiableMapMixin, () => ({
      __proto__: dart.getMethods(_UnmodifiableMapMixin.__proto__),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_UnmodifiableMapMixin, I[24]);
    dart.defineExtensionMethods(_UnmodifiableMapMixin, [
      '_set',
      'addAll',
      'addEntries',
      'clear',
      'remove',
      'removeWhere',
      'putIfAbsent',
      'update',
      'updateAll'
    ]);
    return _UnmodifiableMapMixin;
  });
  collection._UnmodifiableMapMixin = collection._UnmodifiableMapMixin$();
  dart.addTypeTests(collection._UnmodifiableMapMixin, _is__UnmodifiableMapMixin_default);
  const _is_UnmodifiableMapBase_default = Symbol('_is_UnmodifiableMapBase_default');
  collection.UnmodifiableMapBase$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    const MapBase__UnmodifiableMapMixin$36 = class MapBase__UnmodifiableMapMixin extends collection.MapBase$(K, V) {};
    (MapBase__UnmodifiableMapMixin$36.new = function() {
    }).prototype = MapBase__UnmodifiableMapMixin$36.prototype;
    dart.applyMixin(MapBase__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
    class UnmodifiableMapBase extends MapBase__UnmodifiableMapMixin$36 {
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        super._set(key, value);
        return value$;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[35], 217, 16, "other");
        return super.addAll(other);
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(I[35], 217, 16, "entries");
        return super.addEntries(entries);
      }
      clear() {
        return super.clear();
      }
      remove(key) {
        return super.remove(key);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[35], 217, 16, "test");
        return super.removeWhere(test);
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[35], 217, 16, "ifAbsent");
        return super.putIfAbsent(key, ifAbsent);
      }
      update(key, update, opts) {
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[35], 217, 16, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return super.update(key, update, {ifAbsent: ifAbsent});
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[35], 217, 16, "update");
        return super.updateAll(update);
      }
    }
    (UnmodifiableMapBase.new = function() {
      ;
    }).prototype = UnmodifiableMapBase.prototype;
    dart.addTypeTests(UnmodifiableMapBase);
    UnmodifiableMapBase.prototype[_is_UnmodifiableMapBase_default] = true;
    dart.addTypeCaches(UnmodifiableMapBase);
    dart.setMethodSignature(UnmodifiableMapBase, () => ({
      __proto__: dart.getMethods(UnmodifiableMapBase.__proto__),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(UnmodifiableMapBase, I[24]);
    dart.defineExtensionMethods(UnmodifiableMapBase, [
      '_set',
      'addAll',
      'addEntries',
      'clear',
      'remove',
      'removeWhere',
      'putIfAbsent',
      'update',
      'updateAll'
    ]);
    return UnmodifiableMapBase;
  });
  collection.UnmodifiableMapBase = collection.UnmodifiableMapBase$();
  dart.addTypeTests(collection.UnmodifiableMapBase, _is_UnmodifiableMapBase_default);
  const _is_ListMapView_default = Symbol('_is_ListMapView_default');
  _internal.ListMapView$ = dart.generic(E => {
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    class ListMapView extends collection.UnmodifiableMapBase$(core.int, E) {
      _get(key) {
        return dart.test(this.containsKey(key)) ? this[_values$][$_get](core.int.as(key)) : null;
      }
      get length() {
        return this[_values$][$length];
      }
      get values() {
        return new (SubListIterableOfE()).new(this[_values$], 0, null);
      }
      get keys() {
        return new _internal._ListIndicesIterable.new(this[_values$]);
      }
      get isEmpty() {
        return this[_values$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_values$][$isNotEmpty];
      }
      containsValue(value) {
        return this[_values$][$contains](value);
      }
      containsKey(key) {
        return core.int.is(key) && dart.notNull(key) >= 0 && dart.notNull(key) < dart.notNull(this.length);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[22], 239, 21, "f");
        let length = this[_values$][$length];
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          f(i, this[_values$][$_get](i));
          if (length != this[_values$][$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this[_values$]));
          }
        }
      }
    }
    (ListMapView.new = function(_values) {
      if (_values == null) dart.nullFailed(I[22], 226, 20, "_values");
      this[_values$] = _values;
      ;
    }).prototype = ListMapView.prototype;
    dart.addTypeTests(ListMapView);
    ListMapView.prototype[_is_ListMapView_default] = true;
    dart.addTypeCaches(ListMapView);
    dart.setMethodSignature(ListMapView, () => ({
      __proto__: dart.getMethods(ListMapView.__proto__),
      _get: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ListMapView, () => ({
      __proto__: dart.getGetters(ListMapView.__proto__),
      keys: core.Iterable$(core.int),
      [$keys]: core.Iterable$(core.int)
    }));
    dart.setLibraryUri(ListMapView, I[25]);
    dart.setFieldSignature(ListMapView, () => ({
      __proto__: dart.getFields(ListMapView.__proto__),
      [_values$]: dart.fieldType(core.List$(E))
    }));
    dart.defineExtensionMethods(ListMapView, ['_get', 'containsValue', 'containsKey', 'forEach']);
    dart.defineExtensionAccessors(ListMapView, [
      'length',
      'values',
      'keys',
      'isEmpty',
      'isNotEmpty'
    ]);
    return ListMapView;
  });
  _internal.ListMapView = _internal.ListMapView$();
  dart.addTypeTests(_internal.ListMapView, _is_ListMapView_default);
  const _is_ReversedListIterable_default = Symbol('_is_ReversedListIterable_default');
  _internal.ReversedListIterable$ = dart.generic(E => {
    class ReversedListIterable extends _internal.ListIterable$(E) {
      get length() {
        return this[_source$][$length];
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[22], 256, 19, "index");
        return this[_source$][$elementAt](dart.notNull(this[_source$][$length]) - 1 - dart.notNull(index));
      }
    }
    (ReversedListIterable.new = function(_source) {
      if (_source == null) dart.nullFailed(I[22], 252, 29, "_source");
      this[_source$] = _source;
      ReversedListIterable.__proto__.new.call(this);
      ;
    }).prototype = ReversedListIterable.prototype;
    dart.addTypeTests(ReversedListIterable);
    ReversedListIterable.prototype[_is_ReversedListIterable_default] = true;
    dart.addTypeCaches(ReversedListIterable);
    dart.setLibraryUri(ReversedListIterable, I[25]);
    dart.setFieldSignature(ReversedListIterable, () => ({
      __proto__: dart.getFields(ReversedListIterable.__proto__),
      [_source$]: dart.fieldType(core.Iterable$(E))
    }));
    dart.defineExtensionMethods(ReversedListIterable, ['elementAt']);
    dart.defineExtensionAccessors(ReversedListIterable, ['length']);
    return ReversedListIterable;
  });
  _internal.ReversedListIterable = _internal.ReversedListIterable$();
  dart.addTypeTests(_internal.ReversedListIterable, _is_ReversedListIterable_default);
  _internal.UnmodifiableListError = class UnmodifiableListError extends core.Object {
    static add() {
      return new core.UnsupportedError.new("Cannot add to unmodifiable List");
    }
    static change() {
      return new core.UnsupportedError.new("Cannot change the content of an unmodifiable List");
    }
    static length() {
      return new core.UnsupportedError.new("Cannot change length of unmodifiable List");
    }
    static remove() {
      return new core.UnsupportedError.new("Cannot remove from unmodifiable List");
    }
  };
  (_internal.UnmodifiableListError.new = function() {
    ;
  }).prototype = _internal.UnmodifiableListError.prototype;
  dart.addTypeTests(_internal.UnmodifiableListError);
  dart.addTypeCaches(_internal.UnmodifiableListError);
  dart.setLibraryUri(_internal.UnmodifiableListError, I[25]);
  _internal.NonGrowableListError = class NonGrowableListError extends core.Object {
    static add() {
      return new core.UnsupportedError.new("Cannot add to non-growable List");
    }
    static length() {
      return new core.UnsupportedError.new("Cannot change length of non-growable List");
    }
    static remove() {
      return new core.UnsupportedError.new("Cannot remove from non-growable List");
    }
  };
  (_internal.NonGrowableListError.new = function() {
    ;
  }).prototype = _internal.NonGrowableListError.prototype;
  dart.addTypeTests(_internal.NonGrowableListError);
  dart.addTypeCaches(_internal.NonGrowableListError);
  dart.setLibraryUri(_internal.NonGrowableListError, I[25]);
  var length = dart.privateName(_internal, "LinkedList.length");
  var _last = dart.privateName(_internal, "_last");
  var _next = dart.privateName(_internal, "_next");
  var _previous = dart.privateName(_internal, "_previous");
  var _list = dart.privateName(_internal, "_list");
  const _is_IterableBase_default = Symbol('_is_IterableBase_default');
  collection.IterableBase$ = dart.generic(E => {
    class IterableBase extends core.Iterable$(E) {
      static iterableToShortString(iterable, leftDelimiter = "(", rightDelimiter = ")") {
        let t82;
        if (iterable == null) dart.nullFailed(I[39], 226, 48, "iterable");
        if (leftDelimiter == null) dart.nullFailed(I[39], 227, 15, "leftDelimiter");
        if (rightDelimiter == null) dart.nullFailed(I[39], 227, 43, "rightDelimiter");
        if (dart.test(collection._isToStringVisiting(iterable))) {
          if (leftDelimiter === "(" && rightDelimiter === ")") {
            return "(...)";
          }
          return dart.str(leftDelimiter) + "..." + dart.str(rightDelimiter);
        }
        let parts = T$.JSArrayOfString().of([]);
        collection._toStringVisiting[$add](iterable);
        try {
          collection._iterablePartsToStrings(iterable, parts);
        } finally {
          if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, I[39], 240, 14, "identical(_toStringVisiting.last, iterable)");
          collection._toStringVisiting[$removeLast]();
        }
        return (t82 = new core.StringBuffer.new(leftDelimiter), (() => {
          t82.writeAll(parts, ", ");
          t82.write(rightDelimiter);
          return t82;
        })()).toString();
      }
      static iterableToFullString(iterable, leftDelimiter = "(", rightDelimiter = ")") {
        if (iterable == null) dart.nullFailed(I[39], 259, 47, "iterable");
        if (leftDelimiter == null) dart.nullFailed(I[39], 260, 15, "leftDelimiter");
        if (rightDelimiter == null) dart.nullFailed(I[39], 260, 43, "rightDelimiter");
        if (dart.test(collection._isToStringVisiting(iterable))) {
          return dart.str(leftDelimiter) + "..." + dart.str(rightDelimiter);
        }
        let buffer = new core.StringBuffer.new(leftDelimiter);
        collection._toStringVisiting[$add](iterable);
        try {
          buffer.writeAll(iterable, ", ");
        } finally {
          if (!core.identical(collection._toStringVisiting[$last], iterable)) dart.assertFailed(null, I[39], 269, 14, "identical(_toStringVisiting.last, iterable)");
          collection._toStringVisiting[$removeLast]();
        }
        buffer.write(rightDelimiter);
        return buffer.toString();
      }
    }
    (IterableBase.new = function() {
      IterableBase.__proto__.new.call(this);
      ;
    }).prototype = IterableBase.prototype;
    dart.addTypeTests(IterableBase);
    IterableBase.prototype[_is_IterableBase_default] = true;
    dart.addTypeCaches(IterableBase);
    dart.setLibraryUri(IterableBase, I[24]);
    return IterableBase;
  });
  collection.IterableBase = collection.IterableBase$();
  dart.addTypeTests(collection.IterableBase, _is_IterableBase_default);
  const _is_LinkedList_default = Symbol('_is_LinkedList_default');
  _internal.LinkedList$ = dart.generic(T => {
    var _LinkedListIteratorOfT = () => (_LinkedListIteratorOfT = dart.constFn(_internal._LinkedListIterator$(T)))();
    class LinkedList extends collection.IterableBase$(T) {
      get length() {
        return this[length];
      }
      set length(value) {
        this[length] = value;
      }
      get first() {
        return dart.nullCast(this[_first$], T);
      }
      get last() {
        return dart.nullCast(this[_last], T);
      }
      get isEmpty() {
        return this.length === 0;
      }
      add(newLast) {
        T.as(newLast);
        if (newLast == null) dart.nullFailed(I[38], 22, 14, "newLast");
        if (!(newLast[_next] == null && newLast[_previous] == null)) dart.assertFailed(null, I[38], 23, 12, "newLast._next == null && newLast._previous == null");
        if (this[_last] != null) {
          if (!(dart.nullCheck(this[_last])[_next] == null)) dart.assertFailed(null, I[38], 25, 14, "_last!._next == null");
          dart.nullCheck(this[_last])[_next] = newLast;
        } else {
          this[_first$] = newLast;
        }
        newLast[_previous] = this[_last];
        this[_last] = newLast;
        dart.nullCheck(this[_last])[_list] = this;
        this.length = dart.notNull(this.length) + 1;
      }
      addFirst(newFirst) {
        T.as(newFirst);
        if (newFirst == null) dart.nullFailed(I[38], 39, 19, "newFirst");
        if (this[_first$] != null) {
          if (!(dart.nullCheck(this[_first$])[_previous] == null)) dart.assertFailed(null, I[38], 41, 14, "_first!._previous == null");
          dart.nullCheck(this[_first$])[_previous] = newFirst;
        } else {
          this[_last] = newFirst;
        }
        newFirst[_next] = this[_first$];
        this[_first$] = newFirst;
        dart.nullCheck(this[_first$])[_list] = this;
        this.length = dart.notNull(this.length) + 1;
      }
      remove(node) {
        T.as(node);
        if (node == null) dart.nullFailed(I[38], 59, 17, "node");
        if (!dart.equals(node[_list], this)) return;
        this.length = dart.notNull(this.length) - 1;
        if (node[_previous] == null) {
          if (!(node == this[_first$])) dart.assertFailed(null, I[38], 63, 14, "identical(node, _first)");
          this[_first$] = node[_next];
        } else {
          dart.nullCheck(node[_previous])[_next] = node[_next];
        }
        if (node[_next] == null) {
          if (!(node == this[_last])) dart.assertFailed(null, I[38], 69, 14, "identical(node, _last)");
          this[_last] = node[_previous];
        } else {
          dart.nullCheck(node[_next])[_previous] = node[_previous];
        }
        node[_next] = node[_previous] = null;
        node[_list] = null;
      }
      get iterator() {
        return new (_LinkedListIteratorOfT()).new(this);
      }
    }
    (LinkedList.new = function() {
      this[_first$] = null;
      this[_last] = null;
      this[length] = 0;
      LinkedList.__proto__.new.call(this);
      ;
    }).prototype = LinkedList.prototype;
    dart.addTypeTests(LinkedList);
    LinkedList.prototype[_is_LinkedList_default] = true;
    dart.addTypeCaches(LinkedList);
    dart.setMethodSignature(LinkedList, () => ({
      __proto__: dart.getMethods(LinkedList.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LinkedList, () => ({
      __proto__: dart.getGetters(LinkedList.__proto__),
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T)
    }));
    dart.setLibraryUri(LinkedList, I[25]);
    dart.setFieldSignature(LinkedList, () => ({
      __proto__: dart.getFields(LinkedList.__proto__),
      [_first$]: dart.fieldType(dart.nullable(T)),
      [_last]: dart.fieldType(dart.nullable(T)),
      length: dart.fieldType(core.int)
    }));
    dart.defineExtensionAccessors(LinkedList, [
      'length',
      'first',
      'last',
      'isEmpty',
      'iterator'
    ]);
    return LinkedList;
  });
  _internal.LinkedList = _internal.LinkedList$();
  dart.addTypeTests(_internal.LinkedList, _is_LinkedList_default);
  var _next$ = dart.privateName(_internal, "LinkedListEntry._next");
  var _previous$ = dart.privateName(_internal, "LinkedListEntry._previous");
  var _list$ = dart.privateName(_internal, "LinkedListEntry._list");
  const _is_LinkedListEntry_default = Symbol('_is_LinkedListEntry_default');
  _internal.LinkedListEntry$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var LinkedListOfT = () => (LinkedListOfT = dart.constFn(_internal.LinkedList$(T)))();
    var LinkedListNOfT = () => (LinkedListNOfT = dart.constFn(dart.nullable(LinkedListOfT())))();
    class LinkedListEntry extends core.Object {
      get [_next]() {
        return this[_next$];
      }
      set [_next](value) {
        this[_next$] = TN().as(value);
      }
      get [_previous]() {
        return this[_previous$];
      }
      set [_previous](value) {
        this[_previous$] = TN().as(value);
      }
      get [_list]() {
        return this[_list$];
      }
      set [_list](value) {
        this[_list$] = LinkedListNOfT().as(value);
      }
      unlink() {
        let t82;
        t82 = this[_list];
        t82 == null ? null : t82.remove(T.as(this));
      }
    }
    (LinkedListEntry.new = function() {
      this[_next$] = null;
      this[_previous$] = null;
      this[_list$] = null;
      ;
    }).prototype = LinkedListEntry.prototype;
    dart.addTypeTests(LinkedListEntry);
    LinkedListEntry.prototype[_is_LinkedListEntry_default] = true;
    dart.addTypeCaches(LinkedListEntry);
    dart.setMethodSignature(LinkedListEntry, () => ({
      __proto__: dart.getMethods(LinkedListEntry.__proto__),
      unlink: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(LinkedListEntry, I[25]);
    dart.setFieldSignature(LinkedListEntry, () => ({
      __proto__: dart.getFields(LinkedListEntry.__proto__),
      [_next]: dart.fieldType(dart.nullable(T)),
      [_previous]: dart.fieldType(dart.nullable(T)),
      [_list]: dart.fieldType(dart.nullable(_internal.LinkedList$(T)))
    }));
    return LinkedListEntry;
  });
  _internal.LinkedListEntry = _internal.LinkedListEntry$();
  dart.addTypeTests(_internal.LinkedListEntry, _is_LinkedListEntry_default);
  const _is__LinkedListIterator_default = Symbol('_is__LinkedListIterator_default');
  _internal._LinkedListIterator$ = dart.generic(T => {
    class _LinkedListIterator extends core.Object {
      get current() {
        return dart.nullCast(this[_current$], T);
      }
      moveNext() {
        if (this[_current$] == null) {
          let list = this[_list];
          if (list == null) return false;
          if (!(dart.notNull(list.length) > 0)) dart.assertFailed(null, I[38], 123, 14, "list.length > 0");
          this[_current$] = list.first;
          this[_list] = null;
          return true;
        }
        this[_current$] = dart.nullCheck(this[_current$])[_next];
        return this[_current$] != null;
      }
    }
    (_LinkedListIterator.new = function(list) {
      if (list == null) dart.nullFailed(I[38], 113, 37, "list");
      this[_current$] = null;
      this[_list] = list;
      if (list.length === 0) this[_list] = null;
    }).prototype = _LinkedListIterator.prototype;
    dart.addTypeTests(_LinkedListIterator);
    _LinkedListIterator.prototype[_is__LinkedListIterator_default] = true;
    dart.addTypeCaches(_LinkedListIterator);
    _LinkedListIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(_LinkedListIterator, () => ({
      __proto__: dart.getMethods(_LinkedListIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_LinkedListIterator, () => ({
      __proto__: dart.getGetters(_LinkedListIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(_LinkedListIterator, I[25]);
    dart.setFieldSignature(_LinkedListIterator, () => ({
      __proto__: dart.getFields(_LinkedListIterator.__proto__),
      [_current$]: dart.fieldType(dart.nullable(T)),
      [_list]: dart.fieldType(dart.nullable(_internal.LinkedList$(T)))
    }));
    return _LinkedListIterator;
  });
  _internal._LinkedListIterator = _internal._LinkedListIterator$();
  dart.addTypeTests(_internal._LinkedListIterator, _is__LinkedListIterator_default);
  _internal.Sort = class Sort extends core.Object {
    static sort(E, a, compare) {
      if (a == null) dart.nullFailed(I[40], 32, 31, "a");
      if (compare == null) dart.nullFailed(I[40], 32, 38, "compare");
      _internal.Sort._doSort(E, a, 0, dart.notNull(a[$length]) - 1, compare);
    }
    static sortRange(E, a, from, to, compare) {
      if (a == null) dart.nullFailed(I[40], 45, 36, "a");
      if (from == null) dart.nullFailed(I[40], 45, 43, "from");
      if (to == null) dart.nullFailed(I[40], 45, 53, "to");
      if (compare == null) dart.nullFailed(I[40], 45, 61, "compare");
      if (dart.notNull(from) < 0 || dart.notNull(to) > dart.notNull(a[$length]) || dart.notNull(to) < dart.notNull(from)) {
        dart.throw("OutOfRange");
      }
      _internal.Sort._doSort(E, a, from, dart.notNull(to) - 1, compare);
    }
    static _doSort(E, a, left, right, compare) {
      if (a == null) dart.nullFailed(I[40], 56, 15, "a");
      if (left == null) dart.nullFailed(I[40], 56, 22, "left");
      if (right == null) dart.nullFailed(I[40], 56, 32, "right");
      if (compare == null) dart.nullFailed(I[40], 56, 43, "compare");
      if (dart.notNull(right) - dart.notNull(left) <= 32) {
        _internal.Sort._insertionSort(E, a, left, right, compare);
      } else {
        _internal.Sort._dualPivotQuicksort(E, a, left, right, compare);
      }
    }
    static _insertionSort(E, a, left, right, compare) {
      if (a == null) dart.nullFailed(I[40], 65, 15, "a");
      if (left == null) dart.nullFailed(I[40], 65, 22, "left");
      if (right == null) dart.nullFailed(I[40], 65, 32, "right");
      if (compare == null) dart.nullFailed(I[40], 65, 43, "compare");
      for (let i = dart.notNull(left) + 1; i <= dart.notNull(right); i = i + 1) {
        let el = a[$_get](i);
        let j = i;
        while (j > dart.notNull(left) && dart.notNull(compare(a[$_get](j - 1), el)) > 0) {
          a[$_set](j, a[$_get](j - 1));
          j = j - 1;
        }
        a[$_set](j, el);
      }
    }
    static _dualPivotQuicksort(E, a, left, right, compare) {
      let t82, t82$, t82$0, t82$1, t82$2, t82$3, t82$4, t82$5, t82$6;
      if (a == null) dart.nullFailed(I[40], 78, 15, "a");
      if (left == null) dart.nullFailed(I[40], 78, 22, "left");
      if (right == null) dart.nullFailed(I[40], 78, 32, "right");
      if (compare == null) dart.nullFailed(I[40], 78, 43, "compare");
      if (!(dart.notNull(right) - dart.notNull(left) > 32)) dart.assertFailed(null, I[40], 79, 12, "right - left > _INSERTION_SORT_THRESHOLD");
      let sixth = ((dart.notNull(right) - dart.notNull(left) + 1) / 6)[$truncate]();
      let index1 = dart.notNull(left) + sixth;
      let index5 = dart.notNull(right) - sixth;
      let index3 = ((dart.notNull(left) + dart.notNull(right)) / 2)[$truncate]();
      let index2 = index3 - sixth;
      let index4 = index3 + sixth;
      let el1 = a[$_get](index1);
      let el2 = a[$_get](index2);
      let el3 = a[$_get](index3);
      let el4 = a[$_get](index4);
      let el5 = a[$_get](index5);
      if (dart.notNull(compare(el1, el2)) > 0) {
        let t = el1;
        el1 = el2;
        el2 = t;
      }
      if (dart.notNull(compare(el4, el5)) > 0) {
        let t = el4;
        el4 = el5;
        el5 = t;
      }
      if (dart.notNull(compare(el1, el3)) > 0) {
        let t = el1;
        el1 = el3;
        el3 = t;
      }
      if (dart.notNull(compare(el2, el3)) > 0) {
        let t = el2;
        el2 = el3;
        el3 = t;
      }
      if (dart.notNull(compare(el1, el4)) > 0) {
        let t = el1;
        el1 = el4;
        el4 = t;
      }
      if (dart.notNull(compare(el3, el4)) > 0) {
        let t = el3;
        el3 = el4;
        el4 = t;
      }
      if (dart.notNull(compare(el2, el5)) > 0) {
        let t = el2;
        el2 = el5;
        el5 = t;
      }
      if (dart.notNull(compare(el2, el3)) > 0) {
        let t = el2;
        el2 = el3;
        el3 = t;
      }
      if (dart.notNull(compare(el4, el5)) > 0) {
        let t = el4;
        el4 = el5;
        el5 = t;
      }
      let pivot1 = el2;
      let pivot2 = el4;
      a[$_set](index1, el1);
      a[$_set](index3, el3);
      a[$_set](index5, el5);
      a[$_set](index2, a[$_get](left));
      a[$_set](index4, a[$_get](right));
      let less = dart.notNull(left) + 1;
      let great = dart.notNull(right) - 1;
      let pivots_are_equal = compare(pivot1, pivot2) === 0;
      if (pivots_are_equal) {
        let pivot = pivot1;
        for (let k = less; k <= great; k = k + 1) {
          let ak = a[$_get](k);
          let comp = compare(ak, pivot);
          if (comp === 0) continue;
          if (dart.notNull(comp) < 0) {
            if (k !== less) {
              a[$_set](k, a[$_get](less));
              a[$_set](less, ak);
            }
            less = less + 1;
          } else {
            while (true) {
              comp = compare(a[$_get](great), pivot);
              if (dart.notNull(comp) > 0) {
                great = great - 1;
                continue;
              } else if (dart.notNull(comp) < 0) {
                a[$_set](k, a[$_get](less));
                a[$_set]((t82 = less, less = t82 + 1, t82), a[$_get](great));
                a[$_set]((t82$ = great, great = t82$ - 1, t82$), ak);
                break;
              } else {
                a[$_set](k, a[$_get](great));
                a[$_set]((t82$0 = great, great = t82$0 - 1, t82$0), ak);
                break;
              }
            }
          }
        }
      } else {
        for (let k = less; k <= great; k = k + 1) {
          let ak = a[$_get](k);
          let comp_pivot1 = compare(ak, pivot1);
          if (dart.notNull(comp_pivot1) < 0) {
            if (k !== less) {
              a[$_set](k, a[$_get](less));
              a[$_set](less, ak);
            }
            less = less + 1;
          } else {
            let comp_pivot2 = compare(ak, pivot2);
            if (dart.notNull(comp_pivot2) > 0) {
              while (true) {
                let comp = compare(a[$_get](great), pivot2);
                if (dart.notNull(comp) > 0) {
                  great = great - 1;
                  if (great < k) break;
                  continue;
                } else {
                  comp = compare(a[$_get](great), pivot1);
                  if (dart.notNull(comp) < 0) {
                    a[$_set](k, a[$_get](less));
                    a[$_set]((t82$1 = less, less = t82$1 + 1, t82$1), a[$_get](great));
                    a[$_set]((t82$2 = great, great = t82$2 - 1, t82$2), ak);
                  } else {
                    a[$_set](k, a[$_get](great));
                    a[$_set]((t82$3 = great, great = t82$3 - 1, t82$3), ak);
                  }
                  break;
                }
              }
            }
          }
        }
      }
      a[$_set](left, a[$_get](less - 1));
      a[$_set](less - 1, pivot1);
      a[$_set](right, a[$_get](great + 1));
      a[$_set](great + 1, pivot2);
      _internal.Sort._doSort(E, a, left, less - 2, compare);
      _internal.Sort._doSort(E, a, great + 2, right, compare);
      if (pivots_are_equal) {
        return;
      }
      if (less < index1 && great > index5) {
        while (compare(a[$_get](less), pivot1) === 0) {
          less = less + 1;
        }
        while (compare(a[$_get](great), pivot2) === 0) {
          great = great - 1;
        }
        for (let k = less; k <= great; k = k + 1) {
          let ak = a[$_get](k);
          let comp_pivot1 = compare(ak, pivot1);
          if (comp_pivot1 === 0) {
            if (k !== less) {
              a[$_set](k, a[$_get](less));
              a[$_set](less, ak);
            }
            less = less + 1;
          } else {
            let comp_pivot2 = compare(ak, pivot2);
            if (comp_pivot2 === 0) {
              while (true) {
                let comp = compare(a[$_get](great), pivot2);
                if (comp === 0) {
                  great = great - 1;
                  if (great < k) break;
                  continue;
                } else {
                  comp = compare(a[$_get](great), pivot1);
                  if (dart.notNull(comp) < 0) {
                    a[$_set](k, a[$_get](less));
                    a[$_set]((t82$4 = less, less = t82$4 + 1, t82$4), a[$_get](great));
                    a[$_set]((t82$5 = great, great = t82$5 - 1, t82$5), ak);
                  } else {
                    a[$_set](k, a[$_get](great));
                    a[$_set]((t82$6 = great, great = t82$6 - 1, t82$6), ak);
                  }
                  break;
                }
              }
            }
          }
        }
        _internal.Sort._doSort(E, a, less, great, compare);
      } else {
        _internal.Sort._doSort(E, a, less, great, compare);
      }
    }
  };
  (_internal.Sort.new = function() {
    ;
  }).prototype = _internal.Sort.prototype;
  dart.addTypeTests(_internal.Sort);
  dart.addTypeCaches(_internal.Sort);
  dart.setLibraryUri(_internal.Sort, I[25]);
  dart.defineLazy(_internal.Sort, {
    /*_internal.Sort._INSERTION_SORT_THRESHOLD*/get _INSERTION_SORT_THRESHOLD() {
      return 32;
    }
  }, false);
  var _name$0 = dart.privateName(_internal, "Symbol._name");
  _internal.Symbol = class Symbol extends core.Object {
    get [_name$]() {
      return this[_name$0];
    }
    set [_name$](value) {
      super[_name$] = value;
    }
    _equals(other) {
      if (other == null) return false;
      return _internal.Symbol.is(other) && this[_name$] == other[_name$];
    }
    get hashCode() {
      let hash = this._hashCode;
      if (hash != null) return hash;
      hash = 536870911 & 664597 * dart.hashCode(this[_name$]);
      this._hashCode = hash;
      return hash;
    }
    toString() {
      return "Symbol(\"" + dart.str(this[_name$]) + "\")";
    }
    static getName(symbol) {
      if (symbol == null) dart.nullFailed(I[42], 119, 32, "symbol");
      return symbol[_name$];
    }
    static validatePublicSymbol(name) {
      if (name == null) dart.nullFailed(I[42], 121, 45, "name");
      if (name[$isEmpty] || dart.test(_internal.Symbol.publicSymbolPattern.hasMatch(name))) return name;
      if (name[$startsWith]("_")) {
        dart.throw(new core.ArgumentError.new("\"" + dart.str(name) + "\" is a private identifier"));
      }
      dart.throw(new core.ArgumentError.new("\"" + dart.str(name) + "\" is not a valid (qualified) symbol name"));
    }
    static isValidSymbol(name) {
      if (name == null) dart.nullFailed(I[42], 137, 36, "name");
      return name[$isEmpty] || dart.test(_internal.Symbol.symbolPattern.hasMatch(name));
    }
    static computeUnmangledName(symbol) {
      if (symbol == null) dart.nullFailed(I[41], 36, 45, "symbol");
      return symbol[_name$];
    }
  };
  (_internal.Symbol.new = function(name) {
    if (name == null) dart.nullFailed(I[41], 20, 23, "name");
    this[_name$0] = name;
    ;
  }).prototype = _internal.Symbol.prototype;
  (_internal.Symbol.unvalidated = function(_name) {
    if (_name == null) dart.nullFailed(I[42], 107, 33, "_name");
    this[_name$0] = _name;
    ;
  }).prototype = _internal.Symbol.prototype;
  (_internal.Symbol.validated = function(name) {
    if (name == null) dart.nullFailed(I[42], 110, 27, "name");
    this[_name$0] = _internal.Symbol.validatePublicSymbol(name);
    ;
  }).prototype = _internal.Symbol.prototype;
  dart.addTypeTests(_internal.Symbol);
  dart.addTypeCaches(_internal.Symbol);
  _internal.Symbol[dart.implements] = () => [core.Symbol];
  dart.setMethodSignature(_internal.Symbol, () => ({
    __proto__: dart.getMethods(_internal.Symbol.__proto__),
    toString: dart.fnType(dart.dynamic, []),
    [$toString]: dart.fnType(dart.dynamic, [])
  }));
  dart.setLibraryUri(_internal.Symbol, I[25]);
  dart.setFieldSignature(_internal.Symbol, () => ({
    __proto__: dart.getFields(_internal.Symbol.__proto__),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_internal.Symbol, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_internal.Symbol, ['hashCode']);
  dart.defineLazy(_internal.Symbol, {
    /*_internal.Symbol.reservedWordRE*/get reservedWordRE() {
      return "(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))";
    },
    /*_internal.Symbol.publicIdentifierRE*/get publicIdentifierRE() {
      return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*";
    },
    /*_internal.Symbol.identifierRE*/get identifierRE() {
      return "(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$_][\\w$]*";
    },
    /*_internal.Symbol.operatorRE*/get operatorRE() {
      return "(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)";
    },
    /*_internal.Symbol.publicSymbolPattern*/get publicSymbolPattern() {
      return core.RegExp.new("^(?:" + dart.str(_internal.Symbol.operatorRE) + "$|" + dart.str(_internal.Symbol.publicIdentifierRE) + "(?:=?$|[.](?!$)))+?$");
    },
    /*_internal.Symbol.symbolPattern*/get symbolPattern() {
      return core.RegExp.new("^(?:" + dart.str(_internal.Symbol.operatorRE) + "$|" + dart.str(_internal.Symbol.identifierRE) + "(?:=?$|[.](?!$)))+?$");
    }
  }, false);
  _internal.createSentinel = function createSentinel(T) {
    return dart.throw(new core.UnsupportedError.new("createSentinel"));
  };
  _internal.isSentinel = function isSentinel(value) {
    return dart.throw(new core.UnsupportedError.new("isSentinel"));
  };
  _internal.typeAcceptsNull = function typeAcceptsNull(T) {
    return !false || T.is(null);
  };
  _internal.hexDigitValue = function hexDigitValue(char) {
    if (char == null) dart.nullFailed(I[21], 100, 23, "char");
    if (!(dart.notNull(char) >= 0 && dart.notNull(char) <= 65535)) dart.assertFailed(null, I[21], 101, 10, "char >= 0 && char <= 0xFFFF");
    let digit = (dart.notNull(char) ^ 48) >>> 0;
    if (digit <= 9) return digit;
    let letter = (dart.notNull(char) | 32) >>> 0;
    if (97 <= letter && letter <= 102) return letter - (97 - 10);
    return -1;
  };
  _internal.parseHexByte = function parseHexByte(source, index) {
    if (source == null) dart.nullFailed(I[21], 115, 25, "source");
    if (index == null) dart.nullFailed(I[21], 115, 37, "index");
    if (!(dart.notNull(index) + 2 <= source.length)) dart.assertFailed(null, I[21], 116, 10, "index + 2 <= source.length");
    let digit1 = _internal.hexDigitValue(source[$codeUnitAt](index));
    let digit2 = _internal.hexDigitValue(source[$codeUnitAt](dart.notNull(index) + 1));
    return dart.notNull(digit1) * 16 + dart.notNull(digit2) - (dart.notNull(digit2) & 256);
  };
  _internal.extractTypeArguments = function extractTypeArguments$(T, instance, extract) {
    if (extract == null) dart.nullFailed(I[41], 57, 54, "extract");
    return dart.extractTypeArguments(T, instance, extract);
  };
  _internal.checkNotNullable = function checkNotNullable(T, value, name) {
    if (value == null) dart.nullFailed(I[21], 402, 40, "value");
    if (name == null) dart.nullFailed(I[21], 402, 54, "name");
    if (value == null) {
      dart.throw(new (_internal.NotNullableError$(T)).new(name));
    }
    return value;
  };
  _internal.valueOfNonNullableParamWithDefault = function valueOfNonNullableParamWithDefault(T, value, defaultVal) {
    if (value == null) dart.nullFailed(I[21], 427, 58, "value");
    if (defaultVal == null) dart.nullFailed(I[21], 427, 67, "defaultVal");
    if (value == null) {
      return defaultVal;
    } else {
      return value;
    }
  };
  _internal._checkCount = function _checkCount(count) {
    if (count == null) dart.nullFailed(I[37], 623, 21, "count");
    core.ArgumentError.checkNotNull(core.int, count, "count");
    core.RangeError.checkNotNegative(count, "count");
    return count;
  };
  _internal.makeListFixedLength = function makeListFixedLength(T, growableList) {
    if (growableList == null) dart.nullFailed(I[41], 45, 40, "growableList");
    _interceptors.JSArray.markFixedList(growableList);
    return growableList;
  };
  _internal.makeFixedListUnmodifiable = function makeFixedListUnmodifiable(T, fixedLengthList) {
    if (fixedLengthList == null) dart.nullFailed(I[41], 51, 46, "fixedLengthList");
    _interceptors.JSArray.markUnmodifiableList(fixedLengthList);
    return fixedLengthList;
  };
  _internal.printToConsole = function printToConsole(line) {
    if (line == null) dart.nullFailed(I[41], 40, 28, "line");
    _js_primitives.printString(dart.str(line));
  };
  dart.defineLazy(_internal, {
    /*_internal.POWERS_OF_TEN*/get POWERS_OF_TEN() {
      return C[21] || CT.C21;
    },
    /*_internal.nullFuture*/get nullFuture() {
      return async.Zone.root.run(T$.FutureOfNull(), dart.fn(() => T$.FutureOfNull().value(null), T$.VoidToFutureOfNull()));
    },
    /*_internal.printToZone*/get printToZone() {
      return null;
    },
    set printToZone(_) {}
  }, false);
  var _handle = dart.privateName(_isolate_helper, "_handle");
  var _tick = dart.privateName(_isolate_helper, "_tick");
  var _once = dart.privateName(_isolate_helper, "_once");
  _isolate_helper.TimerImpl = class TimerImpl extends core.Object {
    get tick() {
      return this[_tick];
    }
    cancel() {
      if (dart.test(_isolate_helper.hasTimer())) {
        if (this[_handle] == null) return;
        dart.removeAsyncCallback();
        if (dart.test(this[_once])) {
          _isolate_helper.global.clearTimeout(this[_handle]);
        } else {
          _isolate_helper.global.clearInterval(this[_handle]);
        }
        this[_handle] = null;
      } else {
        dart.throw(new core.UnsupportedError.new("Canceling a timer."));
      }
    }
    get isActive() {
      return this[_handle] != null;
    }
  };
  (_isolate_helper.TimerImpl.new = function(milliseconds, callback) {
    if (milliseconds == null) dart.nullFailed(I[43], 40, 17, "milliseconds");
    if (callback == null) dart.nullFailed(I[43], 40, 36, "callback");
    this[_handle] = null;
    this[_tick] = 0;
    this[_once] = true;
    if (dart.test(_isolate_helper.hasTimer())) {
      let currentHotRestartIteration = dart.hotRestartIteration;
      const internalCallback = () => {
        this[_handle] = null;
        dart.removeAsyncCallback();
        this[_tick] = 1;
        if (currentHotRestartIteration == dart.hotRestartIteration) {
          callback();
        }
      };
      dart.fn(internalCallback, T$.VoidTovoid());
      dart.addAsyncCallback();
      this[_handle] = _isolate_helper.global.setTimeout(internalCallback, milliseconds);
    } else {
      dart.throw(new core.UnsupportedError.new("`setTimeout()` not found."));
    }
  }).prototype = _isolate_helper.TimerImpl.prototype;
  (_isolate_helper.TimerImpl.periodic = function(milliseconds, callback) {
    if (milliseconds == null) dart.nullFailed(I[43], 61, 26, "milliseconds");
    if (callback == null) dart.nullFailed(I[43], 61, 45, "callback");
    this[_handle] = null;
    this[_tick] = 0;
    this[_once] = false;
    if (dart.test(_isolate_helper.hasTimer())) {
      dart.addAsyncCallback();
      let start = Date.now();
      let currentHotRestartIteration = dart.hotRestartIteration;
      this[_handle] = _isolate_helper.global.setInterval(dart.fn(() => {
        if (currentHotRestartIteration != dart.hotRestartIteration) {
          this.cancel();
          return;
        }
        let tick = dart.notNull(this[_tick]) + 1;
        if (dart.notNull(milliseconds) > 0) {
          let duration = Date.now() - start;
          if (duration > (tick + 1) * dart.notNull(milliseconds)) {
            tick = (duration / dart.notNull(milliseconds))[$truncate]();
          }
        }
        this[_tick] = tick;
        callback(this);
      }, T$.VoidToNull()), milliseconds);
    } else {
      dart.throw(new core.UnsupportedError.new("Periodic timer."));
    }
  }).prototype = _isolate_helper.TimerImpl.prototype;
  dart.addTypeTests(_isolate_helper.TimerImpl);
  dart.addTypeCaches(_isolate_helper.TimerImpl);
  _isolate_helper.TimerImpl[dart.implements] = () => [async.Timer];
  dart.setMethodSignature(_isolate_helper.TimerImpl, () => ({
    __proto__: dart.getMethods(_isolate_helper.TimerImpl.__proto__),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(_isolate_helper.TimerImpl, () => ({
    __proto__: dart.getGetters(_isolate_helper.TimerImpl.__proto__),
    tick: core.int,
    isActive: core.bool
  }));
  dart.setLibraryUri(_isolate_helper.TimerImpl, I[44]);
  dart.setFieldSignature(_isolate_helper.TimerImpl, () => ({
    __proto__: dart.getFields(_isolate_helper.TimerImpl.__proto__),
    [_once]: dart.finalFieldType(core.bool),
    [_handle]: dart.fieldType(dart.nullable(core.int)),
    [_tick]: dart.fieldType(core.int)
  }));
  _isolate_helper.startRootIsolate = function startRootIsolate(main, args) {
    if (args == null) args = T$.JSArrayOfString().of([]);
    if (core.List.is(args)) {
      if (!T$.ListOfString().is(args)) args = T$.ListOfString().from(args);
      if (typeof main == "function") {
        main(args, null);
      } else {
        dart.dcall(main, [args]);
      }
    } else {
      dart.throw(new core.ArgumentError.new("Arguments to main must be a List: " + dart.str(args)));
    }
  };
  _isolate_helper.hasTimer = function hasTimer() {
    return _isolate_helper.global.setTimeout != null;
  };
  dart.defineLazy(_isolate_helper, {
    /*_isolate_helper.global*/get global() {
      return dart.global;
    }
  }, false);
  _js_helper._Patch = class _Patch extends core.Object {};
  (_js_helper._Patch.new = function() {
    ;
  }).prototype = _js_helper._Patch.prototype;
  dart.addTypeTests(_js_helper._Patch);
  dart.addTypeCaches(_js_helper._Patch);
  dart.setLibraryUri(_js_helper._Patch, I[45]);
  var _current$0 = dart.privateName(_js_helper, "_current");
  var _jsIterator$ = dart.privateName(_js_helper, "_jsIterator");
  const _is_DartIterator_default = Symbol('_is_DartIterator_default');
  _js_helper.DartIterator$ = dart.generic(E => {
    class DartIterator extends core.Object {
      get current() {
        return E.as(this[_current$0]);
      }
      moveNext() {
        let ret = this[_jsIterator$].next();
        this[_current$0] = ret.value;
        return !ret.done;
      }
    }
    (DartIterator.new = function(_jsIterator) {
      this[_current$0] = null;
      this[_jsIterator$] = _jsIterator;
      ;
    }).prototype = DartIterator.prototype;
    dart.addTypeTests(DartIterator);
    DartIterator.prototype[_is_DartIterator_default] = true;
    dart.addTypeCaches(DartIterator);
    DartIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(DartIterator, () => ({
      __proto__: dart.getMethods(DartIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(DartIterator, () => ({
      __proto__: dart.getGetters(DartIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(DartIterator, I[45]);
    dart.setFieldSignature(DartIterator, () => ({
      __proto__: dart.getFields(DartIterator.__proto__),
      [_jsIterator$]: dart.finalFieldType(dart.dynamic),
      [_current$0]: dart.fieldType(dart.nullable(E))
    }));
    return DartIterator;
  });
  _js_helper.DartIterator = _js_helper.DartIterator$();
  dart.addTypeTests(_js_helper.DartIterator, _is_DartIterator_default);
  var _initGenerator$ = dart.privateName(_js_helper, "_initGenerator");
  const _is_SyncIterable_default = Symbol('_is_SyncIterable_default');
  _js_helper.SyncIterable$ = dart.generic(E => {
    var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
    class SyncIterable extends collection.IterableBase$(E) {
      [Symbol.iterator]() {
        return this[_initGenerator$]();
      }
      get iterator() {
        return new (DartIteratorOfE()).new(this[_initGenerator$]());
      }
    }
    (SyncIterable.new = function(_initGenerator) {
      if (_initGenerator == null) dart.nullFailed(I[46], 62, 21, "_initGenerator");
      this[_initGenerator$] = _initGenerator;
      SyncIterable.__proto__.new.call(this);
      ;
    }).prototype = SyncIterable.prototype;
    dart.addTypeTests(SyncIterable);
    SyncIterable.prototype[_is_SyncIterable_default] = true;
    dart.addTypeCaches(SyncIterable);
    dart.setMethodSignature(SyncIterable, () => ({
      __proto__: dart.getMethods(SyncIterable.__proto__),
      [Symbol.iterator]: dart.fnType(dart.dynamic, [])
    }));
    dart.setGetterSignature(SyncIterable, () => ({
      __proto__: dart.getGetters(SyncIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(SyncIterable, I[45]);
    dart.setFieldSignature(SyncIterable, () => ({
      __proto__: dart.getFields(SyncIterable.__proto__),
      [_initGenerator$]: dart.finalFieldType(dart.fnType(dart.dynamic, []))
    }));
    dart.defineExtensionAccessors(SyncIterable, ['iterator']);
    return SyncIterable;
  });
  _js_helper.SyncIterable = _js_helper.SyncIterable$();
  dart.addTypeTests(_js_helper.SyncIterable, _is_SyncIterable_default);
  _js_helper.Primitives = class Primitives extends core.Object {
    static parseInt(source, _radix) {
      if (source == null) dart.argumentError(source);
      let re = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i;
      let match = re.exec(source);
      let digitsIndex = 1;
      let hexIndex = 2;
      let decimalIndex = 3;
      if (match == null) {
        return null;
      }
      let decimalMatch = match[$_get](decimalIndex);
      if (_radix == null) {
        if (decimalMatch != null) {
          return parseInt(source, 10);
        }
        if (match[$_get](hexIndex) != null) {
          return parseInt(source, 16);
        }
        return null;
      }
      let radix = _radix;
      if (radix < 2 || radix > 36) {
        dart.throw(new core.RangeError.range(radix, 2, 36, "radix"));
      }
      if (radix === 10 && decimalMatch != null) {
        return parseInt(source, 10);
      }
      if (radix < 10 || decimalMatch == null) {
        let maxCharCode = null;
        if (radix <= 10) {
          maxCharCode = 48 - 1 + radix;
        } else {
          maxCharCode = 97 - 10 - 1 + radix;
        }
        if (!(typeof match[$_get](digitsIndex) == 'string')) dart.assertFailed(null, I[46], 127, 14, "match[digitsIndex] is String");
        let digitsPart = match[digitsIndex];
        for (let i = 0; i < digitsPart.length; i = i + 1) {
          let characterCode = (digitsPart[$codeUnitAt](i) | 32) >>> 0;
          if (characterCode > dart.notNull(maxCharCode)) {
            return null;
          }
        }
      }
      return parseInt(source, radix);
    }
    static parseDouble(source) {
      if (source == null) dart.argumentError(source);
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source)) {
        return null;
      }
      let result = parseFloat(source);
      if (result[$isNaN]) {
        let trimmed = source[$trim]();
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN") {
          return result;
        }
        return null;
      }
      return result;
    }
    static dateNow() {
      return Date.now();
    }
    static initTicker() {
      if (_js_helper.Primitives.timerFrequency !== 0) return;
      _js_helper.Primitives.timerFrequency = 1000;
      if (typeof window == "undefined") return;
      let jsWindow = window;
      if (jsWindow == null) return;
      let performance = jsWindow.performance;
      if (performance == null) return;
      if (typeof performance.now != "function") return;
      _js_helper.Primitives.timerFrequency = 1000000;
      _js_helper.Primitives.timerTicks = dart.fn(() => (1000 * performance.now())[$floor](), T$.VoidToint());
    }
    static get isD8() {
      return typeof version == "function" && typeof os == "object" && "system" in os;
    }
    static get isJsshell() {
      return typeof version == "function" && typeof system == "function";
    }
    static currentUri() {
      if (!!dart.global.location) {
        return dart.global.location.href;
      }
      return "";
    }
    static _fromCharCodeApply(array) {
      if (array == null) dart.nullFailed(I[46], 214, 46, "array");
      let end = dart.notNull(array[$length]);
      if (end <= 500) {
        return String.fromCharCode.apply(null, array);
      }
      let result = "";
      for (let i = 0; i < end; i = i + 500) {
        let chunkEnd = i + 500 < end ? i + 500 : end;
        result = result + String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    }
    static stringFromCodePoints(codePoints) {
      if (codePoints == null) dart.nullFailed(I[46], 236, 51, "codePoints");
      let a = T$.JSArrayOfint().of([]);
      for (let i of codePoints) {
        if (i == null) dart.argumentError(i);
        {
          if (i <= 65535) {
            a[$add](i);
          } else if (i <= 1114111) {
            a[$add](55296 + (i - 65536 >> 10 & 1023));
            a[$add](56320 + (i & 1023));
          } else {
            dart.throw(_js_helper.argumentErrorValue(i));
          }
        }
      }
      return _js_helper.Primitives._fromCharCodeApply(a);
    }
    static stringFromCharCodes(charCodes) {
      if (charCodes == null) dart.nullFailed(I[46], 252, 50, "charCodes");
      for (let i of charCodes) {
        if (i == null) dart.argumentError(i);
        {
          if (i < 0) dart.throw(_js_helper.argumentErrorValue(i));
          if (i > 65535) return _js_helper.Primitives.stringFromCodePoints(charCodes);
        }
      }
      return _js_helper.Primitives._fromCharCodeApply(charCodes);
    }
    static stringFromNativeUint8List(charCodes, start, end) {
      if (charCodes == null) dart.nullFailed(I[46], 263, 23, "charCodes");
      if (start == null) dart.argumentError(start);
      if (end == null) dart.argumentError(end);
      if (end <= 500 && start === 0 && end === charCodes[$length]) {
        return String.fromCharCode.apply(null, charCodes);
      }
      let result = "";
      for (let i = start; i < end; i = i + 500) {
        let chunkEnd = i + 500 < end ? i + 500 : end;
        result = result + String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    }
    static stringFromCharCode(charCode) {
      if (charCode == null) dart.argumentError(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535) {
          return String.fromCharCode(charCode);
        }
        if (charCode <= 1114111) {
          let bits = charCode - 65536;
          let low = 56320 | bits & 1023;
          let high = (55296 | bits[$rightShift](10)) >>> 0;
          return String.fromCharCode(high, low);
        }
      }
      dart.throw(new core.RangeError.range(charCode, 0, 1114111));
    }
    static flattenString(str) {
      if (str == null) dart.nullFailed(I[46], 298, 38, "str");
      return str.charCodeAt(0) == 0 ? str : str;
    }
    static getTimeZoneName(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 302, 42, "receiver");
      let d = _js_helper.Primitives.lazyAsJsDate(receiver);
      let match = /\((.*)\)/.exec(d.toString());
      if (match != null) return match[$_get](1);
      match = /^[A-Z,a-z]{3}\s[A-Z,a-z]{3}\s\d+\s\d{2}:\d{2}:\d{2}\s([A-Z]{3,5})\s\d{4}$/.exec(d.toString());
      if (match != null) return match[$_get](1);
      match = /(?:GMT|UTC)[+-]\d{4}/.exec(d.toString());
      if (match != null) return match[$_get](0);
      return "";
    }
    static getTimeZoneOffsetInMinutes(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 342, 50, "receiver");
      return -_js_helper.Primitives.lazyAsJsDate(receiver).getTimezoneOffset();
    }
    static valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      if (years == null) dart.argumentError(years);
      if (month == null) dart.argumentError(month);
      if (day == null) dart.argumentError(day);
      if (hours == null) dart.argumentError(hours);
      if (minutes == null) dart.argumentError(minutes);
      if (seconds == null) dart.argumentError(seconds);
      if (milliseconds == null) dart.argumentError(milliseconds);
      if (isUtc == null) dart.argumentError(isUtc);
      let MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
      let jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years = years + 400;
        jsMonth = jsMonth - 400 * 12;
      }
      let value = null;
      if (isUtc) {
        value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds);
      } else {
        value = new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      }
      if (value[$isNaN] || dart.notNull(value) < -MAX_MILLISECONDS_SINCE_EPOCH || dart.notNull(value) > MAX_MILLISECONDS_SINCE_EPOCH) {
        return null;
      }
      if (years <= 0 || years < 100) return _js_helper.Primitives.patchUpY2K(value, years, isUtc);
      return value;
    }
    static patchUpY2K(value, years, isUtc) {
      let date = new Date(value);
      if (dart.dtest(isUtc)) {
        date.setUTCFullYear(years);
      } else {
        date.setFullYear(years);
      }
      return date.valueOf();
    }
    static lazyAsJsDate(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 394, 32, "receiver");
      if (receiver.date === void 0) {
        receiver.date = new Date(receiver.millisecondsSinceEpoch);
      }
      return receiver.date;
    }
    static getYear(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 406, 31, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCFullYear() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getFullYear() + 0;
    }
    static getMonth(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 412, 32, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMonth() + 1 : _js_helper.Primitives.lazyAsJsDate(receiver).getMonth() + 1;
    }
    static getDay(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 418, 30, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDate() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDate() + 0;
    }
    static getHours(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 424, 32, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCHours() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getHours() + 0;
    }
    static getMinutes(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 430, 34, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMinutes() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMinutes() + 0;
    }
    static getSeconds(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 436, 34, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCSeconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getSeconds() + 0;
    }
    static getMilliseconds(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 442, 39, "receiver");
      return dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getMilliseconds() + 0;
    }
    static getWeekday(receiver) {
      if (receiver == null) dart.nullFailed(I[46], 448, 34, "receiver");
      let weekday = dart.test(receiver.isUtc) ? _js_helper.Primitives.lazyAsJsDate(receiver).getUTCDay() + 0 : _js_helper.Primitives.lazyAsJsDate(receiver).getDay() + 0;
      return (weekday + 6)[$modulo](7) + 1;
    }
    static valueFromDateString(str) {
      if (!(typeof str == 'string')) dart.throw(_js_helper.argumentErrorValue(str));
      let value = Date.parse(str);
      if (value[$isNaN]) dart.throw(_js_helper.argumentErrorValue(str));
      return value;
    }
    static getProperty(object, key) {
      if (key == null) dart.nullFailed(I[46], 463, 53, "key");
      if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
        dart.throw(_js_helper.argumentErrorValue(object));
      }
      return object[key];
    }
    static setProperty(object, key, value) {
      if (object == null || typeof object == 'boolean' || typeof object == 'number' || typeof object == 'string') {
        dart.throw(_js_helper.argumentErrorValue(object));
      }
      object[key] = value;
    }
  };
  (_js_helper.Primitives.new = function() {
    ;
  }).prototype = _js_helper.Primitives.prototype;
  dart.addTypeTests(_js_helper.Primitives);
  dart.addTypeCaches(_js_helper.Primitives);
  dart.setLibraryUri(_js_helper.Primitives, I[45]);
  dart.defineLazy(_js_helper.Primitives, {
    /*_js_helper.Primitives.DOLLAR_CHAR_VALUE*/get DOLLAR_CHAR_VALUE() {
      return 36;
    },
    /*_js_helper.Primitives.timerFrequency*/get timerFrequency() {
      return 0;
    },
    set timerFrequency(_) {},
    /*_js_helper.Primitives.timerTicks*/get timerTicks() {
      return C[22] || CT.C22;
    },
    set timerTicks(_) {}
  }, false);
  var _receiver$0 = dart.privateName(_js_helper, "JsNoSuchMethodError._receiver");
  var _message$0 = dart.privateName(_js_helper, "_message");
  var _method = dart.privateName(_js_helper, "_method");
  var _receiver$1 = dart.privateName(_js_helper, "_receiver");
  var _arguments$0 = dart.privateName(_js_helper, "_arguments");
  var _memberName$0 = dart.privateName(_js_helper, "_memberName");
  var _invocation$0 = dart.privateName(_js_helper, "_invocation");
  var _namedArguments$0 = dart.privateName(_js_helper, "_namedArguments");
  _js_helper.JsNoSuchMethodError = class JsNoSuchMethodError extends core.Error {
    get [_receiver$1]() {
      return this[_receiver$0];
    }
    set [_receiver$1](value) {
      super[_receiver$1] = value;
    }
    toString() {
      if (this[_method] == null) return "NoSuchMethodError: " + dart.str(this[_message$0]);
      if (this[_receiver$1] == null) {
        return "NoSuchMethodError: method not found: '" + dart.str(this[_method]) + "' (" + dart.str(this[_message$0]) + ")";
      }
      return "NoSuchMethodError: " + "method not found: '" + dart.str(this[_method]) + "' on '" + dart.str(this[_receiver$1]) + "' (" + dart.str(this[_message$0]) + ")";
    }
    get [_receiver$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[23] || CT.C23));
    }
    get [_arguments$]() {
      return T$.ListN().as(this[$noSuchMethod](new core._Invocation.getter(C[24] || CT.C24)));
    }
    get [_memberName$]() {
      return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C[25] || CT.C25)));
    }
    get [_invocation$]() {
      return T$.InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C[26] || CT.C26)));
    }
    get [_namedArguments$]() {
      return T$.MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C[27] || CT.C27)));
    }
  };
  (_js_helper.JsNoSuchMethodError.new = function(_message, match) {
    this[_message$0] = _message;
    this[_method] = match == null ? null : match.method;
    this[_receiver$0] = match == null ? null : match.receiver;
    _js_helper.JsNoSuchMethodError.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.JsNoSuchMethodError.prototype;
  dart.addTypeTests(_js_helper.JsNoSuchMethodError);
  dart.addTypeCaches(_js_helper.JsNoSuchMethodError);
  _js_helper.JsNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
  dart.setGetterSignature(_js_helper.JsNoSuchMethodError, () => ({
    __proto__: dart.getGetters(_js_helper.JsNoSuchMethodError.__proto__),
    [_receiver$]: dart.nullable(core.Object),
    [_arguments$]: dart.nullable(core.List),
    [_memberName$]: core.Symbol,
    [_invocation$]: dart.nullable(core.Invocation),
    [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
  }));
  dart.setLibraryUri(_js_helper.JsNoSuchMethodError, I[45]);
  dart.setFieldSignature(_js_helper.JsNoSuchMethodError, () => ({
    __proto__: dart.getFields(_js_helper.JsNoSuchMethodError.__proto__),
    [_message$0]: dart.finalFieldType(dart.nullable(core.String)),
    [_method]: dart.finalFieldType(dart.nullable(core.String)),
    [_receiver$1]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(_js_helper.JsNoSuchMethodError, ['toString']);
  _js_helper.UnknownJsTypeError = class UnknownJsTypeError extends core.Error {
    toString() {
      return this[_message$0][$isEmpty] ? "Error" : "Error: " + dart.str(this[_message$0]);
    }
  };
  (_js_helper.UnknownJsTypeError.new = function(_message) {
    if (_message == null) dart.nullFailed(I[46], 570, 27, "_message");
    this[_message$0] = _message;
    _js_helper.UnknownJsTypeError.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.UnknownJsTypeError.prototype;
  dart.addTypeTests(_js_helper.UnknownJsTypeError);
  dart.addTypeCaches(_js_helper.UnknownJsTypeError);
  dart.setLibraryUri(_js_helper.UnknownJsTypeError, I[45]);
  dart.setFieldSignature(_js_helper.UnknownJsTypeError, () => ({
    __proto__: dart.getFields(_js_helper.UnknownJsTypeError.__proto__),
    [_message$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_js_helper.UnknownJsTypeError, ['toString']);
  var types$0 = dart.privateName(_js_helper, "Creates.types");
  _js_helper.Creates = class Creates extends core.Object {
    get types() {
      return this[types$0];
    }
    set types(value) {
      super.types = value;
    }
  };
  (_js_helper.Creates.new = function(types) {
    if (types == null) dart.nullFailed(I[46], 644, 22, "types");
    this[types$0] = types;
    ;
  }).prototype = _js_helper.Creates.prototype;
  dart.addTypeTests(_js_helper.Creates);
  dart.addTypeCaches(_js_helper.Creates);
  dart.setLibraryUri(_js_helper.Creates, I[45]);
  dart.setFieldSignature(_js_helper.Creates, () => ({
    __proto__: dart.getFields(_js_helper.Creates.__proto__),
    types: dart.finalFieldType(core.String)
  }));
  var types$1 = dart.privateName(_js_helper, "Returns.types");
  _js_helper.Returns = class Returns extends core.Object {
    get types() {
      return this[types$1];
    }
    set types(value) {
      super.types = value;
    }
  };
  (_js_helper.Returns.new = function(types) {
    if (types == null) dart.nullFailed(I[46], 670, 22, "types");
    this[types$1] = types;
    ;
  }).prototype = _js_helper.Returns.prototype;
  dart.addTypeTests(_js_helper.Returns);
  dart.addTypeCaches(_js_helper.Returns);
  dart.setLibraryUri(_js_helper.Returns, I[45]);
  dart.setFieldSignature(_js_helper.Returns, () => ({
    __proto__: dart.getFields(_js_helper.Returns.__proto__),
    types: dart.finalFieldType(core.String)
  }));
  var name$6 = dart.privateName(_js_helper, "JSName.name");
  _js_helper.JSName = class JSName extends core.Object {
    get name() {
      return this[name$6];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_js_helper.JSName.new = function(name) {
    if (name == null) dart.nullFailed(I[46], 687, 21, "name");
    this[name$6] = name;
    ;
  }).prototype = _js_helper.JSName.prototype;
  dart.addTypeTests(_js_helper.JSName);
  dart.addTypeCaches(_js_helper.JSName);
  dart.setLibraryUri(_js_helper.JSName, I[45]);
  dart.setFieldSignature(_js_helper.JSName, () => ({
    __proto__: dart.getFields(_js_helper.JSName.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  const _is_JavaScriptIndexingBehavior_default = Symbol('_is_JavaScriptIndexingBehavior_default');
  _js_helper.JavaScriptIndexingBehavior$ = dart.generic(E => {
    class JavaScriptIndexingBehavior extends _interceptors.JSMutableIndexable$(E) {}
    (JavaScriptIndexingBehavior.new = function() {
      ;
    }).prototype = JavaScriptIndexingBehavior.prototype;
    dart.addTypeTests(JavaScriptIndexingBehavior);
    JavaScriptIndexingBehavior.prototype[_is_JavaScriptIndexingBehavior_default] = true;
    dart.addTypeCaches(JavaScriptIndexingBehavior);
    dart.setLibraryUri(JavaScriptIndexingBehavior, I[45]);
    return JavaScriptIndexingBehavior;
  });
  _js_helper.JavaScriptIndexingBehavior = _js_helper.JavaScriptIndexingBehavior$();
  dart.addTypeTests(_js_helper.JavaScriptIndexingBehavior, _is_JavaScriptIndexingBehavior_default);
  _js_helper.TypeErrorImpl = class TypeErrorImpl extends core.Error {
    toString() {
      return this[_message$0];
    }
  };
  (_js_helper.TypeErrorImpl.new = function(_message) {
    if (_message == null) dart.nullFailed(I[46], 701, 22, "_message");
    this[_message$0] = _message;
    _js_helper.TypeErrorImpl.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.TypeErrorImpl.prototype;
  dart.addTypeTests(_js_helper.TypeErrorImpl);
  dart.addTypeCaches(_js_helper.TypeErrorImpl);
  _js_helper.TypeErrorImpl[dart.implements] = () => [core.TypeError, core.CastError];
  dart.setLibraryUri(_js_helper.TypeErrorImpl, I[45]);
  dart.setFieldSignature(_js_helper.TypeErrorImpl, () => ({
    __proto__: dart.getFields(_js_helper.TypeErrorImpl.__proto__),
    [_message$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_js_helper.TypeErrorImpl, ['toString']);
  _js_helper.CastErrorImpl = class CastErrorImpl extends core.Error {
    toString() {
      return this[_message$0];
    }
  };
  (_js_helper.CastErrorImpl.new = function(_message) {
    if (_message == null) dart.nullFailed(I[46], 710, 22, "_message");
    this[_message$0] = _message;
    _js_helper.CastErrorImpl.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.CastErrorImpl.prototype;
  dart.addTypeTests(_js_helper.CastErrorImpl);
  dart.addTypeCaches(_js_helper.CastErrorImpl);
  _js_helper.CastErrorImpl[dart.implements] = () => [core.CastError, core.TypeError];
  dart.setLibraryUri(_js_helper.CastErrorImpl, I[45]);
  dart.setFieldSignature(_js_helper.CastErrorImpl, () => ({
    __proto__: dart.getFields(_js_helper.CastErrorImpl.__proto__),
    [_message$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_js_helper.CastErrorImpl, ['toString']);
  core.FallThroughError = class FallThroughError extends core.Error {
    toString() {
      return super[$toString]();
    }
  };
  (core.FallThroughError.new = function() {
    core.FallThroughError.__proto__.new.call(this);
    ;
  }).prototype = core.FallThroughError.prototype;
  (core.FallThroughError._create = function(url, line) {
    if (url == null) dart.nullFailed(I[7], 292, 35, "url");
    if (line == null) dart.nullFailed(I[7], 292, 44, "line");
    core.FallThroughError.__proto__.new.call(this);
    ;
  }).prototype = core.FallThroughError.prototype;
  dart.addTypeTests(core.FallThroughError);
  dart.addTypeCaches(core.FallThroughError);
  dart.setLibraryUri(core.FallThroughError, I[8]);
  dart.defineExtensionMethods(core.FallThroughError, ['toString']);
  _js_helper.FallThroughErrorImplementation = class FallThroughErrorImplementation extends core.FallThroughError {
    toString() {
      return "Switch case fall-through.";
    }
  };
  (_js_helper.FallThroughErrorImplementation.new = function() {
    _js_helper.FallThroughErrorImplementation.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.FallThroughErrorImplementation.prototype;
  dart.addTypeTests(_js_helper.FallThroughErrorImplementation);
  dart.addTypeCaches(_js_helper.FallThroughErrorImplementation);
  dart.setLibraryUri(_js_helper.FallThroughErrorImplementation, I[45]);
  dart.defineExtensionMethods(_js_helper.FallThroughErrorImplementation, ['toString']);
  var message$ = dart.privateName(_js_helper, "RuntimeError.message");
  _js_helper.RuntimeError = class RuntimeError extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "RuntimeError: " + dart.str(this.message);
    }
  };
  (_js_helper.RuntimeError.new = function(message) {
    this[message$] = message;
    _js_helper.RuntimeError.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.RuntimeError.prototype;
  dart.addTypeTests(_js_helper.RuntimeError);
  dart.addTypeCaches(_js_helper.RuntimeError);
  dart.setLibraryUri(_js_helper.RuntimeError, I[45]);
  dart.setFieldSignature(_js_helper.RuntimeError, () => ({
    __proto__: dart.getFields(_js_helper.RuntimeError.__proto__),
    message: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(_js_helper.RuntimeError, ['toString']);
  var enclosingLibrary$ = dart.privateName(_js_helper, "DeferredNotLoadedError.enclosingLibrary");
  var importPrefix$ = dart.privateName(_js_helper, "DeferredNotLoadedError.importPrefix");
  _js_helper.DeferredNotLoadedError = class DeferredNotLoadedError extends core.Error {
    get enclosingLibrary() {
      return this[enclosingLibrary$];
    }
    set enclosingLibrary(value) {
      this[enclosingLibrary$] = value;
    }
    get importPrefix() {
      return this[importPrefix$];
    }
    set importPrefix(value) {
      this[importPrefix$] = value;
    }
    toString() {
      return "Deferred import " + dart.str(this.importPrefix) + " (from " + dart.str(this.enclosingLibrary) + ") was not loaded.";
    }
    get [_receiver$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[23] || CT.C23));
    }
    get [_arguments$]() {
      return T$.ListN().as(this[$noSuchMethod](new core._Invocation.getter(C[24] || CT.C24)));
    }
    get [_memberName$]() {
      return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C[25] || CT.C25)));
    }
    get [_invocation$]() {
      return T$.InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C[26] || CT.C26)));
    }
    get [_namedArguments$]() {
      return T$.MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C[27] || CT.C27)));
    }
  };
  (_js_helper.DeferredNotLoadedError.new = function(enclosingLibrary, importPrefix) {
    if (enclosingLibrary == null) dart.nullFailed(I[46], 732, 31, "enclosingLibrary");
    if (importPrefix == null) dart.nullFailed(I[46], 732, 54, "importPrefix");
    this[enclosingLibrary$] = enclosingLibrary;
    this[importPrefix$] = importPrefix;
    _js_helper.DeferredNotLoadedError.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.DeferredNotLoadedError.prototype;
  dart.addTypeTests(_js_helper.DeferredNotLoadedError);
  dart.addTypeCaches(_js_helper.DeferredNotLoadedError);
  _js_helper.DeferredNotLoadedError[dart.implements] = () => [core.NoSuchMethodError];
  dart.setGetterSignature(_js_helper.DeferredNotLoadedError, () => ({
    __proto__: dart.getGetters(_js_helper.DeferredNotLoadedError.__proto__),
    [_receiver$]: dart.nullable(core.Object),
    [_arguments$]: dart.nullable(core.List),
    [_memberName$]: core.Symbol,
    [_invocation$]: dart.nullable(core.Invocation),
    [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
  }));
  dart.setLibraryUri(_js_helper.DeferredNotLoadedError, I[45]);
  dart.setFieldSignature(_js_helper.DeferredNotLoadedError, () => ({
    __proto__: dart.getFields(_js_helper.DeferredNotLoadedError.__proto__),
    enclosingLibrary: dart.fieldType(core.String),
    importPrefix: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(_js_helper.DeferredNotLoadedError, ['toString']);
  var _fileUri$ = dart.privateName(_js_helper, "_fileUri");
  var _line$ = dart.privateName(_js_helper, "_line");
  var _column$ = dart.privateName(_js_helper, "_column");
  var _conditionSource$ = dart.privateName(_js_helper, "_conditionSource");
  var message$0 = dart.privateName(core, "AssertionError.message");
  core.AssertionError = class AssertionError extends core.Error {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      if (this.message != null) {
        return "Assertion failed: " + dart.str(core.Error.safeToString(this.message));
      }
      return "Assertion failed";
    }
  };
  (core.AssertionError.new = function(message = null) {
    this[message$0] = message;
    core.AssertionError.__proto__.new.call(this);
    ;
  }).prototype = core.AssertionError.prototype;
  dart.addTypeTests(core.AssertionError);
  dart.addTypeCaches(core.AssertionError);
  dart.setLibraryUri(core.AssertionError, I[8]);
  dart.setFieldSignature(core.AssertionError, () => ({
    __proto__: dart.getFields(core.AssertionError.__proto__),
    message: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(core.AssertionError, ['toString']);
  _js_helper.AssertionErrorImpl = class AssertionErrorImpl extends core.AssertionError {
    toString() {
      let failureMessage = "";
      if (this[_fileUri$] != null && this[_line$] != null && this[_column$] != null && this[_conditionSource$] != null) {
        failureMessage = failureMessage + (dart.str(this[_fileUri$]) + ":" + dart.str(this[_line$]) + ":" + dart.str(this[_column$]) + "\n" + dart.str(this[_conditionSource$]) + "\n");
      }
      failureMessage = failureMessage + dart.notNull(this.message != null ? core.Error.safeToString(this.message) : "is not true");
      return "Assertion failed: " + failureMessage;
    }
  };
  (_js_helper.AssertionErrorImpl.new = function(message, _fileUri = null, _line = null, _column = null, _conditionSource = null) {
    this[_fileUri$] = _fileUri;
    this[_line$] = _line;
    this[_column$] = _column;
    this[_conditionSource$] = _conditionSource;
    _js_helper.AssertionErrorImpl.__proto__.new.call(this, message);
    ;
  }).prototype = _js_helper.AssertionErrorImpl.prototype;
  dart.addTypeTests(_js_helper.AssertionErrorImpl);
  dart.addTypeCaches(_js_helper.AssertionErrorImpl);
  dart.setLibraryUri(_js_helper.AssertionErrorImpl, I[45]);
  dart.setFieldSignature(_js_helper.AssertionErrorImpl, () => ({
    __proto__: dart.getFields(_js_helper.AssertionErrorImpl.__proto__),
    [_fileUri$]: dart.finalFieldType(dart.nullable(core.String)),
    [_line$]: dart.finalFieldType(dart.nullable(core.int)),
    [_column$]: dart.finalFieldType(dart.nullable(core.int)),
    [_conditionSource$]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(_js_helper.AssertionErrorImpl, ['toString']);
  _js_helper.BooleanConversionAssertionError = class BooleanConversionAssertionError extends core.AssertionError {
    toString() {
      return "Failed assertion: boolean expression must not be null";
    }
  };
  (_js_helper.BooleanConversionAssertionError.new = function() {
    _js_helper.BooleanConversionAssertionError.__proto__.new.call(this);
    ;
  }).prototype = _js_helper.BooleanConversionAssertionError.prototype;
  dart.addTypeTests(_js_helper.BooleanConversionAssertionError);
  dart.addTypeCaches(_js_helper.BooleanConversionAssertionError);
  dart.setLibraryUri(_js_helper.BooleanConversionAssertionError, I[45]);
  dart.defineExtensionMethods(_js_helper.BooleanConversionAssertionError, ['toString']);
  var _name$1 = dart.privateName(_js_helper, "PrivateSymbol._name");
  var _nativeSymbol$ = dart.privateName(_js_helper, "PrivateSymbol._nativeSymbol");
  var _name = dart.privateName(_js_helper, "_name");
  var _nativeSymbol = dart.privateName(_js_helper, "_nativeSymbol");
  _js_helper.PrivateSymbol = class PrivateSymbol extends core.Object {
    get [_name]() {
      return this[_name$1];
    }
    set [_name](value) {
      super[_name] = value;
    }
    get [_nativeSymbol]() {
      return this[_nativeSymbol$];
    }
    set [_nativeSymbol](value) {
      super[_nativeSymbol] = value;
    }
    static getName(symbol) {
      if (symbol == null) dart.nullFailed(I[46], 815, 32, "symbol");
      return _js_helper.PrivateSymbol.as(symbol)[_name];
    }
    static getNativeSymbol(symbol) {
      if (symbol == null) dart.nullFailed(I[46], 817, 41, "symbol");
      if (_js_helper.PrivateSymbol.is(symbol)) return symbol[_nativeSymbol];
      return null;
    }
    _equals(other) {
      if (other == null) return false;
      return _js_helper.PrivateSymbol.is(other) && this[_name] == other[_name] && core.identical(this[_nativeSymbol], other[_nativeSymbol]);
    }
    get hashCode() {
      return dart.hashCode(this[_name]);
    }
    toString() {
      return "Symbol(\"" + dart.str(this[_name]) + "\")";
    }
  };
  (_js_helper.PrivateSymbol.new = function(_name, _nativeSymbol) {
    if (_name == null) dart.nullFailed(I[46], 813, 28, "_name");
    if (_nativeSymbol == null) dart.nullFailed(I[46], 813, 40, "_nativeSymbol");
    this[_name$1] = _name;
    this[_nativeSymbol$] = _nativeSymbol;
    ;
  }).prototype = _js_helper.PrivateSymbol.prototype;
  dart.addTypeTests(_js_helper.PrivateSymbol);
  dart.addTypeCaches(_js_helper.PrivateSymbol);
  _js_helper.PrivateSymbol[dart.implements] = () => [core.Symbol];
  dart.setLibraryUri(_js_helper.PrivateSymbol, I[45]);
  dart.setFieldSignature(_js_helper.PrivateSymbol, () => ({
    __proto__: dart.getFields(_js_helper.PrivateSymbol.__proto__),
    [_name]: dart.finalFieldType(core.String),
    [_nativeSymbol]: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionMethods(_js_helper.PrivateSymbol, ['_equals', 'toString']);
  dart.defineExtensionAccessors(_js_helper.PrivateSymbol, ['hashCode']);
  _js_helper.ForceInline = class ForceInline extends core.Object {};
  (_js_helper.ForceInline.new = function() {
    ;
  }).prototype = _js_helper.ForceInline.prototype;
  dart.addTypeTests(_js_helper.ForceInline);
  dart.addTypeCaches(_js_helper.ForceInline);
  dart.setLibraryUri(_js_helper.ForceInline, I[45]);
  _js_helper._NotNull = class _NotNull extends core.Object {};
  (_js_helper._NotNull.new = function() {
    ;
  }).prototype = _js_helper._NotNull.prototype;
  dart.addTypeTests(_js_helper._NotNull);
  dart.addTypeCaches(_js_helper._NotNull);
  dart.setLibraryUri(_js_helper._NotNull, I[45]);
  _js_helper.NoReifyGeneric = class NoReifyGeneric extends core.Object {};
  (_js_helper.NoReifyGeneric.new = function() {
    ;
  }).prototype = _js_helper.NoReifyGeneric.prototype;
  dart.addTypeTests(_js_helper.NoReifyGeneric);
  dart.addTypeCaches(_js_helper.NoReifyGeneric);
  dart.setLibraryUri(_js_helper.NoReifyGeneric, I[45]);
  var value$1 = dart.privateName(_js_helper, "ReifyFunctionTypes.value");
  _js_helper.ReifyFunctionTypes = class ReifyFunctionTypes extends core.Object {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
  };
  (_js_helper.ReifyFunctionTypes.new = function(value) {
    if (value == null) dart.nullFailed(I[47], 39, 33, "value");
    this[value$1] = value;
    ;
  }).prototype = _js_helper.ReifyFunctionTypes.prototype;
  dart.addTypeTests(_js_helper.ReifyFunctionTypes);
  dart.addTypeCaches(_js_helper.ReifyFunctionTypes);
  dart.setLibraryUri(_js_helper.ReifyFunctionTypes, I[45]);
  dart.setFieldSignature(_js_helper.ReifyFunctionTypes, () => ({
    __proto__: dart.getFields(_js_helper.ReifyFunctionTypes.__proto__),
    value: dart.finalFieldType(core.bool)
  }));
  _js_helper._NullCheck = class _NullCheck extends core.Object {};
  (_js_helper._NullCheck.new = function() {
    ;
  }).prototype = _js_helper._NullCheck.prototype;
  dart.addTypeTests(_js_helper._NullCheck);
  dart.addTypeCaches(_js_helper._NullCheck);
  dart.setLibraryUri(_js_helper._NullCheck, I[45]);
  _js_helper._Undefined = class _Undefined extends core.Object {};
  (_js_helper._Undefined.new = function() {
    ;
  }).prototype = _js_helper._Undefined.prototype;
  dart.addTypeTests(_js_helper._Undefined);
  dart.addTypeCaches(_js_helper._Undefined);
  dart.setLibraryUri(_js_helper._Undefined, I[45]);
  _js_helper.NoThrows = class NoThrows extends core.Object {};
  (_js_helper.NoThrows.new = function() {
    ;
  }).prototype = _js_helper.NoThrows.prototype;
  dart.addTypeTests(_js_helper.NoThrows);
  dart.addTypeCaches(_js_helper.NoThrows);
  dart.setLibraryUri(_js_helper.NoThrows, I[45]);
  _js_helper.NoInline = class NoInline extends core.Object {};
  (_js_helper.NoInline.new = function() {
    ;
  }).prototype = _js_helper.NoInline.prototype;
  dart.addTypeTests(_js_helper.NoInline);
  dart.addTypeCaches(_js_helper.NoInline);
  dart.setLibraryUri(_js_helper.NoInline, I[45]);
  var name$7 = dart.privateName(_js_helper, "Native.name");
  _js_helper.Native = class Native extends core.Object {
    get name() {
      return this[name$7];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_js_helper.Native.new = function(name) {
    if (name == null) dart.nullFailed(I[47], 76, 21, "name");
    this[name$7] = name;
    ;
  }).prototype = _js_helper.Native.prototype;
  dart.addTypeTests(_js_helper.Native);
  dart.addTypeCaches(_js_helper.Native);
  dart.setLibraryUri(_js_helper.Native, I[45]);
  dart.setFieldSignature(_js_helper.Native, () => ({
    __proto__: dart.getFields(_js_helper.Native.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  var name$8 = dart.privateName(_js_helper, "JsPeerInterface.name");
  _js_helper.JsPeerInterface = class JsPeerInterface extends core.Object {
    get name() {
      return this[name$8];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_js_helper.JsPeerInterface.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[47], 84, 40, "name");
    this[name$8] = name;
    ;
  }).prototype = _js_helper.JsPeerInterface.prototype;
  dart.addTypeTests(_js_helper.JsPeerInterface);
  dart.addTypeCaches(_js_helper.JsPeerInterface);
  dart.setLibraryUri(_js_helper.JsPeerInterface, I[45]);
  dart.setFieldSignature(_js_helper.JsPeerInterface, () => ({
    __proto__: dart.getFields(_js_helper.JsPeerInterface.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  _js_helper.SupportJsExtensionMethods = class SupportJsExtensionMethods extends core.Object {};
  (_js_helper.SupportJsExtensionMethods.new = function() {
    ;
  }).prototype = _js_helper.SupportJsExtensionMethods.prototype;
  dart.addTypeTests(_js_helper.SupportJsExtensionMethods);
  dart.addTypeCaches(_js_helper.SupportJsExtensionMethods);
  dart.setLibraryUri(_js_helper.SupportJsExtensionMethods, I[45]);
  var _modifications = dart.privateName(_js_helper, "_modifications");
  var _map$ = dart.privateName(_js_helper, "_map");
  const _is_InternalMap_default = Symbol('_is_InternalMap_default');
  _js_helper.InternalMap$ = dart.generic((K, V) => {
    class InternalMap extends collection.MapBase$(K, V) {
      forEach(action) {
        if (action == null) dart.nullFailed(I[48], 18, 21, "action");
        let modifications = this[_modifications];
        for (let entry of this[_map$].entries()) {
          action(entry[0], entry[1]);
          if (modifications !== this[_modifications]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
      }
    }
    (InternalMap.new = function() {
      ;
    }).prototype = InternalMap.prototype;
    dart.addTypeTests(InternalMap);
    InternalMap.prototype[_is_InternalMap_default] = true;
    dart.addTypeCaches(InternalMap);
    InternalMap[dart.implements] = () => [collection.LinkedHashMap$(K, V), collection.HashMap$(K, V)];
    dart.setLibraryUri(InternalMap, I[45]);
    dart.defineExtensionMethods(InternalMap, ['forEach']);
    return InternalMap;
  });
  _js_helper.InternalMap = _js_helper.InternalMap$();
  dart.addTypeTests(_js_helper.InternalMap, _is_InternalMap_default);
  var _map = dart.privateName(_js_helper, "LinkedMap._map");
  var _modifications$ = dart.privateName(_js_helper, "LinkedMap._modifications");
  var _keyMap = dart.privateName(_js_helper, "_keyMap");
  const _is_LinkedMap_default = Symbol('_is_LinkedMap_default');
  _js_helper.LinkedMap$ = dart.generic((K, V) => {
    var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVTovoid = () => (KAndVTovoid = dart.constFn(dart.fnType(dart.void, [K, V])))();
    var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    class LinkedMap extends _js_helper.InternalMap$(K, V) {
      get [_map$]() {
        return this[_map];
      }
      set [_map$](value) {
        super[_map$] = value;
      }
      get [_modifications]() {
        return this[_modifications$];
      }
      set [_modifications](value) {
        this[_modifications$] = value;
      }
      get length() {
        return this[_map$].size;
      }
      get isEmpty() {
        return this[_map$].size == 0;
      }
      get isNotEmpty() {
        return this[_map$].size != 0;
      }
      get keys() {
        return new (_JSMapIterableOfK()).new(this, true);
      }
      get values() {
        return new (_JSMapIterableOfV()).new(this, false);
      }
      containsKey(key) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let buckets = this[_keyMap].get(dart.hashCode(key) & 0x3ffffff);
          if (buckets != null) {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.equals(k, key)) return true;
            }
          }
          return false;
        }
        return this[_map$].has(key);
      }
      containsValue(value) {
        for (let v of this[_map$].values()) {
          if (dart.equals(v, value)) return true;
        }
        return false;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[48], 121, 25, "other");
        let map = this[_map$];
        let length = map.size;
        other[$forEach](dart.fn((key, value) => {
          if (key == null) {
            key = null;
          } else if (key[$_equals] !== dart.identityEquals) {
            key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
          }
          this[_map$].set(key, value);
        }, KAndVTovoid()));
        if (length !== map.size) {
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
      }
      _get(key) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let buckets = this[_keyMap].get(dart.hashCode(key) & 0x3ffffff);
          if (buckets != null) {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.equals(k, key)) return this[_map$].get(k);
            }
          }
          return null;
        }
        let value = this[_map$].get(key);
        return value == null ? null : value;
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap]);
        }
        let map = this[_map$];
        let length = map.size;
        map.set(key, value);
        if (length !== map.size) {
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[48], 171, 26, "ifAbsent");
        let map = this[_map$];
        if (key == null) {
          key = null;
          if (map.has(null)) return map.get(null);
        } else if (key[$_equals] !== dart.identityEquals) {
          let k = key;
          let hash = dart.hashCode(k) & 0x3ffffff;
          let buckets = this[_keyMap].get(hash);
          if (buckets == null) {
            this[_keyMap].set(hash, [key]);
          } else {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              k = buckets[i];
              if (dart.equals(k, key)) return map.get(k);
            }
            buckets.push(key);
          }
        } else if (map.has(key)) {
          return map.get(key);
        }
        let value = ifAbsent();
        if (value == null) {
          value = null;
        }
        map.set(key, value);
        this[_modifications] = this[_modifications] + 1 & 67108863;
        return value;
      }
      remove(key) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let hash = dart.hashCode(key) & 0x3ffffff;
          let buckets = this[_keyMap].get(hash);
          if (buckets == null) return null;
          for (let i = 0, n = buckets.length;;) {
            let k = buckets[i];
            if (dart.equals(k, key)) {
              key = k;
              if (n === 1) {
                this[_keyMap].delete(hash);
              } else {
                buckets.splice(i, 1);
              }
              break;
            }
            if ((i = i + 1) >= n) return null;
          }
        }
        let map = this[_map$];
        let value = map.get(key);
        if (map.delete(key)) {
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
        return value == null ? null : value;
      }
      clear() {
        let map = this[_map$];
        if (map.size > 0) {
          map.clear();
          this[_keyMap].clear();
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
      }
    }
    (LinkedMap.new = function() {
      this[_map] = new Map();
      this[_keyMap] = new Map();
      this[_modifications$] = 0;
      ;
    }).prototype = LinkedMap.prototype;
    (LinkedMap.from = function(entries) {
      if (entries == null) dart.nullFailed(I[48], 68, 26, "entries");
      this[_map] = new Map();
      this[_keyMap] = new Map();
      this[_modifications$] = 0;
      let map = this[_map$];
      let keyMap = this[_keyMap];
      for (let i = 0, n = entries.length; i < n; i = i + 2) {
        let key = entries[i];
        let value = entries[i + 1];
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, keyMap);
        }
        map.set(key, value);
      }
    }).prototype = LinkedMap.prototype;
    dart.addTypeTests(LinkedMap);
    LinkedMap.prototype[_is_LinkedMap_default] = true;
    dart.addTypeCaches(LinkedMap);
    dart.setMethodSignature(LinkedMap, () => ({
      __proto__: dart.getMethods(LinkedMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(LinkedMap, () => ({
      __proto__: dart.getGetters(LinkedMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(LinkedMap, I[45]);
    dart.setFieldSignature(LinkedMap, () => ({
      __proto__: dart.getFields(LinkedMap.__proto__),
      [_map$]: dart.finalFieldType(dart.dynamic),
      [_keyMap]: dart.finalFieldType(dart.nullable(core.Object)),
      [_modifications]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(LinkedMap, [
      'containsKey',
      'containsValue',
      'addAll',
      '_get',
      '_set',
      'putIfAbsent',
      'remove',
      'clear'
    ]);
    dart.defineExtensionAccessors(LinkedMap, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'values'
    ]);
    return LinkedMap;
  });
  _js_helper.LinkedMap = _js_helper.LinkedMap$();
  dart.addTypeTests(_js_helper.LinkedMap, _is_LinkedMap_default);
  const _is_ImmutableMap_default = Symbol('_is_ImmutableMap_default');
  _js_helper.ImmutableMap$ = dart.generic((K, V) => {
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    class ImmutableMap extends _js_helper.LinkedMap$(K, V) {
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        dart.throw(_js_helper.ImmutableMap._unsupported());
        return value$;
      }
      addAll(other) {
        core.Object.as(other);
        if (other == null) dart.nullFailed(I[48], 268, 22, "other");
        return dart.throw(_js_helper.ImmutableMap._unsupported());
      }
      clear() {
        return dart.throw(_js_helper.ImmutableMap._unsupported());
      }
      remove(key) {
        return dart.throw(_js_helper.ImmutableMap._unsupported());
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[48], 271, 26, "ifAbsent");
        return dart.throw(_js_helper.ImmutableMap._unsupported());
      }
      static _unsupported() {
        return new core.UnsupportedError.new("Cannot modify unmodifiable map");
      }
    }
    (ImmutableMap.from = function(entries) {
      if (entries == null) dart.nullFailed(I[48], 262, 29, "entries");
      ImmutableMap.__proto__.from.call(this, entries);
      ;
    }).prototype = ImmutableMap.prototype;
    dart.addTypeTests(ImmutableMap);
    ImmutableMap.prototype[_is_ImmutableMap_default] = true;
    dart.addTypeCaches(ImmutableMap);
    dart.setLibraryUri(ImmutableMap, I[45]);
    dart.defineExtensionMethods(ImmutableMap, [
      '_set',
      'addAll',
      'clear',
      'remove',
      'putIfAbsent'
    ]);
    return ImmutableMap;
  });
  _js_helper.ImmutableMap = _js_helper.ImmutableMap$();
  dart.addTypeTests(_js_helper.ImmutableMap, _is_ImmutableMap_default);
  var _map$0 = dart.privateName(_js_helper, "IdentityMap._map");
  var _modifications$0 = dart.privateName(_js_helper, "IdentityMap._modifications");
  const _is_IdentityMap_default = Symbol('_is_IdentityMap_default');
  _js_helper.IdentityMap$ = dart.generic((K, V) => {
    var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVTovoid = () => (KAndVTovoid = dart.constFn(dart.fnType(dart.void, [K, V])))();
    var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    class IdentityMap extends _js_helper.InternalMap$(K, V) {
      get [_map$]() {
        return this[_map$0];
      }
      set [_map$](value) {
        super[_map$] = value;
      }
      get [_modifications]() {
        return this[_modifications$0];
      }
      set [_modifications](value) {
        this[_modifications$0] = value;
      }
      get length() {
        return this[_map$].size;
      }
      get isEmpty() {
        return this[_map$].size == 0;
      }
      get isNotEmpty() {
        return this[_map$].size != 0;
      }
      get keys() {
        return new (_JSMapIterableOfK()).new(this, true);
      }
      get values() {
        return new (_JSMapIterableOfV()).new(this, false);
      }
      containsKey(key) {
        return this[_map$].has(key);
      }
      containsValue(value) {
        for (let v of this[_map$].values()) {
          if (dart.equals(v, value)) return true;
        }
        return false;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[49], 47, 25, "other");
        if (dart.test(other[$isNotEmpty])) {
          let map = this[_map$];
          other[$forEach](dart.fn((key, value) => {
            map.set(key, value);
          }, KAndVTovoid()));
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
      }
      _get(key) {
        let value = this[_map$].get(key);
        return value == null ? null : value;
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        let map = this[_map$];
        let length = map.size;
        map.set(key, value);
        if (length !== map.size) {
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[49], 71, 26, "ifAbsent");
        if (this[_map$].has(key)) {
          return this[_map$].get(key);
        }
        let value = ifAbsent();
        if (value == null) value = null;
        this[_map$].set(key, value);
        this[_modifications] = this[_modifications] + 1 & 67108863;
        return value;
      }
      remove(key) {
        let value = this[_map$].get(key);
        if (this[_map$].delete(key)) {
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
        return value == null ? null : value;
      }
      clear() {
        if (this[_map$].size > 0) {
          this[_map$].clear();
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
      }
    }
    (IdentityMap.new = function() {
      this[_map$0] = new Map();
      this[_modifications$0] = 0;
      ;
    }).prototype = IdentityMap.prototype;
    (IdentityMap.from = function(entries) {
      if (entries == null) dart.nullFailed(I[49], 22, 28, "entries");
      this[_map$0] = new Map();
      this[_modifications$0] = 0;
      let map = this[_map$];
      for (let i = 0, n = entries.length; i < n; i = i + 2) {
        map.set(entries[i], entries[i + 1]);
      }
    }).prototype = IdentityMap.prototype;
    dart.addTypeTests(IdentityMap);
    IdentityMap.prototype[_is_IdentityMap_default] = true;
    dart.addTypeCaches(IdentityMap);
    dart.setMethodSignature(IdentityMap, () => ({
      __proto__: dart.getMethods(IdentityMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(IdentityMap, () => ({
      __proto__: dart.getGetters(IdentityMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(IdentityMap, I[45]);
    dart.setFieldSignature(IdentityMap, () => ({
      __proto__: dart.getFields(IdentityMap.__proto__),
      [_map$]: dart.finalFieldType(dart.dynamic),
      [_modifications]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(IdentityMap, [
      'containsKey',
      'containsValue',
      'addAll',
      '_get',
      '_set',
      'putIfAbsent',
      'remove',
      'clear'
    ]);
    dart.defineExtensionAccessors(IdentityMap, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'values'
    ]);
    return IdentityMap;
  });
  _js_helper.IdentityMap = _js_helper.IdentityMap$();
  dart.addTypeTests(_js_helper.IdentityMap, _is_IdentityMap_default);
  var _isKeys$ = dart.privateName(_js_helper, "_isKeys");
  const _is__JSMapIterable_default = Symbol('_is__JSMapIterable_default');
  _js_helper._JSMapIterable$ = dart.generic(E => {
    var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
    class _JSMapIterable extends _internal.EfficientLengthIterable$(E) {
      get length() {
        return this[_map$][$length];
      }
      get isEmpty() {
        return this[_map$][$isEmpty];
      }
      [Symbol.iterator]() {
        let map = this[_map$];
        let iterator = this[_isKeys$] ? map[_map$].keys() : map[_map$].values();
        let modifications = map[_modifications];
        return {
          next() {
            if (modifications != map[_modifications]) {
              throw new core.ConcurrentModificationError.new(map);
            }
            return iterator.next();
          }
        };
      }
      get iterator() {
        return new (DartIteratorOfE()).new(this[Symbol.iterator]());
      }
      contains(element) {
        return this[_isKeys$] ? this[_map$][$containsKey](element) : this[_map$][$containsValue](element);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[49], 134, 33, "f");
        for (let entry of this)
          f(entry);
      }
    }
    (_JSMapIterable.new = function(_map, _isKeys) {
      if (_map == null) dart.nullFailed(I[49], 102, 23, "_map");
      if (_isKeys == null) dart.nullFailed(I[49], 102, 34, "_isKeys");
      this[_map$] = _map;
      this[_isKeys$] = _isKeys;
      _JSMapIterable.__proto__.new.call(this);
      ;
    }).prototype = _JSMapIterable.prototype;
    dart.addTypeTests(_JSMapIterable);
    _JSMapIterable.prototype[_is__JSMapIterable_default] = true;
    dart.addTypeCaches(_JSMapIterable);
    dart.setMethodSignature(_JSMapIterable, () => ({
      __proto__: dart.getMethods(_JSMapIterable.__proto__),
      [Symbol.iterator]: dart.fnType(dart.dynamic, [])
    }));
    dart.setGetterSignature(_JSMapIterable, () => ({
      __proto__: dart.getGetters(_JSMapIterable.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(_JSMapIterable, I[45]);
    dart.setFieldSignature(_JSMapIterable, () => ({
      __proto__: dart.getFields(_JSMapIterable.__proto__),
      [_map$]: dart.finalFieldType(_js_helper.InternalMap),
      [_isKeys$]: dart.finalFieldType(core.bool)
    }));
    dart.defineExtensionMethods(_JSMapIterable, ['contains', 'forEach']);
    dart.defineExtensionAccessors(_JSMapIterable, ['length', 'isEmpty', 'iterator']);
    return _JSMapIterable;
  });
  _js_helper._JSMapIterable = _js_helper._JSMapIterable$();
  dart.addTypeTests(_js_helper._JSMapIterable, _is__JSMapIterable_default);
  var _validKey$ = dart.privateName(_js_helper, "_validKey");
  var _map$1 = dart.privateName(_js_helper, "CustomHashMap._map");
  var _modifications$1 = dart.privateName(_js_helper, "CustomHashMap._modifications");
  var _equals$ = dart.privateName(_js_helper, "_equals");
  var _hashCode$ = dart.privateName(_js_helper, "_hashCode");
  const _is_CustomHashMap_default = Symbol('_is_CustomHashMap_default');
  _js_helper.CustomHashMap$ = dart.generic((K, V) => {
    var _JSMapIterableOfK = () => (_JSMapIterableOfK = dart.constFn(_js_helper._JSMapIterable$(K)))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVTovoid = () => (KAndVTovoid = dart.constFn(dart.fnType(dart.void, [K, V])))();
    var _JSMapIterableOfV = () => (_JSMapIterableOfV = dart.constFn(_js_helper._JSMapIterable$(V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    class CustomHashMap extends _js_helper.InternalMap$(K, V) {
      get [_map$]() {
        return this[_map$1];
      }
      set [_map$](value) {
        super[_map$] = value;
      }
      get [_modifications]() {
        return this[_modifications$1];
      }
      set [_modifications](value) {
        this[_modifications$1] = value;
      }
      get length() {
        return this[_map$].size;
      }
      get isEmpty() {
        return this[_map$].size == 0;
      }
      get isNotEmpty() {
        return this[_map$].size != 0;
      }
      get keys() {
        return new (_JSMapIterableOfK()).new(this, true);
      }
      get values() {
        return new (_JSMapIterableOfV()).new(this, false);
      }
      containsKey(key) {
        let t82;
        if (K.is(key)) {
          let buckets = this[_keyMap].get((t82 = key, this[_hashCode$](t82)) & 0x3ffffff);
          if (buckets != null) {
            let equals = this[_equals$];
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.test(equals(k, key))) return true;
            }
          }
        }
        return false;
      }
      containsValue(value) {
        for (let v of this[_map$].values()) {
          if (dart.equals(value, v)) return true;
        }
        return false;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[50], 91, 25, "other");
        other[$forEach](dart.fn((key, value) => {
          this._set(key, value);
        }, KAndVTovoid()));
      }
      _get(key) {
        let t82;
        if (K.is(key)) {
          let buckets = this[_keyMap].get((t82 = key, this[_hashCode$](t82)) & 0x3ffffff);
          if (buckets != null) {
            let equals = this[_equals$];
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.test(equals(k, key))) {
                let value = this[_map$].get(k);
                return value == null ? null : value;
              }
            }
          }
        }
        return null;
      }
      _set(key, value$) {
        let value = value$;
        let t82;
        K.as(key);
        V.as(value);
        let keyMap = this[_keyMap];
        let hash = (t82 = key, this[_hashCode$](t82)) & 0x3ffffff;
        let buckets = keyMap.get(hash);
        if (buckets == null) {
          keyMap.set(hash, [key]);
        } else {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length;;) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) {
              key = k;
              break;
            }
            if ((i = i + 1) >= n) {
              buckets.push(key);
              break;
            }
          }
        }
        this[_map$].set(key, value);
        this[_modifications] = this[_modifications] + 1 & 67108863;
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        let t82;
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[50], 138, 26, "ifAbsent");
        let keyMap = this[_keyMap];
        let hash = (t82 = key, this[_hashCode$](t82)) & 0x3ffffff;
        let buckets = keyMap.get(hash);
        if (buckets == null) {
          keyMap.set(hash, [key]);
        } else {
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return this[_map$].get(k);
          }
          buckets.push(key);
        }
        let value = ifAbsent();
        if (value == null) value = null;
        this[_map$].set(key, value);
        this[_modifications] = this[_modifications] + 1 & 67108863;
        return value;
      }
      remove(key) {
        let t82;
        if (K.is(key)) {
          let hash = (t82 = key, this[_hashCode$](t82)) & 0x3ffffff;
          let keyMap = this[_keyMap];
          let buckets = keyMap.get(hash);
          if (buckets == null) return null;
          let equals = this[_equals$];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) {
              if (n === 1) {
                keyMap.delete(hash);
              } else {
                buckets.splice(i, 1);
              }
              let map = this[_map$];
              let value = map.get(k);
              map.delete(k);
              this[_modifications] = this[_modifications] + 1 & 67108863;
              return value == null ? null : value;
            }
          }
        }
        return null;
      }
      clear() {
        let map = this[_map$];
        if (map.size > 0) {
          map.clear();
          this[_keyMap].clear();
          this[_modifications] = this[_modifications] + 1 & 67108863;
        }
      }
    }
    (CustomHashMap.new = function(_equals, _hashCode) {
      if (_equals == null) dart.nullFailed(I[50], 55, 22, "_equals");
      if (_hashCode == null) dart.nullFailed(I[50], 55, 36, "_hashCode");
      this[_map$1] = new Map();
      this[_keyMap] = new Map();
      this[_modifications$1] = 0;
      this[_equals$] = _equals;
      this[_hashCode$] = _hashCode;
      ;
    }).prototype = CustomHashMap.prototype;
    dart.addTypeTests(CustomHashMap);
    CustomHashMap.prototype[_is_CustomHashMap_default] = true;
    dart.addTypeCaches(CustomHashMap);
    dart.setMethodSignature(CustomHashMap, () => ({
      __proto__: dart.getMethods(CustomHashMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(CustomHashMap, () => ({
      __proto__: dart.getGetters(CustomHashMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(CustomHashMap, I[45]);
    dart.setFieldSignature(CustomHashMap, () => ({
      __proto__: dart.getFields(CustomHashMap.__proto__),
      [_map$]: dart.finalFieldType(dart.dynamic),
      [_keyMap]: dart.finalFieldType(dart.nullable(core.Object)),
      [_modifications]: dart.fieldType(core.int),
      [_equals$]: dart.finalFieldType(dart.fnType(core.bool, [K, K])),
      [_hashCode$]: dart.finalFieldType(dart.fnType(core.int, [K]))
    }));
    dart.defineExtensionMethods(CustomHashMap, [
      'containsKey',
      'containsValue',
      'addAll',
      '_get',
      '_set',
      'putIfAbsent',
      'remove',
      'clear'
    ]);
    dart.defineExtensionAccessors(CustomHashMap, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'values'
    ]);
    return CustomHashMap;
  });
  _js_helper.CustomHashMap = _js_helper.CustomHashMap$();
  dart.addTypeTests(_js_helper.CustomHashMap, _is_CustomHashMap_default);
  const _is_CustomKeyHashMap_default = Symbol('_is_CustomKeyHashMap_default');
  _js_helper.CustomKeyHashMap$ = dart.generic((K, V) => {
    class CustomKeyHashMap extends _js_helper.CustomHashMap$(K, V) {
      containsKey(key) {
        let t82;
        if (!dart.test((t82 = key, this[_validKey$](t82)))) return false;
        return super.containsKey(key);
      }
      _get(key) {
        let t82;
        if (!dart.test((t82 = key, this[_validKey$](t82)))) return null;
        return super._get(key);
      }
      remove(key) {
        let t82;
        if (!dart.test((t82 = key, this[_validKey$](t82)))) return null;
        return super.remove(key);
      }
    }
    (CustomKeyHashMap.new = function(equals, hashCode, _validKey) {
      if (equals == null) dart.nullFailed(I[50], 9, 33, "equals");
      if (hashCode == null) dart.nullFailed(I[50], 9, 52, "hashCode");
      if (_validKey == null) dart.nullFailed(I[50], 9, 67, "_validKey");
      this[_validKey$] = _validKey;
      CustomKeyHashMap.__proto__.new.call(this, equals, hashCode);
      ;
    }).prototype = CustomKeyHashMap.prototype;
    dart.addTypeTests(CustomKeyHashMap);
    CustomKeyHashMap.prototype[_is_CustomKeyHashMap_default] = true;
    dart.addTypeCaches(CustomKeyHashMap);
    dart.setLibraryUri(CustomKeyHashMap, I[45]);
    dart.setFieldSignature(CustomKeyHashMap, () => ({
      __proto__: dart.getFields(CustomKeyHashMap.__proto__),
      [_validKey$]: dart.finalFieldType(dart.fnType(core.bool, [dart.nullable(core.Object)]))
    }));
    dart.defineExtensionMethods(CustomKeyHashMap, ['containsKey', '_get', 'remove']);
    return CustomKeyHashMap;
  });
  _js_helper.CustomKeyHashMap = _js_helper.CustomKeyHashMap$();
  dart.addTypeTests(_js_helper.CustomKeyHashMap, _is_CustomKeyHashMap_default);
  var pattern = dart.privateName(_js_helper, "JSSyntaxRegExp.pattern");
  var _nativeGlobalRegExp = dart.privateName(_js_helper, "_nativeGlobalRegExp");
  var _nativeAnchoredRegExp = dart.privateName(_js_helper, "_nativeAnchoredRegExp");
  var _nativeRegExp = dart.privateName(_js_helper, "_nativeRegExp");
  var _isMultiLine = dart.privateName(_js_helper, "_isMultiLine");
  var _isCaseSensitive = dart.privateName(_js_helper, "_isCaseSensitive");
  var _isUnicode = dart.privateName(_js_helper, "_isUnicode");
  var _isDotAll = dart.privateName(_js_helper, "_isDotAll");
  var _nativeGlobalVersion = dart.privateName(_js_helper, "_nativeGlobalVersion");
  var _nativeAnchoredVersion = dart.privateName(_js_helper, "_nativeAnchoredVersion");
  var _execGlobal = dart.privateName(_js_helper, "_execGlobal");
  var _execAnchored = dart.privateName(_js_helper, "_execAnchored");
  _js_helper.JSSyntaxRegExp = class JSSyntaxRegExp extends core.Object {
    get pattern() {
      return this[pattern];
    }
    set pattern(value) {
      super.pattern = value;
    }
    toString() {
      return "RegExp/" + dart.str(this.pattern) + "/" + this[_nativeRegExp].flags;
    }
    get [_nativeGlobalVersion]() {
      if (this[_nativeGlobalRegExp] != null) return this[_nativeGlobalRegExp];
      return this[_nativeGlobalRegExp] = _js_helper.JSSyntaxRegExp.makeNative(this.pattern, this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
    }
    get [_nativeAnchoredVersion]() {
      if (this[_nativeAnchoredRegExp] != null) return this[_nativeAnchoredRegExp];
      return this[_nativeAnchoredRegExp] = _js_helper.JSSyntaxRegExp.makeNative(dart.str(this.pattern) + "|()", this[_isMultiLine], this[_isCaseSensitive], this[_isUnicode], this[_isDotAll], true);
    }
    get [_isMultiLine]() {
      return this[_nativeRegExp].multiline;
    }
    get [_isCaseSensitive]() {
      return !this[_nativeRegExp].ignoreCase;
    }
    get [_isUnicode]() {
      return this[_nativeRegExp].unicode;
    }
    get [_isDotAll]() {
      return this[_nativeRegExp].dotAll == true;
    }
    static makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      if (source == null) dart.argumentError(source);
      if (multiLine == null) dart.nullFailed(I[51], 86, 52, "multiLine");
      if (caseSensitive == null) dart.nullFailed(I[51], 87, 12, "caseSensitive");
      if (unicode == null) dart.nullFailed(I[51], 87, 32, "unicode");
      if (dotAll == null) dart.nullFailed(I[51], 87, 46, "dotAll");
      if (global == null) dart.nullFailed(I[51], 87, 59, "global");
      let m = dart.test(multiLine) ? "m" : "";
      let i = dart.test(caseSensitive) ? "" : "i";
      let u = dart.test(unicode) ? "u" : "";
      let s = dart.test(dotAll) ? "s" : "";
      let g = dart.test(global) ? "g" : "";
      let regexp = (function() {
        try {
          return new RegExp(source, m + i + u + s + g);
        } catch (e) {
          return e;
        }
      })();
      if (regexp instanceof RegExp) return regexp;
      let errorMessage = String(regexp);
      dart.throw(new core.FormatException.new("Illegal RegExp pattern: " + source + ", " + errorMessage));
    }
    firstMatch(string) {
      if (string == null) dart.argumentError(string);
      let m = this[_nativeRegExp].exec(string);
      if (m == null) return null;
      return new _js_helper._MatchImplementation.new(this, m);
    }
    hasMatch(string) {
      if (string == null) dart.argumentError(string);
      return this[_nativeRegExp].test(string);
    }
    stringMatch(string) {
      if (string == null) dart.nullFailed(I[51], 131, 30, "string");
      let match = this.firstMatch(string);
      if (match != null) return match.group(0);
      return null;
    }
    allMatches(string, start = 0) {
      if (string == null) dart.argumentError(string);
      if (start == null) dart.argumentError(start);
      if (start < 0 || start > string.length) {
        dart.throw(new core.RangeError.range(start, 0, string.length));
      }
      return new _js_helper._AllMatchesIterable.new(this, string, start);
    }
    [_execGlobal](string, start) {
      if (string == null) dart.nullFailed(I[51], 145, 35, "string");
      if (start == null) dart.nullFailed(I[51], 145, 47, "start");
      let regexp = core.Object.as(this[_nativeGlobalVersion]);
      regexp.lastIndex = start;
      let match = regexp.exec(string);
      if (match == null) return null;
      return new _js_helper._MatchImplementation.new(this, match);
    }
    [_execAnchored](string, start) {
      let t82;
      if (string == null) dart.nullFailed(I[51], 155, 37, "string");
      if (start == null) dart.nullFailed(I[51], 155, 49, "start");
      let regexp = core.Object.as(this[_nativeAnchoredVersion]);
      regexp.lastIndex = start;
      let match = regexp.exec(string);
      if (match == null) return null;
      if (match[$_get](dart.notNull(match[$length]) - 1) != null) return null;
      t82 = match;
      t82[$length] = dart.notNull(t82[$length]) - 1;
      return new _js_helper._MatchImplementation.new(this, match);
    }
    matchAsPrefix(string, start = 0) {
      if (string == null) dart.nullFailed(I[51], 169, 31, "string");
      if (start == null) dart.nullFailed(I[51], 169, 44, "start");
      if (dart.notNull(start) < 0 || dart.notNull(start) > string.length) {
        dart.throw(new core.RangeError.range(start, 0, string.length));
      }
      return this[_execAnchored](string, start);
    }
    get isMultiLine() {
      return this[_isMultiLine];
    }
    get isCaseSensitive() {
      return this[_isCaseSensitive];
    }
    get isUnicode() {
      return this[_isUnicode];
    }
    get isDotAll() {
      return this[_isDotAll];
    }
  };
  (_js_helper.JSSyntaxRegExp.new = function(source, opts) {
    if (source == null) dart.nullFailed(I[51], 53, 25, "source");
    let multiLine = opts && 'multiLine' in opts ? opts.multiLine : false;
    if (multiLine == null) dart.nullFailed(I[51], 54, 13, "multiLine");
    let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : true;
    if (caseSensitive == null) dart.nullFailed(I[51], 55, 12, "caseSensitive");
    let unicode = opts && 'unicode' in opts ? opts.unicode : false;
    if (unicode == null) dart.nullFailed(I[51], 56, 12, "unicode");
    let dotAll = opts && 'dotAll' in opts ? opts.dotAll : false;
    if (dotAll == null) dart.nullFailed(I[51], 57, 12, "dotAll");
    this[_nativeGlobalRegExp] = null;
    this[_nativeAnchoredRegExp] = null;
    this[pattern] = source;
    this[_nativeRegExp] = _js_helper.JSSyntaxRegExp.makeNative(source, multiLine, caseSensitive, unicode, dotAll, false);
    ;
  }).prototype = _js_helper.JSSyntaxRegExp.prototype;
  dart.addTypeTests(_js_helper.JSSyntaxRegExp);
  dart.addTypeCaches(_js_helper.JSSyntaxRegExp);
  _js_helper.JSSyntaxRegExp[dart.implements] = () => [core.RegExp];
  dart.setMethodSignature(_js_helper.JSSyntaxRegExp, () => ({
    __proto__: dart.getMethods(_js_helper.JSSyntaxRegExp.__proto__),
    firstMatch: dart.fnType(dart.nullable(core.RegExpMatch), [core.String]),
    hasMatch: dart.fnType(core.bool, [core.String]),
    stringMatch: dart.fnType(dart.nullable(core.String), [core.String]),
    allMatches: dart.fnType(core.Iterable$(core.RegExpMatch), [core.String], [core.int]),
    [$allMatches]: dart.fnType(core.Iterable$(core.RegExpMatch), [core.String], [core.int]),
    [_execGlobal]: dart.fnType(dart.nullable(core.RegExpMatch), [core.String, core.int]),
    [_execAnchored]: dart.fnType(dart.nullable(core.RegExpMatch), [core.String, core.int]),
    matchAsPrefix: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    [$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int])
  }));
  dart.setGetterSignature(_js_helper.JSSyntaxRegExp, () => ({
    __proto__: dart.getGetters(_js_helper.JSSyntaxRegExp.__proto__),
    [_nativeGlobalVersion]: dart.dynamic,
    [_nativeAnchoredVersion]: dart.dynamic,
    [_isMultiLine]: core.bool,
    [_isCaseSensitive]: core.bool,
    [_isUnicode]: core.bool,
    [_isDotAll]: core.bool,
    isMultiLine: core.bool,
    isCaseSensitive: core.bool,
    isUnicode: core.bool,
    isDotAll: core.bool
  }));
  dart.setLibraryUri(_js_helper.JSSyntaxRegExp, I[45]);
  dart.setFieldSignature(_js_helper.JSSyntaxRegExp, () => ({
    __proto__: dart.getFields(_js_helper.JSSyntaxRegExp.__proto__),
    pattern: dart.finalFieldType(core.String),
    [_nativeRegExp]: dart.finalFieldType(dart.dynamic),
    [_nativeGlobalRegExp]: dart.fieldType(dart.dynamic),
    [_nativeAnchoredRegExp]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(_js_helper.JSSyntaxRegExp, ['toString', 'allMatches', 'matchAsPrefix']);
  var _match$ = dart.privateName(_js_helper, "_match");
  _js_helper._MatchImplementation = class _MatchImplementation extends core.Object {
    get input() {
      return this[_match$].input;
    }
    get start() {
      return this[_match$].index;
    }
    get end() {
      return dart.notNull(this.start) + dart.nullCheck(this[_match$][$_get](0)).length;
    }
    group(index) {
      if (index == null) dart.nullFailed(I[51], 200, 21, "index");
      return this[_match$][$_get](index);
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[51], 201, 27, "index");
      return this.group(index);
    }
    get groupCount() {
      return dart.notNull(this[_match$][$length]) - 1;
    }
    groups(groups) {
      if (groups == null) dart.nullFailed(I[51], 204, 34, "groups");
      let out = T$.JSArrayOfStringN().of([]);
      for (let i of groups) {
        out[$add](this.group(i));
      }
      return out;
    }
    namedGroup(name) {
      if (name == null) dart.nullFailed(I[51], 212, 29, "name");
      let groups = this[_match$].groups;
      if (groups != null) {
        let result = groups[name];
        if (result != null || name in groups) {
          return result;
        }
      }
      dart.throw(new core.ArgumentError.value(name, "name", "Not a capture group name"));
    }
    get groupNames() {
      let groups = this[_match$].groups;
      if (groups != null) {
        let keys = T$.JSArrayOfString().of(Object.keys(groups));
        return new (T$.SubListIterableOfString()).new(keys, 0, null);
      }
      return new (T$.EmptyIterableOfString()).new();
    }
  };
  (_js_helper._MatchImplementation.new = function(pattern, _match) {
    if (pattern == null) dart.nullFailed(I[51], 191, 29, "pattern");
    if (_match == null) dart.nullFailed(I[51], 191, 43, "_match");
    this.pattern = pattern;
    this[_match$] = _match;
    if (!(typeof this[_match$].input == 'string')) dart.assertFailed(null, I[51], 192, 12, "JS(\"var\", \"#.input\", _match) is String");
    if (!core.int.is(this[_match$].index)) dart.assertFailed(null, I[51], 193, 12, "JS(\"var\", \"#.index\", _match) is int");
  }).prototype = _js_helper._MatchImplementation.prototype;
  dart.addTypeTests(_js_helper._MatchImplementation);
  dart.addTypeCaches(_js_helper._MatchImplementation);
  _js_helper._MatchImplementation[dart.implements] = () => [core.RegExpMatch];
  dart.setMethodSignature(_js_helper._MatchImplementation, () => ({
    __proto__: dart.getMethods(_js_helper._MatchImplementation.__proto__),
    group: dart.fnType(dart.nullable(core.String), [core.int]),
    _get: dart.fnType(dart.nullable(core.String), [core.int]),
    groups: dart.fnType(core.List$(dart.nullable(core.String)), [core.List$(core.int)]),
    namedGroup: dart.fnType(dart.nullable(core.String), [core.String])
  }));
  dart.setGetterSignature(_js_helper._MatchImplementation, () => ({
    __proto__: dart.getGetters(_js_helper._MatchImplementation.__proto__),
    input: core.String,
    start: core.int,
    end: core.int,
    groupCount: core.int,
    groupNames: core.Iterable$(core.String)
  }));
  dart.setLibraryUri(_js_helper._MatchImplementation, I[45]);
  dart.setFieldSignature(_js_helper._MatchImplementation, () => ({
    __proto__: dart.getFields(_js_helper._MatchImplementation.__proto__),
    pattern: dart.finalFieldType(core.Pattern),
    [_match$]: dart.finalFieldType(core.List$(dart.nullable(core.String)))
  }));
  var _re$ = dart.privateName(_js_helper, "_re");
  var _string$0 = dart.privateName(_js_helper, "_string");
  var _start$0 = dart.privateName(_js_helper, "_start");
  core.RegExpMatch = class RegExpMatch extends core.Object {};
  (core.RegExpMatch.new = function() {
    ;
  }).prototype = core.RegExpMatch.prototype;
  dart.addTypeTests(core.RegExpMatch);
  dart.addTypeCaches(core.RegExpMatch);
  core.RegExpMatch[dart.implements] = () => [core.Match];
  dart.setLibraryUri(core.RegExpMatch, I[8]);
  _js_helper._AllMatchesIterable = class _AllMatchesIterable extends collection.IterableBase$(core.RegExpMatch) {
    get iterator() {
      return new _js_helper._AllMatchesIterator.new(this[_re$], this[_string$0], this[_start$0]);
    }
  };
  (_js_helper._AllMatchesIterable.new = function(_re, _string, _start) {
    if (_re == null) dart.nullFailed(I[51], 238, 28, "_re");
    if (_string == null) dart.nullFailed(I[51], 238, 38, "_string");
    if (_start == null) dart.nullFailed(I[51], 238, 52, "_start");
    this[_re$] = _re;
    this[_string$0] = _string;
    this[_start$0] = _start;
    _js_helper._AllMatchesIterable.__proto__.new.call(this);
    ;
  }).prototype = _js_helper._AllMatchesIterable.prototype;
  dart.addTypeTests(_js_helper._AllMatchesIterable);
  dart.addTypeCaches(_js_helper._AllMatchesIterable);
  dart.setGetterSignature(_js_helper._AllMatchesIterable, () => ({
    __proto__: dart.getGetters(_js_helper._AllMatchesIterable.__proto__),
    iterator: core.Iterator$(core.RegExpMatch),
    [$iterator]: core.Iterator$(core.RegExpMatch)
  }));
  dart.setLibraryUri(_js_helper._AllMatchesIterable, I[45]);
  dart.setFieldSignature(_js_helper._AllMatchesIterable, () => ({
    __proto__: dart.getFields(_js_helper._AllMatchesIterable.__proto__),
    [_re$]: dart.finalFieldType(_js_helper.JSSyntaxRegExp),
    [_string$0]: dart.finalFieldType(core.String),
    [_start$0]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionAccessors(_js_helper._AllMatchesIterable, ['iterator']);
  var _regExp$ = dart.privateName(_js_helper, "_regExp");
  var _nextIndex$ = dart.privateName(_js_helper, "_nextIndex");
  _js_helper._AllMatchesIterator = class _AllMatchesIterator extends core.Object {
    get current() {
      return dart.nullCast(this[_current$0], core.RegExpMatch);
    }
    static _isLeadSurrogate(c) {
      if (c == null) dart.nullFailed(I[51], 254, 36, "c");
      return dart.notNull(c) >= 55296 && dart.notNull(c) <= 56319;
    }
    static _isTrailSurrogate(c) {
      if (c == null) dart.nullFailed(I[51], 258, 37, "c");
      return dart.notNull(c) >= 56320 && dart.notNull(c) <= 57343;
    }
    moveNext() {
      let string = this[_string$0];
      if (string == null) return false;
      if (dart.notNull(this[_nextIndex$]) <= string.length) {
        let match = this[_regExp$][_execGlobal](string, this[_nextIndex$]);
        if (match != null) {
          this[_current$0] = match;
          let nextIndex = match.end;
          if (match.start == nextIndex) {
            if (dart.test(this[_regExp$].isUnicode) && dart.notNull(this[_nextIndex$]) + 1 < string.length && dart.test(_js_helper._AllMatchesIterator._isLeadSurrogate(string[$codeUnitAt](this[_nextIndex$]))) && dart.test(_js_helper._AllMatchesIterator._isTrailSurrogate(string[$codeUnitAt](dart.notNull(this[_nextIndex$]) + 1)))) {
              nextIndex = dart.notNull(nextIndex) + 1;
            }
            nextIndex = dart.notNull(nextIndex) + 1;
          }
          this[_nextIndex$] = nextIndex;
          return true;
        }
      }
      this[_current$0] = null;
      this[_string$0] = null;
      return false;
    }
  };
  (_js_helper._AllMatchesIterator.new = function(_regExp, _string, _nextIndex) {
    if (_regExp == null) dart.nullFailed(I[51], 250, 28, "_regExp");
    if (_nextIndex == null) dart.nullFailed(I[51], 250, 56, "_nextIndex");
    this[_current$0] = null;
    this[_regExp$] = _regExp;
    this[_string$0] = _string;
    this[_nextIndex$] = _nextIndex;
    ;
  }).prototype = _js_helper._AllMatchesIterator.prototype;
  dart.addTypeTests(_js_helper._AllMatchesIterator);
  dart.addTypeCaches(_js_helper._AllMatchesIterator);
  _js_helper._AllMatchesIterator[dart.implements] = () => [core.Iterator$(core.RegExpMatch)];
  dart.setMethodSignature(_js_helper._AllMatchesIterator, () => ({
    __proto__: dart.getMethods(_js_helper._AllMatchesIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_js_helper._AllMatchesIterator, () => ({
    __proto__: dart.getGetters(_js_helper._AllMatchesIterator.__proto__),
    current: core.RegExpMatch
  }));
  dart.setLibraryUri(_js_helper._AllMatchesIterator, I[45]);
  dart.setFieldSignature(_js_helper._AllMatchesIterator, () => ({
    __proto__: dart.getFields(_js_helper._AllMatchesIterator.__proto__),
    [_regExp$]: dart.finalFieldType(_js_helper.JSSyntaxRegExp),
    [_string$0]: dart.fieldType(dart.nullable(core.String)),
    [_nextIndex$]: dart.fieldType(core.int),
    [_current$0]: dart.fieldType(dart.nullable(core.RegExpMatch))
  }));
  var start$0 = dart.privateName(_js_helper, "StringMatch.start");
  var input$ = dart.privateName(_js_helper, "StringMatch.input");
  var pattern$ = dart.privateName(_js_helper, "StringMatch.pattern");
  _js_helper.StringMatch = class StringMatch extends core.Object {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get input() {
      return this[input$];
    }
    set input(value) {
      super.input = value;
    }
    get pattern() {
      return this[pattern$];
    }
    set pattern(value) {
      super.pattern = value;
    }
    get end() {
      return dart.notNull(this.start) + this.pattern.length;
    }
    _get(g) {
      if (g == null) dart.nullFailed(I[52], 31, 26, "g");
      return this.group(g);
    }
    get groupCount() {
      return 0;
    }
    group(group_) {
      if (group_ == null) dart.nullFailed(I[52], 34, 20, "group_");
      if (group_ !== 0) {
        dart.throw(new core.RangeError.value(group_));
      }
      return this.pattern;
    }
    groups(groups_) {
      if (groups_ == null) dart.nullFailed(I[52], 41, 33, "groups_");
      let result = T$.JSArrayOfString().of([]);
      for (let g of groups_) {
        result[$add](this.group(g));
      }
      return result;
    }
  };
  (_js_helper.StringMatch.new = function(start, input, pattern) {
    if (start == null) dart.nullFailed(I[52], 28, 30, "start");
    if (input == null) dart.nullFailed(I[52], 28, 49, "input");
    if (pattern == null) dart.nullFailed(I[52], 28, 68, "pattern");
    this[start$0] = start;
    this[input$] = input;
    this[pattern$] = pattern;
    ;
  }).prototype = _js_helper.StringMatch.prototype;
  dart.addTypeTests(_js_helper.StringMatch);
  dart.addTypeCaches(_js_helper.StringMatch);
  _js_helper.StringMatch[dart.implements] = () => [core.Match];
  dart.setMethodSignature(_js_helper.StringMatch, () => ({
    __proto__: dart.getMethods(_js_helper.StringMatch.__proto__),
    _get: dart.fnType(core.String, [core.int]),
    group: dart.fnType(core.String, [core.int]),
    groups: dart.fnType(core.List$(core.String), [core.List$(core.int)])
  }));
  dart.setGetterSignature(_js_helper.StringMatch, () => ({
    __proto__: dart.getGetters(_js_helper.StringMatch.__proto__),
    end: core.int,
    groupCount: core.int
  }));
  dart.setLibraryUri(_js_helper.StringMatch, I[45]);
  dart.setFieldSignature(_js_helper.StringMatch, () => ({
    __proto__: dart.getFields(_js_helper.StringMatch.__proto__),
    start: dart.finalFieldType(core.int),
    input: dart.finalFieldType(core.String),
    pattern: dart.finalFieldType(core.String)
  }));
  var _input$ = dart.privateName(_js_helper, "_input");
  var _pattern$ = dart.privateName(_js_helper, "_pattern");
  var _index$0 = dart.privateName(_js_helper, "_index");
  core.Match = class Match extends core.Object {};
  (core.Match.new = function() {
    ;
  }).prototype = core.Match.prototype;
  dart.addTypeTests(core.Match);
  dart.addTypeCaches(core.Match);
  dart.setLibraryUri(core.Match, I[8]);
  _js_helper._StringAllMatchesIterable = class _StringAllMatchesIterable extends core.Iterable$(core.Match) {
    get iterator() {
      return new _js_helper._StringAllMatchesIterator.new(this[_input$], this[_pattern$], this[_index$0]);
    }
    get first() {
      let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
      if (index >= 0) {
        return new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
      }
      dart.throw(_internal.IterableElementError.noElement());
    }
  };
  (_js_helper._StringAllMatchesIterable.new = function(_input, _pattern, _index) {
    if (_input == null) dart.nullFailed(I[52], 64, 34, "_input");
    if (_pattern == null) dart.nullFailed(I[52], 64, 47, "_pattern");
    if (_index == null) dart.nullFailed(I[52], 64, 62, "_index");
    this[_input$] = _input;
    this[_pattern$] = _pattern;
    this[_index$0] = _index;
    _js_helper._StringAllMatchesIterable.__proto__.new.call(this);
    ;
  }).prototype = _js_helper._StringAllMatchesIterable.prototype;
  dart.addTypeTests(_js_helper._StringAllMatchesIterable);
  dart.addTypeCaches(_js_helper._StringAllMatchesIterable);
  dart.setGetterSignature(_js_helper._StringAllMatchesIterable, () => ({
    __proto__: dart.getGetters(_js_helper._StringAllMatchesIterable.__proto__),
    iterator: core.Iterator$(core.Match),
    [$iterator]: core.Iterator$(core.Match)
  }));
  dart.setLibraryUri(_js_helper._StringAllMatchesIterable, I[45]);
  dart.setFieldSignature(_js_helper._StringAllMatchesIterable, () => ({
    __proto__: dart.getFields(_js_helper._StringAllMatchesIterable.__proto__),
    [_input$]: dart.finalFieldType(core.String),
    [_pattern$]: dart.finalFieldType(core.String),
    [_index$0]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionAccessors(_js_helper._StringAllMatchesIterable, ['iterator', 'first']);
  _js_helper._StringAllMatchesIterator = class _StringAllMatchesIterator extends core.Object {
    moveNext() {
      if (dart.notNull(this[_index$0]) + this[_pattern$].length > this[_input$].length) {
        this[_current$0] = null;
        return false;
      }
      let index = _js_helper.stringIndexOfStringUnchecked(this[_input$], this[_pattern$], this[_index$0]);
      if (index < 0) {
        this[_index$0] = this[_input$].length + 1;
        this[_current$0] = null;
        return false;
      }
      let end = index + this[_pattern$].length;
      this[_current$0] = new _js_helper.StringMatch.new(index, this[_input$], this[_pattern$]);
      if (end === this[_index$0]) end = end + 1;
      this[_index$0] = end;
      return true;
    }
    get current() {
      return dart.nullCheck(this[_current$0]);
    }
  };
  (_js_helper._StringAllMatchesIterator.new = function(_input, _pattern, _index) {
    if (_input == null) dart.nullFailed(I[52], 84, 34, "_input");
    if (_pattern == null) dart.nullFailed(I[52], 84, 47, "_pattern");
    if (_index == null) dart.nullFailed(I[52], 84, 62, "_index");
    this[_current$0] = null;
    this[_input$] = _input;
    this[_pattern$] = _pattern;
    this[_index$0] = _index;
    ;
  }).prototype = _js_helper._StringAllMatchesIterator.prototype;
  dart.addTypeTests(_js_helper._StringAllMatchesIterator);
  dart.addTypeCaches(_js_helper._StringAllMatchesIterator);
  _js_helper._StringAllMatchesIterator[dart.implements] = () => [core.Iterator$(core.Match)];
  dart.setMethodSignature(_js_helper._StringAllMatchesIterator, () => ({
    __proto__: dart.getMethods(_js_helper._StringAllMatchesIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(_js_helper._StringAllMatchesIterator, () => ({
    __proto__: dart.getGetters(_js_helper._StringAllMatchesIterator.__proto__),
    current: core.Match
  }));
  dart.setLibraryUri(_js_helper._StringAllMatchesIterator, I[45]);
  dart.setFieldSignature(_js_helper._StringAllMatchesIterator, () => ({
    __proto__: dart.getFields(_js_helper._StringAllMatchesIterator.__proto__),
    [_input$]: dart.finalFieldType(core.String),
    [_pattern$]: dart.finalFieldType(core.String),
    [_index$0]: dart.fieldType(core.int),
    [_current$0]: dart.fieldType(dart.nullable(core.Match))
  }));
  _js_helper.diagnoseIndexError = function diagnoseIndexError(indexable, index) {
    if (index == null) dart.nullFailed(I[46], 483, 41, "index");
    let length = core.int.as(dart.dload(indexable, 'length'));
    if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(length)) {
      return new core.IndexError.new(index, indexable, "index", null, length);
    }
    return new core.RangeError.value(index, "index");
  };
  _js_helper.diagnoseRangeError = function diagnoseRangeError(start, end, length) {
    if (length == null) dart.nullFailed(I[46], 499, 52, "length");
    if (start == null) {
      return new core.ArgumentError.value(start, "start");
    }
    if (dart.notNull(start) < 0 || dart.notNull(start) > dart.notNull(length)) {
      return new core.RangeError.range(start, 0, length, "start");
    }
    if (end != null) {
      if (dart.notNull(end) < dart.notNull(start) || dart.notNull(end) > dart.notNull(length)) {
        return new core.RangeError.range(end, start, length, "end");
      }
    }
    return new core.ArgumentError.value(end, "end");
  };
  _js_helper.stringLastIndexOfUnchecked = function stringLastIndexOfUnchecked(receiver, element, start) {
    return receiver.lastIndexOf(element, start);
  };
  _js_helper.argumentErrorValue = function argumentErrorValue(object) {
    return new core.ArgumentError.value(object);
  };
  _js_helper.throwArgumentErrorValue = function throwArgumentErrorValue(value) {
    dart.throw(_js_helper.argumentErrorValue(value));
  };
  _js_helper.checkInt = function checkInt(value) {
    if (!core.int.is(value)) dart.throw(_js_helper.argumentErrorValue(value));
    return value;
  };
  _js_helper.throwRuntimeError = function throwRuntimeError(message) {
    dart.throw(new _js_helper.RuntimeError.new(message));
  };
  _js_helper.throwAbstractClassInstantiationError = function throwAbstractClassInstantiationError(className) {
    dart.throw(new core.AbstractClassInstantiationError.new(core.String.as(className)));
  };
  _js_helper.throwConcurrentModificationError = function throwConcurrentModificationError(collection) {
    dart.throw(new core.ConcurrentModificationError.new(collection));
  };
  _js_helper.fillLiteralMap = function fillLiteralMap(keyValuePairs, result) {
    let t82, t82$;
    if (result == null) dart.nullFailed(I[46], 579, 35, "result");
    let index = 0;
    let length = _js_helper.getLength(keyValuePairs);
    while (index < dart.notNull(length)) {
      let key = _js_helper.getIndex(keyValuePairs, (t82 = index, index = t82 + 1, t82));
      let value = _js_helper.getIndex(keyValuePairs, (t82$ = index, index = t82$ + 1, t82$));
      result[$_set](key, value);
    }
    return result;
  };
  _js_helper.jsHasOwnProperty = function jsHasOwnProperty(jsObject, property) {
    if (property == null) dart.nullFailed(I[46], 592, 40, "property");
    return jsObject.hasOwnProperty(property);
  };
  _js_helper.jsPropertyAccess = function jsPropertyAccess(jsObject, property) {
    if (property == null) dart.nullFailed(I[46], 596, 35, "property");
    return jsObject[property];
  };
  _js_helper.getFallThroughError = function getFallThroughError() {
    return new _js_helper.FallThroughErrorImplementation.new();
  };
  _js_helper.random64 = function random64() {
    let int32a = Math.random() * 0x100000000 >>> 0;
    let int32b = Math.random() * 0x100000000 >>> 0;
    return int32a + int32b * 4294967296;
  };
  _js_helper.registerGlobalObject = function registerGlobalObject(object) {
    try {
      if (dart.test(dart.polyfill(object))) {
        dart.applyAllExtensions(object);
      }
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
      } else
        throw e$;
    }
  };
  _js_helper.applyExtension = function applyExtension$(name, nativeObject) {
    dart.applyExtension(name, nativeObject);
  };
  _js_helper.applyTestExtensions = function applyTestExtensions(names) {
    if (names == null) dart.nullFailed(I[46], 802, 39, "names");
    names[$forEach](C[28] || CT.C28);
  };
  _js_helper.assertInterop = function assertInterop$(value) {
    if (core.Function.is(value)) dart.assertInterop(value);
  };
  _js_helper.assertInteropArgs = function assertInteropArgs(args) {
    if (args == null) dart.nullFailed(I[46], 843, 38, "args");
    return args[$forEach](C[29] || CT.C29);
  };
  _js_helper.getRuntimeType = function getRuntimeType(object) {
    return dart.getReifiedType(object);
  };
  _js_helper.getIndex = function getIndex(array, index) {
    if (index == null) dart.nullFailed(I[53], 13, 21, "index");
    if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, I[53], 14, 10, "isJsArray(array)");
    return array[index];
  };
  _js_helper.getLength = function getLength(array) {
    if (!dart.test(_js_helper.isJsArray(array))) dart.assertFailed(null, I[53], 20, 10, "isJsArray(array)");
    return array.length;
  };
  _js_helper.isJsArray = function isJsArray(value) {
    return _interceptors.JSArray.is(value);
  };
  _js_helper.putLinkedMapKey = function putLinkedMapKey(key, keyMap) {
    let hash = key[$hashCode] & 0x3ffffff;
    let buckets = keyMap.get(hash);
    if (buckets == null) {
      keyMap.set(hash, [key]);
      return key;
    }
    for (let i = 0, n = buckets.length; i < n; i = i + 1) {
      let k = buckets[i];
      if (k[$_equals](key)) return k;
    }
    buckets.push(key);
    return key;
  };
  _js_helper.convertDartClosureToJS = function convertDartClosureToJS(F, closure, arity) {
    if (arity == null) dart.nullFailed(I[54], 9, 44, "arity");
    return closure;
  };
  _js_helper.setNativeSubclassDispatchRecord = function setNativeSubclassDispatchRecord(proto, interceptor) {
  };
  _js_helper.findDispatchTagForInterceptorClass = function findDispatchTagForInterceptorClass(interceptorClassConstructor) {
  };
  _js_helper.makeLeafDispatchRecord = function makeLeafDispatchRecord(interceptor) {
  };
  _js_helper.regExpGetNative = function regExpGetNative(regexp) {
    if (regexp == null) dart.nullFailed(I[51], 8, 32, "regexp");
    return regexp[_nativeRegExp];
  };
  _js_helper.regExpGetGlobalNative = function regExpGetGlobalNative(regexp) {
    if (regexp == null) dart.nullFailed(I[51], 19, 38, "regexp");
    let nativeRegexp = regexp[_nativeGlobalVersion];
    nativeRegexp.lastIndex = 0;
    return nativeRegexp;
  };
  _js_helper.regExpCaptureCount = function regExpCaptureCount(regexp) {
    if (regexp == null) dart.nullFailed(I[51], 35, 39, "regexp");
    let nativeAnchoredRegExp = regexp[_nativeAnchoredVersion];
    let match = nativeAnchoredRegExp.exec('');
    return match[$length] - 2;
  };
  _js_helper.firstMatchAfter = function firstMatchAfter(regExp, string, start) {
    if (regExp == null) dart.nullFailed(I[51], 293, 45, "regExp");
    if (string == null) dart.nullFailed(I[51], 293, 60, "string");
    if (start == null) dart.nullFailed(I[51], 293, 72, "start");
    return regExp[_execGlobal](string, start);
  };
  _js_helper.stringIndexOfStringUnchecked = function stringIndexOfStringUnchecked(receiver, other, startIndex) {
    return receiver.indexOf(other, startIndex);
  };
  _js_helper.substring1Unchecked = function substring1Unchecked(receiver, startIndex) {
    return receiver.substring(startIndex);
  };
  _js_helper.substring2Unchecked = function substring2Unchecked(receiver, startIndex, endIndex) {
    return receiver.substring(startIndex, endIndex);
  };
  _js_helper.stringContainsStringUnchecked = function stringContainsStringUnchecked(receiver, other, startIndex) {
    return _js_helper.stringIndexOfStringUnchecked(receiver, other, startIndex) >= 0;
  };
  _js_helper.allMatchesInStringUnchecked = function allMatchesInStringUnchecked(pattern, string, startIndex) {
    if (pattern == null) dart.nullFailed(I[52], 55, 12, "pattern");
    if (string == null) dart.nullFailed(I[52], 55, 28, "string");
    if (startIndex == null) dart.nullFailed(I[52], 55, 40, "startIndex");
    return new _js_helper._StringAllMatchesIterable.new(string, pattern, startIndex);
  };
  _js_helper.stringContainsUnchecked = function stringContainsUnchecked(receiver, other, startIndex) {
    if (startIndex == null) dart.nullFailed(I[52], 110, 51, "startIndex");
    if (typeof other == 'string') {
      return _js_helper.stringContainsStringUnchecked(receiver, other, startIndex);
    } else if (_js_helper.JSSyntaxRegExp.is(other)) {
      return other.hasMatch(receiver[$substring](startIndex));
    } else {
      let substr = receiver[$substring](startIndex);
      return core.bool.as(dart.dload(dart.dsend(other, 'allMatches', [substr]), 'isNotEmpty'));
    }
  };
  _js_helper.stringReplaceJS = function stringReplaceJS(receiver, replacer, replacement) {
    if (receiver == null) dart.nullFailed(I[52], 122, 31, "receiver");
    if (replacement == null) dart.nullFailed(I[52], 122, 58, "replacement");
    replacement = replacement.replace(/\$/g, "$$$$");
    return receiver.replace(replacer, replacement);
  };
  _js_helper.stringReplaceFirstRE = function stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
    if (regexp == null) dart.nullFailed(I[52], 131, 70, "regexp");
    if (replacement == null) dart.nullFailed(I[52], 132, 12, "replacement");
    if (startIndex == null) dart.nullFailed(I[52], 132, 29, "startIndex");
    let match = regexp[_execGlobal](receiver, startIndex);
    if (match == null) return receiver;
    let start = match.start;
    let end = match.end;
    return _js_helper.stringReplaceRangeUnchecked(receiver, start, end, replacement);
  };
  _js_helper.quoteStringForRegExp = function quoteStringForRegExp(string) {
    return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
  };
  _js_helper.stringReplaceAllUnchecked = function stringReplaceAllUnchecked(receiver, pattern, replacement) {
    if (pattern == null) dart.argumentError(pattern);
    if (replacement == null) dart.argumentError(replacement);
    if (typeof pattern == 'string') {
      if (pattern === "") {
        if (receiver === "") {
          return replacement;
        } else {
          let result = new core.StringBuffer.new();
          let length = receiver.length;
          result.write(replacement);
          for (let i = 0; i < length; i = i + 1) {
            result.write(receiver[$_get](i));
            result.write(replacement);
          }
          return result.toString();
        }
      } else {
        return receiver.split(pattern).join(replacement);
      }
    } else if (_js_helper.JSSyntaxRegExp.is(pattern)) {
      let re = _js_helper.regExpGetGlobalNative(pattern);
      return _js_helper.stringReplaceJS(receiver, re, replacement);
    } else {
      dart.throw("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  };
  _js_helper._matchString = function _matchString(match) {
    if (match == null) dart.nullFailed(I[52], 177, 27, "match");
    return dart.nullCheck(match._get(0));
  };
  _js_helper._stringIdentity = function _stringIdentity(string) {
    if (string == null) dart.nullFailed(I[52], 178, 31, "string");
    return string;
  };
  _js_helper.stringReplaceAllFuncUnchecked = function stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
    if (receiver == null) dart.nullFailed(I[52], 182, 12, "receiver");
    if (pattern == null) dart.argumentError(pattern);
    if (onMatch == null) onMatch = C[30] || CT.C30;
    if (onNonMatch == null) onNonMatch = C[31] || CT.C31;
    if (typeof pattern == 'string') {
      return _js_helper.stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch);
    }
    let buffer = new core.StringBuffer.new();
    let startIndex = 0;
    for (let match of pattern[$allMatches](receiver)) {
      buffer.write(onNonMatch(receiver[$substring](startIndex, match.start)));
      buffer.write(onMatch(match));
      startIndex = match.end;
    }
    buffer.write(onNonMatch(receiver[$substring](startIndex)));
    return buffer.toString();
  };
  _js_helper.stringReplaceAllEmptyFuncUnchecked = function stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch) {
    if (receiver == null) dart.nullFailed(I[52], 204, 50, "receiver");
    if (onMatch == null) dart.nullFailed(I[52], 205, 12, "onMatch");
    if (onNonMatch == null) dart.nullFailed(I[52], 205, 41, "onNonMatch");
    let buffer = new core.StringBuffer.new();
    let length = receiver.length;
    let i = 0;
    buffer.write(onNonMatch(""));
    while (i < length) {
      buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
      let code = receiver[$codeUnitAt](i);
      if ((code & ~1023 >>> 0) === 55296 && length > i + 1) {
        code = receiver[$codeUnitAt](i + 1);
        if ((code & ~1023 >>> 0) === 56320) {
          buffer.write(onNonMatch(receiver[$substring](i, i + 2)));
          i = i + 2;
          continue;
        }
      }
      buffer.write(onNonMatch(receiver[$_get](i)));
      i = i + 1;
    }
    buffer.write(onMatch(new _js_helper.StringMatch.new(i, receiver, "")));
    buffer.write(onNonMatch(""));
    return buffer.toString();
  };
  _js_helper.stringReplaceAllStringFuncUnchecked = function stringReplaceAllStringFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
    if (receiver == null) dart.nullFailed(I[52], 234, 51, "receiver");
    if (pattern == null) dart.nullFailed(I[52], 234, 68, "pattern");
    if (onMatch == null) dart.nullFailed(I[52], 235, 12, "onMatch");
    if (onNonMatch == null) dart.nullFailed(I[52], 235, 41, "onNonMatch");
    let patternLength = pattern.length;
    if (patternLength === 0) {
      return _js_helper.stringReplaceAllEmptyFuncUnchecked(receiver, onMatch, onNonMatch);
    }
    let length = receiver.length;
    let buffer = new core.StringBuffer.new();
    let startIndex = 0;
    while (startIndex < length) {
      let position = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
      if (position === -1) {
        break;
      }
      buffer.write(onNonMatch(receiver[$substring](startIndex, position)));
      buffer.write(onMatch(new _js_helper.StringMatch.new(position, receiver, pattern)));
      startIndex = position + patternLength;
    }
    buffer.write(onNonMatch(receiver[$substring](startIndex)));
    return buffer.toString();
  };
  _js_helper.stringReplaceFirstUnchecked = function stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
    if (pattern == null) dart.argumentError(pattern);
    if (replacement == null) dart.nullFailed(I[52], 258, 40, "replacement");
    if (startIndex == null) dart.nullFailed(I[52], 258, 57, "startIndex");
    if (typeof pattern == 'string') {
      let index = _js_helper.stringIndexOfStringUnchecked(receiver, pattern, startIndex);
      if (index < 0) return receiver;
      let end = index + pattern.length;
      return _js_helper.stringReplaceRangeUnchecked(receiver, index, end, replacement);
    }
    if (_js_helper.JSSyntaxRegExp.is(pattern)) {
      return startIndex === 0 ? _js_helper.stringReplaceJS(receiver, _js_helper.regExpGetNative(pattern), replacement) : _js_helper.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
    }
    let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
    if (!dart.test(matches.moveNext())) return receiver;
    let match = matches.current;
    return receiver[$replaceRange](match.start, match.end, replacement);
  };
  _js_helper.stringReplaceFirstMappedUnchecked = function stringReplaceFirstMappedUnchecked(receiver, pattern, replace, startIndex) {
    if (receiver == null) dart.nullFailed(I[52], 277, 49, "receiver");
    if (pattern == null) dart.nullFailed(I[52], 277, 67, "pattern");
    if (replace == null) dart.nullFailed(I[52], 278, 12, "replace");
    if (startIndex == null) dart.nullFailed(I[52], 278, 40, "startIndex");
    let matches = pattern[$allMatches](receiver, startIndex)[$iterator];
    if (!dart.test(matches.moveNext())) return receiver;
    let match = matches.current;
    let replacement = dart.str(replace(match));
    return receiver[$replaceRange](match.start, match.end, replacement);
  };
  _js_helper.stringJoinUnchecked = function stringJoinUnchecked(array, separator) {
    return array.join(separator);
  };
  _js_helper.stringReplaceRangeUnchecked = function stringReplaceRangeUnchecked(receiver, start, end, replacement) {
    if (receiver == null) dart.nullFailed(I[52], 293, 12, "receiver");
    if (start == null) dart.nullFailed(I[52], 293, 26, "start");
    if (end == null) dart.nullFailed(I[52], 293, 37, "end");
    if (replacement == null) dart.nullFailed(I[52], 293, 49, "replacement");
    let prefix = receiver.substring(0, start);
    let suffix = receiver.substring(end);
    return prefix + dart.str(replacement) + suffix;
  };
  dart.defineLazy(_js_helper, {
    /*_js_helper.patch*/get patch() {
      return C[32] || CT.C32;
    },
    /*_js_helper.notNull*/get notNull() {
      return C[33] || CT.C33;
    },
    /*_js_helper.undefined*/get undefined() {
      return C[34] || CT.C34;
    },
    /*_js_helper.nullCheck*/get nullCheck() {
      return C[35] || CT.C35;
    }
  }, false);
  _js_primitives.printString = function printString(string) {
    if (string == null) dart.nullFailed(I[55], 20, 25, "string");
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object") {
      return;
    }
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  };
  var browserName$ = dart.privateName(_metadata, "SupportedBrowser.browserName");
  var minimumVersion$ = dart.privateName(_metadata, "SupportedBrowser.minimumVersion");
  _metadata.SupportedBrowser = class SupportedBrowser extends core.Object {
    get browserName() {
      return this[browserName$];
    }
    set browserName(value) {
      super.browserName = value;
    }
    get minimumVersion() {
      return this[minimumVersion$];
    }
    set minimumVersion(value) {
      super.minimumVersion = value;
    }
  };
  (_metadata.SupportedBrowser.new = function(browserName, minimumVersion = null) {
    if (browserName == null) dart.nullFailed(I[56], 28, 31, "browserName");
    this[browserName$] = browserName;
    this[minimumVersion$] = minimumVersion;
    ;
  }).prototype = _metadata.SupportedBrowser.prototype;
  dart.addTypeTests(_metadata.SupportedBrowser);
  dart.addTypeCaches(_metadata.SupportedBrowser);
  dart.setLibraryUri(_metadata.SupportedBrowser, I[57]);
  dart.setFieldSignature(_metadata.SupportedBrowser, () => ({
    __proto__: dart.getFields(_metadata.SupportedBrowser.__proto__),
    browserName: dart.finalFieldType(core.String),
    minimumVersion: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(_metadata.SupportedBrowser, {
    /*_metadata.SupportedBrowser.CHROME*/get CHROME() {
      return "Chrome";
    },
    /*_metadata.SupportedBrowser.FIREFOX*/get FIREFOX() {
      return "Firefox";
    },
    /*_metadata.SupportedBrowser.IE*/get IE() {
      return "Internet Explorer";
    },
    /*_metadata.SupportedBrowser.OPERA*/get OPERA() {
      return "Opera";
    },
    /*_metadata.SupportedBrowser.SAFARI*/get SAFARI() {
      return "Safari";
    }
  }, false);
  _metadata.Experimental = class Experimental extends core.Object {};
  (_metadata.Experimental.new = function() {
    ;
  }).prototype = _metadata.Experimental.prototype;
  dart.addTypeTests(_metadata.Experimental);
  dart.addTypeCaches(_metadata.Experimental);
  dart.setLibraryUri(_metadata.Experimental, I[57]);
  var name$9 = dart.privateName(_metadata, "DomName.name");
  _metadata.DomName = class DomName extends core.Object {
    get name() {
      return this[name$9];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_metadata.DomName.new = function(name) {
    if (name == null) dart.nullFailed(I[56], 54, 22, "name");
    this[name$9] = name;
    ;
  }).prototype = _metadata.DomName.prototype;
  dart.addTypeTests(_metadata.DomName);
  dart.addTypeCaches(_metadata.DomName);
  dart.setLibraryUri(_metadata.DomName, I[57]);
  dart.setFieldSignature(_metadata.DomName, () => ({
    __proto__: dart.getFields(_metadata.DomName.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  _metadata.DocsEditable = class DocsEditable extends core.Object {};
  (_metadata.DocsEditable.new = function() {
    ;
  }).prototype = _metadata.DocsEditable.prototype;
  dart.addTypeTests(_metadata.DocsEditable);
  dart.addTypeCaches(_metadata.DocsEditable);
  dart.setLibraryUri(_metadata.DocsEditable, I[57]);
  _metadata.Unstable = class Unstable extends core.Object {};
  (_metadata.Unstable.new = function() {
    ;
  }).prototype = _metadata.Unstable.prototype;
  dart.addTypeTests(_metadata.Unstable);
  dart.addTypeCaches(_metadata.Unstable);
  dart.setLibraryUri(_metadata.Unstable, I[57]);
  _native_typed_data.NativeByteBuffer = class NativeByteBuffer extends core.Object {
    get [$lengthInBytes]() {
      return this.byteLength;
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.ByteBuffer);
    }
    [$asUint8List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 33, 30, "offsetInBytes");
      return _native_typed_data.NativeUint8List.view(this, offsetInBytes, length);
    }
    [$asInt8List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 37, 28, "offsetInBytes");
      return _native_typed_data.NativeInt8List.view(this, offsetInBytes, length);
    }
    [$asUint8ClampedList](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 41, 44, "offsetInBytes");
      return _native_typed_data.NativeUint8ClampedList.view(this, offsetInBytes, length);
    }
    [$asUint16List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 45, 32, "offsetInBytes");
      return _native_typed_data.NativeUint16List.view(this, offsetInBytes, length);
    }
    [$asInt16List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 49, 30, "offsetInBytes");
      return _native_typed_data.NativeInt16List.view(this, offsetInBytes, length);
    }
    [$asUint32List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 53, 32, "offsetInBytes");
      return _native_typed_data.NativeUint32List.view(this, offsetInBytes, length);
    }
    [$asInt32List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 57, 30, "offsetInBytes");
      return _native_typed_data.NativeInt32List.view(this, offsetInBytes, length);
    }
    [$asUint64List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 61, 32, "offsetInBytes");
      dart.throw(new core.UnsupportedError.new("Uint64List not supported by dart2js."));
    }
    [$asInt64List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 65, 30, "offsetInBytes");
      dart.throw(new core.UnsupportedError.new("Int64List not supported by dart2js."));
    }
    [$asInt32x4List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 69, 34, "offsetInBytes");
      let storage = this[$asInt32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null);
      return new _native_typed_data.NativeInt32x4List._externalStorage(storage);
    }
    [$asFloat32List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 75, 34, "offsetInBytes");
      return _native_typed_data.NativeFloat32List.view(this, offsetInBytes, length);
    }
    [$asFloat64List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 79, 34, "offsetInBytes");
      return _native_typed_data.NativeFloat64List.view(this, offsetInBytes, length);
    }
    [$asFloat32x4List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 83, 38, "offsetInBytes");
      let storage = this[$asFloat32List](offsetInBytes, length != null ? dart.notNull(length) * 4 : null);
      return new _native_typed_data.NativeFloat32x4List._externalStorage(storage);
    }
    [$asFloat64x2List](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 89, 38, "offsetInBytes");
      let storage = this[$asFloat64List](offsetInBytes, length != null ? dart.notNull(length) * 2 : null);
      return new _native_typed_data.NativeFloat64x2List._externalStorage(storage);
    }
    [$asByteData](offsetInBytes = 0, length = null) {
      if (offsetInBytes == null) dart.nullFailed(I[58], 95, 28, "offsetInBytes");
      return _native_typed_data.NativeByteData.view(this, offsetInBytes, length);
    }
  };
  (_native_typed_data.NativeByteBuffer.new = function() {
    ;
  }).prototype = _native_typed_data.NativeByteBuffer.prototype;
  dart.addTypeTests(_native_typed_data.NativeByteBuffer);
  dart.addTypeCaches(_native_typed_data.NativeByteBuffer);
  _native_typed_data.NativeByteBuffer[dart.implements] = () => [typed_data.ByteBuffer];
  dart.setMethodSignature(_native_typed_data.NativeByteBuffer, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeByteBuffer.__proto__),
    [$asUint8List]: dart.fnType(typed_data.Uint8List, [], [core.int, dart.nullable(core.int)]),
    [$asInt8List]: dart.fnType(typed_data.Int8List, [], [core.int, dart.nullable(core.int)]),
    [$asUint8ClampedList]: dart.fnType(typed_data.Uint8ClampedList, [], [core.int, dart.nullable(core.int)]),
    [$asUint16List]: dart.fnType(typed_data.Uint16List, [], [core.int, dart.nullable(core.int)]),
    [$asInt16List]: dart.fnType(typed_data.Int16List, [], [core.int, dart.nullable(core.int)]),
    [$asUint32List]: dart.fnType(typed_data.Uint32List, [], [core.int, dart.nullable(core.int)]),
    [$asInt32List]: dart.fnType(typed_data.Int32List, [], [core.int, dart.nullable(core.int)]),
    [$asUint64List]: dart.fnType(typed_data.Uint64List, [], [core.int, dart.nullable(core.int)]),
    [$asInt64List]: dart.fnType(typed_data.Int64List, [], [core.int, dart.nullable(core.int)]),
    [$asInt32x4List]: dart.fnType(typed_data.Int32x4List, [], [core.int, dart.nullable(core.int)]),
    [$asFloat32List]: dart.fnType(typed_data.Float32List, [], [core.int, dart.nullable(core.int)]),
    [$asFloat64List]: dart.fnType(typed_data.Float64List, [], [core.int, dart.nullable(core.int)]),
    [$asFloat32x4List]: dart.fnType(typed_data.Float32x4List, [], [core.int, dart.nullable(core.int)]),
    [$asFloat64x2List]: dart.fnType(typed_data.Float64x2List, [], [core.int, dart.nullable(core.int)]),
    [$asByteData]: dart.fnType(typed_data.ByteData, [], [core.int, dart.nullable(core.int)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeByteBuffer, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeByteBuffer.__proto__),
    [$lengthInBytes]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeByteBuffer, I[59]);
  dart.registerExtension("ArrayBuffer", _native_typed_data.NativeByteBuffer);
  var _storage$ = dart.privateName(_native_typed_data, "_storage");
  typed_data.Float32x4 = class Float32x4 extends core.Object {};
  (typed_data.Float32x4[dart.mixinNew] = function() {
  }).prototype = typed_data.Float32x4.prototype;
  dart.addTypeTests(typed_data.Float32x4);
  dart.addTypeCaches(typed_data.Float32x4);
  dart.setLibraryUri(typed_data.Float32x4, I[60]);
  dart.defineLazy(typed_data.Float32x4, {
    /*typed_data.Float32x4.xxxx*/get xxxx() {
      return 0;
    },
    /*typed_data.Float32x4.xxxy*/get xxxy() {
      return 64;
    },
    /*typed_data.Float32x4.xxxz*/get xxxz() {
      return 128;
    },
    /*typed_data.Float32x4.xxxw*/get xxxw() {
      return 192;
    },
    /*typed_data.Float32x4.xxyx*/get xxyx() {
      return 16;
    },
    /*typed_data.Float32x4.xxyy*/get xxyy() {
      return 80;
    },
    /*typed_data.Float32x4.xxyz*/get xxyz() {
      return 144;
    },
    /*typed_data.Float32x4.xxyw*/get xxyw() {
      return 208;
    },
    /*typed_data.Float32x4.xxzx*/get xxzx() {
      return 32;
    },
    /*typed_data.Float32x4.xxzy*/get xxzy() {
      return 96;
    },
    /*typed_data.Float32x4.xxzz*/get xxzz() {
      return 160;
    },
    /*typed_data.Float32x4.xxzw*/get xxzw() {
      return 224;
    },
    /*typed_data.Float32x4.xxwx*/get xxwx() {
      return 48;
    },
    /*typed_data.Float32x4.xxwy*/get xxwy() {
      return 112;
    },
    /*typed_data.Float32x4.xxwz*/get xxwz() {
      return 176;
    },
    /*typed_data.Float32x4.xxww*/get xxww() {
      return 240;
    },
    /*typed_data.Float32x4.xyxx*/get xyxx() {
      return 4;
    },
    /*typed_data.Float32x4.xyxy*/get xyxy() {
      return 68;
    },
    /*typed_data.Float32x4.xyxz*/get xyxz() {
      return 132;
    },
    /*typed_data.Float32x4.xyxw*/get xyxw() {
      return 196;
    },
    /*typed_data.Float32x4.xyyx*/get xyyx() {
      return 20;
    },
    /*typed_data.Float32x4.xyyy*/get xyyy() {
      return 84;
    },
    /*typed_data.Float32x4.xyyz*/get xyyz() {
      return 148;
    },
    /*typed_data.Float32x4.xyyw*/get xyyw() {
      return 212;
    },
    /*typed_data.Float32x4.xyzx*/get xyzx() {
      return 36;
    },
    /*typed_data.Float32x4.xyzy*/get xyzy() {
      return 100;
    },
    /*typed_data.Float32x4.xyzz*/get xyzz() {
      return 164;
    },
    /*typed_data.Float32x4.xyzw*/get xyzw() {
      return 228;
    },
    /*typed_data.Float32x4.xywx*/get xywx() {
      return 52;
    },
    /*typed_data.Float32x4.xywy*/get xywy() {
      return 116;
    },
    /*typed_data.Float32x4.xywz*/get xywz() {
      return 180;
    },
    /*typed_data.Float32x4.xyww*/get xyww() {
      return 244;
    },
    /*typed_data.Float32x4.xzxx*/get xzxx() {
      return 8;
    },
    /*typed_data.Float32x4.xzxy*/get xzxy() {
      return 72;
    },
    /*typed_data.Float32x4.xzxz*/get xzxz() {
      return 136;
    },
    /*typed_data.Float32x4.xzxw*/get xzxw() {
      return 200;
    },
    /*typed_data.Float32x4.xzyx*/get xzyx() {
      return 24;
    },
    /*typed_data.Float32x4.xzyy*/get xzyy() {
      return 88;
    },
    /*typed_data.Float32x4.xzyz*/get xzyz() {
      return 152;
    },
    /*typed_data.Float32x4.xzyw*/get xzyw() {
      return 216;
    },
    /*typed_data.Float32x4.xzzx*/get xzzx() {
      return 40;
    },
    /*typed_data.Float32x4.xzzy*/get xzzy() {
      return 104;
    },
    /*typed_data.Float32x4.xzzz*/get xzzz() {
      return 168;
    },
    /*typed_data.Float32x4.xzzw*/get xzzw() {
      return 232;
    },
    /*typed_data.Float32x4.xzwx*/get xzwx() {
      return 56;
    },
    /*typed_data.Float32x4.xzwy*/get xzwy() {
      return 120;
    },
    /*typed_data.Float32x4.xzwz*/get xzwz() {
      return 184;
    },
    /*typed_data.Float32x4.xzww*/get xzww() {
      return 248;
    },
    /*typed_data.Float32x4.xwxx*/get xwxx() {
      return 12;
    },
    /*typed_data.Float32x4.xwxy*/get xwxy() {
      return 76;
    },
    /*typed_data.Float32x4.xwxz*/get xwxz() {
      return 140;
    },
    /*typed_data.Float32x4.xwxw*/get xwxw() {
      return 204;
    },
    /*typed_data.Float32x4.xwyx*/get xwyx() {
      return 28;
    },
    /*typed_data.Float32x4.xwyy*/get xwyy() {
      return 92;
    },
    /*typed_data.Float32x4.xwyz*/get xwyz() {
      return 156;
    },
    /*typed_data.Float32x4.xwyw*/get xwyw() {
      return 220;
    },
    /*typed_data.Float32x4.xwzx*/get xwzx() {
      return 44;
    },
    /*typed_data.Float32x4.xwzy*/get xwzy() {
      return 108;
    },
    /*typed_data.Float32x4.xwzz*/get xwzz() {
      return 172;
    },
    /*typed_data.Float32x4.xwzw*/get xwzw() {
      return 236;
    },
    /*typed_data.Float32x4.xwwx*/get xwwx() {
      return 60;
    },
    /*typed_data.Float32x4.xwwy*/get xwwy() {
      return 124;
    },
    /*typed_data.Float32x4.xwwz*/get xwwz() {
      return 188;
    },
    /*typed_data.Float32x4.xwww*/get xwww() {
      return 252;
    },
    /*typed_data.Float32x4.yxxx*/get yxxx() {
      return 1;
    },
    /*typed_data.Float32x4.yxxy*/get yxxy() {
      return 65;
    },
    /*typed_data.Float32x4.yxxz*/get yxxz() {
      return 129;
    },
    /*typed_data.Float32x4.yxxw*/get yxxw() {
      return 193;
    },
    /*typed_data.Float32x4.yxyx*/get yxyx() {
      return 17;
    },
    /*typed_data.Float32x4.yxyy*/get yxyy() {
      return 81;
    },
    /*typed_data.Float32x4.yxyz*/get yxyz() {
      return 145;
    },
    /*typed_data.Float32x4.yxyw*/get yxyw() {
      return 209;
    },
    /*typed_data.Float32x4.yxzx*/get yxzx() {
      return 33;
    },
    /*typed_data.Float32x4.yxzy*/get yxzy() {
      return 97;
    },
    /*typed_data.Float32x4.yxzz*/get yxzz() {
      return 161;
    },
    /*typed_data.Float32x4.yxzw*/get yxzw() {
      return 225;
    },
    /*typed_data.Float32x4.yxwx*/get yxwx() {
      return 49;
    },
    /*typed_data.Float32x4.yxwy*/get yxwy() {
      return 113;
    },
    /*typed_data.Float32x4.yxwz*/get yxwz() {
      return 177;
    },
    /*typed_data.Float32x4.yxww*/get yxww() {
      return 241;
    },
    /*typed_data.Float32x4.yyxx*/get yyxx() {
      return 5;
    },
    /*typed_data.Float32x4.yyxy*/get yyxy() {
      return 69;
    },
    /*typed_data.Float32x4.yyxz*/get yyxz() {
      return 133;
    },
    /*typed_data.Float32x4.yyxw*/get yyxw() {
      return 197;
    },
    /*typed_data.Float32x4.yyyx*/get yyyx() {
      return 21;
    },
    /*typed_data.Float32x4.yyyy*/get yyyy() {
      return 85;
    },
    /*typed_data.Float32x4.yyyz*/get yyyz() {
      return 149;
    },
    /*typed_data.Float32x4.yyyw*/get yyyw() {
      return 213;
    },
    /*typed_data.Float32x4.yyzx*/get yyzx() {
      return 37;
    },
    /*typed_data.Float32x4.yyzy*/get yyzy() {
      return 101;
    },
    /*typed_data.Float32x4.yyzz*/get yyzz() {
      return 165;
    },
    /*typed_data.Float32x4.yyzw*/get yyzw() {
      return 229;
    },
    /*typed_data.Float32x4.yywx*/get yywx() {
      return 53;
    },
    /*typed_data.Float32x4.yywy*/get yywy() {
      return 117;
    },
    /*typed_data.Float32x4.yywz*/get yywz() {
      return 181;
    },
    /*typed_data.Float32x4.yyww*/get yyww() {
      return 245;
    },
    /*typed_data.Float32x4.yzxx*/get yzxx() {
      return 9;
    },
    /*typed_data.Float32x4.yzxy*/get yzxy() {
      return 73;
    },
    /*typed_data.Float32x4.yzxz*/get yzxz() {
      return 137;
    },
    /*typed_data.Float32x4.yzxw*/get yzxw() {
      return 201;
    },
    /*typed_data.Float32x4.yzyx*/get yzyx() {
      return 25;
    },
    /*typed_data.Float32x4.yzyy*/get yzyy() {
      return 89;
    },
    /*typed_data.Float32x4.yzyz*/get yzyz() {
      return 153;
    },
    /*typed_data.Float32x4.yzyw*/get yzyw() {
      return 217;
    },
    /*typed_data.Float32x4.yzzx*/get yzzx() {
      return 41;
    },
    /*typed_data.Float32x4.yzzy*/get yzzy() {
      return 105;
    },
    /*typed_data.Float32x4.yzzz*/get yzzz() {
      return 169;
    },
    /*typed_data.Float32x4.yzzw*/get yzzw() {
      return 233;
    },
    /*typed_data.Float32x4.yzwx*/get yzwx() {
      return 57;
    },
    /*typed_data.Float32x4.yzwy*/get yzwy() {
      return 121;
    },
    /*typed_data.Float32x4.yzwz*/get yzwz() {
      return 185;
    },
    /*typed_data.Float32x4.yzww*/get yzww() {
      return 249;
    },
    /*typed_data.Float32x4.ywxx*/get ywxx() {
      return 13;
    },
    /*typed_data.Float32x4.ywxy*/get ywxy() {
      return 77;
    },
    /*typed_data.Float32x4.ywxz*/get ywxz() {
      return 141;
    },
    /*typed_data.Float32x4.ywxw*/get ywxw() {
      return 205;
    },
    /*typed_data.Float32x4.ywyx*/get ywyx() {
      return 29;
    },
    /*typed_data.Float32x4.ywyy*/get ywyy() {
      return 93;
    },
    /*typed_data.Float32x4.ywyz*/get ywyz() {
      return 157;
    },
    /*typed_data.Float32x4.ywyw*/get ywyw() {
      return 221;
    },
    /*typed_data.Float32x4.ywzx*/get ywzx() {
      return 45;
    },
    /*typed_data.Float32x4.ywzy*/get ywzy() {
      return 109;
    },
    /*typed_data.Float32x4.ywzz*/get ywzz() {
      return 173;
    },
    /*typed_data.Float32x4.ywzw*/get ywzw() {
      return 237;
    },
    /*typed_data.Float32x4.ywwx*/get ywwx() {
      return 61;
    },
    /*typed_data.Float32x4.ywwy*/get ywwy() {
      return 125;
    },
    /*typed_data.Float32x4.ywwz*/get ywwz() {
      return 189;
    },
    /*typed_data.Float32x4.ywww*/get ywww() {
      return 253;
    },
    /*typed_data.Float32x4.zxxx*/get zxxx() {
      return 2;
    },
    /*typed_data.Float32x4.zxxy*/get zxxy() {
      return 66;
    },
    /*typed_data.Float32x4.zxxz*/get zxxz() {
      return 130;
    },
    /*typed_data.Float32x4.zxxw*/get zxxw() {
      return 194;
    },
    /*typed_data.Float32x4.zxyx*/get zxyx() {
      return 18;
    },
    /*typed_data.Float32x4.zxyy*/get zxyy() {
      return 82;
    },
    /*typed_data.Float32x4.zxyz*/get zxyz() {
      return 146;
    },
    /*typed_data.Float32x4.zxyw*/get zxyw() {
      return 210;
    },
    /*typed_data.Float32x4.zxzx*/get zxzx() {
      return 34;
    },
    /*typed_data.Float32x4.zxzy*/get zxzy() {
      return 98;
    },
    /*typed_data.Float32x4.zxzz*/get zxzz() {
      return 162;
    },
    /*typed_data.Float32x4.zxzw*/get zxzw() {
      return 226;
    },
    /*typed_data.Float32x4.zxwx*/get zxwx() {
      return 50;
    },
    /*typed_data.Float32x4.zxwy*/get zxwy() {
      return 114;
    },
    /*typed_data.Float32x4.zxwz*/get zxwz() {
      return 178;
    },
    /*typed_data.Float32x4.zxww*/get zxww() {
      return 242;
    },
    /*typed_data.Float32x4.zyxx*/get zyxx() {
      return 6;
    },
    /*typed_data.Float32x4.zyxy*/get zyxy() {
      return 70;
    },
    /*typed_data.Float32x4.zyxz*/get zyxz() {
      return 134;
    },
    /*typed_data.Float32x4.zyxw*/get zyxw() {
      return 198;
    },
    /*typed_data.Float32x4.zyyx*/get zyyx() {
      return 22;
    },
    /*typed_data.Float32x4.zyyy*/get zyyy() {
      return 86;
    },
    /*typed_data.Float32x4.zyyz*/get zyyz() {
      return 150;
    },
    /*typed_data.Float32x4.zyyw*/get zyyw() {
      return 214;
    },
    /*typed_data.Float32x4.zyzx*/get zyzx() {
      return 38;
    },
    /*typed_data.Float32x4.zyzy*/get zyzy() {
      return 102;
    },
    /*typed_data.Float32x4.zyzz*/get zyzz() {
      return 166;
    },
    /*typed_data.Float32x4.zyzw*/get zyzw() {
      return 230;
    },
    /*typed_data.Float32x4.zywx*/get zywx() {
      return 54;
    },
    /*typed_data.Float32x4.zywy*/get zywy() {
      return 118;
    },
    /*typed_data.Float32x4.zywz*/get zywz() {
      return 182;
    },
    /*typed_data.Float32x4.zyww*/get zyww() {
      return 246;
    },
    /*typed_data.Float32x4.zzxx*/get zzxx() {
      return 10;
    },
    /*typed_data.Float32x4.zzxy*/get zzxy() {
      return 74;
    },
    /*typed_data.Float32x4.zzxz*/get zzxz() {
      return 138;
    },
    /*typed_data.Float32x4.zzxw*/get zzxw() {
      return 202;
    },
    /*typed_data.Float32x4.zzyx*/get zzyx() {
      return 26;
    },
    /*typed_data.Float32x4.zzyy*/get zzyy() {
      return 90;
    },
    /*typed_data.Float32x4.zzyz*/get zzyz() {
      return 154;
    },
    /*typed_data.Float32x4.zzyw*/get zzyw() {
      return 218;
    },
    /*typed_data.Float32x4.zzzx*/get zzzx() {
      return 42;
    },
    /*typed_data.Float32x4.zzzy*/get zzzy() {
      return 106;
    },
    /*typed_data.Float32x4.zzzz*/get zzzz() {
      return 170;
    },
    /*typed_data.Float32x4.zzzw*/get zzzw() {
      return 234;
    },
    /*typed_data.Float32x4.zzwx*/get zzwx() {
      return 58;
    },
    /*typed_data.Float32x4.zzwy*/get zzwy() {
      return 122;
    },
    /*typed_data.Float32x4.zzwz*/get zzwz() {
      return 186;
    },
    /*typed_data.Float32x4.zzww*/get zzww() {
      return 250;
    },
    /*typed_data.Float32x4.zwxx*/get zwxx() {
      return 14;
    },
    /*typed_data.Float32x4.zwxy*/get zwxy() {
      return 78;
    },
    /*typed_data.Float32x4.zwxz*/get zwxz() {
      return 142;
    },
    /*typed_data.Float32x4.zwxw*/get zwxw() {
      return 206;
    },
    /*typed_data.Float32x4.zwyx*/get zwyx() {
      return 30;
    },
    /*typed_data.Float32x4.zwyy*/get zwyy() {
      return 94;
    },
    /*typed_data.Float32x4.zwyz*/get zwyz() {
      return 158;
    },
    /*typed_data.Float32x4.zwyw*/get zwyw() {
      return 222;
    },
    /*typed_data.Float32x4.zwzx*/get zwzx() {
      return 46;
    },
    /*typed_data.Float32x4.zwzy*/get zwzy() {
      return 110;
    },
    /*typed_data.Float32x4.zwzz*/get zwzz() {
      return 174;
    },
    /*typed_data.Float32x4.zwzw*/get zwzw() {
      return 238;
    },
    /*typed_data.Float32x4.zwwx*/get zwwx() {
      return 62;
    },
    /*typed_data.Float32x4.zwwy*/get zwwy() {
      return 126;
    },
    /*typed_data.Float32x4.zwwz*/get zwwz() {
      return 190;
    },
    /*typed_data.Float32x4.zwww*/get zwww() {
      return 254;
    },
    /*typed_data.Float32x4.wxxx*/get wxxx() {
      return 3;
    },
    /*typed_data.Float32x4.wxxy*/get wxxy() {
      return 67;
    },
    /*typed_data.Float32x4.wxxz*/get wxxz() {
      return 131;
    },
    /*typed_data.Float32x4.wxxw*/get wxxw() {
      return 195;
    },
    /*typed_data.Float32x4.wxyx*/get wxyx() {
      return 19;
    },
    /*typed_data.Float32x4.wxyy*/get wxyy() {
      return 83;
    },
    /*typed_data.Float32x4.wxyz*/get wxyz() {
      return 147;
    },
    /*typed_data.Float32x4.wxyw*/get wxyw() {
      return 211;
    },
    /*typed_data.Float32x4.wxzx*/get wxzx() {
      return 35;
    },
    /*typed_data.Float32x4.wxzy*/get wxzy() {
      return 99;
    },
    /*typed_data.Float32x4.wxzz*/get wxzz() {
      return 163;
    },
    /*typed_data.Float32x4.wxzw*/get wxzw() {
      return 227;
    },
    /*typed_data.Float32x4.wxwx*/get wxwx() {
      return 51;
    },
    /*typed_data.Float32x4.wxwy*/get wxwy() {
      return 115;
    },
    /*typed_data.Float32x4.wxwz*/get wxwz() {
      return 179;
    },
    /*typed_data.Float32x4.wxww*/get wxww() {
      return 243;
    },
    /*typed_data.Float32x4.wyxx*/get wyxx() {
      return 7;
    },
    /*typed_data.Float32x4.wyxy*/get wyxy() {
      return 71;
    },
    /*typed_data.Float32x4.wyxz*/get wyxz() {
      return 135;
    },
    /*typed_data.Float32x4.wyxw*/get wyxw() {
      return 199;
    },
    /*typed_data.Float32x4.wyyx*/get wyyx() {
      return 23;
    },
    /*typed_data.Float32x4.wyyy*/get wyyy() {
      return 87;
    },
    /*typed_data.Float32x4.wyyz*/get wyyz() {
      return 151;
    },
    /*typed_data.Float32x4.wyyw*/get wyyw() {
      return 215;
    },
    /*typed_data.Float32x4.wyzx*/get wyzx() {
      return 39;
    },
    /*typed_data.Float32x4.wyzy*/get wyzy() {
      return 103;
    },
    /*typed_data.Float32x4.wyzz*/get wyzz() {
      return 167;
    },
    /*typed_data.Float32x4.wyzw*/get wyzw() {
      return 231;
    },
    /*typed_data.Float32x4.wywx*/get wywx() {
      return 55;
    },
    /*typed_data.Float32x4.wywy*/get wywy() {
      return 119;
    },
    /*typed_data.Float32x4.wywz*/get wywz() {
      return 183;
    },
    /*typed_data.Float32x4.wyww*/get wyww() {
      return 247;
    },
    /*typed_data.Float32x4.wzxx*/get wzxx() {
      return 11;
    },
    /*typed_data.Float32x4.wzxy*/get wzxy() {
      return 75;
    },
    /*typed_data.Float32x4.wzxz*/get wzxz() {
      return 139;
    },
    /*typed_data.Float32x4.wzxw*/get wzxw() {
      return 203;
    },
    /*typed_data.Float32x4.wzyx*/get wzyx() {
      return 27;
    },
    /*typed_data.Float32x4.wzyy*/get wzyy() {
      return 91;
    },
    /*typed_data.Float32x4.wzyz*/get wzyz() {
      return 155;
    },
    /*typed_data.Float32x4.wzyw*/get wzyw() {
      return 219;
    },
    /*typed_data.Float32x4.wzzx*/get wzzx() {
      return 43;
    },
    /*typed_data.Float32x4.wzzy*/get wzzy() {
      return 107;
    },
    /*typed_data.Float32x4.wzzz*/get wzzz() {
      return 171;
    },
    /*typed_data.Float32x4.wzzw*/get wzzw() {
      return 235;
    },
    /*typed_data.Float32x4.wzwx*/get wzwx() {
      return 59;
    },
    /*typed_data.Float32x4.wzwy*/get wzwy() {
      return 123;
    },
    /*typed_data.Float32x4.wzwz*/get wzwz() {
      return 187;
    },
    /*typed_data.Float32x4.wzww*/get wzww() {
      return 251;
    },
    /*typed_data.Float32x4.wwxx*/get wwxx() {
      return 15;
    },
    /*typed_data.Float32x4.wwxy*/get wwxy() {
      return 79;
    },
    /*typed_data.Float32x4.wwxz*/get wwxz() {
      return 143;
    },
    /*typed_data.Float32x4.wwxw*/get wwxw() {
      return 207;
    },
    /*typed_data.Float32x4.wwyx*/get wwyx() {
      return 31;
    },
    /*typed_data.Float32x4.wwyy*/get wwyy() {
      return 95;
    },
    /*typed_data.Float32x4.wwyz*/get wwyz() {
      return 159;
    },
    /*typed_data.Float32x4.wwyw*/get wwyw() {
      return 223;
    },
    /*typed_data.Float32x4.wwzx*/get wwzx() {
      return 47;
    },
    /*typed_data.Float32x4.wwzy*/get wwzy() {
      return 111;
    },
    /*typed_data.Float32x4.wwzz*/get wwzz() {
      return 175;
    },
    /*typed_data.Float32x4.wwzw*/get wwzw() {
      return 239;
    },
    /*typed_data.Float32x4.wwwx*/get wwwx() {
      return 63;
    },
    /*typed_data.Float32x4.wwwy*/get wwwy() {
      return 127;
    },
    /*typed_data.Float32x4.wwwz*/get wwwz() {
      return 191;
    },
    /*typed_data.Float32x4.wwww*/get wwww() {
      return 255;
    }
  }, false);
  const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
  (Object_ListMixin$36.new = function() {
  }).prototype = Object_ListMixin$36.prototype;
  dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(typed_data.Float32x4));
  const Object_FixedLengthListMixin$36 = class Object_FixedLengthListMixin extends Object_ListMixin$36 {};
  (Object_FixedLengthListMixin$36.new = function() {
  }).prototype = Object_FixedLengthListMixin$36.prototype;
  dart.applyMixin(Object_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(typed_data.Float32x4));
  _native_typed_data.NativeFloat32x4List = class NativeFloat32x4List extends Object_FixedLengthListMixin$36 {
    get runtimeType() {
      return dart.wrapType(typed_data.Float32x4List);
    }
    static fromList(list) {
      if (list == null) dart.nullFailed(I[58], 129, 56, "list");
      if (_native_typed_data.NativeFloat32x4List.is(list)) {
        return new _native_typed_data.NativeFloat32x4List._externalStorage(_native_typed_data.NativeFloat32List.fromList(list[_storage$]));
      } else {
        return new _native_typed_data.NativeFloat32x4List._slowFromList(list);
      }
    }
    get buffer() {
      return this[_storage$][$buffer];
    }
    get lengthInBytes() {
      return this[_storage$][$lengthInBytes];
    }
    get offsetInBytes() {
      return this[_storage$][$offsetInBytes];
    }
    get elementSizeInBytes() {
      return 16;
    }
    get length() {
      return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[58], 148, 29, "index");
      _native_typed_data._checkValidIndex(index, this, this.length);
      let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
      let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
      let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
      let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(I[58], 157, 25, "index");
      typed_data.Float32x4.as(value);
      if (value == null) dart.nullFailed(I[58], 157, 42, "value");
      _native_typed_data._checkValidIndex(index, this, this.length);
      this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
      this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
      this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
      this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
      return value$;
    }
    sublist(start, end = null) {
      if (start == null) dart.nullFailed(I[58], 165, 29, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this.length);
      return new _native_typed_data.NativeFloat32x4List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(stop) * 4));
    }
  };
  (_native_typed_data.NativeFloat32x4List.new = function(length) {
    if (length == null) dart.nullFailed(I[58], 110, 27, "length");
    this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(length) * 4);
    ;
  }).prototype = _native_typed_data.NativeFloat32x4List.prototype;
  (_native_typed_data.NativeFloat32x4List._externalStorage = function(_storage) {
    if (_storage == null) dart.nullFailed(I[58], 112, 45, "_storage");
    this[_storage$] = _storage;
    ;
  }).prototype = _native_typed_data.NativeFloat32x4List.prototype;
  (_native_typed_data.NativeFloat32x4List._slowFromList = function(list) {
    if (list == null) dart.nullFailed(I[58], 114, 53, "list");
    this[_storage$] = _native_typed_data.NativeFloat32List.new(dart.notNull(list[$length]) * 4);
    for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
      let e = list[$_get](i);
      this[_storage$][$_set](i * 4 + 0, e.x);
      this[_storage$][$_set](i * 4 + 1, e.y);
      this[_storage$][$_set](i * 4 + 2, e.z);
      this[_storage$][$_set](i * 4 + 3, e.w);
    }
  }).prototype = _native_typed_data.NativeFloat32x4List.prototype;
  dart.addTypeTests(_native_typed_data.NativeFloat32x4List);
  dart.addTypeCaches(_native_typed_data.NativeFloat32x4List);
  _native_typed_data.NativeFloat32x4List[dart.implements] = () => [typed_data.Float32x4List];
  dart.setMethodSignature(_native_typed_data.NativeFloat32x4List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat32x4List.__proto__),
    _get: dart.fnType(typed_data.Float32x4, [core.int]),
    [$_get]: dart.fnType(typed_data.Float32x4, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    sublist: dart.fnType(typed_data.Float32x4List, [core.int], [dart.nullable(core.int)]),
    [$sublist]: dart.fnType(typed_data.Float32x4List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeFloat32x4List, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4List.__proto__),
    buffer: typed_data.ByteBuffer,
    [$buffer]: typed_data.ByteBuffer,
    lengthInBytes: core.int,
    [$lengthInBytes]: core.int,
    offsetInBytes: core.int,
    [$offsetInBytes]: core.int,
    elementSizeInBytes: core.int,
    [$elementSizeInBytes]: core.int,
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat32x4List, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeFloat32x4List, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeFloat32x4List.__proto__),
    [_storage$]: dart.finalFieldType(typed_data.Float32List)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4List, ['_get', '_set', 'sublist']);
  dart.defineExtensionAccessors(_native_typed_data.NativeFloat32x4List, [
    'runtimeType',
    'buffer',
    'lengthInBytes',
    'offsetInBytes',
    'elementSizeInBytes',
    'length'
  ]);
  typed_data.Int32x4 = class Int32x4 extends core.Object {};
  (typed_data.Int32x4[dart.mixinNew] = function() {
  }).prototype = typed_data.Int32x4.prototype;
  dart.addTypeTests(typed_data.Int32x4);
  dart.addTypeCaches(typed_data.Int32x4);
  dart.setLibraryUri(typed_data.Int32x4, I[60]);
  dart.defineLazy(typed_data.Int32x4, {
    /*typed_data.Int32x4.xxxx*/get xxxx() {
      return 0;
    },
    /*typed_data.Int32x4.xxxy*/get xxxy() {
      return 64;
    },
    /*typed_data.Int32x4.xxxz*/get xxxz() {
      return 128;
    },
    /*typed_data.Int32x4.xxxw*/get xxxw() {
      return 192;
    },
    /*typed_data.Int32x4.xxyx*/get xxyx() {
      return 16;
    },
    /*typed_data.Int32x4.xxyy*/get xxyy() {
      return 80;
    },
    /*typed_data.Int32x4.xxyz*/get xxyz() {
      return 144;
    },
    /*typed_data.Int32x4.xxyw*/get xxyw() {
      return 208;
    },
    /*typed_data.Int32x4.xxzx*/get xxzx() {
      return 32;
    },
    /*typed_data.Int32x4.xxzy*/get xxzy() {
      return 96;
    },
    /*typed_data.Int32x4.xxzz*/get xxzz() {
      return 160;
    },
    /*typed_data.Int32x4.xxzw*/get xxzw() {
      return 224;
    },
    /*typed_data.Int32x4.xxwx*/get xxwx() {
      return 48;
    },
    /*typed_data.Int32x4.xxwy*/get xxwy() {
      return 112;
    },
    /*typed_data.Int32x4.xxwz*/get xxwz() {
      return 176;
    },
    /*typed_data.Int32x4.xxww*/get xxww() {
      return 240;
    },
    /*typed_data.Int32x4.xyxx*/get xyxx() {
      return 4;
    },
    /*typed_data.Int32x4.xyxy*/get xyxy() {
      return 68;
    },
    /*typed_data.Int32x4.xyxz*/get xyxz() {
      return 132;
    },
    /*typed_data.Int32x4.xyxw*/get xyxw() {
      return 196;
    },
    /*typed_data.Int32x4.xyyx*/get xyyx() {
      return 20;
    },
    /*typed_data.Int32x4.xyyy*/get xyyy() {
      return 84;
    },
    /*typed_data.Int32x4.xyyz*/get xyyz() {
      return 148;
    },
    /*typed_data.Int32x4.xyyw*/get xyyw() {
      return 212;
    },
    /*typed_data.Int32x4.xyzx*/get xyzx() {
      return 36;
    },
    /*typed_data.Int32x4.xyzy*/get xyzy() {
      return 100;
    },
    /*typed_data.Int32x4.xyzz*/get xyzz() {
      return 164;
    },
    /*typed_data.Int32x4.xyzw*/get xyzw() {
      return 228;
    },
    /*typed_data.Int32x4.xywx*/get xywx() {
      return 52;
    },
    /*typed_data.Int32x4.xywy*/get xywy() {
      return 116;
    },
    /*typed_data.Int32x4.xywz*/get xywz() {
      return 180;
    },
    /*typed_data.Int32x4.xyww*/get xyww() {
      return 244;
    },
    /*typed_data.Int32x4.xzxx*/get xzxx() {
      return 8;
    },
    /*typed_data.Int32x4.xzxy*/get xzxy() {
      return 72;
    },
    /*typed_data.Int32x4.xzxz*/get xzxz() {
      return 136;
    },
    /*typed_data.Int32x4.xzxw*/get xzxw() {
      return 200;
    },
    /*typed_data.Int32x4.xzyx*/get xzyx() {
      return 24;
    },
    /*typed_data.Int32x4.xzyy*/get xzyy() {
      return 88;
    },
    /*typed_data.Int32x4.xzyz*/get xzyz() {
      return 152;
    },
    /*typed_data.Int32x4.xzyw*/get xzyw() {
      return 216;
    },
    /*typed_data.Int32x4.xzzx*/get xzzx() {
      return 40;
    },
    /*typed_data.Int32x4.xzzy*/get xzzy() {
      return 104;
    },
    /*typed_data.Int32x4.xzzz*/get xzzz() {
      return 168;
    },
    /*typed_data.Int32x4.xzzw*/get xzzw() {
      return 232;
    },
    /*typed_data.Int32x4.xzwx*/get xzwx() {
      return 56;
    },
    /*typed_data.Int32x4.xzwy*/get xzwy() {
      return 120;
    },
    /*typed_data.Int32x4.xzwz*/get xzwz() {
      return 184;
    },
    /*typed_data.Int32x4.xzww*/get xzww() {
      return 248;
    },
    /*typed_data.Int32x4.xwxx*/get xwxx() {
      return 12;
    },
    /*typed_data.Int32x4.xwxy*/get xwxy() {
      return 76;
    },
    /*typed_data.Int32x4.xwxz*/get xwxz() {
      return 140;
    },
    /*typed_data.Int32x4.xwxw*/get xwxw() {
      return 204;
    },
    /*typed_data.Int32x4.xwyx*/get xwyx() {
      return 28;
    },
    /*typed_data.Int32x4.xwyy*/get xwyy() {
      return 92;
    },
    /*typed_data.Int32x4.xwyz*/get xwyz() {
      return 156;
    },
    /*typed_data.Int32x4.xwyw*/get xwyw() {
      return 220;
    },
    /*typed_data.Int32x4.xwzx*/get xwzx() {
      return 44;
    },
    /*typed_data.Int32x4.xwzy*/get xwzy() {
      return 108;
    },
    /*typed_data.Int32x4.xwzz*/get xwzz() {
      return 172;
    },
    /*typed_data.Int32x4.xwzw*/get xwzw() {
      return 236;
    },
    /*typed_data.Int32x4.xwwx*/get xwwx() {
      return 60;
    },
    /*typed_data.Int32x4.xwwy*/get xwwy() {
      return 124;
    },
    /*typed_data.Int32x4.xwwz*/get xwwz() {
      return 188;
    },
    /*typed_data.Int32x4.xwww*/get xwww() {
      return 252;
    },
    /*typed_data.Int32x4.yxxx*/get yxxx() {
      return 1;
    },
    /*typed_data.Int32x4.yxxy*/get yxxy() {
      return 65;
    },
    /*typed_data.Int32x4.yxxz*/get yxxz() {
      return 129;
    },
    /*typed_data.Int32x4.yxxw*/get yxxw() {
      return 193;
    },
    /*typed_data.Int32x4.yxyx*/get yxyx() {
      return 17;
    },
    /*typed_data.Int32x4.yxyy*/get yxyy() {
      return 81;
    },
    /*typed_data.Int32x4.yxyz*/get yxyz() {
      return 145;
    },
    /*typed_data.Int32x4.yxyw*/get yxyw() {
      return 209;
    },
    /*typed_data.Int32x4.yxzx*/get yxzx() {
      return 33;
    },
    /*typed_data.Int32x4.yxzy*/get yxzy() {
      return 97;
    },
    /*typed_data.Int32x4.yxzz*/get yxzz() {
      return 161;
    },
    /*typed_data.Int32x4.yxzw*/get yxzw() {
      return 225;
    },
    /*typed_data.Int32x4.yxwx*/get yxwx() {
      return 49;
    },
    /*typed_data.Int32x4.yxwy*/get yxwy() {
      return 113;
    },
    /*typed_data.Int32x4.yxwz*/get yxwz() {
      return 177;
    },
    /*typed_data.Int32x4.yxww*/get yxww() {
      return 241;
    },
    /*typed_data.Int32x4.yyxx*/get yyxx() {
      return 5;
    },
    /*typed_data.Int32x4.yyxy*/get yyxy() {
      return 69;
    },
    /*typed_data.Int32x4.yyxz*/get yyxz() {
      return 133;
    },
    /*typed_data.Int32x4.yyxw*/get yyxw() {
      return 197;
    },
    /*typed_data.Int32x4.yyyx*/get yyyx() {
      return 21;
    },
    /*typed_data.Int32x4.yyyy*/get yyyy() {
      return 85;
    },
    /*typed_data.Int32x4.yyyz*/get yyyz() {
      return 149;
    },
    /*typed_data.Int32x4.yyyw*/get yyyw() {
      return 213;
    },
    /*typed_data.Int32x4.yyzx*/get yyzx() {
      return 37;
    },
    /*typed_data.Int32x4.yyzy*/get yyzy() {
      return 101;
    },
    /*typed_data.Int32x4.yyzz*/get yyzz() {
      return 165;
    },
    /*typed_data.Int32x4.yyzw*/get yyzw() {
      return 229;
    },
    /*typed_data.Int32x4.yywx*/get yywx() {
      return 53;
    },
    /*typed_data.Int32x4.yywy*/get yywy() {
      return 117;
    },
    /*typed_data.Int32x4.yywz*/get yywz() {
      return 181;
    },
    /*typed_data.Int32x4.yyww*/get yyww() {
      return 245;
    },
    /*typed_data.Int32x4.yzxx*/get yzxx() {
      return 9;
    },
    /*typed_data.Int32x4.yzxy*/get yzxy() {
      return 73;
    },
    /*typed_data.Int32x4.yzxz*/get yzxz() {
      return 137;
    },
    /*typed_data.Int32x4.yzxw*/get yzxw() {
      return 201;
    },
    /*typed_data.Int32x4.yzyx*/get yzyx() {
      return 25;
    },
    /*typed_data.Int32x4.yzyy*/get yzyy() {
      return 89;
    },
    /*typed_data.Int32x4.yzyz*/get yzyz() {
      return 153;
    },
    /*typed_data.Int32x4.yzyw*/get yzyw() {
      return 217;
    },
    /*typed_data.Int32x4.yzzx*/get yzzx() {
      return 41;
    },
    /*typed_data.Int32x4.yzzy*/get yzzy() {
      return 105;
    },
    /*typed_data.Int32x4.yzzz*/get yzzz() {
      return 169;
    },
    /*typed_data.Int32x4.yzzw*/get yzzw() {
      return 233;
    },
    /*typed_data.Int32x4.yzwx*/get yzwx() {
      return 57;
    },
    /*typed_data.Int32x4.yzwy*/get yzwy() {
      return 121;
    },
    /*typed_data.Int32x4.yzwz*/get yzwz() {
      return 185;
    },
    /*typed_data.Int32x4.yzww*/get yzww() {
      return 249;
    },
    /*typed_data.Int32x4.ywxx*/get ywxx() {
      return 13;
    },
    /*typed_data.Int32x4.ywxy*/get ywxy() {
      return 77;
    },
    /*typed_data.Int32x4.ywxz*/get ywxz() {
      return 141;
    },
    /*typed_data.Int32x4.ywxw*/get ywxw() {
      return 205;
    },
    /*typed_data.Int32x4.ywyx*/get ywyx() {
      return 29;
    },
    /*typed_data.Int32x4.ywyy*/get ywyy() {
      return 93;
    },
    /*typed_data.Int32x4.ywyz*/get ywyz() {
      return 157;
    },
    /*typed_data.Int32x4.ywyw*/get ywyw() {
      return 221;
    },
    /*typed_data.Int32x4.ywzx*/get ywzx() {
      return 45;
    },
    /*typed_data.Int32x4.ywzy*/get ywzy() {
      return 109;
    },
    /*typed_data.Int32x4.ywzz*/get ywzz() {
      return 173;
    },
    /*typed_data.Int32x4.ywzw*/get ywzw() {
      return 237;
    },
    /*typed_data.Int32x4.ywwx*/get ywwx() {
      return 61;
    },
    /*typed_data.Int32x4.ywwy*/get ywwy() {
      return 125;
    },
    /*typed_data.Int32x4.ywwz*/get ywwz() {
      return 189;
    },
    /*typed_data.Int32x4.ywww*/get ywww() {
      return 253;
    },
    /*typed_data.Int32x4.zxxx*/get zxxx() {
      return 2;
    },
    /*typed_data.Int32x4.zxxy*/get zxxy() {
      return 66;
    },
    /*typed_data.Int32x4.zxxz*/get zxxz() {
      return 130;
    },
    /*typed_data.Int32x4.zxxw*/get zxxw() {
      return 194;
    },
    /*typed_data.Int32x4.zxyx*/get zxyx() {
      return 18;
    },
    /*typed_data.Int32x4.zxyy*/get zxyy() {
      return 82;
    },
    /*typed_data.Int32x4.zxyz*/get zxyz() {
      return 146;
    },
    /*typed_data.Int32x4.zxyw*/get zxyw() {
      return 210;
    },
    /*typed_data.Int32x4.zxzx*/get zxzx() {
      return 34;
    },
    /*typed_data.Int32x4.zxzy*/get zxzy() {
      return 98;
    },
    /*typed_data.Int32x4.zxzz*/get zxzz() {
      return 162;
    },
    /*typed_data.Int32x4.zxzw*/get zxzw() {
      return 226;
    },
    /*typed_data.Int32x4.zxwx*/get zxwx() {
      return 50;
    },
    /*typed_data.Int32x4.zxwy*/get zxwy() {
      return 114;
    },
    /*typed_data.Int32x4.zxwz*/get zxwz() {
      return 178;
    },
    /*typed_data.Int32x4.zxww*/get zxww() {
      return 242;
    },
    /*typed_data.Int32x4.zyxx*/get zyxx() {
      return 6;
    },
    /*typed_data.Int32x4.zyxy*/get zyxy() {
      return 70;
    },
    /*typed_data.Int32x4.zyxz*/get zyxz() {
      return 134;
    },
    /*typed_data.Int32x4.zyxw*/get zyxw() {
      return 198;
    },
    /*typed_data.Int32x4.zyyx*/get zyyx() {
      return 22;
    },
    /*typed_data.Int32x4.zyyy*/get zyyy() {
      return 86;
    },
    /*typed_data.Int32x4.zyyz*/get zyyz() {
      return 150;
    },
    /*typed_data.Int32x4.zyyw*/get zyyw() {
      return 214;
    },
    /*typed_data.Int32x4.zyzx*/get zyzx() {
      return 38;
    },
    /*typed_data.Int32x4.zyzy*/get zyzy() {
      return 102;
    },
    /*typed_data.Int32x4.zyzz*/get zyzz() {
      return 166;
    },
    /*typed_data.Int32x4.zyzw*/get zyzw() {
      return 230;
    },
    /*typed_data.Int32x4.zywx*/get zywx() {
      return 54;
    },
    /*typed_data.Int32x4.zywy*/get zywy() {
      return 118;
    },
    /*typed_data.Int32x4.zywz*/get zywz() {
      return 182;
    },
    /*typed_data.Int32x4.zyww*/get zyww() {
      return 246;
    },
    /*typed_data.Int32x4.zzxx*/get zzxx() {
      return 10;
    },
    /*typed_data.Int32x4.zzxy*/get zzxy() {
      return 74;
    },
    /*typed_data.Int32x4.zzxz*/get zzxz() {
      return 138;
    },
    /*typed_data.Int32x4.zzxw*/get zzxw() {
      return 202;
    },
    /*typed_data.Int32x4.zzyx*/get zzyx() {
      return 26;
    },
    /*typed_data.Int32x4.zzyy*/get zzyy() {
      return 90;
    },
    /*typed_data.Int32x4.zzyz*/get zzyz() {
      return 154;
    },
    /*typed_data.Int32x4.zzyw*/get zzyw() {
      return 218;
    },
    /*typed_data.Int32x4.zzzx*/get zzzx() {
      return 42;
    },
    /*typed_data.Int32x4.zzzy*/get zzzy() {
      return 106;
    },
    /*typed_data.Int32x4.zzzz*/get zzzz() {
      return 170;
    },
    /*typed_data.Int32x4.zzzw*/get zzzw() {
      return 234;
    },
    /*typed_data.Int32x4.zzwx*/get zzwx() {
      return 58;
    },
    /*typed_data.Int32x4.zzwy*/get zzwy() {
      return 122;
    },
    /*typed_data.Int32x4.zzwz*/get zzwz() {
      return 186;
    },
    /*typed_data.Int32x4.zzww*/get zzww() {
      return 250;
    },
    /*typed_data.Int32x4.zwxx*/get zwxx() {
      return 14;
    },
    /*typed_data.Int32x4.zwxy*/get zwxy() {
      return 78;
    },
    /*typed_data.Int32x4.zwxz*/get zwxz() {
      return 142;
    },
    /*typed_data.Int32x4.zwxw*/get zwxw() {
      return 206;
    },
    /*typed_data.Int32x4.zwyx*/get zwyx() {
      return 30;
    },
    /*typed_data.Int32x4.zwyy*/get zwyy() {
      return 94;
    },
    /*typed_data.Int32x4.zwyz*/get zwyz() {
      return 158;
    },
    /*typed_data.Int32x4.zwyw*/get zwyw() {
      return 222;
    },
    /*typed_data.Int32x4.zwzx*/get zwzx() {
      return 46;
    },
    /*typed_data.Int32x4.zwzy*/get zwzy() {
      return 110;
    },
    /*typed_data.Int32x4.zwzz*/get zwzz() {
      return 174;
    },
    /*typed_data.Int32x4.zwzw*/get zwzw() {
      return 238;
    },
    /*typed_data.Int32x4.zwwx*/get zwwx() {
      return 62;
    },
    /*typed_data.Int32x4.zwwy*/get zwwy() {
      return 126;
    },
    /*typed_data.Int32x4.zwwz*/get zwwz() {
      return 190;
    },
    /*typed_data.Int32x4.zwww*/get zwww() {
      return 254;
    },
    /*typed_data.Int32x4.wxxx*/get wxxx() {
      return 3;
    },
    /*typed_data.Int32x4.wxxy*/get wxxy() {
      return 67;
    },
    /*typed_data.Int32x4.wxxz*/get wxxz() {
      return 131;
    },
    /*typed_data.Int32x4.wxxw*/get wxxw() {
      return 195;
    },
    /*typed_data.Int32x4.wxyx*/get wxyx() {
      return 19;
    },
    /*typed_data.Int32x4.wxyy*/get wxyy() {
      return 83;
    },
    /*typed_data.Int32x4.wxyz*/get wxyz() {
      return 147;
    },
    /*typed_data.Int32x4.wxyw*/get wxyw() {
      return 211;
    },
    /*typed_data.Int32x4.wxzx*/get wxzx() {
      return 35;
    },
    /*typed_data.Int32x4.wxzy*/get wxzy() {
      return 99;
    },
    /*typed_data.Int32x4.wxzz*/get wxzz() {
      return 163;
    },
    /*typed_data.Int32x4.wxzw*/get wxzw() {
      return 227;
    },
    /*typed_data.Int32x4.wxwx*/get wxwx() {
      return 51;
    },
    /*typed_data.Int32x4.wxwy*/get wxwy() {
      return 115;
    },
    /*typed_data.Int32x4.wxwz*/get wxwz() {
      return 179;
    },
    /*typed_data.Int32x4.wxww*/get wxww() {
      return 243;
    },
    /*typed_data.Int32x4.wyxx*/get wyxx() {
      return 7;
    },
    /*typed_data.Int32x4.wyxy*/get wyxy() {
      return 71;
    },
    /*typed_data.Int32x4.wyxz*/get wyxz() {
      return 135;
    },
    /*typed_data.Int32x4.wyxw*/get wyxw() {
      return 199;
    },
    /*typed_data.Int32x4.wyyx*/get wyyx() {
      return 23;
    },
    /*typed_data.Int32x4.wyyy*/get wyyy() {
      return 87;
    },
    /*typed_data.Int32x4.wyyz*/get wyyz() {
      return 151;
    },
    /*typed_data.Int32x4.wyyw*/get wyyw() {
      return 215;
    },
    /*typed_data.Int32x4.wyzx*/get wyzx() {
      return 39;
    },
    /*typed_data.Int32x4.wyzy*/get wyzy() {
      return 103;
    },
    /*typed_data.Int32x4.wyzz*/get wyzz() {
      return 167;
    },
    /*typed_data.Int32x4.wyzw*/get wyzw() {
      return 231;
    },
    /*typed_data.Int32x4.wywx*/get wywx() {
      return 55;
    },
    /*typed_data.Int32x4.wywy*/get wywy() {
      return 119;
    },
    /*typed_data.Int32x4.wywz*/get wywz() {
      return 183;
    },
    /*typed_data.Int32x4.wyww*/get wyww() {
      return 247;
    },
    /*typed_data.Int32x4.wzxx*/get wzxx() {
      return 11;
    },
    /*typed_data.Int32x4.wzxy*/get wzxy() {
      return 75;
    },
    /*typed_data.Int32x4.wzxz*/get wzxz() {
      return 139;
    },
    /*typed_data.Int32x4.wzxw*/get wzxw() {
      return 203;
    },
    /*typed_data.Int32x4.wzyx*/get wzyx() {
      return 27;
    },
    /*typed_data.Int32x4.wzyy*/get wzyy() {
      return 91;
    },
    /*typed_data.Int32x4.wzyz*/get wzyz() {
      return 155;
    },
    /*typed_data.Int32x4.wzyw*/get wzyw() {
      return 219;
    },
    /*typed_data.Int32x4.wzzx*/get wzzx() {
      return 43;
    },
    /*typed_data.Int32x4.wzzy*/get wzzy() {
      return 107;
    },
    /*typed_data.Int32x4.wzzz*/get wzzz() {
      return 171;
    },
    /*typed_data.Int32x4.wzzw*/get wzzw() {
      return 235;
    },
    /*typed_data.Int32x4.wzwx*/get wzwx() {
      return 59;
    },
    /*typed_data.Int32x4.wzwy*/get wzwy() {
      return 123;
    },
    /*typed_data.Int32x4.wzwz*/get wzwz() {
      return 187;
    },
    /*typed_data.Int32x4.wzww*/get wzww() {
      return 251;
    },
    /*typed_data.Int32x4.wwxx*/get wwxx() {
      return 15;
    },
    /*typed_data.Int32x4.wwxy*/get wwxy() {
      return 79;
    },
    /*typed_data.Int32x4.wwxz*/get wwxz() {
      return 143;
    },
    /*typed_data.Int32x4.wwxw*/get wwxw() {
      return 207;
    },
    /*typed_data.Int32x4.wwyx*/get wwyx() {
      return 31;
    },
    /*typed_data.Int32x4.wwyy*/get wwyy() {
      return 95;
    },
    /*typed_data.Int32x4.wwyz*/get wwyz() {
      return 159;
    },
    /*typed_data.Int32x4.wwyw*/get wwyw() {
      return 223;
    },
    /*typed_data.Int32x4.wwzx*/get wwzx() {
      return 47;
    },
    /*typed_data.Int32x4.wwzy*/get wwzy() {
      return 111;
    },
    /*typed_data.Int32x4.wwzz*/get wwzz() {
      return 175;
    },
    /*typed_data.Int32x4.wwzw*/get wwzw() {
      return 239;
    },
    /*typed_data.Int32x4.wwwx*/get wwwx() {
      return 63;
    },
    /*typed_data.Int32x4.wwwy*/get wwwy() {
      return 127;
    },
    /*typed_data.Int32x4.wwwz*/get wwwz() {
      return 191;
    },
    /*typed_data.Int32x4.wwww*/get wwww() {
      return 255;
    }
  }, false);
  const Object_ListMixin$36$ = class Object_ListMixin extends core.Object {};
  (Object_ListMixin$36$.new = function() {
  }).prototype = Object_ListMixin$36$.prototype;
  dart.applyMixin(Object_ListMixin$36$, collection.ListMixin$(typed_data.Int32x4));
  const Object_FixedLengthListMixin$36$ = class Object_FixedLengthListMixin extends Object_ListMixin$36$ {};
  (Object_FixedLengthListMixin$36$.new = function() {
  }).prototype = Object_FixedLengthListMixin$36$.prototype;
  dart.applyMixin(Object_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(typed_data.Int32x4));
  _native_typed_data.NativeInt32x4List = class NativeInt32x4List extends Object_FixedLengthListMixin$36$ {
    get runtimeType() {
      return dart.wrapType(typed_data.Int32x4List);
    }
    static fromList(list) {
      if (list == null) dart.nullFailed(I[58], 201, 52, "list");
      if (_native_typed_data.NativeInt32x4List.is(list)) {
        return new _native_typed_data.NativeInt32x4List._externalStorage(_native_typed_data.NativeInt32List.fromList(list[_storage$]));
      } else {
        return new _native_typed_data.NativeInt32x4List._slowFromList(list);
      }
    }
    get buffer() {
      return this[_storage$][$buffer];
    }
    get lengthInBytes() {
      return this[_storage$][$lengthInBytes];
    }
    get offsetInBytes() {
      return this[_storage$][$offsetInBytes];
    }
    get elementSizeInBytes() {
      return 16;
    }
    get length() {
      return (dart.notNull(this[_storage$][$length]) / 4)[$truncate]();
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[58], 220, 27, "index");
      _native_typed_data._checkValidIndex(index, this, this.length);
      let _x = this[_storage$][$_get](dart.notNull(index) * 4 + 0);
      let _y = this[_storage$][$_get](dart.notNull(index) * 4 + 1);
      let _z = this[_storage$][$_get](dart.notNull(index) * 4 + 2);
      let _w = this[_storage$][$_get](dart.notNull(index) * 4 + 3);
      return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(I[58], 229, 25, "index");
      typed_data.Int32x4.as(value);
      if (value == null) dart.nullFailed(I[58], 229, 40, "value");
      _native_typed_data._checkValidIndex(index, this, this.length);
      this[_storage$][$_set](dart.notNull(index) * 4 + 0, value.x);
      this[_storage$][$_set](dart.notNull(index) * 4 + 1, value.y);
      this[_storage$][$_set](dart.notNull(index) * 4 + 2, value.z);
      this[_storage$][$_set](dart.notNull(index) * 4 + 3, value.w);
      return value$;
    }
    sublist(start, end = null) {
      if (start == null) dart.nullFailed(I[58], 237, 27, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this.length);
      return new _native_typed_data.NativeInt32x4List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 4, dart.notNull(stop) * 4));
    }
  };
  (_native_typed_data.NativeInt32x4List.new = function(length) {
    if (length == null) dart.nullFailed(I[58], 182, 25, "length");
    this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(length) * 4);
    ;
  }).prototype = _native_typed_data.NativeInt32x4List.prototype;
  (_native_typed_data.NativeInt32x4List._externalStorage = function(storage) {
    if (storage == null) dart.nullFailed(I[58], 184, 48, "storage");
    this[_storage$] = storage;
    ;
  }).prototype = _native_typed_data.NativeInt32x4List.prototype;
  (_native_typed_data.NativeInt32x4List._slowFromList = function(list) {
    if (list == null) dart.nullFailed(I[58], 186, 49, "list");
    this[_storage$] = _native_typed_data.NativeInt32List.new(dart.notNull(list[$length]) * 4);
    for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
      let e = list[$_get](i);
      this[_storage$][$_set](i * 4 + 0, e.x);
      this[_storage$][$_set](i * 4 + 1, e.y);
      this[_storage$][$_set](i * 4 + 2, e.z);
      this[_storage$][$_set](i * 4 + 3, e.w);
    }
  }).prototype = _native_typed_data.NativeInt32x4List.prototype;
  dart.addTypeTests(_native_typed_data.NativeInt32x4List);
  dart.addTypeCaches(_native_typed_data.NativeInt32x4List);
  _native_typed_data.NativeInt32x4List[dart.implements] = () => [typed_data.Int32x4List];
  dart.setMethodSignature(_native_typed_data.NativeInt32x4List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeInt32x4List.__proto__),
    _get: dart.fnType(typed_data.Int32x4, [core.int]),
    [$_get]: dart.fnType(typed_data.Int32x4, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    sublist: dart.fnType(typed_data.Int32x4List, [core.int], [dart.nullable(core.int)]),
    [$sublist]: dart.fnType(typed_data.Int32x4List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeInt32x4List, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeInt32x4List.__proto__),
    buffer: typed_data.ByteBuffer,
    [$buffer]: typed_data.ByteBuffer,
    lengthInBytes: core.int,
    [$lengthInBytes]: core.int,
    offsetInBytes: core.int,
    [$offsetInBytes]: core.int,
    elementSizeInBytes: core.int,
    [$elementSizeInBytes]: core.int,
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeInt32x4List, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeInt32x4List, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeInt32x4List.__proto__),
    [_storage$]: dart.finalFieldType(typed_data.Int32List)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeInt32x4List, ['_get', '_set', 'sublist']);
  dart.defineExtensionAccessors(_native_typed_data.NativeInt32x4List, [
    'runtimeType',
    'buffer',
    'lengthInBytes',
    'offsetInBytes',
    'elementSizeInBytes',
    'length'
  ]);
  typed_data.Float64x2 = class Float64x2 extends core.Object {};
  (typed_data.Float64x2[dart.mixinNew] = function() {
  }).prototype = typed_data.Float64x2.prototype;
  dart.addTypeTests(typed_data.Float64x2);
  dart.addTypeCaches(typed_data.Float64x2);
  dart.setLibraryUri(typed_data.Float64x2, I[60]);
  const Object_ListMixin$36$0 = class Object_ListMixin extends core.Object {};
  (Object_ListMixin$36$0.new = function() {
  }).prototype = Object_ListMixin$36$0.prototype;
  dart.applyMixin(Object_ListMixin$36$0, collection.ListMixin$(typed_data.Float64x2));
  const Object_FixedLengthListMixin$36$0 = class Object_FixedLengthListMixin extends Object_ListMixin$36$0 {};
  (Object_FixedLengthListMixin$36$0.new = function() {
  }).prototype = Object_FixedLengthListMixin$36$0.prototype;
  dart.applyMixin(Object_FixedLengthListMixin$36$0, _internal.FixedLengthListMixin$(typed_data.Float64x2));
  _native_typed_data.NativeFloat64x2List = class NativeFloat64x2List extends Object_FixedLengthListMixin$36$0 {
    static fromList(list) {
      if (list == null) dart.nullFailed(I[58], 269, 56, "list");
      if (_native_typed_data.NativeFloat64x2List.is(list)) {
        return new _native_typed_data.NativeFloat64x2List._externalStorage(_native_typed_data.NativeFloat64List.fromList(list[_storage$]));
      } else {
        return new _native_typed_data.NativeFloat64x2List._slowFromList(list);
      }
    }
    get runtimeType() {
      return dart.wrapType(typed_data.Float64x2List);
    }
    get buffer() {
      return this[_storage$][$buffer];
    }
    get lengthInBytes() {
      return this[_storage$][$lengthInBytes];
    }
    get offsetInBytes() {
      return this[_storage$][$offsetInBytes];
    }
    get elementSizeInBytes() {
      return 16;
    }
    get length() {
      return (dart.notNull(this[_storage$][$length]) / 2)[$truncate]();
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[58], 290, 29, "index");
      _native_typed_data._checkValidIndex(index, this, this.length);
      let _x = this[_storage$][$_get](dart.notNull(index) * 2 + 0);
      let _y = this[_storage$][$_get](dart.notNull(index) * 2 + 1);
      return new _native_typed_data.NativeFloat64x2.new(_x, _y);
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(I[58], 297, 25, "index");
      typed_data.Float64x2.as(value);
      if (value == null) dart.nullFailed(I[58], 297, 42, "value");
      _native_typed_data._checkValidIndex(index, this, this.length);
      this[_storage$][$_set](dart.notNull(index) * 2 + 0, value.x);
      this[_storage$][$_set](dart.notNull(index) * 2 + 1, value.y);
      return value$;
    }
    sublist(start, end = null) {
      if (start == null) dart.nullFailed(I[58], 303, 29, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this.length);
      return new _native_typed_data.NativeFloat64x2List._externalStorage(this[_storage$][$sublist](dart.notNull(start) * 2, dart.notNull(stop) * 2));
    }
  };
  (_native_typed_data.NativeFloat64x2List.new = function(length) {
    if (length == null) dart.nullFailed(I[58], 254, 27, "length");
    this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(length) * 2);
    ;
  }).prototype = _native_typed_data.NativeFloat64x2List.prototype;
  (_native_typed_data.NativeFloat64x2List._externalStorage = function(_storage) {
    if (_storage == null) dart.nullFailed(I[58], 256, 45, "_storage");
    this[_storage$] = _storage;
    ;
  }).prototype = _native_typed_data.NativeFloat64x2List.prototype;
  (_native_typed_data.NativeFloat64x2List._slowFromList = function(list) {
    if (list == null) dart.nullFailed(I[58], 258, 53, "list");
    this[_storage$] = _native_typed_data.NativeFloat64List.new(dart.notNull(list[$length]) * 2);
    for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
      let e = list[$_get](i);
      this[_storage$][$_set](i * 2 + 0, e.x);
      this[_storage$][$_set](i * 2 + 1, e.y);
    }
  }).prototype = _native_typed_data.NativeFloat64x2List.prototype;
  dart.addTypeTests(_native_typed_data.NativeFloat64x2List);
  dart.addTypeCaches(_native_typed_data.NativeFloat64x2List);
  _native_typed_data.NativeFloat64x2List[dart.implements] = () => [typed_data.Float64x2List];
  dart.setMethodSignature(_native_typed_data.NativeFloat64x2List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat64x2List.__proto__),
    _get: dart.fnType(typed_data.Float64x2, [core.int]),
    [$_get]: dart.fnType(typed_data.Float64x2, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    sublist: dart.fnType(typed_data.Float64x2List, [core.int], [dart.nullable(core.int)]),
    [$sublist]: dart.fnType(typed_data.Float64x2List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeFloat64x2List, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2List.__proto__),
    buffer: typed_data.ByteBuffer,
    [$buffer]: typed_data.ByteBuffer,
    lengthInBytes: core.int,
    [$lengthInBytes]: core.int,
    offsetInBytes: core.int,
    [$offsetInBytes]: core.int,
    elementSizeInBytes: core.int,
    [$elementSizeInBytes]: core.int,
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat64x2List, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeFloat64x2List, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeFloat64x2List.__proto__),
    [_storage$]: dart.finalFieldType(typed_data.Float64List)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2List, ['_get', '_set', 'sublist']);
  dart.defineExtensionAccessors(_native_typed_data.NativeFloat64x2List, [
    'runtimeType',
    'buffer',
    'lengthInBytes',
    'offsetInBytes',
    'elementSizeInBytes',
    'length'
  ]);
  var _invalidPosition = dart.privateName(_native_typed_data, "_invalidPosition");
  var _checkPosition = dart.privateName(_native_typed_data, "_checkPosition");
  _native_typed_data.NativeTypedData = class NativeTypedData extends core.Object {
    get [$buffer]() {
      return this.buffer;
    }
    get [$lengthInBytes]() {
      return this.byteLength;
    }
    get [$offsetInBytes]() {
      return this.byteOffset;
    }
    get [$elementSizeInBytes]() {
      return this.BYTES_PER_ELEMENT;
    }
    [_invalidPosition](position, length, name) {
      if (position == null) dart.nullFailed(I[58], 330, 29, "position");
      if (length == null) dart.nullFailed(I[58], 330, 43, "length");
      if (name == null) dart.nullFailed(I[58], 330, 58, "name");
      if (!core.int.is(position)) {
        dart.throw(new core.ArgumentError.value(position, name, "Invalid list position"));
      } else {
        dart.throw(new core.RangeError.range(position, 0, length, name));
      }
    }
    [_checkPosition](position, length, name) {
      if (position == null) dart.nullFailed(I[58], 338, 27, "position");
      if (length == null) dart.nullFailed(I[58], 338, 41, "length");
      if (name == null) dart.nullFailed(I[58], 338, 56, "name");
      if (position >>> 0 !== position || position > dart.notNull(length)) {
        this[_invalidPosition](position, length, name);
      }
    }
  };
  (_native_typed_data.NativeTypedData.new = function() {
    ;
  }).prototype = _native_typed_data.NativeTypedData.prototype;
  dart.addTypeTests(_native_typed_data.NativeTypedData);
  dart.addTypeCaches(_native_typed_data.NativeTypedData);
  _native_typed_data.NativeTypedData[dart.implements] = () => [typed_data.TypedData];
  dart.setMethodSignature(_native_typed_data.NativeTypedData, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeTypedData.__proto__),
    [_invalidPosition]: dart.fnType(dart.void, [core.int, core.int, core.String]),
    [_checkPosition]: dart.fnType(dart.void, [core.int, core.int, core.String])
  }));
  dart.setGetterSignature(_native_typed_data.NativeTypedData, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeTypedData.__proto__),
    [$buffer]: typed_data.ByteBuffer,
    [$lengthInBytes]: core.int,
    [$offsetInBytes]: core.int,
    [$elementSizeInBytes]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeTypedData, I[59]);
  dart.registerExtension("ArrayBufferView", _native_typed_data.NativeTypedData);
  var Endian__littleEndian = dart.privateName(typed_data, "Endian._littleEndian");
  var _getFloat32 = dart.privateName(_native_typed_data, "_getFloat32");
  var _getFloat64 = dart.privateName(_native_typed_data, "_getFloat64");
  var _getInt16 = dart.privateName(_native_typed_data, "_getInt16");
  var _getInt32 = dart.privateName(_native_typed_data, "_getInt32");
  var _getUint16 = dart.privateName(_native_typed_data, "_getUint16");
  var _getUint32 = dart.privateName(_native_typed_data, "_getUint32");
  var _setFloat32 = dart.privateName(_native_typed_data, "_setFloat32");
  var _setFloat64 = dart.privateName(_native_typed_data, "_setFloat64");
  var _setInt16 = dart.privateName(_native_typed_data, "_setInt16");
  var _setInt32 = dart.privateName(_native_typed_data, "_setInt32");
  var _setUint16 = dart.privateName(_native_typed_data, "_setUint16");
  var _setUint32 = dart.privateName(_native_typed_data, "_setUint32");
  _native_typed_data.NativeByteData = class NativeByteData extends _native_typed_data.NativeTypedData {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 386, 30, "length");
      return _native_typed_data.NativeByteData._create1(_native_typed_data._checkLength(length));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 399, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 399, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeByteData._create2(buffer, offsetInBytes) : _native_typed_data.NativeByteData._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.ByteData);
    }
    get [$elementSizeInBytes]() {
      return 1;
    }
    [$getFloat32](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 416, 25, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 416, 45, "endian");
      return this[_getFloat32](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getFloat32](...args) {
      return this.getFloat32.apply(this, args);
    }
    [$getFloat64](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 429, 25, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 429, 45, "endian");
      return this[_getFloat64](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getFloat64](...args) {
      return this.getFloat64.apply(this, args);
    }
    [$getInt16](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 444, 20, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 444, 40, "endian");
      return this[_getInt16](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getInt16](...args) {
      return this.getInt16.apply(this, args);
    }
    [$getInt32](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 459, 20, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 459, 40, "endian");
      return this[_getInt32](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getInt32](...args) {
      return this.getInt32.apply(this, args);
    }
    [$getInt64](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 474, 20, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 474, 40, "endian");
      dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
    }
    [$getInt8](...args) {
      return this.getInt8.apply(this, args);
    }
    [$getUint16](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 493, 21, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 493, 41, "endian");
      return this[_getUint16](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getUint16](...args) {
      return this.getUint16.apply(this, args);
    }
    [$getUint32](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 507, 21, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 507, 41, "endian");
      return this[_getUint32](byteOffset, dart.equals(typed_data.Endian.little, endian));
    }
    [_getUint32](...args) {
      return this.getUint32.apply(this, args);
    }
    [$getUint64](byteOffset, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 521, 21, "byteOffset");
      if (endian == null) dart.nullFailed(I[58], 521, 41, "endian");
      dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
    }
    [$getUint8](...args) {
      return this.getUint8.apply(this, args);
    }
    [$setFloat32](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 548, 23, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 548, 39, "value");
      if (endian == null) dart.nullFailed(I[58], 548, 54, "endian");
      return this[_setFloat32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setFloat32](...args) {
      return this.setFloat32.apply(this, args);
    }
    [$setFloat64](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 560, 23, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 560, 39, "value");
      if (endian == null) dart.nullFailed(I[58], 560, 54, "endian");
      return this[_setFloat64](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setFloat64](...args) {
      return this.setFloat64.apply(this, args);
    }
    [$setInt16](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 573, 21, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 573, 37, "value");
      if (endian == null) dart.nullFailed(I[58], 573, 52, "endian");
      return this[_setInt16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setInt16](...args) {
      return this.setInt16.apply(this, args);
    }
    [$setInt32](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 586, 21, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 586, 37, "value");
      if (endian == null) dart.nullFailed(I[58], 586, 52, "endian");
      return this[_setInt32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setInt32](...args) {
      return this.setInt32.apply(this, args);
    }
    [$setInt64](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 599, 21, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 599, 37, "value");
      if (endian == null) dart.nullFailed(I[58], 599, 52, "endian");
      dart.throw(new core.UnsupportedError.new("Int64 accessor not supported by dart2js."));
    }
    [$setInt8](...args) {
      return this.setInt8.apply(this, args);
    }
    [$setUint16](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 619, 22, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 619, 38, "value");
      if (endian == null) dart.nullFailed(I[58], 619, 53, "endian");
      return this[_setUint16](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setUint16](...args) {
      return this.setUint16.apply(this, args);
    }
    [$setUint32](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 632, 22, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 632, 38, "value");
      if (endian == null) dart.nullFailed(I[58], 632, 53, "endian");
      return this[_setUint32](byteOffset, value, dart.equals(typed_data.Endian.little, endian));
    }
    [_setUint32](...args) {
      return this.setUint32.apply(this, args);
    }
    [$setUint64](byteOffset, value, endian = C[36] || CT.C36) {
      if (byteOffset == null) dart.nullFailed(I[58], 645, 22, "byteOffset");
      if (value == null) dart.nullFailed(I[58], 645, 38, "value");
      if (endian == null) dart.nullFailed(I[58], 645, 53, "endian");
      dart.throw(new core.UnsupportedError.new("Uint64 accessor not supported by dart2js."));
    }
    [$setUint8](...args) {
      return this.setUint8.apply(this, args);
    }
    static _create1(arg) {
      return new DataView(new ArrayBuffer(arg));
    }
    static _create2(arg1, arg2) {
      return new DataView(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new DataView(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeByteData);
  dart.addTypeCaches(_native_typed_data.NativeByteData);
  _native_typed_data.NativeByteData[dart.implements] = () => [typed_data.ByteData];
  dart.setMethodSignature(_native_typed_data.NativeByteData, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeByteData.__proto__),
    [$getFloat32]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
    [_getFloat32]: dart.fnType(core.double, [core.int], [dart.nullable(core.bool)]),
    [$getFloat64]: dart.fnType(core.double, [core.int], [typed_data.Endian]),
    [_getFloat64]: dart.fnType(core.double, [core.int], [dart.nullable(core.bool)]),
    [$getInt16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [_getInt16]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
    [$getInt32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [_getInt32]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
    [$getInt64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [$getInt8]: dart.fnType(core.int, [core.int]),
    [$getUint16]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [_getUint16]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
    [$getUint32]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [_getUint32]: dart.fnType(core.int, [core.int], [dart.nullable(core.bool)]),
    [$getUint64]: dart.fnType(core.int, [core.int], [typed_data.Endian]),
    [$getUint8]: dart.fnType(core.int, [core.int]),
    [$setFloat32]: dart.fnType(dart.void, [core.int, core.num], [typed_data.Endian]),
    [_setFloat32]: dart.fnType(dart.void, [core.int, core.num], [dart.nullable(core.bool)]),
    [$setFloat64]: dart.fnType(dart.void, [core.int, core.num], [typed_data.Endian]),
    [_setFloat64]: dart.fnType(dart.void, [core.int, core.num], [dart.nullable(core.bool)]),
    [$setInt16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [_setInt16]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
    [$setInt32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [_setInt32]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
    [$setInt64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [$setInt8]: dart.fnType(dart.void, [core.int, core.int]),
    [$setUint16]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [_setUint16]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
    [$setUint32]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [_setUint32]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.bool)]),
    [$setUint64]: dart.fnType(dart.void, [core.int, core.int], [typed_data.Endian]),
    [$setUint8]: dart.fnType(dart.void, [core.int, core.int])
  }));
  dart.setLibraryUri(_native_typed_data.NativeByteData, I[59]);
  dart.registerExtension("DataView", _native_typed_data.NativeByteData);
  var _setRangeFast = dart.privateName(_native_typed_data, "_setRangeFast");
  const _is_NativeTypedArray_default = Symbol('_is_NativeTypedArray_default');
  _native_typed_data.NativeTypedArray$ = dart.generic(E => {
    class NativeTypedArray extends _native_typed_data.NativeTypedData {
      [_setRangeFast](start, end, source, skipCount) {
        if (start == null) dart.nullFailed(I[58], 673, 11, "start");
        if (end == null) dart.nullFailed(I[58], 673, 22, "end");
        if (source == null) dart.nullFailed(I[58], 673, 44, "source");
        if (skipCount == null) dart.nullFailed(I[58], 673, 56, "skipCount");
        let targetLength = this[$length];
        this[_checkPosition](start, targetLength, "start");
        this[_checkPosition](end, targetLength, "end");
        if (dart.notNull(start) > dart.notNull(end)) dart.throw(new core.RangeError.range(start, 0, end));
        let count = dart.notNull(end) - dart.notNull(start);
        if (dart.notNull(skipCount) < 0) dart.throw(new core.ArgumentError.new(skipCount));
        let sourceLength = source[$length];
        if (dart.notNull(sourceLength) - dart.notNull(skipCount) < count) {
          dart.throw(new core.StateError.new("Not enough elements"));
        }
        if (skipCount !== 0 || sourceLength !== count) {
          source = source.subarray(skipCount, dart.notNull(skipCount) + count);
        }
        this.set(source, start);
      }
    }
    (NativeTypedArray.new = function() {
      ;
    }).prototype = NativeTypedArray.prototype;
    dart.addTypeTests(NativeTypedArray);
    NativeTypedArray.prototype[_is_NativeTypedArray_default] = true;
    dart.addTypeCaches(NativeTypedArray);
    NativeTypedArray[dart.implements] = () => [_js_helper.JavaScriptIndexingBehavior$(E)];
    dart.setMethodSignature(NativeTypedArray, () => ({
      __proto__: dart.getMethods(NativeTypedArray.__proto__),
      [_setRangeFast]: dart.fnType(dart.void, [core.int, core.int, _native_typed_data.NativeTypedArray, core.int])
    }));
    dart.setLibraryUri(NativeTypedArray, I[59]);
    return NativeTypedArray;
  });
  _native_typed_data.NativeTypedArray = _native_typed_data.NativeTypedArray$();
  dart.addTypeTests(_native_typed_data.NativeTypedArray, _is_NativeTypedArray_default);
  core.double = class double extends core.num {
    static is(o) {
      return typeof o == "number";
    }
    static as(o) {
      if (typeof o == "number") return o;
      return dart.as(o, core.double);
    }
    static parse(source, onError = null) {
      if (source == null) dart.nullFailed(I[7], 211, 30, "source");
      let value = core.double.tryParse(source);
      if (value != null) return value;
      if (onError != null) return onError(source);
      dart.throw(new core.FormatException.new("Invalid double", source));
    }
    static tryParse(source) {
      if (source == null) dart.nullFailed(I[7], 220, 34, "source");
      return _js_helper.Primitives.parseDouble(source);
    }
  };
  (core.double.new = function() {
    ;
  }).prototype = core.double.prototype;
  dart.addTypeCaches(core.double);
  dart.setLibraryUri(core.double, I[8]);
  dart.defineLazy(core.double, {
    /*core.double.nan*/get nan() {
      return 0 / 0;
    },
    /*core.double.infinity*/get infinity() {
      return 1 / 0;
    },
    /*core.double.negativeInfinity*/get negativeInfinity() {
      return -1 / 0;
    },
    /*core.double.minPositive*/get minPositive() {
      return 5e-324;
    },
    /*core.double.maxFinite*/get maxFinite() {
      return 1.7976931348623157e+308;
    }
  }, false);
  const NativeTypedArray_ListMixin$36 = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray$(core.double) {};
  (NativeTypedArray_ListMixin$36.new = function() {
  }).prototype = NativeTypedArray_ListMixin$36.prototype;
  dart.applyMixin(NativeTypedArray_ListMixin$36, collection.ListMixin$(core.double));
  const NativeTypedArray_FixedLengthListMixin$36 = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36 {};
  (NativeTypedArray_FixedLengthListMixin$36.new = function() {
  }).prototype = NativeTypedArray_FixedLengthListMixin$36.prototype;
  dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36, _internal.FixedLengthListMixin$(core.double));
  _native_typed_data.NativeTypedArrayOfDouble = class NativeTypedArrayOfDouble extends NativeTypedArray_FixedLengthListMixin$36 {
    get length() {
      return this.length;
    }
    set length(value) {
      super.length = value;
    }
    _get(index) {
      if (index == null) dart.nullFailed(I[58], 699, 26, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(I[58], 704, 25, "index");
      core.num.as(value);
      if (value == null) dart.nullFailed(I[58], 704, 36, "value");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      this[index] = value;
      return value$;
    }
    setRange(start, end, iterable, skipCount = 0) {
      if (start == null) dart.nullFailed(I[58], 709, 21, "start");
      if (end == null) dart.nullFailed(I[58], 709, 32, "end");
      T$.IterableOfdouble().as(iterable);
      if (iterable == null) dart.nullFailed(I[58], 709, 54, "iterable");
      if (skipCount == null) dart.nullFailed(I[58], 710, 12, "skipCount");
      if (_native_typed_data.NativeTypedArrayOfDouble.is(iterable)) {
        this[_setRangeFast](start, end, iterable, skipCount);
        return;
      }
      super[$setRange](start, end, iterable, skipCount);
    }
  };
  (_native_typed_data.NativeTypedArrayOfDouble.new = function() {
    ;
  }).prototype = _native_typed_data.NativeTypedArrayOfDouble.prototype;
  dart.addTypeTests(_native_typed_data.NativeTypedArrayOfDouble);
  dart.addTypeCaches(_native_typed_data.NativeTypedArrayOfDouble);
  dart.setMethodSignature(_native_typed_data.NativeTypedArrayOfDouble, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeTypedArrayOfDouble.__proto__),
    _get: dart.fnType(core.double, [core.int]),
    [$_get]: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfDouble, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfDouble.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfDouble, I[59]);
  dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfDouble, ['_get', '_set', 'setRange']);
  dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfDouble, ['length']);
  const NativeTypedArray_ListMixin$36$ = class NativeTypedArray_ListMixin extends _native_typed_data.NativeTypedArray$(core.int) {};
  (NativeTypedArray_ListMixin$36$.new = function() {
  }).prototype = NativeTypedArray_ListMixin$36$.prototype;
  dart.applyMixin(NativeTypedArray_ListMixin$36$, collection.ListMixin$(core.int));
  const NativeTypedArray_FixedLengthListMixin$36$ = class NativeTypedArray_FixedLengthListMixin extends NativeTypedArray_ListMixin$36$ {};
  (NativeTypedArray_FixedLengthListMixin$36$.new = function() {
  }).prototype = NativeTypedArray_FixedLengthListMixin$36$.prototype;
  dart.applyMixin(NativeTypedArray_FixedLengthListMixin$36$, _internal.FixedLengthListMixin$(core.int));
  _native_typed_data.NativeTypedArrayOfInt = class NativeTypedArrayOfInt extends NativeTypedArray_FixedLengthListMixin$36$ {
    get length() {
      return this.length;
    }
    set length(value) {
      super.length = value;
    }
    _set(index, value$) {
      let value = value$;
      if (index == null) dart.nullFailed(I[58], 727, 25, "index");
      core.int.as(value);
      if (value == null) dart.nullFailed(I[58], 727, 36, "value");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      this[index] = value;
      return value$;
    }
    setRange(start, end, iterable, skipCount = 0) {
      if (start == null) dart.nullFailed(I[58], 732, 21, "start");
      if (end == null) dart.nullFailed(I[58], 732, 32, "end");
      T$.IterableOfint().as(iterable);
      if (iterable == null) dart.nullFailed(I[58], 732, 51, "iterable");
      if (skipCount == null) dart.nullFailed(I[58], 733, 12, "skipCount");
      if (_native_typed_data.NativeTypedArrayOfInt.is(iterable)) {
        this[_setRangeFast](start, end, iterable, skipCount);
        return;
      }
      super[$setRange](start, end, iterable, skipCount);
    }
  };
  (_native_typed_data.NativeTypedArrayOfInt.new = function() {
    ;
  }).prototype = _native_typed_data.NativeTypedArrayOfInt.prototype;
  _native_typed_data.NativeTypedArrayOfInt.prototype[dart.isList] = true;
  dart.addTypeTests(_native_typed_data.NativeTypedArrayOfInt);
  dart.addTypeCaches(_native_typed_data.NativeTypedArrayOfInt);
  _native_typed_data.NativeTypedArrayOfInt[dart.implements] = () => [core.List$(core.int)];
  dart.setMethodSignature(_native_typed_data.NativeTypedArrayOfInt, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeTypedArrayOfInt.__proto__),
    _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(_native_typed_data.NativeTypedArrayOfInt, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeTypedArrayOfInt.__proto__),
    length: core.int,
    [$length]: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeTypedArrayOfInt, I[59]);
  dart.defineExtensionMethods(_native_typed_data.NativeTypedArrayOfInt, ['_set', 'setRange']);
  dart.defineExtensionAccessors(_native_typed_data.NativeTypedArrayOfInt, ['length']);
  _native_typed_data.NativeFloat32List = class NativeFloat32List extends _native_typed_data.NativeTypedArrayOfDouble {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 745, 33, "length");
      return _native_typed_data.NativeFloat32List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 747, 51, "elements");
      return _native_typed_data.NativeFloat32List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 751, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 751, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeFloat32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat32List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Float32List);
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 760, 27, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeFloat32List._create1(source);
    }
    static _create1(arg) {
      return new Float32Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Float32Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Float32Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeFloat32List);
  dart.addTypeCaches(_native_typed_data.NativeFloat32List);
  _native_typed_data.NativeFloat32List[dart.implements] = () => [typed_data.Float32List];
  dart.setMethodSignature(_native_typed_data.NativeFloat32List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat32List.__proto__),
    [$sublist]: dart.fnType(typed_data.Float32List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat32List, I[59]);
  dart.registerExtension("Float32Array", _native_typed_data.NativeFloat32List);
  _native_typed_data.NativeFloat64List = class NativeFloat64List extends _native_typed_data.NativeTypedArrayOfDouble {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 780, 33, "length");
      return _native_typed_data.NativeFloat64List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 782, 51, "elements");
      return _native_typed_data.NativeFloat64List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 786, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 786, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeFloat64List._create2(buffer, offsetInBytes) : _native_typed_data.NativeFloat64List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Float64List);
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 795, 27, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeFloat64List._create1(source);
    }
    static _create1(arg) {
      return new Float64Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Float64Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Float64Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeFloat64List);
  dart.addTypeCaches(_native_typed_data.NativeFloat64List);
  _native_typed_data.NativeFloat64List[dart.implements] = () => [typed_data.Float64List];
  dart.setMethodSignature(_native_typed_data.NativeFloat64List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat64List.__proto__),
    [$sublist]: dart.fnType(typed_data.Float64List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat64List, I[59]);
  dart.registerExtension("Float64Array", _native_typed_data.NativeFloat64List);
  _native_typed_data.NativeInt16List = class NativeInt16List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 813, 31, "length");
      return _native_typed_data.NativeInt16List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 815, 46, "elements");
      return _native_typed_data.NativeInt16List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 819, 24, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 819, 36, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeInt16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt16List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Int16List);
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 828, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 833, 25, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeInt16List._create1(source);
    }
    static _create1(arg) {
      return new Int16Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Int16Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Int16Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeInt16List);
  dart.addTypeCaches(_native_typed_data.NativeInt16List);
  _native_typed_data.NativeInt16List[dart.implements] = () => [typed_data.Int16List];
  dart.setMethodSignature(_native_typed_data.NativeInt16List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeInt16List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Int16List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeInt16List, I[59]);
  dart.registerExtension("Int16Array", _native_typed_data.NativeInt16List);
  _native_typed_data.NativeInt32List = class NativeInt32List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 851, 31, "length");
      return _native_typed_data.NativeInt32List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 853, 46, "elements");
      return _native_typed_data.NativeInt32List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 857, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 857, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeInt32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt32List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Int32List);
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 866, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 871, 25, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeInt32List._create1(source);
    }
    static _create1(arg) {
      return new Int32Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Int32Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Int32Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeInt32List);
  dart.addTypeCaches(_native_typed_data.NativeInt32List);
  _native_typed_data.NativeInt32List[dart.implements] = () => [typed_data.Int32List];
  dart.setMethodSignature(_native_typed_data.NativeInt32List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeInt32List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Int32List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeInt32List, I[59]);
  dart.registerExtension("Int32Array", _native_typed_data.NativeInt32List);
  _native_typed_data.NativeInt8List = class NativeInt8List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 890, 30, "length");
      return _native_typed_data.NativeInt8List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 892, 45, "elements");
      return _native_typed_data.NativeInt8List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 896, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 896, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeInt8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeInt8List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Int8List);
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 905, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 910, 24, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeInt8List._create1(source);
    }
    static _create1(arg) {
      return new Int8Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Int8Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Int8Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeInt8List);
  dart.addTypeCaches(_native_typed_data.NativeInt8List);
  _native_typed_data.NativeInt8List[dart.implements] = () => [typed_data.Int8List];
  dart.setMethodSignature(_native_typed_data.NativeInt8List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeInt8List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Int8List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeInt8List, I[59]);
  dart.registerExtension("Int8Array", _native_typed_data.NativeInt8List);
  _native_typed_data.NativeUint16List = class NativeUint16List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 928, 32, "length");
      return _native_typed_data.NativeUint16List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(list) {
      if (list == null) dart.nullFailed(I[58], 930, 47, "list");
      return _native_typed_data.NativeUint16List._create1(_native_typed_data._ensureNativeList(list));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 934, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 934, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeUint16List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint16List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Uint16List);
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 943, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 948, 26, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeUint16List._create1(source);
    }
    static _create1(arg) {
      return new Uint16Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Uint16Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Uint16Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeUint16List);
  dart.addTypeCaches(_native_typed_data.NativeUint16List);
  _native_typed_data.NativeUint16List[dart.implements] = () => [typed_data.Uint16List];
  dart.setMethodSignature(_native_typed_data.NativeUint16List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeUint16List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Uint16List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeUint16List, I[59]);
  dart.registerExtension("Uint16Array", _native_typed_data.NativeUint16List);
  _native_typed_data.NativeUint32List = class NativeUint32List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 967, 32, "length");
      return _native_typed_data.NativeUint32List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 969, 47, "elements");
      return _native_typed_data.NativeUint32List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 973, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 973, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeUint32List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint32List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Uint32List);
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 982, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 987, 26, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeUint32List._create1(source);
    }
    static _create1(arg) {
      return new Uint32Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Uint32Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Uint32Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeUint32List);
  dart.addTypeCaches(_native_typed_data.NativeUint32List);
  _native_typed_data.NativeUint32List[dart.implements] = () => [typed_data.Uint32List];
  dart.setMethodSignature(_native_typed_data.NativeUint32List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeUint32List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Uint32List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeUint32List, I[59]);
  dart.registerExtension("Uint32Array", _native_typed_data.NativeUint32List);
  _native_typed_data.NativeUint8ClampedList = class NativeUint8ClampedList extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 1007, 38, "length");
      return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 1009, 53, "elements");
      return _native_typed_data.NativeUint8ClampedList._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 1013, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 1013, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeUint8ClampedList._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8ClampedList._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Uint8ClampedList);
    }
    get [$length]() {
      return this.length;
    }
    set [$length](value) {
      super[$length] = value;
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 1024, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 1029, 32, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeUint8ClampedList._create1(source);
    }
    static _create1(arg) {
      return new Uint8ClampedArray(arg);
    }
    static _create2(arg1, arg2) {
      return new Uint8ClampedArray(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Uint8ClampedArray(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeUint8ClampedList);
  dart.addTypeCaches(_native_typed_data.NativeUint8ClampedList);
  _native_typed_data.NativeUint8ClampedList[dart.implements] = () => [typed_data.Uint8ClampedList];
  dart.setMethodSignature(_native_typed_data.NativeUint8ClampedList, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeUint8ClampedList.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Uint8ClampedList, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeUint8ClampedList, I[59]);
  dart.registerExtension("Uint8ClampedArray", _native_typed_data.NativeUint8ClampedList);
  dart.registerExtension("CanvasPixelArray", _native_typed_data.NativeUint8ClampedList);
  _native_typed_data.NativeUint8List = class NativeUint8List extends _native_typed_data.NativeTypedArrayOfInt {
    static new(length) {
      if (length == null) dart.nullFailed(I[58], 1057, 31, "length");
      return _native_typed_data.NativeUint8List._create1(_native_typed_data._checkLength(length));
    }
    static fromList(elements) {
      if (elements == null) dart.nullFailed(I[58], 1059, 46, "elements");
      return _native_typed_data.NativeUint8List._create1(_native_typed_data._ensureNativeList(elements));
    }
    static view(buffer, offsetInBytes, length) {
      if (buffer == null) dart.nullFailed(I[58], 1063, 18, "buffer");
      if (offsetInBytes == null) dart.nullFailed(I[58], 1063, 30, "offsetInBytes");
      _native_typed_data._checkViewArguments(buffer, offsetInBytes, length);
      return length == null ? _native_typed_data.NativeUint8List._create2(buffer, offsetInBytes) : _native_typed_data.NativeUint8List._create3(buffer, offsetInBytes, length);
    }
    get [$runtimeType]() {
      return dart.wrapType(typed_data.Uint8List);
    }
    get [$length]() {
      return this.length;
    }
    set [$length](value) {
      super[$length] = value;
    }
    [$_get](index) {
      if (index == null) dart.nullFailed(I[58], 1074, 23, "index");
      _native_typed_data._checkValidIndex(index, this, this[$length]);
      return this[index];
    }
    [$sublist](start, end = null) {
      if (start == null) dart.nullFailed(I[58], 1079, 25, "start");
      let stop = _native_typed_data._checkValidRange(start, end, this[$length]);
      let source = this.subarray(start, stop);
      return _native_typed_data.NativeUint8List._create1(source);
    }
    static _create1(arg) {
      return new Uint8Array(arg);
    }
    static _create2(arg1, arg2) {
      return new Uint8Array(arg1, arg2);
    }
    static _create3(arg1, arg2, arg3) {
      return new Uint8Array(arg1, arg2, arg3);
    }
  };
  dart.addTypeTests(_native_typed_data.NativeUint8List);
  dart.addTypeCaches(_native_typed_data.NativeUint8List);
  _native_typed_data.NativeUint8List[dart.implements] = () => [typed_data.Uint8List];
  dart.setMethodSignature(_native_typed_data.NativeUint8List, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeUint8List.__proto__),
    [$_get]: dart.fnType(core.int, [core.int]),
    [$sublist]: dart.fnType(typed_data.Uint8List, [core.int], [dart.nullable(core.int)])
  }));
  dart.setLibraryUri(_native_typed_data.NativeUint8List, I[59]);
  dart.registerExtension("Uint8Array", _native_typed_data.NativeUint8List);
  var x$ = dart.privateName(_native_typed_data, "NativeFloat32x4.x");
  var y$ = dart.privateName(_native_typed_data, "NativeFloat32x4.y");
  var z$ = dart.privateName(_native_typed_data, "NativeFloat32x4.z");
  var w$ = dart.privateName(_native_typed_data, "NativeFloat32x4.w");
  _native_typed_data.NativeFloat32x4 = class NativeFloat32x4 extends core.Object {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    get z() {
      return this[z$];
    }
    set z(value) {
      super.z = value;
    }
    get w() {
      return this[w$];
    }
    set w(value) {
      super.w = value;
    }
    static _truncate(x) {
      _native_typed_data.NativeFloat32x4._list[$_set](0, core.num.as(x));
      return _native_typed_data.NativeFloat32x4._list[$_get](0);
    }
    static fromInt32x4Bits(i) {
      if (i == null) dart.nullFailed(I[58], 1130, 51, "i");
      _native_typed_data.NativeFloat32x4._uint32view[$_set](0, i.x);
      _native_typed_data.NativeFloat32x4._uint32view[$_set](1, i.y);
      _native_typed_data.NativeFloat32x4._uint32view[$_set](2, i.z);
      _native_typed_data.NativeFloat32x4._uint32view[$_set](3, i.w);
      return new _native_typed_data.NativeFloat32x4._truncated(_native_typed_data.NativeFloat32x4._list[$_get](0), _native_typed_data.NativeFloat32x4._list[$_get](1), _native_typed_data.NativeFloat32x4._list[$_get](2), _native_typed_data.NativeFloat32x4._list[$_get](3));
    }
    toString() {
      return "[" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ", " + dart.str(this.w) + "]";
    }
    ['+'](other) {
      if (other == null) dart.nullFailed(I[58], 1162, 34, "other");
      let _x = dart.notNull(this.x) + dart.notNull(other.x);
      let _y = dart.notNull(this.y) + dart.notNull(other.y);
      let _z = dart.notNull(this.z) + dart.notNull(other.z);
      let _w = dart.notNull(this.w) + dart.notNull(other.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    _negate() {
      return new _native_typed_data.NativeFloat32x4._truncated(-dart.notNull(this.x), -dart.notNull(this.y), -dart.notNull(this.z), -dart.notNull(this.w));
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[58], 1176, 34, "other");
      let _x = dart.notNull(this.x) - dart.notNull(other.x);
      let _y = dart.notNull(this.y) - dart.notNull(other.y);
      let _z = dart.notNull(this.z) - dart.notNull(other.z);
      let _w = dart.notNull(this.w) - dart.notNull(other.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    ['*'](other) {
      if (other == null) dart.nullFailed(I[58], 1185, 34, "other");
      let _x = dart.notNull(this.x) * dart.notNull(other.x);
      let _y = dart.notNull(this.y) * dart.notNull(other.y);
      let _z = dart.notNull(this.z) * dart.notNull(other.z);
      let _w = dart.notNull(this.w) * dart.notNull(other.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    ['/'](other) {
      if (other == null) dart.nullFailed(I[58], 1194, 34, "other");
      let _x = dart.notNull(this.x) / dart.notNull(other.x);
      let _y = dart.notNull(this.y) / dart.notNull(other.y);
      let _z = dart.notNull(this.z) / dart.notNull(other.z);
      let _w = dart.notNull(this.w) / dart.notNull(other.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    lessThan(other) {
      if (other == null) dart.nullFailed(I[58], 1203, 30, "other");
      let _cx = dart.notNull(this.x) < dart.notNull(other.x);
      let _cy = dart.notNull(this.y) < dart.notNull(other.y);
      let _cz = dart.notNull(this.z) < dart.notNull(other.z);
      let _cw = dart.notNull(this.w) < dart.notNull(other.w);
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    lessThanOrEqual(other) {
      if (other == null) dart.nullFailed(I[58], 1213, 37, "other");
      let _cx = dart.notNull(this.x) <= dart.notNull(other.x);
      let _cy = dart.notNull(this.y) <= dart.notNull(other.y);
      let _cz = dart.notNull(this.z) <= dart.notNull(other.z);
      let _cw = dart.notNull(this.w) <= dart.notNull(other.w);
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    greaterThan(other) {
      if (other == null) dart.nullFailed(I[58], 1223, 33, "other");
      let _cx = dart.notNull(this.x) > dart.notNull(other.x);
      let _cy = dart.notNull(this.y) > dart.notNull(other.y);
      let _cz = dart.notNull(this.z) > dart.notNull(other.z);
      let _cw = dart.notNull(this.w) > dart.notNull(other.w);
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    greaterThanOrEqual(other) {
      if (other == null) dart.nullFailed(I[58], 1233, 40, "other");
      let _cx = dart.notNull(this.x) >= dart.notNull(other.x);
      let _cy = dart.notNull(this.y) >= dart.notNull(other.y);
      let _cz = dart.notNull(this.z) >= dart.notNull(other.z);
      let _cw = dart.notNull(this.w) >= dart.notNull(other.w);
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    equal(other) {
      if (other == null) dart.nullFailed(I[58], 1243, 27, "other");
      let _cx = this.x == other.x;
      let _cy = this.y == other.y;
      let _cz = this.z == other.z;
      let _cw = this.w == other.w;
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    notEqual(other) {
      if (other == null) dart.nullFailed(I[58], 1253, 30, "other");
      let _cx = this.x != other.x;
      let _cy = this.y != other.y;
      let _cz = this.z != other.z;
      let _cw = this.w != other.w;
      return new _native_typed_data.NativeInt32x4._truncated(_cx ? -1 : 0, _cy ? -1 : 0, _cz ? -1 : 0, _cw ? -1 : 0);
    }
    scale(s) {
      if (s == null) dart.nullFailed(I[58], 1263, 26, "s");
      let _x = dart.notNull(s) * dart.notNull(this.x);
      let _y = dart.notNull(s) * dart.notNull(this.y);
      let _z = dart.notNull(s) * dart.notNull(this.z);
      let _w = dart.notNull(s) * dart.notNull(this.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    abs() {
      let _x = this.x[$abs]();
      let _y = this.y[$abs]();
      let _z = this.z[$abs]();
      let _w = this.w[$abs]();
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    clamp(lowerLimit, upperLimit) {
      if (lowerLimit == null) dart.nullFailed(I[58], 1281, 29, "lowerLimit");
      if (upperLimit == null) dart.nullFailed(I[58], 1281, 51, "upperLimit");
      let _lx = lowerLimit.x;
      let _ly = lowerLimit.y;
      let _lz = lowerLimit.z;
      let _lw = lowerLimit.w;
      let _ux = upperLimit.x;
      let _uy = upperLimit.y;
      let _uz = upperLimit.z;
      let _uw = upperLimit.w;
      let _x = this.x;
      let _y = this.y;
      let _z = this.z;
      let _w = this.w;
      _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
      _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
      _z = dart.notNull(_z) > dart.notNull(_uz) ? _uz : _z;
      _w = dart.notNull(_w) > dart.notNull(_uw) ? _uw : _w;
      _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
      _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
      _z = dart.notNull(_z) < dart.notNull(_lz) ? _lz : _z;
      _w = dart.notNull(_w) < dart.notNull(_lw) ? _lw : _w;
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    get signMask() {
      let view = _native_typed_data.NativeFloat32x4._uint32view;
      let mx = null;
      let my = null;
      let mz = null;
      let mw = null;
      _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
      _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
      _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
      _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
      mx = (dart.notNull(view[$_get](0)) & 2147483648) >>> 31;
      my = (dart.notNull(view[$_get](1)) & 2147483648) >>> 30;
      mz = (dart.notNull(view[$_get](2)) & 2147483648) >>> 29;
      mw = (dart.notNull(view[$_get](3)) & 2147483648) >>> 28;
      return core.int.as(dart.dsend(dart.dsend(dart.dsend(mx, '|', [my]), '|', [mz]), '|', [mw]));
    }
    shuffle(mask) {
      if (mask == null) dart.nullFailed(I[58], 1323, 25, "mask");
      if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
        dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
      }
      _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
      _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
      _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
      _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
      let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
      let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
      let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
      let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    shuffleMix(other, mask) {
      if (other == null) dart.nullFailed(I[58], 1342, 34, "other");
      if (mask == null) dart.nullFailed(I[58], 1342, 45, "mask");
      if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
        dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
      }
      _native_typed_data.NativeFloat32x4._list[$_set](0, this.x);
      _native_typed_data.NativeFloat32x4._list[$_set](1, this.y);
      _native_typed_data.NativeFloat32x4._list[$_set](2, this.z);
      _native_typed_data.NativeFloat32x4._list[$_set](3, this.w);
      let _x = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) & 3);
      let _y = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
      _native_typed_data.NativeFloat32x4._list[$_set](0, other.x);
      _native_typed_data.NativeFloat32x4._list[$_set](1, other.y);
      _native_typed_data.NativeFloat32x4._list[$_set](2, other.z);
      _native_typed_data.NativeFloat32x4._list[$_set](3, other.w);
      let _z = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
      let _w = _native_typed_data.NativeFloat32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    withX(newX) {
      if (newX == null) dart.nullFailed(I[58], 1363, 26, "newX");
      core.ArgumentError.checkNotNull(core.double, newX);
      return new _native_typed_data.NativeFloat32x4._truncated(core.double.as(_native_typed_data.NativeFloat32x4._truncate(newX)), this.y, this.z, this.w);
    }
    withY(newY) {
      if (newY == null) dart.nullFailed(I[58], 1369, 26, "newY");
      core.ArgumentError.checkNotNull(core.double, newY);
      return new _native_typed_data.NativeFloat32x4._truncated(this.x, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newY)), this.z, this.w);
    }
    withZ(newZ) {
      if (newZ == null) dart.nullFailed(I[58], 1375, 26, "newZ");
      core.ArgumentError.checkNotNull(core.double, newZ);
      return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newZ)), this.w);
    }
    withW(newW) {
      if (newW == null) dart.nullFailed(I[58], 1381, 26, "newW");
      core.ArgumentError.checkNotNull(core.double, newW);
      return new _native_typed_data.NativeFloat32x4._truncated(this.x, this.y, this.z, core.double.as(_native_typed_data.NativeFloat32x4._truncate(newW)));
    }
    min(other) {
      if (other == null) dart.nullFailed(I[58], 1387, 27, "other");
      let _x = dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x;
      let _y = dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y;
      let _z = dart.notNull(this.z) < dart.notNull(other.z) ? this.z : other.z;
      let _w = dart.notNull(this.w) < dart.notNull(other.w) ? this.w : other.w;
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    max(other) {
      if (other == null) dart.nullFailed(I[58], 1396, 27, "other");
      let _x = dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x;
      let _y = dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y;
      let _z = dart.notNull(this.z) > dart.notNull(other.z) ? this.z : other.z;
      let _w = dart.notNull(this.w) > dart.notNull(other.w) ? this.w : other.w;
      return new _native_typed_data.NativeFloat32x4._truncated(_x, _y, _z, _w);
    }
    sqrt() {
      let _x = math.sqrt(this.x);
      let _y = math.sqrt(this.y);
      let _z = math.sqrt(this.z);
      let _w = math.sqrt(this.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    reciprocal() {
      let _x = 1.0 / dart.notNull(this.x);
      let _y = 1.0 / dart.notNull(this.y);
      let _z = 1.0 / dart.notNull(this.z);
      let _w = 1.0 / dart.notNull(this.w);
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
    reciprocalSqrt() {
      let _x = math.sqrt(1.0 / dart.notNull(this.x));
      let _y = math.sqrt(1.0 / dart.notNull(this.y));
      let _z = math.sqrt(1.0 / dart.notNull(this.z));
      let _w = math.sqrt(1.0 / dart.notNull(this.w));
      return new _native_typed_data.NativeFloat32x4._doubles(_x, _y, _z, _w);
    }
  };
  (_native_typed_data.NativeFloat32x4.new = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1113, 26, "x");
    if (y == null) dart.nullFailed(I[58], 1113, 36, "y");
    if (z == null) dart.nullFailed(I[58], 1113, 46, "z");
    if (w == null) dart.nullFailed(I[58], 1113, 56, "w");
    this[x$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(x));
    this[y$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(y));
    this[z$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(z));
    this[w$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(w));
    if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
    if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
    if (!(typeof z == 'number')) dart.throw(new core.ArgumentError.new(z));
    if (!(typeof w == 'number')) dart.throw(new core.ArgumentError.new(w));
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  (_native_typed_data.NativeFloat32x4.splat = function(v) {
    if (v == null) dart.nullFailed(I[58], 1126, 32, "v");
    _native_typed_data.NativeFloat32x4.new.call(this, v, v, v, v);
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  (_native_typed_data.NativeFloat32x4.zero = function() {
    _native_typed_data.NativeFloat32x4._truncated.call(this, 0.0, 0.0, 0.0, 0.0);
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  (_native_typed_data.NativeFloat32x4.fromFloat64x2 = function(v) {
    if (v == null) dart.nullFailed(I[58], 1138, 43, "v");
    _native_typed_data.NativeFloat32x4._truncated.call(this, core.double.as(_native_typed_data.NativeFloat32x4._truncate(v.x)), core.double.as(_native_typed_data.NativeFloat32x4._truncate(v.y)), 0.0, 0.0);
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  (_native_typed_data.NativeFloat32x4._doubles = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1144, 35, "x");
    if (y == null) dart.nullFailed(I[58], 1144, 45, "y");
    if (z == null) dart.nullFailed(I[58], 1144, 55, "z");
    if (w == null) dart.nullFailed(I[58], 1144, 65, "w");
    this[x$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(x));
    this[y$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(y));
    this[z$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(z));
    this[w$] = core.double.as(_native_typed_data.NativeFloat32x4._truncate(w));
    ;
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  (_native_typed_data.NativeFloat32x4._truncated = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1155, 35, "x");
    if (y == null) dart.nullFailed(I[58], 1155, 43, "y");
    if (z == null) dart.nullFailed(I[58], 1155, 51, "z");
    if (w == null) dart.nullFailed(I[58], 1155, 59, "w");
    this[x$] = x;
    this[y$] = y;
    this[z$] = z;
    this[w$] = w;
    ;
  }).prototype = _native_typed_data.NativeFloat32x4.prototype;
  dart.addTypeTests(_native_typed_data.NativeFloat32x4);
  dart.addTypeCaches(_native_typed_data.NativeFloat32x4);
  _native_typed_data.NativeFloat32x4[dart.implements] = () => [typed_data.Float32x4];
  dart.setMethodSignature(_native_typed_data.NativeFloat32x4, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat32x4.__proto__),
    '+': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    _negate: dart.fnType(typed_data.Float32x4, []),
    '-': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    '*': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    '/': dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    lessThan: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    lessThanOrEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    greaterThan: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    greaterThanOrEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    equal: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    notEqual: dart.fnType(typed_data.Int32x4, [typed_data.Float32x4]),
    scale: dart.fnType(typed_data.Float32x4, [core.double]),
    abs: dart.fnType(typed_data.Float32x4, []),
    clamp: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, typed_data.Float32x4]),
    shuffle: dart.fnType(typed_data.Float32x4, [core.int]),
    shuffleMix: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, core.int]),
    withX: dart.fnType(typed_data.Float32x4, [core.double]),
    withY: dart.fnType(typed_data.Float32x4, [core.double]),
    withZ: dart.fnType(typed_data.Float32x4, [core.double]),
    withW: dart.fnType(typed_data.Float32x4, [core.double]),
    min: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    max: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4]),
    sqrt: dart.fnType(typed_data.Float32x4, []),
    reciprocal: dart.fnType(typed_data.Float32x4, []),
    reciprocalSqrt: dart.fnType(typed_data.Float32x4, [])
  }));
  dart.setGetterSignature(_native_typed_data.NativeFloat32x4, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeFloat32x4.__proto__),
    signMask: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat32x4, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeFloat32x4, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeFloat32x4.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    z: dart.finalFieldType(core.double),
    w: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeFloat32x4, ['toString']);
  dart.defineLazy(_native_typed_data.NativeFloat32x4, {
    /*_native_typed_data.NativeFloat32x4._list*/get _list() {
      return _native_typed_data.NativeFloat32List.new(4);
    },
    /*_native_typed_data.NativeFloat32x4._uint32view*/get _uint32view() {
      return _native_typed_data.NativeFloat32x4._list.buffer[$asUint32List]();
    }
  }, false);
  var x$0 = dart.privateName(_native_typed_data, "NativeInt32x4.x");
  var y$0 = dart.privateName(_native_typed_data, "NativeInt32x4.y");
  var z$0 = dart.privateName(_native_typed_data, "NativeInt32x4.z");
  var w$0 = dart.privateName(_native_typed_data, "NativeInt32x4.w");
  _native_typed_data.NativeInt32x4 = class NativeInt32x4 extends core.Object {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get z() {
      return this[z$0];
    }
    set z(value) {
      super.z = value;
    }
    get w() {
      return this[w$0];
    }
    set w(value) {
      super.w = value;
    }
    static _truncate(x) {
      _native_typed_data.NativeInt32x4._list[$_set](0, core.int.as(x));
      return _native_typed_data.NativeInt32x4._list[$_get](0);
    }
    static fromFloat32x4Bits(f) {
      if (f == null) dart.nullFailed(I[58], 1466, 53, "f");
      let floatList = _native_typed_data.NativeFloat32x4._list;
      floatList[$_set](0, f.x);
      floatList[$_set](1, f.y);
      floatList[$_set](2, f.z);
      floatList[$_set](3, f.w);
      let view = floatList.buffer[$asInt32List]();
      return new _native_typed_data.NativeInt32x4._truncated(view[$_get](0), view[$_get](1), view[$_get](2), view[$_get](3));
    }
    toString() {
      return "[" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ", " + dart.str(this.w) + "]";
    }
    ['|'](other) {
      if (other == null) dart.nullFailed(I[58], 1481, 30, "other");
      return new _native_typed_data.NativeInt32x4._truncated(this.x | other.x, this.y | other.y, this.z | other.z, this.w | other.w);
    }
    ['&'](other) {
      if (other == null) dart.nullFailed(I[58], 1492, 30, "other");
      return new _native_typed_data.NativeInt32x4._truncated(this.x & other.x, this.y & other.y, this.z & other.z, this.w & other.w);
    }
    ['^'](other) {
      if (other == null) dart.nullFailed(I[58], 1503, 30, "other");
      return new _native_typed_data.NativeInt32x4._truncated(this.x ^ other.x, this.y ^ other.y, this.z ^ other.z, this.w ^ other.w);
    }
    ['+'](other) {
      if (other == null) dart.nullFailed(I[58], 1513, 30, "other");
      return new _native_typed_data.NativeInt32x4._truncated(this.x + other.x | 0, this.y + other.y | 0, this.z + other.z | 0, this.w + other.w | 0);
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[58], 1522, 30, "other");
      return new _native_typed_data.NativeInt32x4._truncated(this.x - other.x | 0, this.y - other.y | 0, this.z - other.z | 0, this.w - other.w | 0);
    }
    _negate() {
      return new _native_typed_data.NativeInt32x4._truncated(-this.x | 0, -this.y | 0, -this.z | 0, -this.w | 0);
    }
    get signMask() {
      let mx = (dart.notNull(this.x) & 2147483648) >>> 31;
      let my = (dart.notNull(this.y) & 2147483648) >>> 31;
      let mz = (dart.notNull(this.z) & 2147483648) >>> 31;
      let mw = (dart.notNull(this.w) & 2147483648) >>> 31;
      return (mx | my << 1 >>> 0 | mz << 2 >>> 0 | mw << 3 >>> 0) >>> 0;
    }
    shuffle(mask) {
      if (mask == null) dart.nullFailed(I[58], 1550, 23, "mask");
      if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
        dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
      }
      _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
      _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
      _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
      _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
      let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
      let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
      let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
      let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
      return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
    }
    shuffleMix(other, mask) {
      if (other == null) dart.nullFailed(I[58], 1568, 30, "other");
      if (mask == null) dart.nullFailed(I[58], 1568, 41, "mask");
      if (dart.notNull(mask) < 0 || dart.notNull(mask) > 255) {
        dart.throw(new core.RangeError.range(mask, 0, 255, "mask"));
      }
      _native_typed_data.NativeInt32x4._list[$_set](0, this.x);
      _native_typed_data.NativeInt32x4._list[$_set](1, this.y);
      _native_typed_data.NativeInt32x4._list[$_set](2, this.z);
      _native_typed_data.NativeInt32x4._list[$_set](3, this.w);
      let _x = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) & 3);
      let _y = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 2 & 3);
      _native_typed_data.NativeInt32x4._list[$_set](0, other.x);
      _native_typed_data.NativeInt32x4._list[$_set](1, other.y);
      _native_typed_data.NativeInt32x4._list[$_set](2, other.z);
      _native_typed_data.NativeInt32x4._list[$_set](3, other.w);
      let _z = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 4 & 3);
      let _w = _native_typed_data.NativeInt32x4._list[$_get](dart.notNull(mask) >> 6 & 3);
      return new _native_typed_data.NativeInt32x4._truncated(_x, _y, _z, _w);
    }
    withX(x) {
      if (x == null) dart.nullFailed(I[58], 1589, 21, "x");
      core.ArgumentError.checkNotNull(core.int, x);
      let _x = core.int.as(_native_typed_data.NativeInt32x4._truncate(x));
      return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
    }
    withY(y) {
      if (y == null) dart.nullFailed(I[58], 1596, 21, "y");
      core.ArgumentError.checkNotNull(core.int, y);
      let _y = core.int.as(_native_typed_data.NativeInt32x4._truncate(y));
      return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
    }
    withZ(z) {
      if (z == null) dart.nullFailed(I[58], 1603, 21, "z");
      core.ArgumentError.checkNotNull(core.int, z);
      let _z = core.int.as(_native_typed_data.NativeInt32x4._truncate(z));
      return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
    }
    withW(w) {
      if (w == null) dart.nullFailed(I[58], 1610, 21, "w");
      core.ArgumentError.checkNotNull(core.int, w);
      let _w = core.int.as(_native_typed_data.NativeInt32x4._truncate(w));
      return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
    }
    get flagX() {
      return this.x !== 0;
    }
    get flagY() {
      return this.y !== 0;
    }
    get flagZ() {
      return this.z !== 0;
    }
    get flagW() {
      return this.w !== 0;
    }
    withFlagX(flagX) {
      if (flagX == null) dart.nullFailed(I[58], 1629, 26, "flagX");
      let _x = dart.test(flagX) ? -1 : 0;
      return new _native_typed_data.NativeInt32x4._truncated(_x, this.y, this.z, this.w);
    }
    withFlagY(flagY) {
      if (flagY == null) dart.nullFailed(I[58], 1635, 26, "flagY");
      let _y = dart.test(flagY) ? -1 : 0;
      return new _native_typed_data.NativeInt32x4._truncated(this.x, _y, this.z, this.w);
    }
    withFlagZ(flagZ) {
      if (flagZ == null) dart.nullFailed(I[58], 1641, 26, "flagZ");
      let _z = dart.test(flagZ) ? -1 : 0;
      return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, _z, this.w);
    }
    withFlagW(flagW) {
      if (flagW == null) dart.nullFailed(I[58], 1647, 26, "flagW");
      let _w = dart.test(flagW) ? -1 : 0;
      return new _native_typed_data.NativeInt32x4._truncated(this.x, this.y, this.z, _w);
    }
    select(trueValue, falseValue) {
      if (trueValue == null) dart.nullFailed(I[58], 1655, 30, "trueValue");
      if (falseValue == null) dart.nullFailed(I[58], 1655, 51, "falseValue");
      let floatList = _native_typed_data.NativeFloat32x4._list;
      let intView = _native_typed_data.NativeFloat32x4._uint32view;
      floatList[$_set](0, trueValue.x);
      floatList[$_set](1, trueValue.y);
      floatList[$_set](2, trueValue.z);
      floatList[$_set](3, trueValue.w);
      let stx = intView[$_get](0);
      let sty = intView[$_get](1);
      let stz = intView[$_get](2);
      let stw = intView[$_get](3);
      floatList[$_set](0, falseValue.x);
      floatList[$_set](1, falseValue.y);
      floatList[$_set](2, falseValue.z);
      floatList[$_set](3, falseValue.w);
      let sfx = intView[$_get](0);
      let sfy = intView[$_get](1);
      let sfz = intView[$_get](2);
      let sfw = intView[$_get](3);
      let _x = (dart.notNull(this.x) & dart.notNull(stx) | (~dart.notNull(this.x) & dart.notNull(sfx)) >>> 0) >>> 0;
      let _y = (dart.notNull(this.y) & dart.notNull(sty) | (~dart.notNull(this.y) & dart.notNull(sfy)) >>> 0) >>> 0;
      let _z = (dart.notNull(this.z) & dart.notNull(stz) | (~dart.notNull(this.z) & dart.notNull(sfz)) >>> 0) >>> 0;
      let _w = (dart.notNull(this.w) & dart.notNull(stw) | (~dart.notNull(this.w) & dart.notNull(sfw)) >>> 0) >>> 0;
      intView[$_set](0, _x);
      intView[$_set](1, _y);
      intView[$_set](2, _z);
      intView[$_set](3, _w);
      return new _native_typed_data.NativeFloat32x4._truncated(floatList[$_get](0), floatList[$_get](1), floatList[$_get](2), floatList[$_get](3));
    }
  };
  (_native_typed_data.NativeInt32x4.new = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1448, 21, "x");
    if (y == null) dart.nullFailed(I[58], 1448, 28, "y");
    if (z == null) dart.nullFailed(I[58], 1448, 35, "z");
    if (w == null) dart.nullFailed(I[58], 1448, 42, "w");
    this[x$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(x));
    this[y$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(y));
    this[z$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(z));
    this[w$0] = core.int.as(_native_typed_data.NativeInt32x4._truncate(w));
    if (x != this.x && !core.int.is(x)) dart.throw(new core.ArgumentError.new(x));
    if (y != this.y && !core.int.is(y)) dart.throw(new core.ArgumentError.new(y));
    if (z != this.z && !core.int.is(z)) dart.throw(new core.ArgumentError.new(z));
    if (w != this.w && !core.int.is(w)) dart.throw(new core.ArgumentError.new(w));
  }).prototype = _native_typed_data.NativeInt32x4.prototype;
  (_native_typed_data.NativeInt32x4.bool = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1459, 27, "x");
    if (y == null) dart.nullFailed(I[58], 1459, 35, "y");
    if (z == null) dart.nullFailed(I[58], 1459, 43, "z");
    if (w == null) dart.nullFailed(I[58], 1459, 51, "w");
    this[x$0] = dart.test(x) ? -1 : 0;
    this[y$0] = dart.test(y) ? -1 : 0;
    this[z$0] = dart.test(z) ? -1 : 0;
    this[w$0] = dart.test(w) ? -1 : 0;
    ;
  }).prototype = _native_typed_data.NativeInt32x4.prototype;
  (_native_typed_data.NativeInt32x4._truncated = function(x, y, z, w) {
    if (x == null) dart.nullFailed(I[58], 1476, 33, "x");
    if (y == null) dart.nullFailed(I[58], 1476, 41, "y");
    if (z == null) dart.nullFailed(I[58], 1476, 49, "z");
    if (w == null) dart.nullFailed(I[58], 1476, 57, "w");
    this[x$0] = x;
    this[y$0] = y;
    this[z$0] = z;
    this[w$0] = w;
    ;
  }).prototype = _native_typed_data.NativeInt32x4.prototype;
  dart.addTypeTests(_native_typed_data.NativeInt32x4);
  dart.addTypeCaches(_native_typed_data.NativeInt32x4);
  _native_typed_data.NativeInt32x4[dart.implements] = () => [typed_data.Int32x4];
  dart.setMethodSignature(_native_typed_data.NativeInt32x4, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeInt32x4.__proto__),
    '|': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
    '&': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
    '^': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
    '+': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
    '-': dart.fnType(typed_data.Int32x4, [typed_data.Int32x4]),
    _negate: dart.fnType(typed_data.Int32x4, []),
    shuffle: dart.fnType(typed_data.Int32x4, [core.int]),
    shuffleMix: dart.fnType(typed_data.Int32x4, [typed_data.Int32x4, core.int]),
    withX: dart.fnType(typed_data.Int32x4, [core.int]),
    withY: dart.fnType(typed_data.Int32x4, [core.int]),
    withZ: dart.fnType(typed_data.Int32x4, [core.int]),
    withW: dart.fnType(typed_data.Int32x4, [core.int]),
    withFlagX: dart.fnType(typed_data.Int32x4, [core.bool]),
    withFlagY: dart.fnType(typed_data.Int32x4, [core.bool]),
    withFlagZ: dart.fnType(typed_data.Int32x4, [core.bool]),
    withFlagW: dart.fnType(typed_data.Int32x4, [core.bool]),
    select: dart.fnType(typed_data.Float32x4, [typed_data.Float32x4, typed_data.Float32x4])
  }));
  dart.setGetterSignature(_native_typed_data.NativeInt32x4, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeInt32x4.__proto__),
    signMask: core.int,
    flagX: core.bool,
    flagY: core.bool,
    flagZ: core.bool,
    flagW: core.bool
  }));
  dart.setLibraryUri(_native_typed_data.NativeInt32x4, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeInt32x4, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeInt32x4.__proto__),
    x: dart.finalFieldType(core.int),
    y: dart.finalFieldType(core.int),
    z: dart.finalFieldType(core.int),
    w: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeInt32x4, ['toString']);
  dart.defineLazy(_native_typed_data.NativeInt32x4, {
    /*_native_typed_data.NativeInt32x4._list*/get _list() {
      return _native_typed_data.NativeInt32List.new(4);
    }
  }, false);
  var x$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.x");
  var y$1 = dart.privateName(_native_typed_data, "NativeFloat64x2.y");
  _native_typed_data.NativeFloat64x2 = class NativeFloat64x2 extends core.Object {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    toString() {
      return "[" + dart.str(this.x) + ", " + dart.str(this.y) + "]";
    }
    ['+'](other) {
      if (other == null) dart.nullFailed(I[58], 1713, 34, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    _negate() {
      return new _native_typed_data.NativeFloat64x2._doubles(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['-'](other) {
      if (other == null) dart.nullFailed(I[58], 1723, 34, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['*'](other) {
      if (other == null) dart.nullFailed(I[58], 1728, 34, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(other.x), dart.notNull(this.y) * dart.notNull(other.y));
    }
    ['/'](other) {
      if (other == null) dart.nullFailed(I[58], 1733, 34, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) / dart.notNull(other.x), dart.notNull(this.y) / dart.notNull(other.y));
    }
    scale(s) {
      if (s == null) dart.nullFailed(I[58], 1738, 26, "s");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) * dart.notNull(s), dart.notNull(this.y) * dart.notNull(s));
    }
    abs() {
      return new _native_typed_data.NativeFloat64x2._doubles(this.x[$abs](), this.y[$abs]());
    }
    clamp(lowerLimit, upperLimit) {
      if (lowerLimit == null) dart.nullFailed(I[58], 1748, 29, "lowerLimit");
      if (upperLimit == null) dart.nullFailed(I[58], 1748, 51, "upperLimit");
      let _lx = lowerLimit.x;
      let _ly = lowerLimit.y;
      let _ux = upperLimit.x;
      let _uy = upperLimit.y;
      let _x = this.x;
      let _y = this.y;
      _x = dart.notNull(_x) > dart.notNull(_ux) ? _ux : _x;
      _y = dart.notNull(_y) > dart.notNull(_uy) ? _uy : _y;
      _x = dart.notNull(_x) < dart.notNull(_lx) ? _lx : _x;
      _y = dart.notNull(_y) < dart.notNull(_ly) ? _ly : _y;
      return new _native_typed_data.NativeFloat64x2._doubles(_x, _y);
    }
    get signMask() {
      let view = _native_typed_data.NativeFloat64x2._uint32View;
      _native_typed_data.NativeFloat64x2._list[$_set](0, this.x);
      _native_typed_data.NativeFloat64x2._list[$_set](1, this.y);
      let mx = (dart.notNull(view[$_get](1)) & 2147483648) >>> 31;
      let my = (dart.notNull(view[$_get](3)) & 2147483648) >>> 31;
      return (mx | my << 1 >>> 0) >>> 0;
    }
    withX(x) {
      if (x == null) dart.nullFailed(I[58], 1774, 26, "x");
      if (!(typeof x == 'number')) dart.throw(new core.ArgumentError.new(x));
      return new _native_typed_data.NativeFloat64x2._doubles(x, this.y);
    }
    withY(y) {
      if (y == null) dart.nullFailed(I[58], 1780, 26, "y");
      if (!(typeof y == 'number')) dart.throw(new core.ArgumentError.new(y));
      return new _native_typed_data.NativeFloat64x2._doubles(this.x, y);
    }
    min(other) {
      if (other == null) dart.nullFailed(I[58], 1786, 27, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) < dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) < dart.notNull(other.y) ? this.y : other.y);
    }
    max(other) {
      if (other == null) dart.nullFailed(I[58], 1792, 27, "other");
      return new _native_typed_data.NativeFloat64x2._doubles(dart.notNull(this.x) > dart.notNull(other.x) ? this.x : other.x, dart.notNull(this.y) > dart.notNull(other.y) ? this.y : other.y);
    }
    sqrt() {
      return new _native_typed_data.NativeFloat64x2._doubles(math.sqrt(this.x), math.sqrt(this.y));
    }
  };
  (_native_typed_data.NativeFloat64x2.new = function(x, y) {
    if (x == null) dart.nullFailed(I[58], 1696, 24, "x");
    if (y == null) dart.nullFailed(I[58], 1696, 32, "y");
    this[x$1] = x;
    this[y$1] = y;
    if (!(typeof this.x == 'number')) dart.throw(new core.ArgumentError.new(this.x));
    if (!(typeof this.y == 'number')) dart.throw(new core.ArgumentError.new(this.y));
  }).prototype = _native_typed_data.NativeFloat64x2.prototype;
  (_native_typed_data.NativeFloat64x2.splat = function(v) {
    if (v == null) dart.nullFailed(I[58], 1701, 32, "v");
    _native_typed_data.NativeFloat64x2.new.call(this, v, v);
  }).prototype = _native_typed_data.NativeFloat64x2.prototype;
  (_native_typed_data.NativeFloat64x2.zero = function() {
    _native_typed_data.NativeFloat64x2.splat.call(this, 0.0);
  }).prototype = _native_typed_data.NativeFloat64x2.prototype;
  (_native_typed_data.NativeFloat64x2.fromFloat32x4 = function(v) {
    if (v == null) dart.nullFailed(I[58], 1705, 43, "v");
    _native_typed_data.NativeFloat64x2.new.call(this, v.x, v.y);
  }).prototype = _native_typed_data.NativeFloat64x2.prototype;
  (_native_typed_data.NativeFloat64x2._doubles = function(x, y) {
    if (x == null) dart.nullFailed(I[58], 1708, 33, "x");
    if (y == null) dart.nullFailed(I[58], 1708, 41, "y");
    this[x$1] = x;
    this[y$1] = y;
    ;
  }).prototype = _native_typed_data.NativeFloat64x2.prototype;
  dart.addTypeTests(_native_typed_data.NativeFloat64x2);
  dart.addTypeCaches(_native_typed_data.NativeFloat64x2);
  _native_typed_data.NativeFloat64x2[dart.implements] = () => [typed_data.Float64x2];
  dart.setMethodSignature(_native_typed_data.NativeFloat64x2, () => ({
    __proto__: dart.getMethods(_native_typed_data.NativeFloat64x2.__proto__),
    '+': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    _negate: dart.fnType(typed_data.Float64x2, []),
    '-': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    '*': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    '/': dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    scale: dart.fnType(typed_data.Float64x2, [core.double]),
    abs: dart.fnType(typed_data.Float64x2, []),
    clamp: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2, typed_data.Float64x2]),
    withX: dart.fnType(typed_data.Float64x2, [core.double]),
    withY: dart.fnType(typed_data.Float64x2, [core.double]),
    min: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    max: dart.fnType(typed_data.Float64x2, [typed_data.Float64x2]),
    sqrt: dart.fnType(typed_data.Float64x2, [])
  }));
  dart.setGetterSignature(_native_typed_data.NativeFloat64x2, () => ({
    __proto__: dart.getGetters(_native_typed_data.NativeFloat64x2.__proto__),
    signMask: core.int
  }));
  dart.setLibraryUri(_native_typed_data.NativeFloat64x2, I[59]);
  dart.setFieldSignature(_native_typed_data.NativeFloat64x2, () => ({
    __proto__: dart.getFields(_native_typed_data.NativeFloat64x2.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(_native_typed_data.NativeFloat64x2, ['toString']);
  dart.defineLazy(_native_typed_data.NativeFloat64x2, {
    /*_native_typed_data.NativeFloat64x2._list*/get _list() {
      return _native_typed_data.NativeFloat64List.new(2);
    },
    set _list(_) {},
    /*_native_typed_data.NativeFloat64x2._uint32View*/get _uint32View() {
      return _native_typed_data.NativeFloat64x2._list.buffer[$asUint32List]();
    },
    set _uint32View(_) {}
  }, false);
  _native_typed_data._checkLength = function _checkLength(length) {
    if (!core.int.is(length)) dart.throw(new core.ArgumentError.new("Invalid length " + dart.str(length)));
    return length;
  };
  _native_typed_data._checkViewArguments = function _checkViewArguments(buffer, offsetInBytes, length) {
    if (!_native_typed_data.NativeByteBuffer.is(buffer)) {
      dart.throw(new core.ArgumentError.new("Invalid view buffer"));
    }
    if (!core.int.is(offsetInBytes)) {
      dart.throw(new core.ArgumentError.new("Invalid view offsetInBytes " + dart.str(offsetInBytes)));
    }
    if (!T$.intN().is(length)) {
      dart.throw(new core.ArgumentError.new("Invalid view length " + dart.str(length)));
    }
  };
  _native_typed_data._ensureNativeList = function _ensureNativeList(list) {
    if (list == null) dart.nullFailed(I[58], 373, 29, "list");
    if (_interceptors.JSIndexable.is(list)) return list;
    let result = core.List.filled(list[$length], null);
    for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
      result[$_set](i, list[$_get](i));
    }
    return result;
  };
  _native_typed_data._isInvalidArrayIndex = function _isInvalidArrayIndex(index) {
    if (index == null) dart.nullFailed(I[58], 1805, 31, "index");
    return index >>> 0 !== index;
  };
  _native_typed_data._checkValidIndex = function _checkValidIndex(index, list, length) {
    if (index == null) dart.nullFailed(I[58], 1812, 27, "index");
    if (list == null) dart.nullFailed(I[58], 1812, 39, "list");
    if (length == null) dart.nullFailed(I[58], 1812, 49, "length");
    if (dart.test(_native_typed_data._isInvalidArrayIndex(index)) || index >= dart.notNull(length)) {
      dart.throw(_js_helper.diagnoseIndexError(list, index));
    }
  };
  _native_typed_data._checkValidRange = function _checkValidRange(start, end, length) {
    if (start == null) dart.nullFailed(I[58], 1825, 26, "start");
    if (length == null) dart.nullFailed(I[58], 1825, 47, "length");
    if (dart.test(_native_typed_data._isInvalidArrayIndex(start)) || (end == null ? dart.notNull(start) > dart.notNull(length) : dart.test(_native_typed_data._isInvalidArrayIndex(end)) || dart.notNull(start) > dart.notNull(end) || dart.notNull(end) > dart.notNull(length))) {
      dart.throw(_js_helper.diagnoseRangeError(start, end, length));
    }
    if (end == null) return length;
    return end;
  };
  var ___AsyncStarImpl_controller = dart.privateName(async, "_#_AsyncStarImpl#controller");
  var ___AsyncStarImpl_controller_isSet = dart.privateName(async, "_#_AsyncStarImpl#controller#isSet");
  var ___AsyncStarImpl_jsIterator = dart.privateName(async, "_#_AsyncStarImpl#jsIterator");
  var ___AsyncStarImpl_jsIterator_isSet = dart.privateName(async, "_#_AsyncStarImpl#jsIterator#isSet");
  var _handleErrorCallback = dart.privateName(async, "_handleErrorCallback");
  var _runBodyCallback = dart.privateName(async, "_runBodyCallback");
  var _chainForeignFuture = dart.privateName(async, "_chainForeignFuture");
  var _thenAwait = dart.privateName(async, "_thenAwait");
  var _fatal = dart.privateName(async, "_fatal");
  const _is__AsyncStarImpl_default = Symbol('_is__AsyncStarImpl_default');
  async._AsyncStarImpl$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class _AsyncStarImpl extends core.Object {
      get controller() {
        let t83;
        return dart.test(this[___AsyncStarImpl_controller_isSet]) ? (t83 = this[___AsyncStarImpl_controller], t83) : dart.throw(new _internal.LateError.fieldNI("controller"));
      }
      set controller(t83) {
        StreamControllerOfT().as(t83);
        if (t83 == null) dart.nullFailed(I[61], 229, 28, "null");
        this[___AsyncStarImpl_controller_isSet] = true;
        this[___AsyncStarImpl_controller] = t83;
      }
      get jsIterator() {
        let t84;
        return dart.test(this[___AsyncStarImpl_jsIterator_isSet]) ? (t84 = this[___AsyncStarImpl_jsIterator], t84) : dart.throw(new _internal.LateError.fieldNI("jsIterator"));
      }
      set jsIterator(t84) {
        if (t84 == null) dart.nullFailed(I[61], 245, 15, "null");
        this[___AsyncStarImpl_jsIterator_isSet] = true;
        this[___AsyncStarImpl_jsIterator] = t84;
      }
      get stream() {
        return this.controller.stream;
      }
      get handleError() {
        if (this[_handleErrorCallback] == null) {
          this[_handleErrorCallback] = dart.fn((error, stackTrace) => {
            if (error == null) dart.nullFailed(I[61], 282, 31, "error");
            if (stackTrace == null) dart.nullFailed(I[61], 282, 49, "stackTrace");
            try {
              this.jsIterator.throw(dart.createErrorWithStack(error, stackTrace));
            } catch (e$) {
              let e = dart.getThrown(e$);
              let newStack = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                this.addError(e, newStack);
              } else
                throw e$;
            }
          }, T$.ObjectAndStackTraceToNull());
          let zone = async.Zone.current;
          if (zone != async.Zone.root) {
            this[_handleErrorCallback] = zone.bindBinaryCallback(core.Null, core.Object, core.StackTrace, dart.nullCheck(this[_handleErrorCallback]));
          }
        }
        return dart.nullCheck(this[_handleErrorCallback]);
      }
      scheduleGenerator() {
        if (this.isScheduled || dart.test(this.controller.isPaused) || this.isSuspendedAtYieldStar) {
          return;
        }
        this.isScheduled = true;
        let zone = async.Zone.current;
        if (this[_runBodyCallback] == null) {
          this[_runBodyCallback] = this.runBody.bind(this);
          if (zone != async.Zone.root) {
            let registered = zone.registerUnaryCallback(dart.void, T$.ObjectN(), dart.nullCheck(this[_runBodyCallback]));
            this[_runBodyCallback] = dart.fn((arg = null) => zone.runUnaryGuarded(T$.ObjectN(), registered, arg), T$.ObjectNTovoid$1());
          }
        }
        zone.scheduleMicrotask(dart.nullCheck(this[_runBodyCallback]));
      }
      runBody(awaitValue) {
        this.isScheduled = false;
        this.isSuspendedAtYield = false;
        this.isSuspendedAtAwait = false;
        let iterResult = null;
        try {
          iterResult = this.jsIterator.next(awaitValue);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this.addError(e, s);
            return;
          } else
            throw e$;
        }
        if (iterResult.done) {
          this.close();
          return;
        }
        if (this.isSuspendedAtYield || this.isSuspendedAtYieldStar) return;
        this.isSuspendedAtAwait = true;
        let value = iterResult.value;
        let f = null;
        if (async._Future.is(value)) {
          f = value;
        } else if (async.Future.is(value)) {
          f = new (T$._FutureOfObjectN()).new();
          f[_chainForeignFuture](value);
        } else {
          f = new (T$._FutureOfObjectN()).value(value);
        }
        f[_thenAwait](dart.void, dart.nullCheck(this[_runBodyCallback]), this.handleError);
      }
      add(event) {
        T.as(event);
        if (!this.onListenReceived) this[_fatal]("yield before stream is listened to");
        if (this.isSuspendedAtYield) this[_fatal]("unexpected yield");
        if (!dart.test(this.controller.hasListener)) {
          return true;
        }
        this.controller.add(event);
        this.scheduleGenerator();
        this.isSuspendedAtYield = true;
        return false;
      }
      addStream(stream) {
        StreamOfT().as(stream);
        if (stream == null) dart.nullFailed(I[61], 402, 28, "stream");
        if (!this.onListenReceived) this[_fatal]("yield* before stream is listened to");
        if (!dart.test(this.controller.hasListener)) return true;
        this.isSuspendedAtYieldStar = true;
        let whenDoneAdding = this.controller.addStream(stream, {cancelOnError: false});
        whenDoneAdding.then(core.Null, dart.fn(_ => {
          this.isSuspendedAtYieldStar = false;
          this.scheduleGenerator();
          if (!this.isScheduled) this.isSuspendedAtYield = true;
        }, T$.dynamicToNull()), {onError: this.handleError});
        return false;
      }
      addError(error, stackTrace) {
        if (error == null) dart.nullFailed(I[61], 416, 24, "error");
        if (stackTrace == null) dart.nullFailed(I[61], 416, 42, "stackTrace");
        core.ArgumentError.checkNotNull(core.Object, error, "error");
        let completer = this.cancellationCompleter;
        if (completer != null && !dart.test(completer.isCompleted)) {
          completer.completeError(error, stackTrace);
        } else if (dart.test(this.controller.hasListener)) {
          this.controller.addError(error, stackTrace);
        }
        this.close();
      }
      close() {
        let completer = this.cancellationCompleter;
        if (completer != null && !dart.test(completer.isCompleted)) {
          completer.complete();
        }
        this.controller.close();
      }
      onListen() {
        if (!!this.onListenReceived) dart.assertFailed(null, I[61], 444, 12, "!onListenReceived");
        this.onListenReceived = true;
        this.scheduleGenerator();
      }
      onResume() {
        if (this.isSuspendedAtYield) {
          this.scheduleGenerator();
        }
      }
      onCancel() {
        if (dart.test(this.controller.isClosed)) {
          return null;
        }
        if (this.cancellationCompleter == null) {
          this.cancellationCompleter = async.Completer.new();
          if (this.isSuspendedAtYield) {
            this.scheduleGenerator();
          }
        }
        return dart.nullCheck(this.cancellationCompleter).future;
      }
      [_fatal](message) {
        if (message == null) dart.nullFailed(I[61], 471, 17, "message");
        return dart.throw(new core.StateError.new(message));
      }
    }
    (_AsyncStarImpl.new = function(initGenerator) {
      if (initGenerator == null) dart.nullFailed(I[61], 250, 23, "initGenerator");
      this[___AsyncStarImpl_controller] = null;
      this[___AsyncStarImpl_controller_isSet] = false;
      this.isSuspendedAtYieldStar = false;
      this.onListenReceived = false;
      this.isScheduled = false;
      this.isSuspendedAtYield = false;
      this.isSuspendedAtAwait = false;
      this.cancellationCompleter = null;
      this[___AsyncStarImpl_jsIterator] = null;
      this[___AsyncStarImpl_jsIterator_isSet] = false;
      this[_handleErrorCallback] = null;
      this[_runBodyCallback] = null;
      this.initGenerator = initGenerator;
      this.controller = StreamControllerOfT().new({onListen: this.onListen.bind(this), onResume: this.onResume.bind(this), onCancel: this.onCancel.bind(this)});
      this.jsIterator = this.initGenerator(this)[Symbol.iterator]();
    }).prototype = _AsyncStarImpl.prototype;
    dart.addTypeTests(_AsyncStarImpl);
    _AsyncStarImpl.prototype[_is__AsyncStarImpl_default] = true;
    dart.addTypeCaches(_AsyncStarImpl);
    dart.setMethodSignature(_AsyncStarImpl, () => ({
      __proto__: dart.getMethods(_AsyncStarImpl.__proto__),
      scheduleGenerator: dart.fnType(dart.void, []),
      runBody: dart.fnType(dart.void, [dart.dynamic]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addStream: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      close: dart.fnType(dart.void, []),
      onListen: dart.fnType(dart.dynamic, []),
      onResume: dart.fnType(dart.dynamic, []),
      onCancel: dart.fnType(dart.dynamic, []),
      [_fatal]: dart.fnType(dart.dynamic, [core.String])
    }));
    dart.setGetterSignature(_AsyncStarImpl, () => ({
      __proto__: dart.getGetters(_AsyncStarImpl.__proto__),
      controller: async.StreamController$(T),
      jsIterator: core.Object,
      stream: async.Stream$(T),
      handleError: dart.fnType(core.Null, [core.Object, core.StackTrace])
    }));
    dart.setSetterSignature(_AsyncStarImpl, () => ({
      __proto__: dart.getSetters(_AsyncStarImpl.__proto__),
      controller: dart.nullable(core.Object),
      jsIterator: core.Object
    }));
    dart.setLibraryUri(_AsyncStarImpl, I[29]);
    dart.setFieldSignature(_AsyncStarImpl, () => ({
      __proto__: dart.getFields(_AsyncStarImpl.__proto__),
      [___AsyncStarImpl_controller]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [___AsyncStarImpl_controller_isSet]: dart.fieldType(core.bool),
      initGenerator: dart.fieldType(dart.fnType(core.Object, [async._AsyncStarImpl$(T)])),
      isSuspendedAtYieldStar: dart.fieldType(core.bool),
      onListenReceived: dart.fieldType(core.bool),
      isScheduled: dart.fieldType(core.bool),
      isSuspendedAtYield: dart.fieldType(core.bool),
      isSuspendedAtAwait: dart.fieldType(core.bool),
      cancellationCompleter: dart.fieldType(dart.nullable(async.Completer)),
      [___AsyncStarImpl_jsIterator]: dart.fieldType(dart.nullable(core.Object)),
      [___AsyncStarImpl_jsIterator_isSet]: dart.fieldType(core.bool),
      [_handleErrorCallback]: dart.fieldType(dart.nullable(dart.fnType(core.Null, [core.Object, core.StackTrace]))),
      [_runBodyCallback]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [], [dart.nullable(core.Object)])))
    }));
    return _AsyncStarImpl;
  });
  async._AsyncStarImpl = async._AsyncStarImpl$();
  dart.addTypeTests(async._AsyncStarImpl, _is__AsyncStarImpl_default);
  var error$ = dart.privateName(async, "AsyncError.error");
  var stackTrace$ = dart.privateName(async, "AsyncError.stackTrace");
  async.AsyncError = class AsyncError extends core.Object {
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    static defaultStackTrace(error) {
      if (error == null) dart.nullFailed(I[62], 24, 46, "error");
      if (core.Error.is(error)) {
        let stackTrace = error[$stackTrace];
        if (stackTrace != null) return stackTrace;
      }
      return core.StackTrace.empty;
    }
    toString() {
      return dart.str(this.error);
    }
  };
  (async.AsyncError.new = function(error, stackTrace) {
    let t87;
    if (error == null) dart.nullFailed(I[62], 15, 21, "error");
    this[error$] = _internal.checkNotNullable(core.Object, error, "error");
    this[stackTrace$] = (t87 = stackTrace, t87 == null ? async.AsyncError.defaultStackTrace(error) : t87);
    ;
  }).prototype = async.AsyncError.prototype;
  dart.addTypeTests(async.AsyncError);
  dart.addTypeCaches(async.AsyncError);
  async.AsyncError[dart.implements] = () => [core.Error];
  dart.setLibraryUri(async.AsyncError, I[29]);
  dart.setFieldSignature(async.AsyncError, () => ({
    __proto__: dart.getFields(async.AsyncError.__proto__),
    error: dart.finalFieldType(core.Object),
    stackTrace: dart.finalFieldType(core.StackTrace)
  }));
  dart.defineExtensionMethods(async.AsyncError, ['toString']);
  dart.defineExtensionAccessors(async.AsyncError, ['stackTrace']);
  var _controller$ = dart.privateName(async, "_controller");
  var _subscribe = dart.privateName(async, "_subscribe");
  var _createSubscription = dart.privateName(async, "_createSubscription");
  var _onListen$ = dart.privateName(async, "_onListen");
  const _is__StreamImpl_default = Symbol('_is__StreamImpl_default');
  async._StreamImpl$ = dart.generic(T => {
    var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
    class _StreamImpl extends async.Stream$(T) {
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        cancelOnError == null ? cancelOnError = false : null;
        let subscription = this[_createSubscription](onData, onError, onDone, cancelOnError);
        this[_onListen$](subscription);
        return subscription;
      }
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[65], 481, 47, "cancelOnError");
        return new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
      }
      [_onListen$](subscription) {
        if (subscription == null) dart.nullFailed(I[65], 487, 37, "subscription");
      }
    }
    (_StreamImpl.new = function() {
      _StreamImpl.__proto__.new.call(this);
      ;
    }).prototype = _StreamImpl.prototype;
    dart.addTypeTests(_StreamImpl);
    _StreamImpl.prototype[_is__StreamImpl_default] = true;
    dart.addTypeCaches(_StreamImpl);
    dart.setMethodSignature(_StreamImpl, () => ({
      __proto__: dart.getMethods(_StreamImpl.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [_createSubscription]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
      [_onListen$]: dart.fnType(dart.void, [async.StreamSubscription])
    }));
    dart.setLibraryUri(_StreamImpl, I[29]);
    return _StreamImpl;
  });
  async._StreamImpl = async._StreamImpl$();
  dart.addTypeTests(async._StreamImpl, _is__StreamImpl_default);
  const _is__ControllerStream_default = Symbol('_is__ControllerStream_default');
  async._ControllerStream$ = dart.generic(T => {
    class _ControllerStream extends async._StreamImpl$(T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[64], 785, 51, "cancelOnError");
        return this[_controller$][_subscribe](onData, onError, onDone, cancelOnError);
      }
      get hashCode() {
        return (dart.notNull(dart.hashCode(this[_controller$])) ^ 892482866) >>> 0;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) return true;
        return async._ControllerStream.is(other) && other[_controller$] == this[_controller$];
      }
    }
    (_ControllerStream.new = function(_controller) {
      if (_controller == null) dart.nullFailed(I[64], 782, 26, "_controller");
      this[_controller$] = _controller;
      _ControllerStream.__proto__.new.call(this);
      ;
    }).prototype = _ControllerStream.prototype;
    dart.addTypeTests(_ControllerStream);
    _ControllerStream.prototype[_is__ControllerStream_default] = true;
    dart.addTypeCaches(_ControllerStream);
    dart.setLibraryUri(_ControllerStream, I[29]);
    dart.setFieldSignature(_ControllerStream, () => ({
      __proto__: dart.getFields(_ControllerStream.__proto__),
      [_controller$]: dart.fieldType(async._StreamControllerLifecycle$(T))
    }));
    dart.defineExtensionMethods(_ControllerStream, ['_equals']);
    dart.defineExtensionAccessors(_ControllerStream, ['hashCode']);
    return _ControllerStream;
  });
  async._ControllerStream = async._ControllerStream$();
  dart.addTypeTests(async._ControllerStream, _is__ControllerStream_default);
  const _is__BroadcastStream_default = Symbol('_is__BroadcastStream_default');
  async._BroadcastStream$ = dart.generic(T => {
    class _BroadcastStream extends async._ControllerStream$(T) {
      get isBroadcast() {
        return true;
      }
    }
    (_BroadcastStream.new = function(controller) {
      if (controller == null) dart.nullFailed(I[63], 8, 50, "controller");
      _BroadcastStream.__proto__.new.call(this, controller);
      ;
    }).prototype = _BroadcastStream.prototype;
    dart.addTypeTests(_BroadcastStream);
    _BroadcastStream.prototype[_is__BroadcastStream_default] = true;
    dart.addTypeCaches(_BroadcastStream);
    dart.setLibraryUri(_BroadcastStream, I[29]);
    return _BroadcastStream;
  });
  async._BroadcastStream = async._BroadcastStream$();
  dart.addTypeTests(async._BroadcastStream, _is__BroadcastStream_default);
  var _next$0 = dart.privateName(async, "_BroadcastSubscription._next");
  var _previous$0 = dart.privateName(async, "_BroadcastSubscription._previous");
  var _eventState = dart.privateName(async, "_eventState");
  var _next$1 = dart.privateName(async, "_next");
  var _previous$1 = dart.privateName(async, "_previous");
  var _expectsEvent = dart.privateName(async, "_expectsEvent");
  var _toggleEventId = dart.privateName(async, "_toggleEventId");
  var _isFiring = dart.privateName(async, "_isFiring");
  var _setRemoveAfterFiring = dart.privateName(async, "_setRemoveAfterFiring");
  var _removeAfterFiring = dart.privateName(async, "_removeAfterFiring");
  var _onPause = dart.privateName(async, "_onPause");
  var _onResume = dart.privateName(async, "_onResume");
  var _recordCancel = dart.privateName(async, "_recordCancel");
  var _onCancel = dart.privateName(async, "_onCancel");
  var _recordPause = dart.privateName(async, "_recordPause");
  var _recordResume = dart.privateName(async, "_recordResume");
  var _cancelFuture = dart.privateName(async, "_cancelFuture");
  var _pending$ = dart.privateName(async, "_pending");
  var _zone$ = dart.privateName(async, "_zone");
  var _state = dart.privateName(async, "_state");
  var _onData$ = dart.privateName(async, "_onData");
  var _onError = dart.privateName(async, "_onError");
  var _onDone$ = dart.privateName(async, "_onDone");
  var _setPendingEvents = dart.privateName(async, "_setPendingEvents");
  var _isCanceled = dart.privateName(async, "_isCanceled");
  var _isPaused = dart.privateName(async, "_isPaused");
  var _isInputPaused = dart.privateName(async, "_isInputPaused");
  var _inCallback = dart.privateName(async, "_inCallback");
  var _guardCallback = dart.privateName(async, "_guardCallback");
  var _decrementPauseCount = dart.privateName(async, "_decrementPauseCount");
  var _hasPending = dart.privateName(async, "_hasPending");
  var _mayResumeInput = dart.privateName(async, "_mayResumeInput");
  var _cancel = dart.privateName(async, "_cancel");
  var _isClosed = dart.privateName(async, "_isClosed");
  var _waitsForCancel = dart.privateName(async, "_waitsForCancel");
  var _canFire = dart.privateName(async, "_canFire");
  var _cancelOnError = dart.privateName(async, "_cancelOnError");
  var _sendData = dart.privateName(async, "_sendData");
  var _addPending = dart.privateName(async, "_addPending");
  var _sendError = dart.privateName(async, "_sendError");
  var _sendDone = dart.privateName(async, "_sendDone");
  var _close = dart.privateName(async, "_close");
  var _checkState = dart.privateName(async, "_checkState");
  const _is__BufferingStreamSubscription_default = Symbol('_is__BufferingStreamSubscription_default');
  async._BufferingStreamSubscription$ = dart.generic(T => {
    var _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
    var _PendingEventsNOfT = () => (_PendingEventsNOfT = dart.constFn(dart.nullable(_PendingEventsOfT())))();
    var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
    var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
    var _StreamImplEventsNOfT = () => (_StreamImplEventsNOfT = dart.constFn(dart.nullable(_StreamImplEventsOfT())))();
    class _BufferingStreamSubscription extends core.Object {
      [_setPendingEvents](pendingEvents) {
        _PendingEventsNOfT().as(pendingEvents);
        if (!(this[_pending$] == null)) dart.assertFailed(null, I[65], 117, 12, "_pending == null");
        if (pendingEvents == null) return;
        this[_pending$] = pendingEvents;
        if (!dart.test(pendingEvents.isEmpty)) {
          this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
          pendingEvents.schedule(this);
        }
      }
      onData(handleData) {
        this[_onData$] = async._BufferingStreamSubscription._registerDataHandler(T, this[_zone$], handleData);
      }
      static _registerDataHandler(T, zone, handleData) {
        let t87;
        if (zone == null) dart.nullFailed(I[65], 133, 12, "zone");
        return zone.registerUnaryCallback(dart.void, T, (t87 = handleData, t87 == null ? C[37] || CT.C37 : t87));
      }
      onError(handleError) {
        this[_onError] = async._BufferingStreamSubscription._registerErrorHandler(this[_zone$], handleError);
      }
      static _registerErrorHandler(zone, handleError) {
        if (zone == null) dart.nullFailed(I[65], 141, 46, "zone");
        handleError == null ? handleError = C[38] || CT.C38 : null;
        if (T$.ObjectAndStackTraceTovoid().is(handleError)) {
          return zone.registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, handleError);
        }
        if (T$.ObjectTovoid().is(handleError)) {
          return zone.registerUnaryCallback(dart.dynamic, core.Object, handleError);
        }
        dart.throw(new core.ArgumentError.new("handleError callback must take either an Object " + "(the error), or both an Object (the error) and a StackTrace."));
      }
      onDone(handleDone) {
        this[_onDone$] = async._BufferingStreamSubscription._registerDoneHandler(this[_zone$], handleDone);
      }
      static _registerDoneHandler(zone, handleDone) {
        let t87;
        if (zone == null) dart.nullFailed(I[65], 160, 12, "zone");
        return zone.registerCallback(dart.void, (t87 = handleDone, t87 == null ? C[39] || CT.C39 : t87));
      }
      pause(resumeSignal = null) {
        let t87, t87$;
        if (dart.test(this[_isCanceled])) return;
        let wasPaused = this[_isPaused];
        let wasInputPaused = this[_isInputPaused];
        this[_state] = (dart.notNull(this[_state]) + 128 | 4) >>> 0;
        t87 = resumeSignal;
        t87 == null ? null : t87.whenComplete(dart.bind(this, 'resume'));
        if (!dart.test(wasPaused)) {
          t87$ = this[_pending$];
          t87$ == null ? null : t87$.cancelSchedule();
        }
        if (!dart.test(wasInputPaused) && !dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onPause));
      }
      resume() {
        if (dart.test(this[_isCanceled])) return;
        if (dart.test(this[_isPaused])) {
          this[_decrementPauseCount]();
          if (!dart.test(this[_isPaused])) {
            if (dart.test(this[_hasPending]) && !dart.test(dart.nullCheck(this[_pending$]).isEmpty)) {
              dart.nullCheck(this[_pending$]).schedule(this);
            } else {
              if (!dart.test(this[_mayResumeInput])) dart.assertFailed(null, I[65], 184, 18, "_mayResumeInput");
              this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
              if (!dart.test(this[_inCallback])) this[_guardCallback](dart.bind(this, _onResume));
            }
          }
        }
      }
      cancel() {
        let t87;
        this[_state] = (dart.notNull(this[_state]) & ~16 >>> 0) >>> 0;
        if (!dart.test(this[_isCanceled])) {
          this[_cancel]();
        }
        t87 = this[_cancelFuture];
        return t87 == null ? async.Future._nullFuture : t87;
      }
      asFuture(E, futureValue = null) {
        let resultValue = null;
        if (futureValue == null) {
          if (!dart.test(_internal.typeAcceptsNull(E))) {
            dart.throw(new core.ArgumentError.notNull("futureValue"));
          }
          resultValue = E.as(futureValue);
        } else {
          resultValue = futureValue;
        }
        let result = new (async._Future$(E)).new();
        this[_onDone$] = dart.fn(() => {
          result[_complete](resultValue);
        }, T$.VoidTovoid());
        this[_onError] = dart.fn((error, stackTrace) => {
          if (error == null) dart.nullFailed(I[65], 218, 24, "error");
          if (stackTrace == null) dart.nullFailed(I[65], 218, 42, "stackTrace");
          let cancelFuture = this.cancel();
          if (cancelFuture != async.Future._nullFuture) {
            cancelFuture.whenComplete(dart.fn(() => {
              result[_completeError](error, stackTrace);
            }, T$.VoidToNull()));
          } else {
            result[_completeError](error, stackTrace);
          }
        }, T$.ObjectAndStackTraceToNull());
        return result;
      }
      get [_isInputPaused]() {
        return (dart.notNull(this[_state]) & 4) !== 0;
      }
      get [_isClosed]() {
        return (dart.notNull(this[_state]) & 2) !== 0;
      }
      get [_isCanceled]() {
        return (dart.notNull(this[_state]) & 8) !== 0;
      }
      get [_waitsForCancel]() {
        return (dart.notNull(this[_state]) & 16) !== 0;
      }
      get [_inCallback]() {
        return (dart.notNull(this[_state]) & 32) !== 0;
      }
      get [_hasPending]() {
        return (dart.notNull(this[_state]) & 64) !== 0;
      }
      get [_isPaused]() {
        return dart.notNull(this[_state]) >= 128;
      }
      get [_canFire]() {
        return dart.notNull(this[_state]) < 32;
      }
      get [_mayResumeInput]() {
        let t87, t87$;
        return !dart.test(this[_isPaused]) && dart.test((t87$ = (t87 = this[_pending$], t87 == null ? null : t87.isEmpty), t87$ == null ? true : t87$));
      }
      get [_cancelOnError]() {
        return (dart.notNull(this[_state]) & 1) !== 0;
      }
      get isPaused() {
        return this[_isPaused];
      }
      [_cancel]() {
        this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
        if (dart.test(this[_hasPending])) {
          dart.nullCheck(this[_pending$]).cancelSchedule();
        }
        if (!dart.test(this[_inCallback])) this[_pending$] = null;
        this[_cancelFuture] = this[_onCancel]();
      }
      [_decrementPauseCount]() {
        if (!dart.test(this[_isPaused])) dart.assertFailed(null, I[65], 261, 12, "_isPaused");
        this[_state] = dart.notNull(this[_state]) - 128;
      }
      [_add](data) {
        T.as(data);
        if (!!dart.test(this[_isClosed])) dart.assertFailed(null, I[65], 268, 12, "!_isClosed");
        if (dart.test(this[_isCanceled])) return;
        if (dart.test(this[_canFire])) {
          this[_sendData](data);
        } else {
          this[_addPending](new (_DelayedDataOfT()).new(data));
        }
      }
      [_addError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[65], 277, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[65], 277, 43, "stackTrace");
        if (dart.test(this[_isCanceled])) return;
        if (dart.test(this[_canFire])) {
          this[_sendError](error, stackTrace);
        } else {
          this[_addPending](new async._DelayedError.new(error, stackTrace));
        }
      }
      [_close]() {
        if (!!dart.test(this[_isClosed])) dart.assertFailed(null, I[65], 287, 12, "!_isClosed");
        if (dart.test(this[_isCanceled])) return;
        this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
        if (dart.test(this[_canFire])) {
          this[_sendDone]();
        } else {
          this[_addPending](C[40] || CT.C40);
        }
      }
      [_onPause]() {
        if (!dart.test(this[_isInputPaused])) dart.assertFailed(null, I[65], 302, 12, "_isInputPaused");
      }
      [_onResume]() {
        if (!!dart.test(this[_isInputPaused])) dart.assertFailed(null, I[65], 306, 12, "!_isInputPaused");
      }
      [_onCancel]() {
        if (!dart.test(this[_isCanceled])) dart.assertFailed(null, I[65], 310, 12, "_isCanceled");
        return null;
      }
      [_addPending](event) {
        if (event == null) dart.nullFailed(I[65], 320, 34, "event");
        let pending = _StreamImplEventsNOfT().as(this[_pending$]);
        pending == null ? pending = new (_StreamImplEventsOfT()).new() : null;
        this[_pending$] = pending;
        pending.add(event);
        if (!dart.test(this[_hasPending])) {
          this[_state] = (dart.notNull(this[_state]) | 64) >>> 0;
          if (!dart.test(this[_isPaused])) {
            pending.schedule(this);
          }
        }
      }
      [_sendData](data) {
        if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, I[65], 336, 12, "!_isCanceled");
        if (!!dart.test(this[_isPaused])) dart.assertFailed(null, I[65], 337, 12, "!_isPaused");
        if (!!dart.test(this[_inCallback])) dart.assertFailed(null, I[65], 338, 12, "!_inCallback");
        let wasInputPaused = this[_isInputPaused];
        this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
        this[_zone$].runUnaryGuarded(T, this[_onData$], data);
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        this[_checkState](wasInputPaused);
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[65], 346, 26, "error");
        if (stackTrace == null) dart.nullFailed(I[65], 346, 44, "stackTrace");
        if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, I[65], 347, 12, "!_isCanceled");
        if (!!dart.test(this[_isPaused])) dart.assertFailed(null, I[65], 348, 12, "!_isPaused");
        if (!!dart.test(this[_inCallback])) dart.assertFailed(null, I[65], 349, 12, "!_inCallback");
        let wasInputPaused = this[_isInputPaused];
        const sendError = () => {
          if (dart.test(this[_isCanceled]) && !dart.test(this[_waitsForCancel])) return;
          this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
          let onError = this[_onError];
          if (T$.ObjectAndStackTraceTovoid().is(onError)) {
            this[_zone$].runBinaryGuarded(core.Object, core.StackTrace, onError, error, stackTrace);
          } else {
            this[_zone$].runUnaryGuarded(core.Object, T$.ObjectTovoid().as(this[_onError]), error);
          }
          this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        };
        dart.fn(sendError, T$.VoidTovoid());
        if (dart.test(this[_cancelOnError])) {
          this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
          this[_cancel]();
          let cancelFuture = this[_cancelFuture];
          if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
            cancelFuture.whenComplete(sendError);
          } else {
            sendError();
          }
        } else {
          sendError();
          this[_checkState](wasInputPaused);
        }
      }
      [_sendDone]() {
        if (!!dart.test(this[_isCanceled])) dart.assertFailed(null, I[65], 385, 12, "!_isCanceled");
        if (!!dart.test(this[_isPaused])) dart.assertFailed(null, I[65], 386, 12, "!_isPaused");
        if (!!dart.test(this[_inCallback])) dart.assertFailed(null, I[65], 387, 12, "!_inCallback");
        const sendDone = () => {
          if (!dart.test(this[_waitsForCancel])) return;
          this[_state] = (dart.notNull(this[_state]) | (8 | 2 | 32) >>> 0) >>> 0;
          this[_zone$].runGuarded(this[_onDone$]);
          this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        };
        dart.fn(sendDone, T$.VoidTovoid());
        this[_cancel]();
        this[_state] = (dart.notNull(this[_state]) | 16) >>> 0;
        let cancelFuture = this[_cancelFuture];
        if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
          cancelFuture.whenComplete(sendDone);
        } else {
          sendDone();
        }
      }
      [_guardCallback](callback) {
        if (callback == null) dart.nullFailed(I[65], 413, 39, "callback");
        if (!!dart.test(this[_inCallback])) dart.assertFailed(null, I[65], 414, 12, "!_inCallback");
        let wasInputPaused = this[_isInputPaused];
        this[_state] = (dart.notNull(this[_state]) | 32) >>> 0;
        callback();
        this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
        this[_checkState](wasInputPaused);
      }
      [_checkState](wasInputPaused) {
        if (wasInputPaused == null) dart.nullFailed(I[65], 430, 25, "wasInputPaused");
        if (!!dart.test(this[_inCallback])) dart.assertFailed(null, I[65], 431, 12, "!_inCallback");
        if (dart.test(this[_hasPending]) && dart.test(dart.nullCheck(this[_pending$]).isEmpty)) {
          this[_state] = (dart.notNull(this[_state]) & ~64 >>> 0) >>> 0;
          if (dart.test(this[_isInputPaused]) && dart.test(this[_mayResumeInput])) {
            this[_state] = (dart.notNull(this[_state]) & ~4 >>> 0) >>> 0;
          }
        }
        while (true) {
          if (dart.test(this[_isCanceled])) {
            this[_pending$] = null;
            return;
          }
          let isInputPaused = this[_isInputPaused];
          if (wasInputPaused == isInputPaused) break;
          this[_state] = (dart.notNull(this[_state]) ^ 32) >>> 0;
          if (dart.test(isInputPaused)) {
            this[_onPause]();
          } else {
            this[_onResume]();
          }
          this[_state] = (dart.notNull(this[_state]) & ~32 >>> 0) >>> 0;
          wasInputPaused = isInputPaused;
        }
        if (dart.test(this[_hasPending]) && !dart.test(this[_isPaused])) {
          dart.nullCheck(this[_pending$]).schedule(this);
        }
      }
    }
    (_BufferingStreamSubscription.new = function(onData, onError, onDone, cancelOnError) {
      if (cancelOnError == null) dart.nullFailed(I[65], 102, 28, "cancelOnError");
      _BufferingStreamSubscription.zoned.call(this, async.Zone.current, onData, onError, onDone, cancelOnError);
    }).prototype = _BufferingStreamSubscription.prototype;
    (_BufferingStreamSubscription.zoned = function(_zone, onData, onError, onDone, cancelOnError) {
      if (_zone == null) dart.nullFailed(I[65], 105, 43, "_zone");
      if (cancelOnError == null) dart.nullFailed(I[65], 106, 47, "cancelOnError");
      this[_cancelFuture] = null;
      this[_pending$] = null;
      this[_zone$] = _zone;
      this[_state] = dart.test(cancelOnError) ? 1 : 0;
      this[_onData$] = async._BufferingStreamSubscription._registerDataHandler(T, _zone, onData);
      this[_onError] = async._BufferingStreamSubscription._registerErrorHandler(_zone, onError);
      this[_onDone$] = async._BufferingStreamSubscription._registerDoneHandler(_zone, onDone);
      ;
    }).prototype = _BufferingStreamSubscription.prototype;
    _BufferingStreamSubscription.prototype[dart.isStreamSubscription] = true;
    dart.addTypeTests(_BufferingStreamSubscription);
    _BufferingStreamSubscription.prototype[_is__BufferingStreamSubscription_default] = true;
    dart.addTypeCaches(_BufferingStreamSubscription);
    _BufferingStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T), async._EventSink$(T), async._EventDispatch$(T)];
    dart.setMethodSignature(_BufferingStreamSubscription, () => ({
      __proto__: dart.getMethods(_BufferingStreamSubscription.__proto__),
      [_setPendingEvents]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      [_cancel]: dart.fnType(dart.void, []),
      [_decrementPauseCount]: dart.fnType(dart.void, []),
      [_add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_close]: dart.fnType(dart.void, []),
      [_onPause]: dart.fnType(dart.void, []),
      [_onResume]: dart.fnType(dart.void, []),
      [_onCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), []),
      [_addPending]: dart.fnType(dart.void, [async._DelayedEvent]),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, []),
      [_guardCallback]: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
      [_checkState]: dart.fnType(dart.void, [core.bool])
    }));
    dart.setGetterSignature(_BufferingStreamSubscription, () => ({
      __proto__: dart.getGetters(_BufferingStreamSubscription.__proto__),
      [_isInputPaused]: core.bool,
      [_isClosed]: core.bool,
      [_isCanceled]: core.bool,
      [_waitsForCancel]: core.bool,
      [_inCallback]: core.bool,
      [_hasPending]: core.bool,
      [_isPaused]: core.bool,
      [_canFire]: core.bool,
      [_mayResumeInput]: core.bool,
      [_cancelOnError]: core.bool,
      isPaused: core.bool
    }));
    dart.setLibraryUri(_BufferingStreamSubscription, I[29]);
    dart.setFieldSignature(_BufferingStreamSubscription, () => ({
      __proto__: dart.getFields(_BufferingStreamSubscription.__proto__),
      [_onData$]: dart.fieldType(dart.fnType(dart.void, [T])),
      [_onError]: dart.fieldType(core.Function),
      [_onDone$]: dart.fieldType(dart.fnType(dart.void, [])),
      [_zone$]: dart.finalFieldType(async.Zone),
      [_state]: dart.fieldType(core.int),
      [_cancelFuture]: dart.fieldType(dart.nullable(async.Future)),
      [_pending$]: dart.fieldType(dart.nullable(async._PendingEvents$(T)))
    }));
    return _BufferingStreamSubscription;
  });
  async._BufferingStreamSubscription = async._BufferingStreamSubscription$();
  dart.defineLazy(async._BufferingStreamSubscription, {
    /*async._BufferingStreamSubscription._STATE_CANCEL_ON_ERROR*/get _STATE_CANCEL_ON_ERROR() {
      return 1;
    },
    /*async._BufferingStreamSubscription._STATE_CLOSED*/get _STATE_CLOSED() {
      return 2;
    },
    /*async._BufferingStreamSubscription._STATE_INPUT_PAUSED*/get _STATE_INPUT_PAUSED() {
      return 4;
    },
    /*async._BufferingStreamSubscription._STATE_CANCELED*/get _STATE_CANCELED() {
      return 8;
    },
    /*async._BufferingStreamSubscription._STATE_WAIT_FOR_CANCEL*/get _STATE_WAIT_FOR_CANCEL() {
      return 16;
    },
    /*async._BufferingStreamSubscription._STATE_IN_CALLBACK*/get _STATE_IN_CALLBACK() {
      return 32;
    },
    /*async._BufferingStreamSubscription._STATE_HAS_PENDING*/get _STATE_HAS_PENDING() {
      return 64;
    },
    /*async._BufferingStreamSubscription._STATE_PAUSE_COUNT*/get _STATE_PAUSE_COUNT() {
      return 128;
    }
  }, false);
  dart.addTypeTests(async._BufferingStreamSubscription, _is__BufferingStreamSubscription_default);
  const _is__ControllerSubscription_default = Symbol('_is__ControllerSubscription_default');
  async._ControllerSubscription$ = dart.generic(T => {
    class _ControllerSubscription extends async._BufferingStreamSubscription$(T) {
      [_onCancel]() {
        return this[_controller$][_recordCancel](this);
      }
      [_onPause]() {
        this[_controller$][_recordPause](this);
      }
      [_onResume]() {
        this[_controller$][_recordResume](this);
      }
    }
    (_ControllerSubscription.new = function(_controller, onData, onError, onDone, cancelOnError) {
      if (_controller == null) dart.nullFailed(I[64], 804, 32, "_controller");
      if (cancelOnError == null) dart.nullFailed(I[64], 805, 47, "cancelOnError");
      this[_controller$] = _controller;
      _ControllerSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
      ;
    }).prototype = _ControllerSubscription.prototype;
    dart.addTypeTests(_ControllerSubscription);
    _ControllerSubscription.prototype[_is__ControllerSubscription_default] = true;
    dart.addTypeCaches(_ControllerSubscription);
    dart.setLibraryUri(_ControllerSubscription, I[29]);
    dart.setFieldSignature(_ControllerSubscription, () => ({
      __proto__: dart.getFields(_ControllerSubscription.__proto__),
      [_controller$]: dart.finalFieldType(async._StreamControllerLifecycle$(T))
    }));
    return _ControllerSubscription;
  });
  async._ControllerSubscription = async._ControllerSubscription$();
  dart.addTypeTests(async._ControllerSubscription, _is__ControllerSubscription_default);
  const _is__BroadcastSubscription_default = Symbol('_is__BroadcastSubscription_default');
  async._BroadcastSubscription$ = dart.generic(T => {
    var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
    var _BroadcastSubscriptionNOfT = () => (_BroadcastSubscriptionNOfT = dart.constFn(dart.nullable(_BroadcastSubscriptionOfT())))();
    class _BroadcastSubscription extends async._ControllerSubscription$(T) {
      get [_next$1]() {
        return this[_next$0];
      }
      set [_next$1](value) {
        this[_next$0] = _BroadcastSubscriptionNOfT().as(value);
      }
      get [_previous$1]() {
        return this[_previous$0];
      }
      set [_previous$1](value) {
        this[_previous$0] = _BroadcastSubscriptionNOfT().as(value);
      }
      [_expectsEvent](eventId) {
        if (eventId == null) dart.nullFailed(I[63], 36, 26, "eventId");
        return (dart.notNull(this[_eventState]) & 1) >>> 0 === eventId;
      }
      [_toggleEventId]() {
        this[_eventState] = (dart.notNull(this[_eventState]) ^ 1) >>> 0;
      }
      get [_isFiring]() {
        return (dart.notNull(this[_eventState]) & 2) !== 0;
      }
      [_setRemoveAfterFiring]() {
        if (!dart.test(this[_isFiring])) dart.assertFailed(null, I[63], 45, 12, "_isFiring");
        this[_eventState] = (dart.notNull(this[_eventState]) | 4) >>> 0;
      }
      get [_removeAfterFiring]() {
        return (dart.notNull(this[_eventState]) & 4) !== 0;
      }
      [_onPause]() {
      }
      [_onResume]() {
      }
    }
    (_BroadcastSubscription.new = function(controller, onData, onError, onDone, cancelOnError) {
      if (controller == null) dart.nullFailed(I[63], 27, 37, "controller");
      if (cancelOnError == null) dart.nullFailed(I[63], 31, 12, "cancelOnError");
      this[_eventState] = 0;
      this[_next$0] = null;
      this[_previous$0] = null;
      _BroadcastSubscription.__proto__.new.call(this, controller, onData, onError, onDone, cancelOnError);
      this[_next$1] = this[_previous$1] = this;
    }).prototype = _BroadcastSubscription.prototype;
    dart.addTypeTests(_BroadcastSubscription);
    _BroadcastSubscription.prototype[_is__BroadcastSubscription_default] = true;
    dart.addTypeCaches(_BroadcastSubscription);
    dart.setMethodSignature(_BroadcastSubscription, () => ({
      __proto__: dart.getMethods(_BroadcastSubscription.__proto__),
      [_expectsEvent]: dart.fnType(core.bool, [core.int]),
      [_toggleEventId]: dart.fnType(dart.void, []),
      [_setRemoveAfterFiring]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_BroadcastSubscription, () => ({
      __proto__: dart.getGetters(_BroadcastSubscription.__proto__),
      [_isFiring]: core.bool,
      [_removeAfterFiring]: core.bool
    }));
    dart.setLibraryUri(_BroadcastSubscription, I[29]);
    dart.setFieldSignature(_BroadcastSubscription, () => ({
      __proto__: dart.getFields(_BroadcastSubscription.__proto__),
      [_eventState]: dart.fieldType(core.int),
      [_next$1]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
      [_previous$1]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T)))
    }));
    return _BroadcastSubscription;
  });
  async._BroadcastSubscription = async._BroadcastSubscription$();
  dart.defineLazy(async._BroadcastSubscription, {
    /*async._BroadcastSubscription._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
      return 1;
    },
    /*async._BroadcastSubscription._STATE_FIRING*/get _STATE_FIRING() {
      return 2;
    },
    /*async._BroadcastSubscription._STATE_REMOVE_AFTER_FIRING*/get _STATE_REMOVE_AFTER_FIRING() {
      return 4;
    }
  }, false);
  dart.addTypeTests(async._BroadcastSubscription, _is__BroadcastSubscription_default);
  var _firstSubscription = dart.privateName(async, "_firstSubscription");
  var _lastSubscription = dart.privateName(async, "_lastSubscription");
  var _addStreamState = dart.privateName(async, "_addStreamState");
  var _doneFuture = dart.privateName(async, "_doneFuture");
  var _isEmpty = dart.privateName(async, "_isEmpty");
  var _hasOneListener = dart.privateName(async, "_hasOneListener");
  var _isAddingStream = dart.privateName(async, "_isAddingStream");
  var _mayAddEvent = dart.privateName(async, "_mayAddEvent");
  var _ensureDoneFuture = dart.privateName(async, "_ensureDoneFuture");
  var _addListener = dart.privateName(async, "_addListener");
  var _removeListener = dart.privateName(async, "_removeListener");
  var _callOnCancel = dart.privateName(async, "_callOnCancel");
  var _addEventError = dart.privateName(async, "_addEventError");
  var _forEachListener = dart.privateName(async, "_forEachListener");
  var _mayComplete = dart.privateName(async, "_mayComplete");
  var _asyncComplete = dart.privateName(async, "_asyncComplete");
  const _is__BroadcastStreamController_default = Symbol('_is__BroadcastStreamController_default');
  async._BroadcastStreamController$ = dart.generic(T => {
    var _BroadcastStreamOfT = () => (_BroadcastStreamOfT = dart.constFn(async._BroadcastStream$(T)))();
    var _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
    var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
    var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var _AddStreamStateOfT = () => (_AddStreamStateOfT = dart.constFn(async._AddStreamState$(T)))();
    class _BroadcastStreamController extends core.Object {
      get onPause() {
        dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
      }
      set onPause(onPauseHandler) {
        dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
      }
      get onResume() {
        dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
      }
      set onResume(onResumeHandler) {
        dart.throw(new core.UnsupportedError.new("Broadcast stream controllers do not support pause callbacks"));
      }
      get stream() {
        return new (_BroadcastStreamOfT()).new(this);
      }
      get sink() {
        return new (_StreamSinkWrapperOfT()).new(this);
      }
      get isClosed() {
        return (dart.notNull(this[_state]) & 4) !== 0;
      }
      get isPaused() {
        return false;
      }
      get hasListener() {
        return !dart.test(this[_isEmpty]);
      }
      get [_hasOneListener]() {
        if (!!dart.test(this[_isEmpty])) dart.assertFailed(null, I[63], 141, 12, "!_isEmpty");
        return this[_firstSubscription] == this[_lastSubscription];
      }
      get [_isFiring]() {
        return (dart.notNull(this[_state]) & 2) !== 0;
      }
      get [_isAddingStream]() {
        return (dart.notNull(this[_state]) & 8) !== 0;
      }
      get [_mayAddEvent]() {
        return dart.notNull(this[_state]) < 4;
      }
      [_ensureDoneFuture]() {
        let t87;
        t87 = this[_doneFuture];
        return t87 == null ? this[_doneFuture] = new (T$._FutureOfvoid()).new() : t87;
      }
      get [_isEmpty]() {
        return this[_firstSubscription] == null;
      }
      [_addListener](subscription) {
        if (subscription == null) dart.nullFailed(I[63], 159, 47, "subscription");
        if (!(subscription[_next$1] == subscription)) dart.assertFailed(null, I[63], 160, 12, "identical(subscription._next, subscription)");
        subscription[_eventState] = (dart.notNull(this[_state]) & 1) >>> 0;
        let oldLast = this[_lastSubscription];
        this[_lastSubscription] = subscription;
        subscription[_next$1] = null;
        subscription[_previous$1] = oldLast;
        if (oldLast == null) {
          this[_firstSubscription] = subscription;
        } else {
          oldLast[_next$1] = subscription;
        }
      }
      [_removeListener](subscription) {
        if (subscription == null) dart.nullFailed(I[63], 174, 50, "subscription");
        if (!(subscription[_controller$] === this)) dart.assertFailed(null, I[63], 175, 12, "identical(subscription._controller, this)");
        if (!(subscription[_next$1] != subscription)) dart.assertFailed(null, I[63], 176, 12, "!identical(subscription._next, subscription)");
        let previous = subscription[_previous$1];
        let next = subscription[_next$1];
        if (previous == null) {
          this[_firstSubscription] = next;
        } else {
          previous[_next$1] = next;
        }
        if (next == null) {
          this[_lastSubscription] = previous;
        } else {
          next[_previous$1] = previous;
        }
        subscription[_next$1] = subscription[_previous$1] = subscription;
      }
      [_subscribe](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[63], 198, 28, "cancelOnError");
        if (dart.test(this.isClosed)) {
          return new (_DoneStreamSubscriptionOfT()).new(onDone);
        }
        let subscription = new (_BroadcastSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
        this[_addListener](subscription);
        if (this[_firstSubscription] == this[_lastSubscription]) {
          async._runGuarded(this.onListen);
        }
        return subscription;
      }
      [_recordCancel](sub) {
        if (sub == null) dart.nullFailed(I[63], 212, 53, "sub");
        let subscription = _BroadcastSubscriptionOfT().as(sub);
        if (subscription[_next$1] == subscription) return null;
        if (dart.test(subscription[_isFiring])) {
          subscription[_setRemoveAfterFiring]();
        } else {
          this[_removeListener](subscription);
          if (!dart.test(this[_isFiring]) && dart.test(this[_isEmpty])) {
            this[_callOnCancel]();
          }
        }
        return null;
      }
      [_recordPause](subscription) {
        if (subscription == null) dart.nullFailed(I[63], 229, 43, "subscription");
      }
      [_recordResume](subscription) {
        if (subscription == null) dart.nullFailed(I[63], 230, 44, "subscription");
      }
      [_addEventError]() {
        if (dart.test(this.isClosed)) {
          return new core.StateError.new("Cannot add new events after calling close");
        }
        if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, I[63], 238, 12, "_isAddingStream");
        return new core.StateError.new("Cannot add new events while doing an addStream");
      }
      add(data) {
        T.as(data);
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
        this[_sendData](data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[63], 247, 24, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else {
          stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        }
        if (stackTrace == null) dart.throw("unreachable");
        this[_sendError](error, stackTrace);
      }
      close() {
        if (dart.test(this.isClosed)) {
          if (!(this[_doneFuture] != null)) dart.assertFailed(null, I[63], 263, 14, "_doneFuture != null");
          return dart.nullCheck(this[_doneFuture]);
        }
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
        this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
        let doneFuture = this[_ensureDoneFuture]();
        this[_sendDone]();
        return doneFuture;
      }
      get done() {
        return this[_ensureDoneFuture]();
      }
      addStream(stream, opts) {
        let t87;
        StreamOfT().as(stream);
        if (stream == null) dart.nullFailed(I[63], 275, 30, "stream");
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
        this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
        let addStreamState = new (_AddStreamStateOfT()).new(this, stream, (t87 = cancelOnError, t87 == null ? false : t87));
        this[_addStreamState] = addStreamState;
        return addStreamState.addStreamFuture;
      }
      [_add](data) {
        this[_sendData](data);
      }
      [_addError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[63], 289, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[63], 289, 43, "stackTrace");
        this[_sendError](error, stackTrace);
      }
      [_close]() {
        if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, I[63], 294, 12, "_isAddingStream");
        let addState = dart.nullCheck(this[_addStreamState]);
        this[_addStreamState] = null;
        this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
        addState.complete();
      }
      [_forEachListener](action) {
        let t87, t87$;
        if (action == null) dart.nullFailed(I[63], 303, 12, "action");
        if (dart.test(this[_isFiring])) {
          dart.throw(new core.StateError.new("Cannot fire new event. Controller is already firing an event"));
        }
        if (dart.test(this[_isEmpty])) return;
        let id = (dart.notNull(this[_state]) & 1) >>> 0;
        this[_state] = (dart.notNull(this[_state]) ^ (1 | 2) >>> 0) >>> 0;
        let subscription = this[_firstSubscription];
        while (subscription != null) {
          if (dart.test(subscription[_expectsEvent](id))) {
            t87 = subscription;
            t87[_eventState] = (dart.notNull(t87[_eventState]) | 2) >>> 0;
            action(subscription);
            subscription[_toggleEventId]();
            let next = subscription[_next$1];
            if (dart.test(subscription[_removeAfterFiring])) {
              this[_removeListener](subscription);
            }
            t87$ = subscription;
            t87$[_eventState] = (dart.notNull(t87$[_eventState]) & ~2 >>> 0) >>> 0;
            subscription = next;
          } else {
            subscription = subscription[_next$1];
          }
        }
        this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
        if (dart.test(this[_isEmpty])) {
          this[_callOnCancel]();
        }
      }
      [_callOnCancel]() {
        if (!dart.test(this[_isEmpty])) dart.assertFailed(null, I[63], 343, 12, "_isEmpty");
        if (dart.test(this.isClosed)) {
          let doneFuture = dart.nullCheck(this[_doneFuture]);
          if (dart.test(doneFuture[_mayComplete])) {
            doneFuture[_asyncComplete](null);
          }
        }
        async._runGuarded(this.onCancel);
      }
    }
    (_BroadcastStreamController.new = function(onListen, onCancel) {
      this[_firstSubscription] = null;
      this[_lastSubscription] = null;
      this[_addStreamState] = null;
      this[_doneFuture] = null;
      this.onListen = onListen;
      this.onCancel = onCancel;
      this[_state] = 0;
      ;
    }).prototype = _BroadcastStreamController.prototype;
    dart.addTypeTests(_BroadcastStreamController);
    _BroadcastStreamController.prototype[_is__BroadcastStreamController_default] = true;
    dart.addTypeCaches(_BroadcastStreamController);
    _BroadcastStreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
    dart.setMethodSignature(_BroadcastStreamController, () => ({
      __proto__: dart.getMethods(_BroadcastStreamController.__proto__),
      [_ensureDoneFuture]: dart.fnType(async._Future$(dart.void), []),
      [_addListener]: dart.fnType(dart.void, [async._BroadcastSubscription$(T)]),
      [_removeListener]: dart.fnType(dart.void, [async._BroadcastSubscription$(T)]),
      [_subscribe]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
      [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [async.StreamSubscription$(T)]),
      [_recordPause]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
      [_recordResume]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
      [_addEventError]: dart.fnType(core.Error, []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(async.Future, []),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)], {cancelOnError: dart.nullable(core.bool)}, {}),
      [_add]: dart.fnType(dart.void, [T]),
      [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_close]: dart.fnType(dart.void, []),
      [_forEachListener]: dart.fnType(dart.void, [dart.fnType(dart.void, [async._BufferingStreamSubscription$(T)])]),
      [_callOnCancel]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_BroadcastStreamController, () => ({
      __proto__: dart.getGetters(_BroadcastStreamController.__proto__),
      onPause: dart.fnType(dart.void, []),
      onResume: dart.fnType(dart.void, []),
      stream: async.Stream$(T),
      sink: async.StreamSink$(T),
      isClosed: core.bool,
      isPaused: core.bool,
      hasListener: core.bool,
      [_hasOneListener]: core.bool,
      [_isFiring]: core.bool,
      [_isAddingStream]: core.bool,
      [_mayAddEvent]: core.bool,
      [_isEmpty]: core.bool,
      done: async.Future$(dart.void)
    }));
    dart.setSetterSignature(_BroadcastStreamController, () => ({
      __proto__: dart.getSetters(_BroadcastStreamController.__proto__),
      onPause: dart.nullable(dart.fnType(dart.void, [])),
      onResume: dart.nullable(dart.fnType(dart.void, []))
    }));
    dart.setLibraryUri(_BroadcastStreamController, I[29]);
    dart.setFieldSignature(_BroadcastStreamController, () => ({
      __proto__: dart.getFields(_BroadcastStreamController.__proto__),
      onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [_state]: dart.fieldType(core.int),
      [_firstSubscription]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
      [_lastSubscription]: dart.fieldType(dart.nullable(async._BroadcastSubscription$(T))),
      [_addStreamState]: dart.fieldType(dart.nullable(async._AddStreamState$(T))),
      [_doneFuture]: dart.fieldType(dart.nullable(async._Future$(dart.void)))
    }));
    return _BroadcastStreamController;
  });
  async._BroadcastStreamController = async._BroadcastStreamController$();
  dart.defineLazy(async._BroadcastStreamController, {
    /*async._BroadcastStreamController._STATE_INITIAL*/get _STATE_INITIAL() {
      return 0;
    },
    /*async._BroadcastStreamController._STATE_EVENT_ID*/get _STATE_EVENT_ID() {
      return 1;
    },
    /*async._BroadcastStreamController._STATE_FIRING*/get _STATE_FIRING() {
      return 2;
    },
    /*async._BroadcastStreamController._STATE_CLOSED*/get _STATE_CLOSED() {
      return 4;
    },
    /*async._BroadcastStreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
      return 8;
    }
  }, false);
  dart.addTypeTests(async._BroadcastStreamController, _is__BroadcastStreamController_default);
  const _is__SyncBroadcastStreamController_default = Symbol('_is__SyncBroadcastStreamController_default');
  async._SyncBroadcastStreamController$ = dart.generic(T => {
    var _BroadcastSubscriptionOfT = () => (_BroadcastSubscriptionOfT = dart.constFn(async._BroadcastSubscription$(T)))();
    var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
    var _BufferingStreamSubscriptionOfTTovoid = () => (_BufferingStreamSubscriptionOfTTovoid = dart.constFn(dart.fnType(dart.void, [_BufferingStreamSubscriptionOfT()])))();
    class _SyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
      get [_mayAddEvent]() {
        return dart.test(super[_mayAddEvent]) && !dart.test(this[_isFiring]);
      }
      [_addEventError]() {
        if (dart.test(this[_isFiring])) {
          return new core.StateError.new("Cannot fire new event. Controller is already firing an event");
        }
        return super[_addEventError]();
      }
      [_sendData](data) {
        if (dart.test(this[_isEmpty])) return;
        if (dart.test(this[_hasOneListener])) {
          this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
          let firstSubscription = _BroadcastSubscriptionOfT().as(this[_firstSubscription]);
          firstSubscription[_add](data);
          this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
          if (dart.test(this[_isEmpty])) {
            this[_callOnCancel]();
          }
          return;
        }
        this[_forEachListener](dart.fn(subscription => {
          if (subscription == null) dart.nullFailed(I[63], 385, 55, "subscription");
          subscription[_add](data);
        }, _BufferingStreamSubscriptionOfTTovoid()));
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[63], 390, 26, "error");
        if (stackTrace == null) dart.nullFailed(I[63], 390, 44, "stackTrace");
        if (dart.test(this[_isEmpty])) return;
        this[_forEachListener](dart.fn(subscription => {
          if (subscription == null) dart.nullFailed(I[63], 392, 55, "subscription");
          subscription[_addError](error, stackTrace);
        }, _BufferingStreamSubscriptionOfTTovoid()));
      }
      [_sendDone]() {
        if (!dart.test(this[_isEmpty])) {
          this[_forEachListener](dart.fn(subscription => {
            if (subscription == null) dart.nullFailed(I[63], 399, 57, "subscription");
            subscription[_close]();
          }, _BufferingStreamSubscriptionOfTTovoid()));
        } else {
          if (!(this[_doneFuture] != null && dart.test(dart.nullCheck(this[_doneFuture])[_mayComplete]))) dart.assertFailed(null, I[63], 403, 14, "_doneFuture != null && _doneFuture!._mayComplete");
          dart.nullCheck(this[_doneFuture])[_asyncComplete](null);
        }
      }
    }
    (_SyncBroadcastStreamController.new = function(onListen, onCancel) {
      _SyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
      ;
    }).prototype = _SyncBroadcastStreamController.prototype;
    dart.addTypeTests(_SyncBroadcastStreamController);
    _SyncBroadcastStreamController.prototype[_is__SyncBroadcastStreamController_default] = true;
    dart.addTypeCaches(_SyncBroadcastStreamController);
    _SyncBroadcastStreamController[dart.implements] = () => [async.SynchronousStreamController$(T)];
    dart.setMethodSignature(_SyncBroadcastStreamController, () => ({
      __proto__: dart.getMethods(_SyncBroadcastStreamController.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SyncBroadcastStreamController, I[29]);
    return _SyncBroadcastStreamController;
  });
  async._SyncBroadcastStreamController = async._SyncBroadcastStreamController$();
  dart.addTypeTests(async._SyncBroadcastStreamController, _is__SyncBroadcastStreamController_default);
  const _is__AsyncBroadcastStreamController_default = Symbol('_is__AsyncBroadcastStreamController_default');
  async._AsyncBroadcastStreamController$ = dart.generic(T => {
    var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
    class _AsyncBroadcastStreamController extends async._BroadcastStreamController$(T) {
      [_sendData](data) {
        for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$1]) {
          subscription[_addPending](new (_DelayedDataOfT()).new(data));
        }
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[63], 423, 26, "error");
        if (stackTrace == null) dart.nullFailed(I[63], 423, 44, "stackTrace");
        for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$1]) {
          subscription[_addPending](new async._DelayedError.new(error, stackTrace));
        }
      }
      [_sendDone]() {
        if (!dart.test(this[_isEmpty])) {
          for (let subscription = this[_firstSubscription]; subscription != null; subscription = subscription[_next$1]) {
            subscription[_addPending](C[40] || CT.C40);
          }
        } else {
          if (!(this[_doneFuture] != null && dart.test(dart.nullCheck(this[_doneFuture])[_mayComplete]))) dart.assertFailed(null, I[63], 439, 14, "_doneFuture != null && _doneFuture!._mayComplete");
          dart.nullCheck(this[_doneFuture])[_asyncComplete](null);
        }
      }
    }
    (_AsyncBroadcastStreamController.new = function(onListen, onCancel) {
      _AsyncBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
      ;
    }).prototype = _AsyncBroadcastStreamController.prototype;
    dart.addTypeTests(_AsyncBroadcastStreamController);
    _AsyncBroadcastStreamController.prototype[_is__AsyncBroadcastStreamController_default] = true;
    dart.addTypeCaches(_AsyncBroadcastStreamController);
    dart.setMethodSignature(_AsyncBroadcastStreamController, () => ({
      __proto__: dart.getMethods(_AsyncBroadcastStreamController.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_AsyncBroadcastStreamController, I[29]);
    return _AsyncBroadcastStreamController;
  });
  async._AsyncBroadcastStreamController = async._AsyncBroadcastStreamController$();
  dart.addTypeTests(async._AsyncBroadcastStreamController, _is__AsyncBroadcastStreamController_default);
  var _addPendingEvent = dart.privateName(async, "_addPendingEvent");
  var _flushPending = dart.privateName(async, "_flushPending");
  const _is__AsBroadcastStreamController_default = Symbol('_is__AsBroadcastStreamController_default');
  async._AsBroadcastStreamController$ = dart.generic(T => {
    var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
    var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
    class _AsBroadcastStreamController extends async._SyncBroadcastStreamController$(T) {
      get [_hasPending]() {
        let pending = this[_pending$];
        return pending != null && !dart.test(pending.isEmpty);
      }
      [_addPendingEvent](event) {
        let t87;
        if (event == null) dart.nullFailed(I[63], 466, 39, "event");
        (t87 = this[_pending$], t87 == null ? this[_pending$] = new (_StreamImplEventsOfT()).new() : t87).add(event);
      }
      add(data) {
        T.as(data);
        if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
          this[_addPendingEvent](new (_DelayedDataOfT()).new(data));
          return;
        }
        super.add(data);
        this[_flushPending]();
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[63], 479, 24, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
          this[_addPendingEvent](new async._DelayedError.new(error, stackTrace));
          return;
        }
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_addEventError]());
        this[_sendError](error, stackTrace);
        this[_flushPending]();
      }
      [_flushPending]() {
        let pending = this[_pending$];
        while (pending != null && !dart.test(pending.isEmpty)) {
          pending.handleNext(this);
          pending = this[_pending$];
        }
      }
      close() {
        if (!dart.test(this.isClosed) && dart.test(this[_isFiring])) {
          this[_addPendingEvent](C[40] || CT.C40);
          this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
          return super.done;
        }
        let result = super.close();
        if (!!dart.test(this[_hasPending])) dart.assertFailed(null, I[63], 506, 12, "!_hasPending");
        return result;
      }
      [_callOnCancel]() {
        let pending = this[_pending$];
        if (pending != null) {
          pending.clear();
          this[_pending$] = null;
        }
        super[_callOnCancel]();
      }
    }
    (_AsBroadcastStreamController.new = function(onListen, onCancel) {
      this[_pending$] = null;
      _AsBroadcastStreamController.__proto__.new.call(this, onListen, onCancel);
      ;
    }).prototype = _AsBroadcastStreamController.prototype;
    dart.addTypeTests(_AsBroadcastStreamController);
    _AsBroadcastStreamController.prototype[_is__AsBroadcastStreamController_default] = true;
    dart.addTypeCaches(_AsBroadcastStreamController);
    _AsBroadcastStreamController[dart.implements] = () => [async._EventDispatch$(T)];
    dart.setMethodSignature(_AsBroadcastStreamController, () => ({
      __proto__: dart.getMethods(_AsBroadcastStreamController.__proto__),
      [_addPendingEvent]: dart.fnType(dart.void, [async._DelayedEvent]),
      [_flushPending]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_AsBroadcastStreamController, () => ({
      __proto__: dart.getGetters(_AsBroadcastStreamController.__proto__),
      [_hasPending]: core.bool
    }));
    dart.setLibraryUri(_AsBroadcastStreamController, I[29]);
    dart.setFieldSignature(_AsBroadcastStreamController, () => ({
      __proto__: dart.getFields(_AsBroadcastStreamController.__proto__),
      [_pending$]: dart.fieldType(dart.nullable(async._StreamImplEvents$(T)))
    }));
    return _AsBroadcastStreamController;
  });
  async._AsBroadcastStreamController = async._AsBroadcastStreamController$();
  dart.addTypeTests(async._AsBroadcastStreamController, _is__AsBroadcastStreamController_default);
  var libraryName$ = dart.privateName(async, "DeferredLibrary.libraryName");
  var uri$ = dart.privateName(async, "DeferredLibrary.uri");
  async.DeferredLibrary = class DeferredLibrary extends core.Object {
    get libraryName() {
      return this[libraryName$];
    }
    set libraryName(value) {
      super.libraryName = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    load() {
      dart.throw("DeferredLibrary not supported. " + "please use the `import \"lib.dart\" deferred as lib` syntax.");
    }
  };
  (async.DeferredLibrary.new = function(libraryName, opts) {
    if (libraryName == null) dart.nullFailed(I[66], 18, 30, "libraryName");
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[libraryName$] = libraryName;
    this[uri$] = uri;
    ;
  }).prototype = async.DeferredLibrary.prototype;
  dart.addTypeTests(async.DeferredLibrary);
  dart.addTypeCaches(async.DeferredLibrary);
  dart.setMethodSignature(async.DeferredLibrary, () => ({
    __proto__: dart.getMethods(async.DeferredLibrary.__proto__),
    load: dart.fnType(async.Future$(core.Null), [])
  }));
  dart.setLibraryUri(async.DeferredLibrary, I[29]);
  dart.setFieldSignature(async.DeferredLibrary, () => ({
    __proto__: dart.getFields(async.DeferredLibrary.__proto__),
    libraryName: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.String))
  }));
  var _s = dart.privateName(async, "_s");
  async.DeferredLoadException = class DeferredLoadException extends core.Object {
    toString() {
      return "DeferredLoadException: '" + dart.str(this[_s]) + "'";
    }
  };
  (async.DeferredLoadException.new = function(message) {
    if (message == null) dart.nullFailed(I[66], 29, 32, "message");
    this[_s] = message;
    ;
  }).prototype = async.DeferredLoadException.prototype;
  dart.addTypeTests(async.DeferredLoadException);
  dart.addTypeCaches(async.DeferredLoadException);
  async.DeferredLoadException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(async.DeferredLoadException, I[29]);
  dart.setFieldSignature(async.DeferredLoadException, () => ({
    __proto__: dart.getFields(async.DeferredLoadException.__proto__),
    [_s]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(async.DeferredLoadException, ['toString']);
  async.FutureOr$ = dart.normalizeFutureOr(T => {
    class FutureOr extends core.Object {}
    (FutureOr.__ = function() {
      dart.throw(new core.UnsupportedError.new("FutureOr can't be instantiated"));
    }).prototype = FutureOr.prototype;
    dart.addTypeCaches(FutureOr);
    dart.setLibraryUri(FutureOr, I[29]);
    return FutureOr;
  });
  async.FutureOr = async.FutureOr$();
  var _asyncCompleteError = dart.privateName(async, "_asyncCompleteError");
  var _completeWithValue = dart.privateName(async, "_completeWithValue");
  async.Future$ = dart.generic(T => {
    class Future extends core.Object {
      static new(computation) {
        if (computation == null) dart.nullFailed(I[67], 170, 30, "computation");
        let result = new (async._Future$(T)).new();
        async.Timer.run(dart.fn(() => {
          try {
            result[_complete](computation());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(result, e, s);
            } else
              throw e$;
          }
        }, T$.VoidTovoid()));
        return result;
      }
      static microtask(computation) {
        if (computation == null) dart.nullFailed(I[67], 194, 40, "computation");
        let result = new (async._Future$(T)).new();
        async.scheduleMicrotask(dart.fn(() => {
          try {
            result[_complete](computation());
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._completeWithErrorCallback(result, e, s);
            } else
              throw e$;
          }
        }, T$.VoidTovoid()));
        return result;
      }
      static sync(computation) {
        if (computation == null) dart.nullFailed(I[67], 216, 35, "computation");
        try {
          let result = computation();
          if (async.Future$(T).is(result)) {
            return result;
          } else {
            return new (async._Future$(T)).value(T.as(result));
          }
        } catch (e) {
          let error = dart.getThrown(e);
          let stackTrace = dart.stackTrace(e);
          if (core.Object.is(error)) {
            let future = new (async._Future$(T)).new();
            let replacement = async.Zone.current.errorCallback(error, stackTrace);
            if (replacement != null) {
              future[_asyncCompleteError](replacement.error, replacement.stackTrace);
            } else {
              future[_asyncCompleteError](error, stackTrace);
            }
            return future;
          } else
            throw e;
        }
      }
      static value(value = null) {
        return new (async._Future$(T)).immediate(value == null ? T.as(value) : value);
      }
      static error(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[67], 267, 31, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        if (async.Zone.current != async._rootZone) {
          let replacement = async.Zone.current.errorCallback(error, stackTrace);
          if (replacement != null) {
            error = replacement.error;
            stackTrace = replacement.stackTrace;
          }
        }
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        return new (async._Future$(T)).immediateError(error, stackTrace);
      }
      static delayed(duration, computation = null) {
        if (duration == null) dart.nullFailed(I[67], 304, 35, "duration");
        if (computation == null && !dart.test(_internal.typeAcceptsNull(T))) {
          dart.throw(new core.ArgumentError.value(null, "computation", "The type parameter is not nullable"));
        }
        let result = new (async._Future$(T)).new();
        async.Timer.new(duration, dart.fn(() => {
          if (computation == null) {
            result[_complete](T.as(null));
          } else {
            try {
              result[_complete](computation());
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                async._completeWithErrorCallback(result, e, s);
              } else
                throw e$;
            }
          }
        }, T$.VoidTovoid()));
        return result;
      }
      static wait(T, futures, opts) {
        let t101;
        if (futures == null) dart.nullFailed(I[67], 352, 54, "futures");
        let eagerError = opts && 'eagerError' in opts ? opts.eagerError : false;
        if (eagerError == null) dart.nullFailed(I[67], 353, 13, "eagerError");
        let cleanUp = opts && 'cleanUp' in opts ? opts.cleanUp : null;
        let _future = new (async._Future$(core.List$(T))).new();
        let values = null;
        let remaining = 0;
        let error = null;
        let error$35isSet = false;
        function error$35get() {
          return error$35isSet ? error : dart.throw(new _internal.LateError.localNI("error"));
        }
        dart.fn(error$35get, T$.VoidToObject());
        function error$35set(t94) {
          if (t94 == null) dart.nullFailed(I[67], 359, 17, "null");
          error$35isSet = true;
          return error = t94;
        }
        dart.fn(error$35set, T$.ObjectTodynamic());
        let stackTrace = null;
        let stackTrace$35isSet = false;
        function stackTrace$35get() {
          return stackTrace$35isSet ? stackTrace : dart.throw(new _internal.LateError.localNI("stackTrace"));
        }
        dart.fn(stackTrace$35get, T$.VoidToStackTrace());
        function stackTrace$35set(t99) {
          if (t99 == null) dart.nullFailed(I[67], 360, 21, "null");
          stackTrace$35isSet = true;
          return stackTrace = t99;
        }
        dart.fn(stackTrace$35set, T$.StackTraceTodynamic());
        function handleError(theError, theStackTrace) {
          if (theError == null) dart.nullFailed(I[67], 363, 29, "theError");
          if (theStackTrace == null) dart.nullFailed(I[67], 363, 50, "theStackTrace");
          remaining = remaining - 1;
          let valueList = values;
          if (valueList != null) {
            if (cleanUp != null) {
              for (let value of valueList) {
                if (value != null) {
                  let cleanUpValue = value;
                  T$.FutureOfNull().sync(dart.fn(() => {
                    cleanUp(cleanUpValue);
                  }, T$.VoidToNull()));
                }
              }
            }
            values = null;
            if (remaining === 0 || dart.test(eagerError)) {
              _future[_completeError](theError, theStackTrace);
            } else {
              error$35set(theError);
              stackTrace$35set(theStackTrace);
            }
          } else if (remaining === 0 && !dart.test(eagerError)) {
            _future[_completeError](error$35get(), stackTrace$35get());
          }
        }
        dart.fn(handleError, T$.ObjectAndStackTraceTovoid());
        try {
          for (let future of futures) {
            let pos = remaining;
            future.then(core.Null, dart.fn(value => {
              remaining = remaining - 1;
              let valueList = values;
              if (valueList != null) {
                valueList[$_set](pos, value);
                if (remaining === 0) {
                  _future[_completeWithValue](core.List$(T).from(valueList));
                }
              } else {
                if (cleanUp != null && value != null) {
                  T$.FutureOfNull().sync(dart.fn(() => {
                    cleanUp(value);
                  }, T$.VoidToNull()));
                }
                if (remaining === 0 && !dart.test(eagerError)) {
                  _future[_completeError](error$35get(), stackTrace$35get());
                }
              }
            }, dart.fnType(core.Null, [T])), {onError: handleError});
            remaining = remaining + 1;
          }
          if (remaining === 0) {
            t101 = _future;
            return (() => {
              t101[_completeWithValue](_interceptors.JSArray$(T).of([]));
              return t101;
            })();
          }
          values = core.List$(dart.nullable(T)).filled(remaining, null);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let st = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            if (remaining === 0 || dart.test(eagerError)) {
              return async.Future$(core.List$(T)).error(e, st);
            } else {
              error$35set(e);
              stackTrace$35set(st);
            }
          } else
            throw e$;
        }
        return _future;
      }
      static any(T, futures) {
        if (futures == null) dart.nullFailed(I[67], 459, 47, "futures");
        let completer = async.Completer$(T).sync();
        function onValue(value) {
          if (!dart.test(completer.isCompleted)) completer.complete(value);
        }
        dart.fn(onValue, dart.fnType(dart.void, [T]));
        function onError(error, stack) {
          if (error == null) dart.nullFailed(I[67], 465, 25, "error");
          if (stack == null) dart.nullFailed(I[67], 465, 43, "stack");
          if (!dart.test(completer.isCompleted)) completer.completeError(error, stack);
        }
        dart.fn(onError, T$.ObjectAndStackTraceTovoid());
        for (let future of futures) {
          future.then(dart.void, onValue, {onError: onError});
        }
        return completer.future;
      }
      static forEach(T, elements, action) {
        if (elements == null) dart.nullFailed(I[67], 491, 40, "elements");
        if (action == null) dart.nullFailed(I[67], 491, 59, "action");
        let iterator = elements[$iterator];
        return async.Future.doWhile(dart.fn(() => {
          if (!dart.test(iterator.moveNext())) return false;
          let result = action(iterator.current);
          if (async.Future.is(result)) return result.then(core.bool, C[41] || CT.C41);
          return true;
        }, T$.VoidToFutureOrOfbool()));
      }
      static _kTrue(_) {
        return true;
      }
      static doWhile(action) {
        if (action == null) dart.nullFailed(I[67], 524, 40, "action");
        let doneSignal = new (T$._FutureOfvoid()).new();
        let nextIteration = null;
        let nextIteration$35isSet = false;
        function nextIteration$35get() {
          return nextIteration$35isSet ? nextIteration : dart.throw(new _internal.LateError.localNI("nextIteration"));
        }
        dart.fn(nextIteration$35get, T$.VoidToFn());
        function nextIteration$35set(t105) {
          if (t105 == null) dart.nullFailed(I[67], 526, 30, "null");
          nextIteration$35isSet = true;
          return nextIteration = t105;
        }
        dart.fn(nextIteration$35set, T$.FnTodynamic());
        nextIteration$35set(async.Zone.current.bindUnaryCallbackGuarded(core.bool, dart.fn(keepGoing => {
          if (keepGoing == null) dart.nullFailed(I[67], 531, 65, "keepGoing");
          while (dart.test(keepGoing)) {
            let result = null;
            try {
              result = action();
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              if (core.Object.is(error)) {
                async._asyncCompleteWithErrorCallback(doneSignal, error, stackTrace);
                return;
              } else
                throw e;
            }
            if (T$.FutureOfbool().is(result)) {
              result.then(dart.void, nextIteration$35get(), {onError: dart.bind(doneSignal, _completeError)});
              return;
            }
            keepGoing = result;
          }
          doneSignal[_complete](null);
        }, T$.boolTovoid())));
        nextIteration$35get()(true);
        return doneSignal;
      }
    }
    (Future[dart.mixinNew] = function() {
    }).prototype = Future.prototype;
    dart.addTypeTests(Future);
    Future.prototype[dart.isFuture] = true;
    dart.addTypeCaches(Future);
    dart.setLibraryUri(Future, I[29]);
    return Future;
  });
  async.Future = async.Future$();
  dart.defineLazy(async.Future, {
    /*async.Future._nullFuture*/get _nullFuture() {
      return T$._FutureOfNull().as(_internal.nullFuture);
    },
    /*async.Future._falseFuture*/get _falseFuture() {
      return new (T$._FutureOfbool()).zoneValue(false, async._rootZone);
    }
  }, false);
  dart.addTypeTests(async.Future, dart.isFuture);
  var message$1 = dart.privateName(async, "TimeoutException.message");
  var duration$ = dart.privateName(async, "TimeoutException.duration");
  async.TimeoutException = class TimeoutException extends core.Object {
    get message() {
      return this[message$1];
    }
    set message(value) {
      super.message = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    toString() {
      let result = "TimeoutException";
      if (this.duration != null) result = "TimeoutException after " + dart.str(this.duration);
      if (this.message != null) result = result + ": " + dart.str(this.message);
      return result;
    }
  };
  (async.TimeoutException.new = function(message, duration = null) {
    this[message$1] = message;
    this[duration$] = duration;
    ;
  }).prototype = async.TimeoutException.prototype;
  dart.addTypeTests(async.TimeoutException);
  dart.addTypeCaches(async.TimeoutException);
  async.TimeoutException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(async.TimeoutException, I[29]);
  dart.setFieldSignature(async.TimeoutException, () => ({
    __proto__: dart.getFields(async.TimeoutException.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String)),
    duration: dart.finalFieldType(dart.nullable(core.Duration))
  }));
  dart.defineExtensionMethods(async.TimeoutException, ['toString']);
  const _is_Completer_default = Symbol('_is_Completer_default');
  async.Completer$ = dart.generic(T => {
    class Completer extends core.Object {
      static new() {
        return new (async._AsyncCompleter$(T)).new();
      }
      static sync() {
        return new (async._SyncCompleter$(T)).new();
      }
    }
    (Completer[dart.mixinNew] = function() {
    }).prototype = Completer.prototype;
    dart.addTypeTests(Completer);
    Completer.prototype[_is_Completer_default] = true;
    dart.addTypeCaches(Completer);
    dart.setLibraryUri(Completer, I[29]);
    return Completer;
  });
  async.Completer = async.Completer$();
  dart.addTypeTests(async.Completer, _is_Completer_default);
  const _is__Completer_default = Symbol('_is__Completer_default');
  async._Completer$ = dart.generic(T => {
    var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
    class _Completer extends core.Object {
      completeError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[68], 21, 29, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else {
          stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        }
        if (stackTrace == null) dart.throw("unreachable");
        this[_completeError](error, stackTrace);
      }
      get isCompleted() {
        return !dart.test(this.future[_mayComplete]);
      }
    }
    (_Completer.new = function() {
      this.future = new (_FutureOfT()).new();
      ;
    }).prototype = _Completer.prototype;
    dart.addTypeTests(_Completer);
    _Completer.prototype[_is__Completer_default] = true;
    dart.addTypeCaches(_Completer);
    _Completer[dart.implements] = () => [async.Completer$(T)];
    dart.setMethodSignature(_Completer, () => ({
      __proto__: dart.getMethods(_Completer.__proto__),
      completeError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
    }));
    dart.setGetterSignature(_Completer, () => ({
      __proto__: dart.getGetters(_Completer.__proto__),
      isCompleted: core.bool
    }));
    dart.setLibraryUri(_Completer, I[29]);
    dart.setFieldSignature(_Completer, () => ({
      __proto__: dart.getFields(_Completer.__proto__),
      future: dart.finalFieldType(async._Future$(T))
    }));
    return _Completer;
  });
  async._Completer = async._Completer$();
  dart.addTypeTests(async._Completer, _is__Completer_default);
  const _is__AsyncCompleter_default = Symbol('_is__AsyncCompleter_default');
  async._AsyncCompleter$ = dart.generic(T => {
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var FutureOrNOfT = () => (FutureOrNOfT = dart.constFn(dart.nullable(FutureOrOfT())))();
    class _AsyncCompleter extends async._Completer$(T) {
      complete(value = null) {
        FutureOrNOfT().as(value);
        if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
        this.future[_asyncComplete](FutureOrOfT().as(value == null ? value : value));
      }
      [_completeError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[68], 49, 30, "error");
        if (stackTrace == null) dart.nullFailed(I[68], 49, 48, "stackTrace");
        this.future[_asyncCompleteError](error, stackTrace);
      }
    }
    (_AsyncCompleter.new = function() {
      _AsyncCompleter.__proto__.new.call(this);
      ;
    }).prototype = _AsyncCompleter.prototype;
    dart.addTypeTests(_AsyncCompleter);
    _AsyncCompleter.prototype[_is__AsyncCompleter_default] = true;
    dart.addTypeCaches(_AsyncCompleter);
    dart.setMethodSignature(_AsyncCompleter, () => ({
      __proto__: dart.getMethods(_AsyncCompleter.__proto__),
      complete: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
      [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace])
    }));
    dart.setLibraryUri(_AsyncCompleter, I[29]);
    return _AsyncCompleter;
  });
  async._AsyncCompleter = async._AsyncCompleter$();
  dart.addTypeTests(async._AsyncCompleter, _is__AsyncCompleter_default);
  const _is__SyncCompleter_default = Symbol('_is__SyncCompleter_default');
  async._SyncCompleter$ = dart.generic(T => {
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var FutureOrNOfT = () => (FutureOrNOfT = dart.constFn(dart.nullable(FutureOrOfT())))();
    class _SyncCompleter extends async._Completer$(T) {
      complete(value = null) {
        FutureOrNOfT().as(value);
        if (!dart.test(this.future[_mayComplete])) dart.throw(new core.StateError.new("Future already completed"));
        this.future[_complete](FutureOrOfT().as(value == null ? value : value));
      }
      [_completeError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[68], 60, 30, "error");
        if (stackTrace == null) dart.nullFailed(I[68], 60, 48, "stackTrace");
        this.future[_completeError](error, stackTrace);
      }
    }
    (_SyncCompleter.new = function() {
      _SyncCompleter.__proto__.new.call(this);
      ;
    }).prototype = _SyncCompleter.prototype;
    dart.addTypeTests(_SyncCompleter);
    _SyncCompleter.prototype[_is__SyncCompleter_default] = true;
    dart.addTypeCaches(_SyncCompleter);
    dart.setMethodSignature(_SyncCompleter, () => ({
      __proto__: dart.getMethods(_SyncCompleter.__proto__),
      complete: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
      [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace])
    }));
    dart.setLibraryUri(_SyncCompleter, I[29]);
    return _SyncCompleter;
  });
  async._SyncCompleter = async._SyncCompleter$();
  dart.addTypeTests(async._SyncCompleter, _is__SyncCompleter_default);
  var _nextListener = dart.privateName(async, "_nextListener");
  var _onValue = dart.privateName(async, "_onValue");
  var _errorTest = dart.privateName(async, "_errorTest");
  var _whenCompleteAction = dart.privateName(async, "_whenCompleteAction");
  const _is__FutureListener_default = Symbol('_is__FutureListener_default');
  async._FutureListener$ = dart.generic((S, T) => {
    var SToFutureOrOfT = () => (SToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [S])))();
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    class _FutureListener extends core.Object {
      get [_zone$]() {
        return this.result[_zone$];
      }
      get handlesValue() {
        return (dart.notNull(this.state) & 1) !== 0;
      }
      get handlesError() {
        return (dart.notNull(this.state) & 2) !== 0;
      }
      get hasErrorTest() {
        return (dart.notNull(this.state) & 15) >>> 0 === 6;
      }
      get handlesComplete() {
        return (dart.notNull(this.state) & 15) >>> 0 === 8;
      }
      get isAwait() {
        return (dart.notNull(this.state) & 16) !== 0;
      }
      get [_onValue]() {
        if (!dart.test(this.handlesValue)) dart.assertFailed(null, I[68], 127, 12, "handlesValue");
        return SToFutureOrOfT().as(this.callback);
      }
      get [_onError]() {
        return this.errorCallback;
      }
      get [_errorTest]() {
        if (!dart.test(this.hasErrorTest)) dart.assertFailed(null, I[68], 134, 12, "hasErrorTest");
        return T$.ObjectTobool().as(this.callback);
      }
      get [_whenCompleteAction]() {
        if (!dart.test(this.handlesComplete)) dart.assertFailed(null, I[68], 139, 12, "handlesComplete");
        return T$.VoidTodynamic().as(this.callback);
      }
      get hasErrorCallback() {
        if (!dart.test(this.handlesError)) dart.assertFailed(null, I[68], 147, 12, "handlesError");
        return this[_onError] != null;
      }
      handleValue(sourceResult) {
        S.as(sourceResult);
        return this[_zone$].runUnary(FutureOrOfT(), S, this[_onValue], sourceResult);
      }
      matchesErrorTest(asyncError) {
        if (asyncError == null) dart.nullFailed(I[68], 155, 36, "asyncError");
        if (!dart.test(this.hasErrorTest)) return true;
        return this[_zone$].runUnary(core.bool, core.Object, this[_errorTest], asyncError.error);
      }
      handleError(asyncError) {
        if (asyncError == null) dart.nullFailed(I[68], 160, 38, "asyncError");
        if (!(dart.test(this.handlesError) && dart.test(this.hasErrorCallback))) dart.assertFailed(null, I[68], 161, 12, "handlesError && hasErrorCallback");
        let errorCallback = this.errorCallback;
        if (T$.ObjectAndStackTraceTodynamic().is(errorCallback)) {
          return FutureOrOfT().as(this[_zone$].runBinary(dart.dynamic, core.Object, core.StackTrace, errorCallback, asyncError.error, asyncError.stackTrace));
        } else {
          return FutureOrOfT().as(this[_zone$].runUnary(dart.dynamic, core.Object, T$.ObjectTodynamic().as(errorCallback), asyncError.error));
        }
      }
      handleWhenComplete() {
        if (!!dart.test(this.handlesError)) dart.assertFailed(null, I[68], 175, 12, "!handlesError");
        return this[_zone$].run(dart.dynamic, this[_whenCompleteAction]);
      }
      shouldChain(value) {
        if (value == null) dart.nullFailed(I[68], 182, 36, "value");
        return FutureOfT().is(value) || !T.is(value);
      }
    }
    (_FutureListener.then = function(result, onValue, errorCallback) {
      if (result == null) dart.nullFailed(I[68], 99, 12, "result");
      if (onValue == null) dart.nullFailed(I[68], 99, 44, "onValue");
      this[_nextListener] = null;
      this.result = result;
      this.callback = onValue;
      this.errorCallback = errorCallback;
      this.state = errorCallback == null ? 1 : 3;
      ;
    }).prototype = _FutureListener.prototype;
    (_FutureListener.thenAwait = function(result, onValue, errorCallback) {
      if (result == null) dart.nullFailed(I[68], 105, 12, "result");
      if (onValue == null) dart.nullFailed(I[68], 105, 41, "onValue");
      if (errorCallback == null) dart.nullFailed(I[68], 105, 59, "errorCallback");
      this[_nextListener] = null;
      this.result = result;
      this.callback = onValue;
      this.errorCallback = errorCallback;
      this.state = ((errorCallback == null ? 1 : 3) | 16) >>> 0;
      ;
    }).prototype = _FutureListener.prototype;
    (_FutureListener.catchError = function(result, errorCallback, callback) {
      if (result == null) dart.nullFailed(I[68], 111, 35, "result");
      this[_nextListener] = null;
      this.result = result;
      this.errorCallback = errorCallback;
      this.callback = callback;
      this.state = callback == null ? 2 : 6;
      ;
    }).prototype = _FutureListener.prototype;
    (_FutureListener.whenComplete = function(result, callback) {
      if (result == null) dart.nullFailed(I[68], 114, 37, "result");
      this[_nextListener] = null;
      this.result = result;
      this.callback = callback;
      this.errorCallback = null;
      this.state = 8;
      ;
    }).prototype = _FutureListener.prototype;
    dart.addTypeTests(_FutureListener);
    _FutureListener.prototype[_is__FutureListener_default] = true;
    dart.addTypeCaches(_FutureListener);
    dart.setMethodSignature(_FutureListener, () => ({
      __proto__: dart.getMethods(_FutureListener.__proto__),
      handleValue: dart.fnType(async.FutureOr$(T), [dart.nullable(core.Object)]),
      matchesErrorTest: dart.fnType(core.bool, [async.AsyncError]),
      handleError: dart.fnType(async.FutureOr$(T), [async.AsyncError]),
      handleWhenComplete: dart.fnType(dart.dynamic, []),
      shouldChain: dart.fnType(core.bool, [async.Future])
    }));
    dart.setGetterSignature(_FutureListener, () => ({
      __proto__: dart.getGetters(_FutureListener.__proto__),
      [_zone$]: async._Zone,
      handlesValue: core.bool,
      handlesError: core.bool,
      hasErrorTest: core.bool,
      handlesComplete: core.bool,
      isAwait: core.bool,
      [_onValue]: dart.fnType(async.FutureOr$(T), [S]),
      [_onError]: dart.nullable(core.Function),
      [_errorTest]: dart.fnType(core.bool, [core.Object]),
      [_whenCompleteAction]: dart.fnType(dart.dynamic, []),
      hasErrorCallback: core.bool
    }));
    dart.setLibraryUri(_FutureListener, I[29]);
    dart.setFieldSignature(_FutureListener, () => ({
      __proto__: dart.getFields(_FutureListener.__proto__),
      [_nextListener]: dart.fieldType(dart.nullable(async._FutureListener)),
      result: dart.finalFieldType(async._Future$(T)),
      state: dart.finalFieldType(core.int),
      callback: dart.finalFieldType(dart.nullable(core.Function)),
      errorCallback: dart.finalFieldType(dart.nullable(core.Function))
    }));
    return _FutureListener;
  });
  async._FutureListener = async._FutureListener$();
  dart.defineLazy(async._FutureListener, {
    /*async._FutureListener.maskValue*/get maskValue() {
      return 1;
    },
    /*async._FutureListener.maskError*/get maskError() {
      return 2;
    },
    /*async._FutureListener.maskTestError*/get maskTestError() {
      return 4;
    },
    /*async._FutureListener.maskWhencomplete*/get maskWhencomplete() {
      return 8;
    },
    /*async._FutureListener.stateChain*/get stateChain() {
      return 0;
    },
    /*async._FutureListener.stateThen*/get stateThen() {
      return 1;
    },
    /*async._FutureListener.stateThenOnerror*/get stateThenOnerror() {
      return 3;
    },
    /*async._FutureListener.stateCatcherror*/get stateCatcherror() {
      return 2;
    },
    /*async._FutureListener.stateCatcherrorTest*/get stateCatcherrorTest() {
      return 6;
    },
    /*async._FutureListener.stateWhencomplete*/get stateWhencomplete() {
      return 8;
    },
    /*async._FutureListener.maskType*/get maskType() {
      return 15;
    },
    /*async._FutureListener.stateIsAwait*/get stateIsAwait() {
      return 16;
    }
  }, false);
  dart.addTypeTests(async._FutureListener, _is__FutureListener_default);
  var _resultOrListeners = dart.privateName(async, "_resultOrListeners");
  var _setValue = dart.privateName(async, "_setValue");
  var _isPendingComplete = dart.privateName(async, "_isPendingComplete");
  var _mayAddListener = dart.privateName(async, "_mayAddListener");
  var _isChained = dart.privateName(async, "_isChained");
  var _isComplete = dart.privateName(async, "_isComplete");
  var _hasError = dart.privateName(async, "_hasError");
  var _setChained = dart.privateName(async, "_setChained");
  var _setPendingComplete = dart.privateName(async, "_setPendingComplete");
  var _clearPendingComplete = dart.privateName(async, "_clearPendingComplete");
  var _error = dart.privateName(async, "_error");
  var _chainSource = dart.privateName(async, "_chainSource");
  var _setErrorObject = dart.privateName(async, "_setErrorObject");
  var _setError = dart.privateName(async, "_setError");
  var _cloneResult = dart.privateName(async, "_cloneResult");
  var _prependListeners = dart.privateName(async, "_prependListeners");
  var _reverseListeners = dart.privateName(async, "_reverseListeners");
  var _removeListeners = dart.privateName(async, "_removeListeners");
  var _chainFuture = dart.privateName(async, "_chainFuture");
  var _asyncCompleteWithValue = dart.privateName(async, "_asyncCompleteWithValue");
  const _is__Future_default = Symbol('_is__Future_default');
  async._Future$ = dart.generic(T => {
    var _FutureOfT = () => (_FutureOfT = dart.constFn(async._Future$(T)))();
    var _FutureListenerOfT$T = () => (_FutureListenerOfT$T = dart.constFn(async._FutureListener$(T, T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var VoidToFutureOrOfT = () => (VoidToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [])))();
    var VoidToNFutureOrOfT = () => (VoidToNFutureOrOfT = dart.constFn(dart.nullable(VoidToFutureOrOfT())))();
    var TToNull = () => (TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class _Future extends core.Object {
      get [_mayComplete]() {
        return this[_state] === 0;
      }
      get [_isPendingComplete]() {
        return this[_state] === 1;
      }
      get [_mayAddListener]() {
        return dart.notNull(this[_state]) <= 1;
      }
      get [_isChained]() {
        return this[_state] === 2;
      }
      get [_isComplete]() {
        return dart.notNull(this[_state]) >= 4;
      }
      get [_hasError]() {
        return this[_state] === 8;
      }
      static _continuationFunctions(future) {
        let t108;
        if (future == null) dart.nullFailed(I[68], 260, 65, "future");
        let result = null;
        while (true) {
          if (dart.test(future[_mayAddListener])) return result;
          if (!!dart.test(future[_isComplete])) dart.assertFailed(null, I[68], 264, 14, "!future._isComplete");
          if (!!dart.test(future[_isChained])) dart.assertFailed(null, I[68], 265, 14, "!future._isChained");
          let listener = T$._FutureListenerNOfObject$Object().as(future[_resultOrListeners]);
          if (listener != null && listener[_nextListener] == null && dart.test(listener.isAwait)) {
            (t108 = result, t108 == null ? result = T$.JSArrayOfFunction().of([]) : t108)[$add](dart.bind(listener, 'handleValue'));
            future = listener.result;
            if (!!dart.test(future[_isComplete])) dart.assertFailed(null, I[68], 273, 16, "!future._isComplete");
          } else {
            break;
          }
        }
        return result;
      }
      [_setChained](source) {
        if (source == null) dart.nullFailed(I[68], 281, 28, "source");
        if (!dart.test(this[_mayAddListener])) dart.assertFailed(null, I[68], 282, 12, "_mayAddListener");
        this[_state] = 2;
        this[_resultOrListeners] = source;
      }
      then(R, f, opts) {
        if (f == null) dart.nullFailed(I[68], 287, 33, "f");
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let currentZone = async.Zone.current;
        if (currentZone != async._rootZone) {
          f = currentZone.registerUnaryCallback(async.FutureOr$(R), T, f);
          if (onError != null) {
            onError = async._registerErrorHandler(onError, currentZone);
          }
        }
        let result = new (async._Future$(R)).new();
        this[_addListener](new (async._FutureListener$(T, R)).then(result, f, onError));
        return result;
      }
      [_thenAwait](E, f, onError) {
        if (f == null) dart.nullFailed(I[68], 309, 39, "f");
        if (onError == null) dart.nullFailed(I[68], 309, 60, "onError");
        let result = new (async._Future$(E)).new();
        this[_addListener](new (async._FutureListener$(T, E)).thenAwait(result, f, onError));
        return result;
      }
      catchError(onError, opts) {
        if (onError == null) dart.nullFailed(I[68], 315, 33, "onError");
        let test = opts && 'test' in opts ? opts.test : null;
        let result = new (_FutureOfT()).new();
        if (result[_zone$] != async._rootZone) {
          onError = async._registerErrorHandler(onError, result[_zone$]);
          if (test != null) test = result[_zone$].registerUnaryCallback(core.bool, core.Object, test);
        }
        this[_addListener](new (_FutureListenerOfT$T()).catchError(result, onError, test));
        return result;
      }
      whenComplete(action) {
        if (action == null) dart.nullFailed(I[68], 325, 34, "action");
        let result = new (_FutureOfT()).new();
        if (result[_zone$] != async._rootZone) {
          action = result[_zone$].registerCallback(dart.dynamic, action);
        }
        this[_addListener](new (_FutureListenerOfT$T()).whenComplete(result, action));
        return result;
      }
      asStream() {
        return StreamOfT().fromFuture(this);
      }
      [_setPendingComplete]() {
        if (!dart.test(this[_mayComplete])) dart.assertFailed(null, I[68], 337, 12, "_mayComplete");
        this[_state] = 1;
      }
      [_clearPendingComplete]() {
        if (!dart.test(this[_isPendingComplete])) dart.assertFailed(null, I[68], 342, 12, "_isPendingComplete");
        this[_state] = 0;
      }
      get [_error]() {
        if (!dart.test(this[_hasError])) dart.assertFailed(null, I[68], 347, 12, "_hasError");
        return async.AsyncError.as(this[_resultOrListeners]);
      }
      get [_chainSource]() {
        if (!dart.test(this[_isChained])) dart.assertFailed(null, I[68], 352, 12, "_isChained");
        return async._Future.as(this[_resultOrListeners]);
      }
      [_setValue](value) {
        T.as(value);
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 358, 12, "!_isComplete");
        this[_state] = 4;
        this[_resultOrListeners] = value;
      }
      [_setErrorObject](error) {
        if (error == null) dart.nullFailed(I[68], 363, 35, "error");
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 364, 12, "!_isComplete");
        this[_state] = 8;
        this[_resultOrListeners] = error;
      }
      [_setError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[68], 369, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[68], 369, 43, "stackTrace");
        this[_setErrorObject](new async.AsyncError.new(error, stackTrace));
      }
      [_cloneResult](source) {
        if (source == null) dart.nullFailed(I[68], 376, 29, "source");
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 377, 12, "!_isComplete");
        if (!dart.test(source[_isComplete])) dart.assertFailed(null, I[68], 378, 12, "source._isComplete");
        this[_state] = source[_state];
        this[_resultOrListeners] = source[_resultOrListeners];
      }
      [_addListener](listener) {
        if (listener == null) dart.nullFailed(I[68], 383, 37, "listener");
        if (!(listener[_nextListener] == null)) dart.assertFailed(null, I[68], 384, 12, "listener._nextListener == null");
        if (dart.test(this[_mayAddListener])) {
          listener[_nextListener] = T$._FutureListenerN().as(this[_resultOrListeners]);
          this[_resultOrListeners] = listener;
        } else {
          if (dart.test(this[_isChained])) {
            let source = this[_chainSource];
            if (!dart.test(source[_isComplete])) {
              source[_addListener](listener);
              return;
            }
            this[_cloneResult](source);
          }
          if (!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 400, 14, "_isComplete");
          this[_zone$].scheduleMicrotask(dart.fn(() => {
            async._Future._propagateToListeners(this, listener);
          }, T$.VoidTovoid()));
        }
      }
      [_prependListeners](listeners) {
        if (listeners == null) return;
        if (dart.test(this[_mayAddListener])) {
          let existingListeners = T$._FutureListenerN().as(this[_resultOrListeners]);
          this[_resultOrListeners] = listeners;
          if (existingListeners != null) {
            let cursor = listeners;
            let next = cursor[_nextListener];
            while (next != null) {
              cursor = next;
              next = cursor[_nextListener];
            }
            cursor[_nextListener] = existingListeners;
          }
        } else {
          if (dart.test(this[_isChained])) {
            let source = this[_chainSource];
            if (!dart.test(source[_isComplete])) {
              source[_prependListeners](listeners);
              return;
            }
            this[_cloneResult](source);
          }
          if (!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 434, 14, "_isComplete");
          listeners = this[_reverseListeners](listeners);
          this[_zone$].scheduleMicrotask(dart.fn(() => {
            async._Future._propagateToListeners(this, listeners);
          }, T$.VoidTovoid()));
        }
      }
      [_removeListeners]() {
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 445, 12, "!_isComplete");
        let current = T$._FutureListenerN().as(this[_resultOrListeners]);
        this[_resultOrListeners] = null;
        return this[_reverseListeners](current);
      }
      [_reverseListeners](listeners) {
        let prev = null;
        let current = listeners;
        while (current != null) {
          let next = current[_nextListener];
          current[_nextListener] = prev;
          prev = current;
          current = next;
        }
        return prev;
      }
      [_chainForeignFuture](source) {
        if (source == null) dart.nullFailed(I[68], 467, 35, "source");
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 468, 12, "!_isComplete");
        if (!!async._Future.is(source)) dart.assertFailed(null, I[68], 469, 12, "source is! _Future");
        this[_setPendingComplete]();
        try {
          source.then(core.Null, dart.fn(value => {
            if (!dart.test(this[_isPendingComplete])) dart.assertFailed(null, I[68], 475, 16, "_isPendingComplete");
            this[_clearPendingComplete]();
            try {
              this[_completeWithValue](T.as(value));
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              if (core.Object.is(error)) {
                this[_completeError](error, stackTrace);
              } else
                throw e;
            }
          }, T$.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
              if (error == null) dart.nullFailed(I[68], 482, 27, "error");
              if (stackTrace == null) dart.nullFailed(I[68], 482, 45, "stackTrace");
              if (!dart.test(this[_isPendingComplete])) dart.assertFailed(null, I[68], 483, 16, "_isPendingComplete");
              this[_completeError](error, stackTrace);
            }, T$.ObjectAndStackTraceToNull())});
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async.scheduleMicrotask(dart.fn(() => {
              this[_completeError](e, s);
            }, T$.VoidTovoid()));
          } else
            throw e$;
        }
      }
      static _chainCoreFuture(source, target) {
        if (source == null) dart.nullFailed(I[68], 499, 40, "source");
        if (target == null) dart.nullFailed(I[68], 499, 56, "target");
        if (!dart.test(target[_mayAddListener])) dart.assertFailed(null, I[68], 500, 12, "target._mayAddListener");
        while (dart.test(source[_isChained])) {
          source = source[_chainSource];
        }
        if (dart.test(source[_isComplete])) {
          let listeners = target[_removeListeners]();
          target[_cloneResult](source);
          async._Future._propagateToListeners(target, listeners);
        } else {
          let listeners = T$._FutureListenerN().as(target[_resultOrListeners]);
          target[_setChained](source);
          source[_prependListeners](listeners);
        }
      }
      [_complete](value) {
        FutureOrOfT().as(value);
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 516, 12, "!_isComplete");
        if (FutureOfT().is(value)) {
          if (_FutureOfT().is(value)) {
            async._Future._chainCoreFuture(value, this);
          } else {
            this[_chainForeignFuture](value);
          }
        } else {
          let listeners = this[_removeListeners]();
          this[_setValue](T.as(value));
          async._Future._propagateToListeners(this, listeners);
        }
      }
      [_completeWithValue](value) {
        T.as(value);
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 535, 12, "!_isComplete");
        let listeners = this[_removeListeners]();
        this[_setValue](value);
        async._Future._propagateToListeners(this, listeners);
      }
      [_completeError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[68], 542, 30, "error");
        if (stackTrace == null) dart.nullFailed(I[68], 542, 48, "stackTrace");
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 543, 12, "!_isComplete");
        let listeners = this[_removeListeners]();
        this[_setError](error, stackTrace);
        async._Future._propagateToListeners(this, listeners);
      }
      [_asyncComplete](value) {
        FutureOrOfT().as(value);
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 551, 12, "!_isComplete");
        if (FutureOfT().is(value)) {
          this[_chainFuture](value);
          return;
        }
        this[_asyncCompleteWithValue](T.as(value));
      }
      [_asyncCompleteWithValue](value) {
        T.as(value);
        this[_setPendingComplete]();
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          this[_completeWithValue](value);
        }, T$.VoidTovoid()));
      }
      [_chainFuture](value) {
        if (value == null) dart.nullFailed(I[68], 581, 31, "value");
        if (_FutureOfT().is(value)) {
          if (dart.test(value[_hasError])) {
            this[_setPendingComplete]();
            this[_zone$].scheduleMicrotask(dart.fn(() => {
              async._Future._chainCoreFuture(value, this);
            }, T$.VoidTovoid()));
          } else {
            async._Future._chainCoreFuture(value, this);
          }
          return;
        }
        this[_chainForeignFuture](value);
      }
      [_asyncCompleteError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[68], 598, 35, "error");
        if (stackTrace == null) dart.nullFailed(I[68], 598, 53, "stackTrace");
        if (!!dart.test(this[_isComplete])) dart.assertFailed(null, I[68], 599, 12, "!_isComplete");
        this[_setPendingComplete]();
        this[_zone$].scheduleMicrotask(dart.fn(() => {
          this[_completeError](error, stackTrace);
        }, T$.VoidTovoid()));
      }
      static _propagateToListeners(source, listeners) {
        if (source == null) dart.nullFailed(I[68], 610, 15, "source");
        while (true) {
          if (!dart.test(source[_isComplete])) dart.assertFailed(null, I[68], 612, 14, "source._isComplete");
          let hasError = source[_hasError];
          if (listeners == null) {
            if (dart.test(hasError)) {
              let asyncError = source[_error];
              source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
            }
            return;
          }
          let listener = listeners;
          let nextListener = listener[_nextListener];
          while (nextListener != null) {
            listener[_nextListener] = null;
            async._Future._propagateToListeners(source, listener);
            listener = nextListener;
            nextListener = listener[_nextListener];
          }
          let sourceResult = source[_resultOrListeners];
          let listenerHasError = hasError;
          let listenerValueOrError = sourceResult;
          if (dart.test(hasError) || dart.test(listener.handlesValue) || dart.test(listener.handlesComplete)) {
            let zone = listener[_zone$];
            if (dart.test(hasError) && !dart.test(source[_zone$].inSameErrorZone(zone))) {
              let asyncError = source[_error];
              source[_zone$].handleUncaughtError(asyncError.error, asyncError.stackTrace);
              return;
            }
            let oldZone = null;
            if (async.Zone._current != zone) {
              oldZone = async.Zone._enter(zone);
            }
            function handleWhenCompleteCallback() {
              if (!!dart.test(listener.handlesValue)) dart.assertFailed(null, I[68], 670, 18, "!listener.handlesValue");
              if (!!dart.test(listener.handlesError)) dart.assertFailed(null, I[68], 671, 18, "!listener.handlesError");
              let completeResult = null;
              try {
                completeResult = listener.handleWhenComplete();
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  if (dart.test(hasError) && core.identical(source[_error].error, e)) {
                    listenerValueOrError = source[_error];
                  } else {
                    listenerValueOrError = new async.AsyncError.new(e, s);
                  }
                  listenerHasError = true;
                  return;
                } else
                  throw e$;
              }
              if (async._Future.is(completeResult) && dart.test(completeResult[_isComplete])) {
                if (dart.test(completeResult[_hasError])) {
                  listenerValueOrError = completeResult[_error];
                  listenerHasError = true;
                }
                return;
              }
              if (async.Future.is(completeResult)) {
                let originalSource = source;
                listenerValueOrError = completeResult.then(dart.dynamic, dart.fn(_ => originalSource, T$.dynamicTo_Future()));
                listenerHasError = false;
              }
            }
            dart.fn(handleWhenCompleteCallback, T$.VoidTovoid());
            function handleValueCallback() {
              try {
                listenerValueOrError = listener.handleValue(sourceResult);
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  listenerValueOrError = new async.AsyncError.new(e, s);
                  listenerHasError = true;
                } else
                  throw e$;
              }
            }
            dart.fn(handleValueCallback, T$.VoidTovoid());
            function handleError() {
              try {
                let asyncError = source[_error];
                if (dart.test(listener.matchesErrorTest(asyncError)) && dart.test(listener.hasErrorCallback)) {
                  listenerValueOrError = listener.handleError(asyncError);
                  listenerHasError = false;
                }
              } catch (e$) {
                let e = dart.getThrown(e$);
                let s = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  if (core.identical(source[_error].error, e)) {
                    listenerValueOrError = source[_error];
                  } else {
                    listenerValueOrError = new async.AsyncError.new(e, s);
                  }
                  listenerHasError = true;
                } else
                  throw e$;
              }
            }
            dart.fn(handleError, T$.VoidTovoid());
            if (dart.test(listener.handlesComplete)) {
              handleWhenCompleteCallback();
            } else if (!dart.test(hasError)) {
              if (dart.test(listener.handlesValue)) {
                handleValueCallback();
              }
            } else {
              if (dart.test(listener.handlesError)) {
                handleError();
              }
            }
            if (oldZone != null) async.Zone._leave(oldZone);
            if (async.Future.is(listenerValueOrError) && dart.test(listener.shouldChain(async.Future.as(listenerValueOrError)))) {
              let chainSource = async.Future.as(listenerValueOrError);
              let result = listener.result;
              if (async._Future.is(chainSource)) {
                if (dart.test(chainSource[_isComplete])) {
                  listeners = result[_removeListeners]();
                  result[_cloneResult](chainSource);
                  source = chainSource;
                  continue;
                } else {
                  async._Future._chainCoreFuture(chainSource, result);
                }
              } else {
                result[_chainForeignFuture](chainSource);
              }
              return;
            }
          }
          let result = listener.result;
          listeners = result[_removeListeners]();
          if (!dart.test(listenerHasError)) {
            result[_setValue](listenerValueOrError);
          } else {
            let asyncError = async.AsyncError.as(listenerValueOrError);
            result[_setErrorObject](asyncError);
          }
          source = result;
        }
      }
      timeout(timeLimit, opts) {
        if (timeLimit == null) dart.nullFailed(I[68], 782, 30, "timeLimit");
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        VoidToNFutureOrOfT().as(onTimeout);
        if (dart.test(this[_isComplete])) return new (_FutureOfT()).immediate(this);
        let _future = new (_FutureOfT()).new();
        let timer = null;
        if (onTimeout == null) {
          timer = async.Timer.new(timeLimit, dart.fn(() => {
            _future[_completeError](new async.TimeoutException.new("Future not completed", timeLimit), core.StackTrace.empty);
          }, T$.VoidTovoid()));
        } else {
          let zone = async.Zone.current;
          let onTimeoutHandler = zone.registerCallback(FutureOrOfT(), onTimeout);
          timer = async.Timer.new(timeLimit, dart.fn(() => {
            try {
              _future[_complete](zone.run(FutureOrOfT(), onTimeoutHandler));
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                _future[_completeError](e, s);
              } else
                throw e$;
            }
          }, T$.VoidTovoid()));
        }
        this.then(core.Null, dart.fn(v => {
          if (dart.test(timer.isActive)) {
            timer.cancel();
            _future[_completeWithValue](v);
          }
        }, TToNull()), {onError: dart.fn((e, s) => {
            if (e == null) dart.nullFailed(I[68], 812, 25, "e");
            if (s == null) dart.nullFailed(I[68], 812, 39, "s");
            if (dart.test(timer.isActive)) {
              timer.cancel();
              _future[_completeError](e, s);
            }
          }, T$.ObjectAndStackTraceToNull())});
        return _future;
      }
    }
    (_Future.new = function() {
      this[_state] = 0;
      this[_resultOrListeners] = null;
      this[_zone$] = async.Zone._current;
      ;
    }).prototype = _Future.prototype;
    (_Future.immediate = function(result) {
      this[_state] = 0;
      this[_resultOrListeners] = null;
      this[_zone$] = async.Zone._current;
      this[_asyncComplete](result);
    }).prototype = _Future.prototype;
    (_Future.zoneValue = function(value, _zone) {
      if (_zone == null) dart.nullFailed(I[68], 241, 35, "_zone");
      this[_state] = 0;
      this[_resultOrListeners] = null;
      this[_zone$] = _zone;
      this[_setValue](value);
    }).prototype = _Future.prototype;
    (_Future.immediateError = function(error, stackTrace) {
      if (stackTrace == null) dart.nullFailed(I[68], 245, 48, "stackTrace");
      this[_state] = 0;
      this[_resultOrListeners] = null;
      this[_zone$] = async.Zone._current;
      this[_asyncCompleteError](core.Object.as(error), stackTrace);
    }).prototype = _Future.prototype;
    (_Future.value = function(value) {
      _Future.zoneValue.call(this, value, async.Zone._current);
    }).prototype = _Future.prototype;
    _Future.prototype[dart.isFuture] = true;
    dart.addTypeTests(_Future);
    _Future.prototype[_is__Future_default] = true;
    dart.addTypeCaches(_Future);
    _Future[dart.implements] = () => [async.Future$(T)];
    dart.setMethodSignature(_Future, () => ({
      __proto__: dart.getMethods(_Future.__proto__),
      [_setChained]: dart.fnType(dart.void, [async._Future]),
      then: dart.gFnType(R => [async.Future$(R), [dart.fnType(async.FutureOr$(R), [T])], {onError: dart.nullable(core.Function)}, {}], R => [dart.nullable(core.Object)]),
      [_thenAwait]: dart.gFnType(E => [async.Future$(E), [dart.fnType(async.FutureOr$(E), [T]), core.Function]], E => [dart.nullable(core.Object)]),
      catchError: dart.fnType(async.Future$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [core.Object]))}, {}),
      whenComplete: dart.fnType(async.Future$(T), [dart.fnType(dart.dynamic, [])]),
      asStream: dart.fnType(async.Stream$(T), []),
      [_setPendingComplete]: dart.fnType(dart.void, []),
      [_clearPendingComplete]: dart.fnType(dart.void, []),
      [_setValue]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_setErrorObject]: dart.fnType(dart.void, [async.AsyncError]),
      [_setError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_cloneResult]: dart.fnType(dart.void, [async._Future]),
      [_addListener]: dart.fnType(dart.void, [async._FutureListener]),
      [_prependListeners]: dart.fnType(dart.void, [dart.nullable(async._FutureListener)]),
      [_removeListeners]: dart.fnType(dart.nullable(async._FutureListener), []),
      [_reverseListeners]: dart.fnType(dart.nullable(async._FutureListener), [dart.nullable(async._FutureListener)]),
      [_chainForeignFuture]: dart.fnType(dart.void, [async.Future]),
      [_complete]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_completeWithValue]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_completeError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_asyncComplete]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_asyncCompleteWithValue]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_chainFuture]: dart.fnType(dart.void, [async.Future$(T)]),
      [_asyncCompleteError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      timeout: dart.fnType(async.Future$(T), [core.Duration], {onTimeout: dart.nullable(core.Object)}, {})
    }));
    dart.setGetterSignature(_Future, () => ({
      __proto__: dart.getGetters(_Future.__proto__),
      [_mayComplete]: core.bool,
      [_isPendingComplete]: core.bool,
      [_mayAddListener]: core.bool,
      [_isChained]: core.bool,
      [_isComplete]: core.bool,
      [_hasError]: core.bool,
      [_error]: async.AsyncError,
      [_chainSource]: async._Future
    }));
    dart.setLibraryUri(_Future, I[29]);
    dart.setFieldSignature(_Future, () => ({
      __proto__: dart.getFields(_Future.__proto__),
      [_state]: dart.fieldType(core.int),
      [_zone$]: dart.finalFieldType(async._Zone),
      [_resultOrListeners]: dart.fieldType(dart.dynamic)
    }));
    return _Future;
  });
  async._Future = async._Future$();
  dart.defineLazy(async._Future, {
    /*async._Future._stateIncomplete*/get _stateIncomplete() {
      return 0;
    },
    /*async._Future._statePendingComplete*/get _statePendingComplete() {
      return 1;
    },
    /*async._Future._stateChained*/get _stateChained() {
      return 2;
    },
    /*async._Future._stateValue*/get _stateValue() {
      return 4;
    },
    /*async._Future._stateError*/get _stateError() {
      return 8;
    }
  }, false);
  dart.addTypeTests(async._Future, _is__Future_default);
  async._AsyncCallbackEntry = class _AsyncCallbackEntry extends core.Object {};
  (async._AsyncCallbackEntry.new = function(callback) {
    if (callback == null) dart.nullFailed(I[69], 12, 28, "callback");
    this.next = null;
    this.callback = callback;
    ;
  }).prototype = async._AsyncCallbackEntry.prototype;
  dart.addTypeTests(async._AsyncCallbackEntry);
  dart.addTypeCaches(async._AsyncCallbackEntry);
  dart.setLibraryUri(async._AsyncCallbackEntry, I[29]);
  dart.setFieldSignature(async._AsyncCallbackEntry, () => ({
    __proto__: dart.getFields(async._AsyncCallbackEntry.__proto__),
    callback: dart.finalFieldType(dart.fnType(dart.void, [])),
    next: dart.fieldType(dart.nullable(async._AsyncCallbackEntry))
  }));
  async._AsyncRun = class _AsyncRun extends core.Object {
    static _initializeScheduleImmediate() {
      if (dart.global.scheduleImmediate != null) {
        return C[42] || CT.C42;
      }
      return C[43] || CT.C43;
    }
    static _scheduleImmediateJSOverride(callback) {
      if (callback == null) dart.nullFailed(I[61], 153, 60, "callback");
      dart.addAsyncCallback();
      dart.global.scheduleImmediate(() => {
        dart.removeAsyncCallback();
        callback();
      });
    }
    static _scheduleImmediateWithPromise(callback) {
      if (callback == null) dart.nullFailed(I[61], 162, 61, "callback");
      dart.addAsyncCallback();
      dart.global.Promise.resolve(null).then(() => {
        dart.removeAsyncCallback();
        callback();
      });
    }
    static _scheduleImmediate(callback) {
      if (callback == null) dart.nullFailed(I[61], 135, 50, "callback");
      async._AsyncRun._scheduleImmediateClosure(callback);
    }
  };
  (async._AsyncRun.new = function() {
    ;
  }).prototype = async._AsyncRun.prototype;
  dart.addTypeTests(async._AsyncRun);
  dart.addTypeCaches(async._AsyncRun);
  dart.setLibraryUri(async._AsyncRun, I[29]);
  dart.defineLazy(async._AsyncRun, {
    /*async._AsyncRun._scheduleImmediateClosure*/get _scheduleImmediateClosure() {
      return async._AsyncRun._initializeScheduleImmediate();
    }
  }, false);
  async.StreamSubscription$ = dart.generic(T => {
    class StreamSubscription extends core.Object {}
    (StreamSubscription.new = function() {
      ;
    }).prototype = StreamSubscription.prototype;
    dart.addTypeTests(StreamSubscription);
    StreamSubscription.prototype[dart.isStreamSubscription] = true;
    dart.addTypeCaches(StreamSubscription);
    dart.setLibraryUri(StreamSubscription, I[29]);
    return StreamSubscription;
  });
  async.StreamSubscription = async.StreamSubscription$();
  dart.addTypeTests(async.StreamSubscription, dart.isStreamSubscription);
  const _is_EventSink_default = Symbol('_is_EventSink_default');
  async.EventSink$ = dart.generic(T => {
    class EventSink extends core.Object {}
    (EventSink.new = function() {
      ;
    }).prototype = EventSink.prototype;
    dart.addTypeTests(EventSink);
    EventSink.prototype[_is_EventSink_default] = true;
    dart.addTypeCaches(EventSink);
    EventSink[dart.implements] = () => [core.Sink$(T)];
    dart.setLibraryUri(EventSink, I[29]);
    return EventSink;
  });
  async.EventSink = async.EventSink$();
  dart.addTypeTests(async.EventSink, _is_EventSink_default);
  var _stream = dart.privateName(async, "StreamView._stream");
  var _stream$ = dart.privateName(async, "_stream");
  const _is_StreamView_default = Symbol('_is_StreamView_default');
  async.StreamView$ = dart.generic(T => {
    class StreamView extends async.Stream$(T) {
      get [_stream$]() {
        return this[_stream];
      }
      set [_stream$](value) {
        super[_stream$] = value;
      }
      get isBroadcast() {
        return this[_stream$].isBroadcast;
      }
      asBroadcastStream(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return this[_stream$].asBroadcastStream({onListen: onListen, onCancel: onCancel});
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return this[_stream$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
    }
    (StreamView.new = function(stream) {
      if (stream == null) dart.nullFailed(I[28], 1734, 30, "stream");
      this[_stream] = stream;
      StreamView.__proto__._internal.call(this);
      ;
    }).prototype = StreamView.prototype;
    dart.addTypeTests(StreamView);
    StreamView.prototype[_is_StreamView_default] = true;
    dart.addTypeCaches(StreamView);
    dart.setMethodSignature(StreamView, () => ({
      __proto__: dart.getMethods(StreamView.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(StreamView, I[29]);
    dart.setFieldSignature(StreamView, () => ({
      __proto__: dart.getFields(StreamView.__proto__),
      [_stream$]: dart.finalFieldType(async.Stream$(T))
    }));
    return StreamView;
  });
  async.StreamView = async.StreamView$();
  dart.addTypeTests(async.StreamView, _is_StreamView_default);
  const _is_StreamConsumer_default = Symbol('_is_StreamConsumer_default');
  async.StreamConsumer$ = dart.generic(S => {
    class StreamConsumer extends core.Object {}
    (StreamConsumer.new = function() {
      ;
    }).prototype = StreamConsumer.prototype;
    dart.addTypeTests(StreamConsumer);
    StreamConsumer.prototype[_is_StreamConsumer_default] = true;
    dart.addTypeCaches(StreamConsumer);
    dart.setLibraryUri(StreamConsumer, I[29]);
    return StreamConsumer;
  });
  async.StreamConsumer = async.StreamConsumer$();
  dart.addTypeTests(async.StreamConsumer, _is_StreamConsumer_default);
  const _is_StreamSink_default = Symbol('_is_StreamSink_default');
  async.StreamSink$ = dart.generic(S => {
    class StreamSink extends core.Object {}
    (StreamSink.new = function() {
      ;
    }).prototype = StreamSink.prototype;
    dart.addTypeTests(StreamSink);
    StreamSink.prototype[_is_StreamSink_default] = true;
    dart.addTypeCaches(StreamSink);
    StreamSink[dart.implements] = () => [async.EventSink$(S), async.StreamConsumer$(S)];
    dart.setLibraryUri(StreamSink, I[29]);
    return StreamSink;
  });
  async.StreamSink = async.StreamSink$();
  dart.addTypeTests(async.StreamSink, _is_StreamSink_default);
  const _is_StreamTransformer_default = Symbol('_is_StreamTransformer_default');
  async.StreamTransformer$ = dart.generic((S, T) => {
    class StreamTransformer extends core.Object {
      static castFrom(SS, ST, TS, TT, source) {
        if (source == null) dart.nullFailed(I[28], 2008, 33, "source");
        return new (_internal.CastStreamTransformer$(SS, ST, TS, TT)).new(source);
      }
    }
    (StreamTransformer[dart.mixinNew] = function() {
    }).prototype = StreamTransformer.prototype;
    dart.addTypeTests(StreamTransformer);
    StreamTransformer.prototype[_is_StreamTransformer_default] = true;
    dart.addTypeCaches(StreamTransformer);
    dart.setLibraryUri(StreamTransformer, I[29]);
    return StreamTransformer;
  });
  async.StreamTransformer = async.StreamTransformer$();
  dart.addTypeTests(async.StreamTransformer, _is_StreamTransformer_default);
  const _is_StreamIterator_default = Symbol('_is_StreamIterator_default');
  async.StreamIterator$ = dart.generic(T => {
    class StreamIterator extends core.Object {
      static new(stream) {
        if (stream == null) dart.nullFailed(I[28], 2072, 36, "stream");
        return new (async._StreamIterator$(T)).new(stream);
      }
    }
    (StreamIterator[dart.mixinNew] = function() {
    }).prototype = StreamIterator.prototype;
    dart.addTypeTests(StreamIterator);
    StreamIterator.prototype[_is_StreamIterator_default] = true;
    dart.addTypeCaches(StreamIterator);
    dart.setLibraryUri(StreamIterator, I[29]);
    return StreamIterator;
  });
  async.StreamIterator = async.StreamIterator$();
  dart.addTypeTests(async.StreamIterator, _is_StreamIterator_default);
  var _ensureSink = dart.privateName(async, "_ensureSink");
  const _is__ControllerEventSinkWrapper_default = Symbol('_is__ControllerEventSinkWrapper_default');
  async._ControllerEventSinkWrapper$ = dart.generic(T => {
    class _ControllerEventSinkWrapper extends core.Object {
      [_ensureSink]() {
        let sink = this[_sink$];
        if (sink == null) dart.throw(new core.StateError.new("Sink not available"));
        return sink;
      }
      add(data) {
        T.as(data);
        this[_ensureSink]().add(data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[28], 2139, 17, "error");
        this[_ensureSink]().addError(error, stackTrace);
      }
      close() {
        this[_ensureSink]().close();
      }
    }
    (_ControllerEventSinkWrapper.new = function(_sink) {
      this[_sink$] = _sink;
      ;
    }).prototype = _ControllerEventSinkWrapper.prototype;
    dart.addTypeTests(_ControllerEventSinkWrapper);
    _ControllerEventSinkWrapper.prototype[_is__ControllerEventSinkWrapper_default] = true;
    dart.addTypeCaches(_ControllerEventSinkWrapper);
    _ControllerEventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
    dart.setMethodSignature(_ControllerEventSinkWrapper, () => ({
      __proto__: dart.getMethods(_ControllerEventSinkWrapper.__proto__),
      [_ensureSink]: dart.fnType(async.EventSink, []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ControllerEventSinkWrapper, I[29]);
    dart.setFieldSignature(_ControllerEventSinkWrapper, () => ({
      __proto__: dart.getFields(_ControllerEventSinkWrapper.__proto__),
      [_sink$]: dart.fieldType(dart.nullable(async.EventSink))
    }));
    return _ControllerEventSinkWrapper;
  });
  async._ControllerEventSinkWrapper = async._ControllerEventSinkWrapper$();
  dart.addTypeTests(async._ControllerEventSinkWrapper, _is__ControllerEventSinkWrapper_default);
  const _is_MultiStreamController_default = Symbol('_is_MultiStreamController_default');
  async.MultiStreamController$ = dart.generic(T => {
    class MultiStreamController extends core.Object {}
    (MultiStreamController.new = function() {
      ;
    }).prototype = MultiStreamController.prototype;
    dart.addTypeTests(MultiStreamController);
    MultiStreamController.prototype[_is_MultiStreamController_default] = true;
    dart.addTypeCaches(MultiStreamController);
    MultiStreamController[dart.implements] = () => [async.StreamController$(T)];
    dart.setLibraryUri(MultiStreamController, I[29]);
    return MultiStreamController;
  });
  async.MultiStreamController = async.MultiStreamController$();
  dart.addTypeTests(async.MultiStreamController, _is_MultiStreamController_default);
  const _is_StreamController_default = Symbol('_is_StreamController_default');
  async.StreamController$ = dart.generic(T => {
    class StreamController extends core.Object {
      static new(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onPause = opts && 'onPause' in opts ? opts.onPause : null;
        let onResume = opts && 'onResume' in opts ? opts.onResume : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        if (sync == null) dart.nullFailed(I[64], 73, 12, "sync");
        return dart.test(sync) ? new (async._SyncStreamController$(T)).new(onListen, onPause, onResume, onCancel) : new (async._AsyncStreamController$(T)).new(onListen, onPause, onResume, onCancel);
      }
      static broadcast(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        let sync = opts && 'sync' in opts ? opts.sync : false;
        if (sync == null) dart.nullFailed(I[64], 129, 49, "sync");
        return dart.test(sync) ? new (async._SyncBroadcastStreamController$(T)).new(onListen, onCancel) : new (async._AsyncBroadcastStreamController$(T)).new(onListen, onCancel);
      }
    }
    (StreamController[dart.mixinNew] = function() {
    }).prototype = StreamController.prototype;
    dart.addTypeTests(StreamController);
    StreamController.prototype[_is_StreamController_default] = true;
    dart.addTypeCaches(StreamController);
    StreamController[dart.implements] = () => [async.StreamSink$(T)];
    dart.setLibraryUri(StreamController, I[29]);
    return StreamController;
  });
  async.StreamController = async.StreamController$();
  dart.addTypeTests(async.StreamController, _is_StreamController_default);
  const _is_SynchronousStreamController_default = Symbol('_is_SynchronousStreamController_default');
  async.SynchronousStreamController$ = dart.generic(T => {
    class SynchronousStreamController extends core.Object {}
    (SynchronousStreamController.new = function() {
      ;
    }).prototype = SynchronousStreamController.prototype;
    dart.addTypeTests(SynchronousStreamController);
    SynchronousStreamController.prototype[_is_SynchronousStreamController_default] = true;
    dart.addTypeCaches(SynchronousStreamController);
    SynchronousStreamController[dart.implements] = () => [async.StreamController$(T)];
    dart.setLibraryUri(SynchronousStreamController, I[29]);
    return SynchronousStreamController;
  });
  async.SynchronousStreamController = async.SynchronousStreamController$();
  dart.addTypeTests(async.SynchronousStreamController, _is_SynchronousStreamController_default);
  const _is__StreamControllerLifecycle_default = Symbol('_is__StreamControllerLifecycle_default');
  async._StreamControllerLifecycle$ = dart.generic(T => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    class _StreamControllerLifecycle extends core.Object {
      [_recordPause](subscription) {
        StreamSubscriptionOfT().as(subscription);
        if (subscription == null) dart.nullFailed(I[64], 352, 43, "subscription");
      }
      [_recordResume](subscription) {
        StreamSubscriptionOfT().as(subscription);
        if (subscription == null) dart.nullFailed(I[64], 353, 44, "subscription");
      }
      [_recordCancel](subscription) {
        StreamSubscriptionOfT().as(subscription);
        if (subscription == null) dart.nullFailed(I[64], 354, 53, "subscription");
        return null;
      }
    }
    (_StreamControllerLifecycle.new = function() {
      ;
    }).prototype = _StreamControllerLifecycle.prototype;
    dart.addTypeTests(_StreamControllerLifecycle);
    _StreamControllerLifecycle.prototype[_is__StreamControllerLifecycle_default] = true;
    dart.addTypeCaches(_StreamControllerLifecycle);
    dart.setMethodSignature(_StreamControllerLifecycle, () => ({
      __proto__: dart.getMethods(_StreamControllerLifecycle.__proto__),
      [_recordPause]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_recordResume]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_StreamControllerLifecycle, I[29]);
    return _StreamControllerLifecycle;
  });
  async._StreamControllerLifecycle = async._StreamControllerLifecycle$();
  dart.addTypeTests(async._StreamControllerLifecycle, _is__StreamControllerLifecycle_default);
  const _is__StreamControllerBase_default = Symbol('_is__StreamControllerBase_default');
  async._StreamControllerBase$ = dart.generic(T => {
    class _StreamControllerBase extends core.Object {}
    (_StreamControllerBase.new = function() {
      ;
    }).prototype = _StreamControllerBase.prototype;
    dart.addTypeTests(_StreamControllerBase);
    _StreamControllerBase.prototype[_is__StreamControllerBase_default] = true;
    dart.addTypeCaches(_StreamControllerBase);
    _StreamControllerBase[dart.implements] = () => [async.StreamController$(T), async._StreamControllerLifecycle$(T), async._EventSink$(T), async._EventDispatch$(T)];
    dart.setLibraryUri(_StreamControllerBase, I[29]);
    return _StreamControllerBase;
  });
  async._StreamControllerBase = async._StreamControllerBase$();
  dart.addTypeTests(async._StreamControllerBase, _is__StreamControllerBase_default);
  var _varData = dart.privateName(async, "_varData");
  var _isInitialState = dart.privateName(async, "_isInitialState");
  var _subscription = dart.privateName(async, "_subscription");
  var _pendingEvents = dart.privateName(async, "_pendingEvents");
  var _ensurePendingEvents = dart.privateName(async, "_ensurePendingEvents");
  var _badEventState = dart.privateName(async, "_badEventState");
  const _is__StreamController_default = Symbol('_is__StreamController_default');
  async._StreamController$ = dart.generic(T => {
    var _ControllerStreamOfT = () => (_ControllerStreamOfT = dart.constFn(async._ControllerStream$(T)))();
    var _StreamSinkWrapperOfT = () => (_StreamSinkWrapperOfT = dart.constFn(async._StreamSinkWrapper$(T)))();
    var _PendingEventsOfT = () => (_PendingEventsOfT = dart.constFn(async._PendingEvents$(T)))();
    var _PendingEventsNOfT = () => (_PendingEventsNOfT = dart.constFn(dart.nullable(_PendingEventsOfT())))();
    var _StreamControllerAddStreamStateOfT = () => (_StreamControllerAddStreamStateOfT = dart.constFn(async._StreamControllerAddStreamState$(T)))();
    var _StreamImplEventsOfT = () => (_StreamImplEventsOfT = dart.constFn(async._StreamImplEvents$(T)))();
    var _ControllerSubscriptionOfT = () => (_ControllerSubscriptionOfT = dart.constFn(async._ControllerSubscription$(T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
    class _StreamController extends core.Object {
      get stream() {
        return new (_ControllerStreamOfT()).new(this);
      }
      get sink() {
        return new (_StreamSinkWrapperOfT()).new(this);
      }
      get [_isCanceled]() {
        return (dart.notNull(this[_state]) & 2) !== 0;
      }
      get hasListener() {
        return (dart.notNull(this[_state]) & 1) !== 0;
      }
      get [_isInitialState]() {
        return (dart.notNull(this[_state]) & 3) >>> 0 === 0;
      }
      get isClosed() {
        return (dart.notNull(this[_state]) & 4) !== 0;
      }
      get isPaused() {
        return dart.test(this.hasListener) ? this[_subscription][_isInputPaused] : !dart.test(this[_isCanceled]);
      }
      get [_isAddingStream]() {
        return (dart.notNull(this[_state]) & 8) !== 0;
      }
      get [_mayAddEvent]() {
        return dart.notNull(this[_state]) < 4;
      }
      get [_pendingEvents]() {
        if (!dart.test(this[_isInitialState])) dart.assertFailed(null, I[64], 479, 12, "_isInitialState");
        if (!dart.test(this[_isAddingStream])) {
          return _PendingEventsNOfT().as(this[_varData]);
        }
        let state = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        return _PendingEventsNOfT().as(state.varData);
      }
      [_ensurePendingEvents]() {
        if (!dart.test(this[_isInitialState])) dart.assertFailed(null, I[64], 489, 12, "_isInitialState");
        if (!dart.test(this[_isAddingStream])) {
          let events = this[_varData];
          if (events == null) {
            this[_varData] = events = new (_StreamImplEventsOfT()).new();
          }
          return _StreamImplEventsOfT().as(events);
        }
        let state = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        let events = state.varData;
        if (events == null) {
          state.varData = events = new (_StreamImplEventsOfT()).new();
        }
        return _StreamImplEventsOfT().as(events);
      }
      get [_subscription]() {
        if (!dart.test(this.hasListener)) dart.assertFailed(null, I[64], 509, 12, "hasListener");
        let varData = this[_varData];
        if (dart.test(this[_isAddingStream])) {
          let streamState = T$._StreamControllerAddStreamStateOfObjectN().as(varData);
          varData = streamState.varData;
        }
        return _ControllerSubscriptionOfT().as(varData);
      }
      [_badEventState]() {
        if (dart.test(this.isClosed)) {
          return new core.StateError.new("Cannot add event after closing");
        }
        if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, I[64], 525, 12, "_isAddingStream");
        return new core.StateError.new("Cannot add event while adding a stream");
      }
      addStream(source, opts) {
        let t114;
        StreamOfT().as(source);
        if (source == null) dart.nullFailed(I[64], 530, 30, "source");
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        if (dart.test(this[_isCanceled])) return new async._Future.immediate(null);
        let addState = new (_StreamControllerAddStreamStateOfT()).new(this, this[_varData], source, (t114 = cancelOnError, t114 == null ? false : t114));
        this[_varData] = addState;
        this[_state] = (dart.notNull(this[_state]) | 8) >>> 0;
        return addState.addStreamFuture;
      }
      get done() {
        return this[_ensureDoneFuture]();
      }
      [_ensureDoneFuture]() {
        let t114;
        t114 = this[_doneFuture];
        return t114 == null ? this[_doneFuture] = dart.test(this[_isCanceled]) ? async.Future._nullFuture : new (T$._FutureOfvoid()).new() : t114;
      }
      add(value) {
        T.as(value);
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        this[_add](value);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[64], 558, 24, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        let replacement = async.Zone.current.errorCallback(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else {
          stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        }
        if (stackTrace == null) dart.throw("unreachable");
        this[_addError](error, stackTrace);
      }
      close() {
        if (dart.test(this.isClosed)) {
          return this[_ensureDoneFuture]();
        }
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        this[_closeUnchecked]();
        return this[_ensureDoneFuture]();
      }
      [_closeUnchecked]() {
        this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
        if (dart.test(this.hasListener)) {
          this[_sendDone]();
        } else if (dart.test(this[_isInitialState])) {
          this[_ensurePendingEvents]().add(C[40] || CT.C40);
        }
      }
      [_add](value) {
        T.as(value);
        if (dart.test(this.hasListener)) {
          this[_sendData](value);
        } else if (dart.test(this[_isInitialState])) {
          this[_ensurePendingEvents]().add(new (_DelayedDataOfT()).new(value));
        }
      }
      [_addError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[64], 613, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[64], 613, 43, "stackTrace");
        if (dart.test(this.hasListener)) {
          this[_sendError](error, stackTrace);
        } else if (dart.test(this[_isInitialState])) {
          this[_ensurePendingEvents]().add(new async._DelayedError.new(error, stackTrace));
        }
      }
      [_close]() {
        if (!dart.test(this[_isAddingStream])) dart.assertFailed(null, I[64], 623, 12, "_isAddingStream");
        let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
        this[_varData] = addState.varData;
        this[_state] = (dart.notNull(this[_state]) & ~8 >>> 0) >>> 0;
        addState.complete();
      }
      [_subscribe](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[64], 633, 28, "cancelOnError");
        if (!dart.test(this[_isInitialState])) {
          dart.throw(new core.StateError.new("Stream has already been listened to."));
        }
        let subscription = new (_ControllerSubscriptionOfT()).new(this, onData, onError, onDone, cancelOnError);
        let pendingEvents = this[_pendingEvents];
        this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
        if (dart.test(this[_isAddingStream])) {
          let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
          addState.varData = subscription;
          addState.resume();
        } else {
          this[_varData] = subscription;
        }
        subscription[_setPendingEvents](pendingEvents);
        subscription[_guardCallback](dart.fn(() => {
          async._runGuarded(this.onListen);
        }, T$.VoidTovoid()));
        return subscription;
      }
      [_recordCancel](subscription) {
        let t115;
        if (subscription == null) dart.nullFailed(I[64], 657, 53, "subscription");
        let result = null;
        if (dart.test(this[_isAddingStream])) {
          let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
          result = addState.cancel();
        }
        this[_varData] = null;
        this[_state] = (dart.notNull(this[_state]) & ~(1 | 8) >>> 0 | 2) >>> 0;
        let onCancel = this.onCancel;
        if (onCancel != null) {
          if (result == null) {
            try {
              let cancelResult = onCancel();
              if (T$.FutureOfvoid().is(cancelResult)) {
                result = cancelResult;
              }
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                result = (t115 = new (T$._FutureOfvoid()).new(), (() => {
                  t115[_asyncCompleteError](e, s);
                  return t115;
                })());
              } else
                throw e$;
            }
          } else {
            result = result.whenComplete(onCancel);
          }
        }
        const complete = () => {
          let doneFuture = this[_doneFuture];
          if (doneFuture != null && dart.test(doneFuture[_mayComplete])) {
            doneFuture[_asyncComplete](null);
          }
        };
        dart.fn(complete, T$.VoidTovoid());
        if (result != null) {
          result = result.whenComplete(complete);
        } else {
          complete();
        }
        return result;
      }
      [_recordPause](subscription) {
        if (subscription == null) dart.nullFailed(I[64], 713, 43, "subscription");
        if (dart.test(this[_isAddingStream])) {
          let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
          addState.pause();
        }
        async._runGuarded(this.onPause);
      }
      [_recordResume](subscription) {
        if (subscription == null) dart.nullFailed(I[64], 721, 44, "subscription");
        if (dart.test(this[_isAddingStream])) {
          let addState = _StreamControllerAddStreamStateOfT().as(this[_varData]);
          addState.resume();
        }
        async._runGuarded(this.onResume);
      }
    }
    (_StreamController.new = function(onListen, onPause, onResume, onCancel) {
      this[_varData] = null;
      this[_state] = 0;
      this[_doneFuture] = null;
      this.onListen = onListen;
      this.onPause = onPause;
      this.onResume = onResume;
      this.onCancel = onCancel;
      ;
    }).prototype = _StreamController.prototype;
    dart.addTypeTests(_StreamController);
    _StreamController.prototype[_is__StreamController_default] = true;
    dart.addTypeCaches(_StreamController);
    _StreamController[dart.implements] = () => [async._StreamControllerBase$(T)];
    dart.setMethodSignature(_StreamController, () => ({
      __proto__: dart.getMethods(_StreamController.__proto__),
      [_ensurePendingEvents]: dart.fnType(async._StreamImplEvents$(T), []),
      [_badEventState]: dart.fnType(core.Error, []),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)], {cancelOnError: dart.nullable(core.bool)}, {}),
      [_ensureDoneFuture]: dart.fnType(async.Future$(dart.void), []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(async.Future, []),
      [_closeUnchecked]: dart.fnType(dart.void, []),
      [_add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_addError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_close]: dart.fnType(dart.void, []),
      [_subscribe]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
      [_recordCancel]: dart.fnType(dart.nullable(async.Future$(dart.void)), [async.StreamSubscription$(T)]),
      [_recordPause]: dart.fnType(dart.void, [async.StreamSubscription$(T)]),
      [_recordResume]: dart.fnType(dart.void, [async.StreamSubscription$(T)])
    }));
    dart.setGetterSignature(_StreamController, () => ({
      __proto__: dart.getGetters(_StreamController.__proto__),
      stream: async.Stream$(T),
      sink: async.StreamSink$(T),
      [_isCanceled]: core.bool,
      hasListener: core.bool,
      [_isInitialState]: core.bool,
      isClosed: core.bool,
      isPaused: core.bool,
      [_isAddingStream]: core.bool,
      [_mayAddEvent]: core.bool,
      [_pendingEvents]: dart.nullable(async._PendingEvents$(T)),
      [_subscription]: async._ControllerSubscription$(T),
      done: async.Future$(dart.void)
    }));
    dart.setLibraryUri(_StreamController, I[29]);
    dart.setFieldSignature(_StreamController, () => ({
      __proto__: dart.getFields(_StreamController.__proto__),
      [_varData]: dart.fieldType(dart.nullable(core.Object)),
      [_state]: dart.fieldType(core.int),
      [_doneFuture]: dart.fieldType(dart.nullable(async._Future$(dart.void))),
      onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onPause: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onResume: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _StreamController;
  });
  async._StreamController = async._StreamController$();
  dart.defineLazy(async._StreamController, {
    /*async._StreamController._STATE_INITIAL*/get _STATE_INITIAL() {
      return 0;
    },
    /*async._StreamController._STATE_SUBSCRIBED*/get _STATE_SUBSCRIBED() {
      return 1;
    },
    /*async._StreamController._STATE_CANCELED*/get _STATE_CANCELED() {
      return 2;
    },
    /*async._StreamController._STATE_SUBSCRIPTION_MASK*/get _STATE_SUBSCRIPTION_MASK() {
      return 3;
    },
    /*async._StreamController._STATE_CLOSED*/get _STATE_CLOSED() {
      return 4;
    },
    /*async._StreamController._STATE_ADDSTREAM*/get _STATE_ADDSTREAM() {
      return 8;
    }
  }, false);
  dart.addTypeTests(async._StreamController, _is__StreamController_default);
  const _is__SyncStreamControllerDispatch_default = Symbol('_is__SyncStreamControllerDispatch_default');
  async._SyncStreamControllerDispatch$ = dart.generic(T => {
    class _SyncStreamControllerDispatch extends core.Object {
      [_sendData](data) {
        this[_subscription][_add](data);
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[64], 736, 26, "error");
        if (stackTrace == null) dart.nullFailed(I[64], 736, 44, "stackTrace");
        this[_subscription][_addError](error, stackTrace);
      }
      [_sendDone]() {
        this[_subscription][_close]();
      }
    }
    (_SyncStreamControllerDispatch.new = function() {
      ;
    }).prototype = _SyncStreamControllerDispatch.prototype;
    dart.addTypeTests(_SyncStreamControllerDispatch);
    _SyncStreamControllerDispatch.prototype[_is__SyncStreamControllerDispatch_default] = true;
    dart.addTypeCaches(_SyncStreamControllerDispatch);
    _SyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T), async.SynchronousStreamController$(T)];
    dart.setMethodSignature(_SyncStreamControllerDispatch, () => ({
      __proto__: dart.getMethods(_SyncStreamControllerDispatch.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SyncStreamControllerDispatch, I[29]);
    return _SyncStreamControllerDispatch;
  });
  async._SyncStreamControllerDispatch = async._SyncStreamControllerDispatch$();
  dart.addTypeTests(async._SyncStreamControllerDispatch, _is__SyncStreamControllerDispatch_default);
  const _is__AsyncStreamControllerDispatch_default = Symbol('_is__AsyncStreamControllerDispatch_default');
  async._AsyncStreamControllerDispatch$ = dart.generic(T => {
    var _DelayedDataOfT = () => (_DelayedDataOfT = dart.constFn(async._DelayedData$(T)))();
    class _AsyncStreamControllerDispatch extends core.Object {
      [_sendData](data) {
        this[_subscription][_addPending](new (_DelayedDataOfT()).new(data));
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[64], 751, 26, "error");
        if (stackTrace == null) dart.nullFailed(I[64], 751, 44, "stackTrace");
        this[_subscription][_addPending](new async._DelayedError.new(error, stackTrace));
      }
      [_sendDone]() {
        this[_subscription][_addPending](C[40] || CT.C40);
      }
    }
    (_AsyncStreamControllerDispatch.new = function() {
      ;
    }).prototype = _AsyncStreamControllerDispatch.prototype;
    dart.addTypeTests(_AsyncStreamControllerDispatch);
    _AsyncStreamControllerDispatch.prototype[_is__AsyncStreamControllerDispatch_default] = true;
    dart.addTypeCaches(_AsyncStreamControllerDispatch);
    _AsyncStreamControllerDispatch[dart.implements] = () => [async._StreamController$(T)];
    dart.setMethodSignature(_AsyncStreamControllerDispatch, () => ({
      __proto__: dart.getMethods(_AsyncStreamControllerDispatch.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_AsyncStreamControllerDispatch, I[29]);
    return _AsyncStreamControllerDispatch;
  });
  async._AsyncStreamControllerDispatch = async._AsyncStreamControllerDispatch$();
  dart.addTypeTests(async._AsyncStreamControllerDispatch, _is__AsyncStreamControllerDispatch_default);
  const _is__AsyncStreamController_default = Symbol('_is__AsyncStreamController_default');
  async._AsyncStreamController$ = dart.generic(T => {
    const _StreamController__AsyncStreamControllerDispatch$36 = class _StreamController__AsyncStreamControllerDispatch extends async._StreamController$(T) {};
    (_StreamController__AsyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
      _StreamController__AsyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    }).prototype = _StreamController__AsyncStreamControllerDispatch$36.prototype;
    dart.applyMixin(_StreamController__AsyncStreamControllerDispatch$36, async._AsyncStreamControllerDispatch$(T));
    class _AsyncStreamController extends _StreamController__AsyncStreamControllerDispatch$36 {
      [_sendData](data) {
        return super[_sendData](data);
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[64], 764, 7, "error");
        if (stackTrace == null) dart.nullFailed(I[64], 764, 7, "stackTrace");
        return super[_sendError](error, stackTrace);
      }
      [_sendDone]() {
        return super[_sendDone]();
      }
    }
    (_AsyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
      _AsyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
      ;
    }).prototype = _AsyncStreamController.prototype;
    dart.addTypeTests(_AsyncStreamController);
    _AsyncStreamController.prototype[_is__AsyncStreamController_default] = true;
    dart.addTypeCaches(_AsyncStreamController);
    dart.setMethodSignature(_AsyncStreamController, () => ({
      __proto__: dart.getMethods(_AsyncStreamController.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_AsyncStreamController, I[29]);
    return _AsyncStreamController;
  });
  async._AsyncStreamController = async._AsyncStreamController$();
  dart.addTypeTests(async._AsyncStreamController, _is__AsyncStreamController_default);
  const _is__SyncStreamController_default = Symbol('_is__SyncStreamController_default');
  async._SyncStreamController$ = dart.generic(T => {
    const _StreamController__SyncStreamControllerDispatch$36 = class _StreamController__SyncStreamControllerDispatch extends async._StreamController$(T) {};
    (_StreamController__SyncStreamControllerDispatch$36.new = function(onListen, onPause, onResume, onCancel) {
      _StreamController__SyncStreamControllerDispatch$36.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
    }).prototype = _StreamController__SyncStreamControllerDispatch$36.prototype;
    dart.applyMixin(_StreamController__SyncStreamControllerDispatch$36, async._SyncStreamControllerDispatch$(T));
    class _SyncStreamController extends _StreamController__SyncStreamControllerDispatch$36 {
      [_sendData](data) {
        return super[_sendData](data);
      }
      [_sendError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[64], 767, 7, "error");
        if (stackTrace == null) dart.nullFailed(I[64], 767, 7, "stackTrace");
        return super[_sendError](error, stackTrace);
      }
      [_sendDone]() {
        return super[_sendDone]();
      }
    }
    (_SyncStreamController.new = function(onListen, onPause, onResume, onCancel) {
      _SyncStreamController.__proto__.new.call(this, onListen, onPause, onResume, onCancel);
      ;
    }).prototype = _SyncStreamController.prototype;
    dart.addTypeTests(_SyncStreamController);
    _SyncStreamController.prototype[_is__SyncStreamController_default] = true;
    dart.addTypeCaches(_SyncStreamController);
    dart.setMethodSignature(_SyncStreamController, () => ({
      __proto__: dart.getMethods(_SyncStreamController.__proto__),
      [_sendData]: dart.fnType(dart.void, [T]),
      [_sendError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SyncStreamController, I[29]);
    return _SyncStreamController;
  });
  async._SyncStreamController = async._SyncStreamController$();
  dart.addTypeTests(async._SyncStreamController, _is__SyncStreamController_default);
  var _target$ = dart.privateName(async, "_target");
  const _is__StreamSinkWrapper_default = Symbol('_is__StreamSinkWrapper_default');
  async._StreamSinkWrapper$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class _StreamSinkWrapper extends core.Object {
      add(data) {
        T.as(data);
        this[_target$].add(data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[64], 829, 24, "error");
        this[_target$].addError(error, stackTrace);
      }
      close() {
        return this[_target$].close();
      }
      addStream(source) {
        StreamOfT().as(source);
        if (source == null) dart.nullFailed(I[64], 835, 30, "source");
        return this[_target$].addStream(source);
      }
      get done() {
        return this[_target$].done;
      }
    }
    (_StreamSinkWrapper.new = function(_target) {
      if (_target == null) dart.nullFailed(I[64], 824, 27, "_target");
      this[_target$] = _target;
      ;
    }).prototype = _StreamSinkWrapper.prototype;
    dart.addTypeTests(_StreamSinkWrapper);
    _StreamSinkWrapper.prototype[_is__StreamSinkWrapper_default] = true;
    dart.addTypeCaches(_StreamSinkWrapper);
    _StreamSinkWrapper[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getMethods(_StreamSinkWrapper.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(async.Future, []),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getGetters(_StreamSinkWrapper.__proto__),
      done: async.Future
    }));
    dart.setLibraryUri(_StreamSinkWrapper, I[29]);
    dart.setFieldSignature(_StreamSinkWrapper, () => ({
      __proto__: dart.getFields(_StreamSinkWrapper.__proto__),
      [_target$]: dart.finalFieldType(async.StreamController)
    }));
    return _StreamSinkWrapper;
  });
  async._StreamSinkWrapper = async._StreamSinkWrapper$();
  dart.addTypeTests(async._StreamSinkWrapper, _is__StreamSinkWrapper_default);
  const _is__AddStreamState_default = Symbol('_is__AddStreamState_default');
  async._AddStreamState$ = dart.generic(T => {
    class _AddStreamState extends core.Object {
      static makeErrorHandler(controller) {
        if (controller == null) dart.nullFailed(I[64], 858, 38, "controller");
        return dart.fn((e, s) => {
          if (e == null) dart.nullFailed(I[64], 858, 61, "e");
          if (s == null) dart.nullFailed(I[64], 858, 75, "s");
          controller[_addError](e, s);
          controller[_close]();
        }, T$.ObjectAndStackTraceToNull());
      }
      pause() {
        this.addSubscription.pause();
      }
      resume() {
        this.addSubscription.resume();
      }
      cancel() {
        let cancel = this.addSubscription.cancel();
        if (cancel == null) {
          this.addStreamFuture[_asyncComplete](null);
          return async.Future._nullFuture;
        }
        return cancel.whenComplete(dart.fn(() => {
          this.addStreamFuture[_asyncComplete](null);
        }, T$.VoidToNull()));
      }
      complete() {
        this.addStreamFuture[_asyncComplete](null);
      }
    }
    (_AddStreamState.new = function(controller, source, cancelOnError) {
      if (controller == null) dart.nullFailed(I[64], 849, 21, "controller");
      if (source == null) dart.nullFailed(I[64], 849, 43, "source");
      if (cancelOnError == null) dart.nullFailed(I[64], 849, 56, "cancelOnError");
      this.addStreamFuture = new async._Future.new();
      this.addSubscription = source.listen(dart.bind(controller, _add), {onError: T$.FunctionN().as(dart.test(cancelOnError) ? async._AddStreamState.makeErrorHandler(controller) : dart.bind(controller, _addError)), onDone: dart.bind(controller, _close), cancelOnError: cancelOnError});
      ;
    }).prototype = _AddStreamState.prototype;
    dart.addTypeTests(_AddStreamState);
    _AddStreamState.prototype[_is__AddStreamState_default] = true;
    dart.addTypeCaches(_AddStreamState);
    dart.setMethodSignature(_AddStreamState, () => ({
      __proto__: dart.getMethods(_AddStreamState.__proto__),
      pause: dart.fnType(dart.void, []),
      resume: dart.fnType(dart.void, []),
      cancel: dart.fnType(async.Future$(dart.void), []),
      complete: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_AddStreamState, I[29]);
    dart.setFieldSignature(_AddStreamState, () => ({
      __proto__: dart.getFields(_AddStreamState.__proto__),
      addStreamFuture: dart.finalFieldType(async._Future),
      addSubscription: dart.finalFieldType(async.StreamSubscription)
    }));
    return _AddStreamState;
  });
  async._AddStreamState = async._AddStreamState$();
  dart.addTypeTests(async._AddStreamState, _is__AddStreamState_default);
  const _is__StreamControllerAddStreamState_default = Symbol('_is__StreamControllerAddStreamState_default');
  async._StreamControllerAddStreamState$ = dart.generic(T => {
    class _StreamControllerAddStreamState extends async._AddStreamState$(T) {}
    (_StreamControllerAddStreamState.new = function(controller, varData, source, cancelOnError) {
      if (controller == null) dart.nullFailed(I[64], 899, 56, "controller");
      if (source == null) dart.nullFailed(I[64], 900, 17, "source");
      if (cancelOnError == null) dart.nullFailed(I[64], 900, 30, "cancelOnError");
      this.varData = varData;
      _StreamControllerAddStreamState.__proto__.new.call(this, controller, source, cancelOnError);
      if (dart.test(controller.isPaused)) {
        this.addSubscription.pause();
      }
    }).prototype = _StreamControllerAddStreamState.prototype;
    dart.addTypeTests(_StreamControllerAddStreamState);
    _StreamControllerAddStreamState.prototype[_is__StreamControllerAddStreamState_default] = true;
    dart.addTypeCaches(_StreamControllerAddStreamState);
    dart.setLibraryUri(_StreamControllerAddStreamState, I[29]);
    dart.setFieldSignature(_StreamControllerAddStreamState, () => ({
      __proto__: dart.getFields(_StreamControllerAddStreamState.__proto__),
      varData: dart.fieldType(dart.dynamic)
    }));
    return _StreamControllerAddStreamState;
  });
  async._StreamControllerAddStreamState = async._StreamControllerAddStreamState$();
  dart.addTypeTests(async._StreamControllerAddStreamState, _is__StreamControllerAddStreamState_default);
  const _is__EventSink_default = Symbol('_is__EventSink_default');
  async._EventSink$ = dart.generic(T => {
    class _EventSink extends core.Object {}
    (_EventSink.new = function() {
      ;
    }).prototype = _EventSink.prototype;
    dart.addTypeTests(_EventSink);
    _EventSink.prototype[_is__EventSink_default] = true;
    dart.addTypeCaches(_EventSink);
    dart.setLibraryUri(_EventSink, I[29]);
    return _EventSink;
  });
  async._EventSink = async._EventSink$();
  dart.addTypeTests(async._EventSink, _is__EventSink_default);
  const _is__EventDispatch_default = Symbol('_is__EventDispatch_default');
  async._EventDispatch$ = dart.generic(T => {
    class _EventDispatch extends core.Object {}
    (_EventDispatch.new = function() {
      ;
    }).prototype = _EventDispatch.prototype;
    dart.addTypeTests(_EventDispatch);
    _EventDispatch.prototype[_is__EventDispatch_default] = true;
    dart.addTypeCaches(_EventDispatch);
    dart.setLibraryUri(_EventDispatch, I[29]);
    return _EventDispatch;
  });
  async._EventDispatch = async._EventDispatch$();
  dart.addTypeTests(async._EventDispatch, _is__EventDispatch_default);
  var _isUsed = dart.privateName(async, "_isUsed");
  const _is__GeneratedStreamImpl_default = Symbol('_is__GeneratedStreamImpl_default');
  async._GeneratedStreamImpl$ = dart.generic(T => {
    var _BufferingStreamSubscriptionOfT = () => (_BufferingStreamSubscriptionOfT = dart.constFn(async._BufferingStreamSubscription$(T)))();
    class _GeneratedStreamImpl extends async._StreamImpl$(T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        let t115;
        if (cancelOnError == null) dart.nullFailed(I[65], 504, 47, "cancelOnError");
        if (dart.test(this[_isUsed])) dart.throw(new core.StateError.new("Stream has already been listened to."));
        this[_isUsed] = true;
        t115 = new (_BufferingStreamSubscriptionOfT()).new(onData, onError, onDone, cancelOnError);
        return (() => {
          t115[_setPendingEvents](this[_pending$]());
          return t115;
        })();
      }
    }
    (_GeneratedStreamImpl.new = function(_pending) {
      if (_pending == null) dart.nullFailed(I[65], 501, 29, "_pending");
      this[_isUsed] = false;
      this[_pending$] = _pending;
      _GeneratedStreamImpl.__proto__.new.call(this);
      ;
    }).prototype = _GeneratedStreamImpl.prototype;
    dart.addTypeTests(_GeneratedStreamImpl);
    _GeneratedStreamImpl.prototype[_is__GeneratedStreamImpl_default] = true;
    dart.addTypeCaches(_GeneratedStreamImpl);
    dart.setLibraryUri(_GeneratedStreamImpl, I[29]);
    dart.setFieldSignature(_GeneratedStreamImpl, () => ({
      __proto__: dart.getFields(_GeneratedStreamImpl.__proto__),
      [_pending$]: dart.finalFieldType(dart.fnType(async._PendingEvents$(T), [])),
      [_isUsed]: dart.fieldType(core.bool)
    }));
    return _GeneratedStreamImpl;
  });
  async._GeneratedStreamImpl = async._GeneratedStreamImpl$();
  dart.addTypeTests(async._GeneratedStreamImpl, _is__GeneratedStreamImpl_default);
  var _iterator = dart.privateName(async, "_iterator");
  var _eventScheduled = dart.privateName(async, "_eventScheduled");
  const _is__PendingEvents_default = Symbol('_is__PendingEvents_default');
  async._PendingEvents$ = dart.generic(T => {
    var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
    class _PendingEvents extends core.Object {
      get isScheduled() {
        return this[_state] === 1;
      }
      get [_eventScheduled]() {
        return dart.notNull(this[_state]) >= 1;
      }
      schedule(dispatch) {
        _EventDispatchOfT().as(dispatch);
        if (dispatch == null) dart.nullFailed(I[65], 651, 35, "dispatch");
        if (dart.test(this.isScheduled)) return;
        if (!!dart.test(this.isEmpty)) dart.assertFailed(null, I[65], 653, 12, "!isEmpty");
        if (dart.test(this[_eventScheduled])) {
          if (!(this[_state] === 3)) dart.assertFailed(null, I[65], 655, 14, "_state == _STATE_CANCELED");
          this[_state] = 1;
          return;
        }
        async.scheduleMicrotask(dart.fn(() => {
          let oldState = this[_state];
          this[_state] = 0;
          if (oldState === 3) return;
          this.handleNext(dispatch);
        }, T$.VoidTovoid()));
        this[_state] = 1;
      }
      cancelSchedule() {
        if (dart.test(this.isScheduled)) this[_state] = 3;
      }
    }
    (_PendingEvents.new = function() {
      this[_state] = 0;
      ;
    }).prototype = _PendingEvents.prototype;
    dart.addTypeTests(_PendingEvents);
    _PendingEvents.prototype[_is__PendingEvents_default] = true;
    dart.addTypeCaches(_PendingEvents);
    dart.setMethodSignature(_PendingEvents, () => ({
      __proto__: dart.getMethods(_PendingEvents.__proto__),
      schedule: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      cancelSchedule: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_PendingEvents, () => ({
      __proto__: dart.getGetters(_PendingEvents.__proto__),
      isScheduled: core.bool,
      [_eventScheduled]: core.bool
    }));
    dart.setLibraryUri(_PendingEvents, I[29]);
    dart.setFieldSignature(_PendingEvents, () => ({
      __proto__: dart.getFields(_PendingEvents.__proto__),
      [_state]: dart.fieldType(core.int)
    }));
    return _PendingEvents;
  });
  async._PendingEvents = async._PendingEvents$();
  dart.defineLazy(async._PendingEvents, {
    /*async._PendingEvents._STATE_UNSCHEDULED*/get _STATE_UNSCHEDULED() {
      return 0;
    },
    /*async._PendingEvents._STATE_SCHEDULED*/get _STATE_SCHEDULED() {
      return 1;
    },
    /*async._PendingEvents._STATE_CANCELED*/get _STATE_CANCELED() {
      return 3;
    }
  }, false);
  dart.addTypeTests(async._PendingEvents, _is__PendingEvents_default);
  const _is__IterablePendingEvents_default = Symbol('_is__IterablePendingEvents_default');
  async._IterablePendingEvents$ = dart.generic(T => {
    var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
    class _IterablePendingEvents extends async._PendingEvents$(T) {
      get isEmpty() {
        return this[_iterator] == null;
      }
      handleNext(dispatch) {
        _EventDispatchOfT().as(dispatch);
        if (dispatch == null) dart.nullFailed(I[65], 523, 37, "dispatch");
        let iterator = this[_iterator];
        if (iterator == null) {
          dart.throw(new core.StateError.new("No events pending."));
        }
        let movedNext = false;
        try {
          if (dart.test(iterator.moveNext())) {
            movedNext = true;
            dispatch[_sendData](iterator.current);
          } else {
            this[_iterator] = null;
            dispatch[_sendDone]();
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            if (!movedNext) {
              this[_iterator] = C[20] || CT.C20;
            }
            dispatch[_sendError](e, s);
          } else
            throw e$;
        }
      }
      clear() {
        if (dart.test(this.isScheduled)) this.cancelSchedule();
        this[_iterator] = null;
      }
    }
    (_IterablePendingEvents.new = function(data) {
      if (data == null) dart.nullFailed(I[65], 519, 38, "data");
      this[_iterator] = data[$iterator];
      _IterablePendingEvents.__proto__.new.call(this);
      ;
    }).prototype = _IterablePendingEvents.prototype;
    dart.addTypeTests(_IterablePendingEvents);
    _IterablePendingEvents.prototype[_is__IterablePendingEvents_default] = true;
    dart.addTypeCaches(_IterablePendingEvents);
    dart.setMethodSignature(_IterablePendingEvents, () => ({
      __proto__: dart.getMethods(_IterablePendingEvents.__proto__),
      handleNext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_IterablePendingEvents, () => ({
      __proto__: dart.getGetters(_IterablePendingEvents.__proto__),
      isEmpty: core.bool
    }));
    dart.setLibraryUri(_IterablePendingEvents, I[29]);
    dart.setFieldSignature(_IterablePendingEvents, () => ({
      __proto__: dart.getFields(_IterablePendingEvents.__proto__),
      [_iterator]: dart.fieldType(dart.nullable(core.Iterator$(T)))
    }));
    return _IterablePendingEvents;
  });
  async._IterablePendingEvents = async._IterablePendingEvents$();
  dart.addTypeTests(async._IterablePendingEvents, _is__IterablePendingEvents_default);
  const _is__DelayedEvent_default = Symbol('_is__DelayedEvent_default');
  async._DelayedEvent$ = dart.generic(T => {
    class _DelayedEvent extends core.Object {}
    (_DelayedEvent.new = function() {
      this.next = null;
      ;
    }).prototype = _DelayedEvent.prototype;
    dart.addTypeTests(_DelayedEvent);
    _DelayedEvent.prototype[_is__DelayedEvent_default] = true;
    dart.addTypeCaches(_DelayedEvent);
    dart.setLibraryUri(_DelayedEvent, I[29]);
    dart.setFieldSignature(_DelayedEvent, () => ({
      __proto__: dart.getFields(_DelayedEvent.__proto__),
      next: dart.fieldType(dart.nullable(async._DelayedEvent))
    }));
    return _DelayedEvent;
  });
  async._DelayedEvent = async._DelayedEvent$();
  dart.addTypeTests(async._DelayedEvent, _is__DelayedEvent_default);
  const _is__DelayedData_default = Symbol('_is__DelayedData_default');
  async._DelayedData$ = dart.generic(T => {
    var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
    class _DelayedData extends async._DelayedEvent$(T) {
      perform(dispatch) {
        _EventDispatchOfT().as(dispatch);
        if (dispatch == null) dart.nullFailed(I[65], 590, 34, "dispatch");
        dispatch[_sendData](this.value);
      }
    }
    (_DelayedData.new = function(value) {
      this.value = value;
      _DelayedData.__proto__.new.call(this);
      ;
    }).prototype = _DelayedData.prototype;
    dart.addTypeTests(_DelayedData);
    _DelayedData.prototype[_is__DelayedData_default] = true;
    dart.addTypeCaches(_DelayedData);
    dart.setMethodSignature(_DelayedData, () => ({
      __proto__: dart.getMethods(_DelayedData.__proto__),
      perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_DelayedData, I[29]);
    dart.setFieldSignature(_DelayedData, () => ({
      __proto__: dart.getFields(_DelayedData.__proto__),
      value: dart.finalFieldType(T)
    }));
    return _DelayedData;
  });
  async._DelayedData = async._DelayedData$();
  dart.addTypeTests(async._DelayedData, _is__DelayedData_default);
  async._DelayedError = class _DelayedError extends async._DelayedEvent {
    perform(dispatch) {
      async._EventDispatch.as(dispatch);
      if (dispatch == null) dart.nullFailed(I[65], 601, 31, "dispatch");
      dispatch[_sendError](this.error, this.stackTrace);
    }
  };
  (async._DelayedError.new = function(error, stackTrace) {
    if (error == null) dart.nullFailed(I[65], 600, 22, "error");
    if (stackTrace == null) dart.nullFailed(I[65], 600, 34, "stackTrace");
    this.error = error;
    this.stackTrace = stackTrace;
    async._DelayedError.__proto__.new.call(this);
    ;
  }).prototype = async._DelayedError.prototype;
  dart.addTypeTests(async._DelayedError);
  dart.addTypeCaches(async._DelayedError);
  dart.setMethodSignature(async._DelayedError, () => ({
    __proto__: dart.getMethods(async._DelayedError.__proto__),
    perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(async._DelayedError, I[29]);
  dart.setFieldSignature(async._DelayedError, () => ({
    __proto__: dart.getFields(async._DelayedError.__proto__),
    error: dart.finalFieldType(core.Object),
    stackTrace: dart.finalFieldType(core.StackTrace)
  }));
  async._DelayedDone = class _DelayedDone extends core.Object {
    perform(dispatch) {
      async._EventDispatch.as(dispatch);
      if (dispatch == null) dart.nullFailed(I[65], 609, 31, "dispatch");
      dispatch[_sendDone]();
    }
    get next() {
      return null;
    }
    set next(_) {
      dart.throw(new core.StateError.new("No events after a done."));
    }
  };
  (async._DelayedDone.new = function() {
    ;
  }).prototype = async._DelayedDone.prototype;
  dart.addTypeTests(async._DelayedDone);
  dart.addTypeCaches(async._DelayedDone);
  async._DelayedDone[dart.implements] = () => [async._DelayedEvent];
  dart.setMethodSignature(async._DelayedDone, () => ({
    __proto__: dart.getMethods(async._DelayedDone.__proto__),
    perform: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(async._DelayedDone, () => ({
    __proto__: dart.getGetters(async._DelayedDone.__proto__),
    next: dart.nullable(async._DelayedEvent)
  }));
  dart.setSetterSignature(async._DelayedDone, () => ({
    __proto__: dart.getSetters(async._DelayedDone.__proto__),
    next: dart.nullable(async._DelayedEvent)
  }));
  dart.setLibraryUri(async._DelayedDone, I[29]);
  const _is__StreamImplEvents_default = Symbol('_is__StreamImplEvents_default');
  async._StreamImplEvents$ = dart.generic(T => {
    var _EventDispatchOfT = () => (_EventDispatchOfT = dart.constFn(async._EventDispatch$(T)))();
    class _StreamImplEvents extends async._PendingEvents$(T) {
      get isEmpty() {
        return this.lastPendingEvent == null;
      }
      add(event) {
        if (event == null) dart.nullFailed(I[65], 688, 26, "event");
        let lastEvent = this.lastPendingEvent;
        if (lastEvent == null) {
          this.firstPendingEvent = this.lastPendingEvent = event;
        } else {
          this.lastPendingEvent = lastEvent.next = event;
        }
      }
      handleNext(dispatch) {
        _EventDispatchOfT().as(dispatch);
        if (dispatch == null) dart.nullFailed(I[65], 697, 37, "dispatch");
        if (!!dart.test(this.isScheduled)) dart.assertFailed(null, I[65], 698, 12, "!isScheduled");
        if (!!dart.test(this.isEmpty)) dart.assertFailed(null, I[65], 699, 12, "!isEmpty");
        let event = dart.nullCheck(this.firstPendingEvent);
        let nextEvent = event.next;
        this.firstPendingEvent = nextEvent;
        if (nextEvent == null) {
          this.lastPendingEvent = null;
        }
        event.perform(dispatch);
      }
      clear() {
        if (dart.test(this.isScheduled)) this.cancelSchedule();
        this.firstPendingEvent = this.lastPendingEvent = null;
      }
    }
    (_StreamImplEvents.new = function() {
      this.firstPendingEvent = null;
      this.lastPendingEvent = null;
      _StreamImplEvents.__proto__.new.call(this);
      ;
    }).prototype = _StreamImplEvents.prototype;
    dart.addTypeTests(_StreamImplEvents);
    _StreamImplEvents.prototype[_is__StreamImplEvents_default] = true;
    dart.addTypeCaches(_StreamImplEvents);
    dart.setMethodSignature(_StreamImplEvents, () => ({
      __proto__: dart.getMethods(_StreamImplEvents.__proto__),
      add: dart.fnType(dart.void, [async._DelayedEvent]),
      handleNext: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_StreamImplEvents, () => ({
      __proto__: dart.getGetters(_StreamImplEvents.__proto__),
      isEmpty: core.bool
    }));
    dart.setLibraryUri(_StreamImplEvents, I[29]);
    dart.setFieldSignature(_StreamImplEvents, () => ({
      __proto__: dart.getFields(_StreamImplEvents.__proto__),
      firstPendingEvent: dart.fieldType(dart.nullable(async._DelayedEvent)),
      lastPendingEvent: dart.fieldType(dart.nullable(async._DelayedEvent))
    }));
    return _StreamImplEvents;
  });
  async._StreamImplEvents = async._StreamImplEvents$();
  dart.addTypeTests(async._StreamImplEvents, _is__StreamImplEvents_default);
  var _schedule = dart.privateName(async, "_schedule");
  var _isSent = dart.privateName(async, "_isSent");
  var _isScheduled = dart.privateName(async, "_isScheduled");
  const _is__DoneStreamSubscription_default = Symbol('_is__DoneStreamSubscription_default');
  async._DoneStreamSubscription$ = dart.generic(T => {
    class _DoneStreamSubscription extends core.Object {
      get [_isSent]() {
        return (dart.notNull(this[_state]) & 1) !== 0;
      }
      get [_isScheduled]() {
        return (dart.notNull(this[_state]) & 2) !== 0;
      }
      get isPaused() {
        return dart.notNull(this[_state]) >= 4;
      }
      [_schedule]() {
        if (dart.test(this[_isScheduled])) return;
        this[_zone$].scheduleMicrotask(dart.bind(this, _sendDone));
        this[_state] = (dart.notNull(this[_state]) | 2) >>> 0;
      }
      onData(handleData) {
      }
      onError(handleError) {
      }
      onDone(handleDone) {
        this[_onDone$] = handleDone;
      }
      pause(resumeSignal = null) {
        this[_state] = dart.notNull(this[_state]) + 4;
        if (resumeSignal != null) resumeSignal.whenComplete(dart.bind(this, 'resume'));
      }
      resume() {
        if (dart.test(this.isPaused)) {
          this[_state] = dart.notNull(this[_state]) - 4;
          if (!dart.test(this.isPaused) && !dart.test(this[_isSent])) {
            this[_schedule]();
          }
        }
      }
      cancel() {
        return async.Future._nullFuture;
      }
      asFuture(E, futureValue = null) {
        let resultValue = null;
        if (futureValue == null) {
          if (!dart.test(_internal.typeAcceptsNull(E))) {
            dart.throw(new core.ArgumentError.notNull("futureValue"));
          }
          resultValue = E.as(futureValue);
        } else {
          resultValue = futureValue;
        }
        let result = new (async._Future$(E)).new();
        this[_onDone$] = dart.fn(() => {
          result[_completeWithValue](resultValue);
        }, T$.VoidTovoid());
        return result;
      }
      [_sendDone]() {
        this[_state] = (dart.notNull(this[_state]) & ~2 >>> 0) >>> 0;
        if (dart.test(this.isPaused)) return;
        this[_state] = (dart.notNull(this[_state]) | 1) >>> 0;
        let doneHandler = this[_onDone$];
        if (doneHandler != null) this[_zone$].runGuarded(doneHandler);
      }
    }
    (_DoneStreamSubscription.new = function(_onDone) {
      this[_state] = 0;
      this[_onDone$] = _onDone;
      this[_zone$] = async.Zone.current;
      this[_schedule]();
    }).prototype = _DoneStreamSubscription.prototype;
    _DoneStreamSubscription.prototype[dart.isStreamSubscription] = true;
    dart.addTypeTests(_DoneStreamSubscription);
    _DoneStreamSubscription.prototype[_is__DoneStreamSubscription_default] = true;
    dart.addTypeCaches(_DoneStreamSubscription);
    _DoneStreamSubscription[dart.implements] = () => [async.StreamSubscription$(T)];
    dart.setMethodSignature(_DoneStreamSubscription, () => ({
      __proto__: dart.getMethods(_DoneStreamSubscription.__proto__),
      [_schedule]: dart.fnType(dart.void, []),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      [_sendDone]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_DoneStreamSubscription, () => ({
      __proto__: dart.getGetters(_DoneStreamSubscription.__proto__),
      [_isSent]: core.bool,
      [_isScheduled]: core.bool,
      isPaused: core.bool
    }));
    dart.setLibraryUri(_DoneStreamSubscription, I[29]);
    dart.setFieldSignature(_DoneStreamSubscription, () => ({
      __proto__: dart.getFields(_DoneStreamSubscription.__proto__),
      [_zone$]: dart.finalFieldType(async.Zone),
      [_state]: dart.fieldType(core.int),
      [_onDone$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
    }));
    return _DoneStreamSubscription;
  });
  async._DoneStreamSubscription = async._DoneStreamSubscription$();
  dart.defineLazy(async._DoneStreamSubscription, {
    /*async._DoneStreamSubscription._DONE_SENT*/get _DONE_SENT() {
      return 1;
    },
    /*async._DoneStreamSubscription._SCHEDULED*/get _SCHEDULED() {
      return 2;
    },
    /*async._DoneStreamSubscription._PAUSED*/get _PAUSED() {
      return 4;
    }
  }, false);
  dart.addTypeTests(async._DoneStreamSubscription, _is__DoneStreamSubscription_default);
  var _source$4 = dart.privateName(async, "_source");
  var _onListenHandler = dart.privateName(async, "_onListenHandler");
  var _onCancelHandler = dart.privateName(async, "_onCancelHandler");
  var _cancelSubscription = dart.privateName(async, "_cancelSubscription");
  var _pauseSubscription = dart.privateName(async, "_pauseSubscription");
  var _resumeSubscription = dart.privateName(async, "_resumeSubscription");
  var _isSubscriptionPaused = dart.privateName(async, "_isSubscriptionPaused");
  const _is__AsBroadcastStream_default = Symbol('_is__AsBroadcastStream_default');
  async._AsBroadcastStream$ = dart.generic(T => {
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var _AsBroadcastStreamControllerOfT = () => (_AsBroadcastStreamControllerOfT = dart.constFn(async._AsBroadcastStreamController$(T)))();
    var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
    var _BroadcastSubscriptionWrapperOfT = () => (_BroadcastSubscriptionWrapperOfT = dart.constFn(async._BroadcastSubscriptionWrapper$(T)))();
    class _AsBroadcastStream extends async.Stream$(T) {
      get isBroadcast() {
        return true;
      }
      listen(onData, opts) {
        let t116;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let controller = this[_controller$];
        if (controller == null || dart.test(controller.isClosed)) {
          return new (_DoneStreamSubscriptionOfT()).new(onDone);
        }
        this[_subscription] == null ? this[_subscription] = this[_source$4].listen(dart.bind(controller, 'add'), {onError: dart.bind(controller, 'addError'), onDone: dart.bind(controller, 'close')}) : null;
        return controller[_subscribe](onData, onError, onDone, (t116 = cancelOnError, t116 == null ? false : t116));
      }
      [_onCancel]() {
        let controller = this[_controller$];
        let shutdown = controller == null || dart.test(controller.isClosed);
        let cancelHandler = this[_onCancelHandler];
        if (cancelHandler != null) {
          this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), cancelHandler, new (_BroadcastSubscriptionWrapperOfT()).new(this));
        }
        if (shutdown) {
          let subscription = this[_subscription];
          if (subscription != null) {
            subscription.cancel();
            this[_subscription] = null;
          }
        }
      }
      [_onListen$]() {
        let listenHandler = this[_onListenHandler];
        if (listenHandler != null) {
          this[_zone$].runUnary(dart.void, _BroadcastSubscriptionWrapperOfT(), listenHandler, new (_BroadcastSubscriptionWrapperOfT()).new(this));
        }
      }
      [_cancelSubscription]() {
        let subscription = this[_subscription];
        if (subscription != null) {
          this[_subscription] = null;
          this[_controller$] = null;
          subscription.cancel();
        }
      }
      [_pauseSubscription](resumeSignal) {
        let t116;
        t116 = this[_subscription];
        t116 == null ? null : t116.pause(resumeSignal);
      }
      [_resumeSubscription]() {
        let t116;
        t116 = this[_subscription];
        t116 == null ? null : t116.resume();
      }
      get [_isSubscriptionPaused]() {
        let t116, t116$;
        t116$ = (t116 = this[_subscription], t116 == null ? null : t116.isPaused);
        return t116$ == null ? false : t116$;
      }
    }
    (_AsBroadcastStream.new = function(_source, onListenHandler, onCancelHandler) {
      if (_source == null) dart.nullFailed(I[65], 799, 12, "_source");
      this[_controller$] = null;
      this[_subscription] = null;
      this[_source$4] = _source;
      this[_onListenHandler] = onListenHandler == null ? null : async.Zone.current.registerUnaryCallback(dart.void, StreamSubscriptionOfT(), onListenHandler);
      this[_onCancelHandler] = onCancelHandler == null ? null : async.Zone.current.registerUnaryCallback(dart.void, StreamSubscriptionOfT(), onCancelHandler);
      this[_zone$] = async.Zone.current;
      _AsBroadcastStream.__proto__.new.call(this);
      this[_controller$] = new (_AsBroadcastStreamControllerOfT()).new(dart.bind(this, _onListen$), dart.bind(this, _onCancel));
    }).prototype = _AsBroadcastStream.prototype;
    dart.addTypeTests(_AsBroadcastStream);
    _AsBroadcastStream.prototype[_is__AsBroadcastStream_default] = true;
    dart.addTypeCaches(_AsBroadcastStream);
    dart.setMethodSignature(_AsBroadcastStream, () => ({
      __proto__: dart.getMethods(_AsBroadcastStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [_onCancel]: dart.fnType(dart.void, []),
      [_onListen$]: dart.fnType(dart.void, []),
      [_cancelSubscription]: dart.fnType(dart.void, []),
      [_pauseSubscription]: dart.fnType(dart.void, [dart.nullable(async.Future$(dart.void))]),
      [_resumeSubscription]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_AsBroadcastStream, () => ({
      __proto__: dart.getGetters(_AsBroadcastStream.__proto__),
      [_isSubscriptionPaused]: core.bool
    }));
    dart.setLibraryUri(_AsBroadcastStream, I[29]);
    dart.setFieldSignature(_AsBroadcastStream, () => ({
      __proto__: dart.getFields(_AsBroadcastStream.__proto__),
      [_source$4]: dart.finalFieldType(async.Stream$(T)),
      [_onListenHandler]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))),
      [_onCancelHandler]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))),
      [_zone$]: dart.finalFieldType(async.Zone),
      [_controller$]: dart.fieldType(dart.nullable(async._AsBroadcastStreamController$(T))),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T)))
    }));
    return _AsBroadcastStream;
  });
  async._AsBroadcastStream = async._AsBroadcastStream$();
  dart.addTypeTests(async._AsBroadcastStream, _is__AsBroadcastStream_default);
  const _is__BroadcastSubscriptionWrapper_default = Symbol('_is__BroadcastSubscriptionWrapper_default');
  async._BroadcastSubscriptionWrapper$ = dart.generic(T => {
    class _BroadcastSubscriptionWrapper extends core.Object {
      onData(handleData) {
        dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
      }
      onError(handleError) {
        dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
      }
      onDone(handleDone) {
        dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
      }
      pause(resumeSignal = null) {
        this[_stream$][_pauseSubscription](resumeSignal);
      }
      resume() {
        this[_stream$][_resumeSubscription]();
      }
      cancel() {
        this[_stream$][_cancelSubscription]();
        return async.Future._nullFuture;
      }
      get isPaused() {
        return this[_stream$][_isSubscriptionPaused];
      }
      asFuture(E, futureValue = null) {
        dart.throw(new core.UnsupportedError.new("Cannot change handlers of asBroadcastStream source subscription."));
      }
    }
    (_BroadcastSubscriptionWrapper.new = function(_stream) {
      if (_stream == null) dart.nullFailed(I[65], 881, 38, "_stream");
      this[_stream$] = _stream;
      ;
    }).prototype = _BroadcastSubscriptionWrapper.prototype;
    _BroadcastSubscriptionWrapper.prototype[dart.isStreamSubscription] = true;
    dart.addTypeTests(_BroadcastSubscriptionWrapper);
    _BroadcastSubscriptionWrapper.prototype[_is__BroadcastSubscriptionWrapper_default] = true;
    dart.addTypeCaches(_BroadcastSubscriptionWrapper);
    _BroadcastSubscriptionWrapper[dart.implements] = () => [async.StreamSubscription$(T)];
    dart.setMethodSignature(_BroadcastSubscriptionWrapper, () => ({
      __proto__: dart.getMethods(_BroadcastSubscriptionWrapper.__proto__),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      cancel: dart.fnType(async.Future, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_BroadcastSubscriptionWrapper, () => ({
      __proto__: dart.getGetters(_BroadcastSubscriptionWrapper.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(_BroadcastSubscriptionWrapper, I[29]);
    dart.setFieldSignature(_BroadcastSubscriptionWrapper, () => ({
      __proto__: dart.getFields(_BroadcastSubscriptionWrapper.__proto__),
      [_stream$]: dart.finalFieldType(async._AsBroadcastStream)
    }));
    return _BroadcastSubscriptionWrapper;
  });
  async._BroadcastSubscriptionWrapper = async._BroadcastSubscriptionWrapper$();
  dart.addTypeTests(async._BroadcastSubscriptionWrapper, _is__BroadcastSubscriptionWrapper_default);
  var _hasValue$0 = dart.privateName(async, "_hasValue");
  var _stateData = dart.privateName(async, "_stateData");
  var _initializeOrDone = dart.privateName(async, "_initializeOrDone");
  const _is__StreamIterator_default = Symbol('_is__StreamIterator_default');
  async._StreamIterator$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class _StreamIterator extends core.Object {
      get current() {
        if (dart.test(this[_hasValue$0])) return T.as(this[_stateData]);
        return T.as(null);
      }
      moveNext() {
        let subscription = this[_subscription];
        if (subscription != null) {
          if (dart.test(this[_hasValue$0])) {
            let future = new (T$._FutureOfbool()).new();
            this[_stateData] = future;
            this[_hasValue$0] = false;
            subscription.resume();
            return future;
          }
          dart.throw(new core.StateError.new("Already waiting for next."));
        }
        return this[_initializeOrDone]();
      }
      [_initializeOrDone]() {
        if (!(this[_subscription] == null)) dart.assertFailed(null, I[65], 1012, 12, "_subscription == null");
        let stateData = this[_stateData];
        if (stateData != null) {
          let stream = StreamOfT().as(stateData);
          let future = new (T$._FutureOfbool()).new();
          this[_stateData] = future;
          let subscription = stream.listen(dart.bind(this, _onData$), {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone$), cancelOnError: true});
          if (this[_stateData] != null) {
            this[_subscription] = subscription;
          }
          return future;
        }
        return async.Future._falseFuture;
      }
      cancel() {
        let subscription = this[_subscription];
        let stateData = this[_stateData];
        this[_stateData] = null;
        if (subscription != null) {
          this[_subscription] = null;
          if (!dart.test(this[_hasValue$0])) {
            let future = T$._FutureOfbool().as(stateData);
            future[_asyncComplete](false);
          } else {
            this[_hasValue$0] = false;
          }
          return subscription.cancel();
        }
        return async.Future._nullFuture;
      }
      [_onData$](data) {
        let t116;
        T.as(data);
        if (this[_subscription] == null) return;
        let moveNextFuture = T$._FutureOfbool().as(this[_stateData]);
        this[_stateData] = data;
        this[_hasValue$0] = true;
        moveNextFuture[_complete](true);
        if (dart.test(this[_hasValue$0])) {
          t116 = this[_subscription];
          t116 == null ? null : t116.pause();
        }
      }
      [_onError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[65], 1066, 24, "error");
        if (stackTrace == null) dart.nullFailed(I[65], 1066, 42, "stackTrace");
        let subscription = this[_subscription];
        let moveNextFuture = T$._FutureOfbool().as(this[_stateData]);
        this[_subscription] = null;
        this[_stateData] = null;
        if (subscription != null) {
          moveNextFuture[_completeError](error, stackTrace);
        } else {
          moveNextFuture[_asyncCompleteError](error, stackTrace);
        }
      }
      [_onDone$]() {
        let subscription = this[_subscription];
        let moveNextFuture = T$._FutureOfbool().as(this[_stateData]);
        this[_subscription] = null;
        this[_stateData] = null;
        if (subscription != null) {
          moveNextFuture[_completeWithValue](false);
        } else {
          moveNextFuture[_asyncCompleteWithValue](false);
        }
      }
    }
    (_StreamIterator.new = function(stream) {
      if (stream == null) dart.nullFailed(I[65], 983, 35, "stream");
      this[_subscription] = null;
      this[_hasValue$0] = false;
      this[_stateData] = _internal.checkNotNullable(core.Object, stream, "stream");
      ;
    }).prototype = _StreamIterator.prototype;
    dart.addTypeTests(_StreamIterator);
    _StreamIterator.prototype[_is__StreamIterator_default] = true;
    dart.addTypeCaches(_StreamIterator);
    _StreamIterator[dart.implements] = () => [async.StreamIterator$(T)];
    dart.setMethodSignature(_StreamIterator, () => ({
      __proto__: dart.getMethods(_StreamIterator.__proto__),
      moveNext: dart.fnType(async.Future$(core.bool), []),
      [_initializeOrDone]: dart.fnType(async.Future$(core.bool), []),
      cancel: dart.fnType(async.Future, []),
      [_onData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_onError]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_onDone$]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_StreamIterator, () => ({
      __proto__: dart.getGetters(_StreamIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(_StreamIterator, I[29]);
    dart.setFieldSignature(_StreamIterator, () => ({
      __proto__: dart.getFields(_StreamIterator.__proto__),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_stateData]: dart.fieldType(dart.nullable(core.Object)),
      [_hasValue$0]: dart.fieldType(core.bool)
    }));
    return _StreamIterator;
  });
  async._StreamIterator = async._StreamIterator$();
  dart.addTypeTests(async._StreamIterator, _is__StreamIterator_default);
  const _is__EmptyStream_default = Symbol('_is__EmptyStream_default');
  async._EmptyStream$ = dart.generic(T => {
    var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
    class _EmptyStream extends async.Stream$(T) {
      get isBroadcast() {
        return true;
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return new (_DoneStreamSubscriptionOfT()).new(onDone);
      }
    }
    (_EmptyStream.new = function() {
      _EmptyStream.__proto__._internal.call(this);
      ;
    }).prototype = _EmptyStream.prototype;
    dart.addTypeTests(_EmptyStream);
    _EmptyStream.prototype[_is__EmptyStream_default] = true;
    dart.addTypeCaches(_EmptyStream);
    dart.setMethodSignature(_EmptyStream, () => ({
      __proto__: dart.getMethods(_EmptyStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_EmptyStream, I[29]);
    return _EmptyStream;
  });
  async._EmptyStream = async._EmptyStream$();
  dart.addTypeTests(async._EmptyStream, _is__EmptyStream_default);
  var isBroadcast$ = dart.privateName(async, "_MultiStream.isBroadcast");
  const _is__MultiStream_default = Symbol('_is__MultiStream_default');
  async._MultiStream$ = dart.generic(T => {
    var _MultiStreamControllerOfT = () => (_MultiStreamControllerOfT = dart.constFn(async._MultiStreamController$(T)))();
    class _MultiStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[isBroadcast$];
      }
      set isBroadcast(value) {
        super.isBroadcast = value;
      }
      listen(onData, opts) {
        let t116;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let controller = new (_MultiStreamControllerOfT()).new();
        controller.onListen = dart.fn(() => {
          let t116;
          t116 = controller;
          this[_onListen$](t116);
        }, T$.VoidTovoid());
        return controller[_subscribe](onData, onError, onDone, (t116 = cancelOnError, t116 == null ? false : t116));
      }
    }
    (_MultiStream.new = function(_onListen, isBroadcast) {
      if (_onListen == null) dart.nullFailed(I[65], 1110, 21, "_onListen");
      if (isBroadcast == null) dart.nullFailed(I[65], 1110, 37, "isBroadcast");
      this[_onListen$] = _onListen;
      this[isBroadcast$] = isBroadcast;
      _MultiStream.__proto__.new.call(this);
      ;
    }).prototype = _MultiStream.prototype;
    dart.addTypeTests(_MultiStream);
    _MultiStream.prototype[_is__MultiStream_default] = true;
    dart.addTypeCaches(_MultiStream);
    dart.setMethodSignature(_MultiStream, () => ({
      __proto__: dart.getMethods(_MultiStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_MultiStream, I[29]);
    dart.setFieldSignature(_MultiStream, () => ({
      __proto__: dart.getFields(_MultiStream.__proto__),
      isBroadcast: dart.finalFieldType(core.bool),
      [_onListen$]: dart.finalFieldType(dart.fnType(dart.void, [async.MultiStreamController$(T)]))
    }));
    return _MultiStream;
  });
  async._MultiStream = async._MultiStream$();
  dart.addTypeTests(async._MultiStream, _is__MultiStream_default);
  const _is__MultiStreamController_default = Symbol('_is__MultiStreamController_default');
  async._MultiStreamController$ = dart.generic(T => {
    class _MultiStreamController extends async._AsyncStreamController$(T) {
      addSync(data) {
        T.as(data);
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        if (dart.test(this.hasListener)) this[_subscription][_add](data);
      }
      addErrorSync(error, stackTrace = null) {
        let t116;
        if (error == null) dart.nullFailed(I[65], 1132, 28, "error");
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        if (dart.test(this.hasListener)) {
          this[_subscription][_addError](error, (t116 = stackTrace, t116 == null ? core.StackTrace.empty : t116));
        }
      }
      closeSync() {
        if (dart.test(this.isClosed)) return;
        if (!dart.test(this[_mayAddEvent])) dart.throw(this[_badEventState]());
        this[_state] = (dart.notNull(this[_state]) | 4) >>> 0;
        if (dart.test(this.hasListener)) this[_subscription][_close]();
      }
      get stream() {
        dart.throw(new core.UnsupportedError.new("Not available"));
      }
    }
    (_MultiStreamController.new = function() {
      _MultiStreamController.__proto__.new.call(this, null, null, null, null);
      ;
    }).prototype = _MultiStreamController.prototype;
    dart.addTypeTests(_MultiStreamController);
    _MultiStreamController.prototype[_is__MultiStreamController_default] = true;
    dart.addTypeCaches(_MultiStreamController);
    _MultiStreamController[dart.implements] = () => [async.MultiStreamController$(T)];
    dart.setMethodSignature(_MultiStreamController, () => ({
      __proto__: dart.getMethods(_MultiStreamController.__proto__),
      addSync: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addErrorSync: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      closeSync: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_MultiStreamController, I[29]);
    return _MultiStreamController;
  });
  async._MultiStreamController = async._MultiStreamController$();
  dart.addTypeTests(async._MultiStreamController, _is__MultiStreamController_default);
  var _handleError$ = dart.privateName(async, "_handleError");
  var _handleDone$ = dart.privateName(async, "_handleDone");
  const _is__ForwardingStream_default = Symbol('_is__ForwardingStream_default');
  async._ForwardingStream$ = dart.generic((S, T) => {
    var _ForwardingStreamSubscriptionOfS$T = () => (_ForwardingStreamSubscriptionOfS$T = dart.constFn(async._ForwardingStreamSubscription$(S, T)))();
    var _EventSinkOfT = () => (_EventSinkOfT = dart.constFn(async._EventSink$(T)))();
    class _ForwardingStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[_source$4].isBroadcast;
      }
      listen(onData, opts) {
        let t116;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return this[_createSubscription](onData, onError, onDone, (t116 = cancelOnError, t116 == null ? false : t116));
      }
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[70], 85, 47, "cancelOnError");
        return new (_ForwardingStreamSubscriptionOfS$T()).new(this, onData, onError, onDone, cancelOnError);
      }
      [_handleError$](error, stackTrace, sink) {
        if (error == null) dart.nullFailed(I[70], 94, 28, "error");
        if (stackTrace == null) dart.nullFailed(I[70], 94, 46, "stackTrace");
        _EventSinkOfT().as(sink);
        if (sink == null) dart.nullFailed(I[70], 94, 72, "sink");
        sink[_addError](error, stackTrace);
      }
      [_handleDone$](sink) {
        _EventSinkOfT().as(sink);
        if (sink == null) dart.nullFailed(I[70], 98, 34, "sink");
        sink[_close]();
      }
    }
    (_ForwardingStream.new = function(_source) {
      if (_source == null) dart.nullFailed(I[70], 75, 26, "_source");
      this[_source$4] = _source;
      _ForwardingStream.__proto__.new.call(this);
      ;
    }).prototype = _ForwardingStream.prototype;
    dart.addTypeTests(_ForwardingStream);
    _ForwardingStream.prototype[_is__ForwardingStream_default] = true;
    dart.addTypeCaches(_ForwardingStream);
    dart.setMethodSignature(_ForwardingStream, () => ({
      __proto__: dart.getMethods(_ForwardingStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      [_createSubscription]: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T])), dart.nullable(core.Function), dart.nullable(dart.fnType(dart.void, [])), core.bool]),
      [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace, dart.nullable(core.Object)]),
      [_handleDone$]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_ForwardingStream, I[29]);
    dart.setFieldSignature(_ForwardingStream, () => ({
      __proto__: dart.getFields(_ForwardingStream.__proto__),
      [_source$4]: dart.finalFieldType(async.Stream$(S))
    }));
    return _ForwardingStream;
  });
  async._ForwardingStream = async._ForwardingStream$();
  dart.addTypeTests(async._ForwardingStream, _is__ForwardingStream_default);
  var _handleData$ = dart.privateName(async, "_handleData");
  const _is__ForwardingStreamSubscription_default = Symbol('_is__ForwardingStreamSubscription_default');
  async._ForwardingStreamSubscription$ = dart.generic((S, T) => {
    class _ForwardingStreamSubscription extends async._BufferingStreamSubscription$(T) {
      [_add](data) {
        T.as(data);
        if (dart.test(this[_isClosed])) return;
        super[_add](data);
      }
      [_addError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[70], 126, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[70], 126, 43, "stackTrace");
        if (dart.test(this[_isClosed])) return;
        super[_addError](error, stackTrace);
      }
      [_onPause]() {
        let t116;
        t116 = this[_subscription];
        t116 == null ? null : t116.pause();
      }
      [_onResume]() {
        let t116;
        t116 = this[_subscription];
        t116 == null ? null : t116.resume();
      }
      [_onCancel]() {
        let subscription = this[_subscription];
        if (subscription != null) {
          this[_subscription] = null;
          return subscription.cancel();
        }
        return null;
      }
      [_handleData$](data) {
        S.as(data);
        this[_stream$][_handleData$](data, this);
      }
      [_handleError$](error, stackTrace) {
        if (stackTrace == null) dart.nullFailed(I[70], 156, 39, "stackTrace");
        this[_stream$][_handleError$](core.Object.as(error), stackTrace, this);
      }
      [_handleDone$]() {
        this[_stream$][_handleDone$](this);
      }
    }
    (_ForwardingStreamSubscription.new = function(_stream, onData, onError, onDone, cancelOnError) {
      if (_stream == null) dart.nullFailed(I[70], 110, 38, "_stream");
      if (cancelOnError == null) dart.nullFailed(I[70], 111, 47, "cancelOnError");
      this[_subscription] = null;
      this[_stream$] = _stream;
      _ForwardingStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
      this[_subscription] = this[_stream$][_source$4].listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
    }).prototype = _ForwardingStreamSubscription.prototype;
    dart.addTypeTests(_ForwardingStreamSubscription);
    _ForwardingStreamSubscription.prototype[_is__ForwardingStreamSubscription_default] = true;
    dart.addTypeCaches(_ForwardingStreamSubscription);
    dart.setMethodSignature(_ForwardingStreamSubscription, () => ({
      __proto__: dart.getMethods(_ForwardingStreamSubscription.__proto__),
      [_handleData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_handleError$]: dart.fnType(dart.void, [dart.dynamic, core.StackTrace]),
      [_handleDone$]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ForwardingStreamSubscription, I[29]);
    dart.setFieldSignature(_ForwardingStreamSubscription, () => ({
      __proto__: dart.getFields(_ForwardingStreamSubscription.__proto__),
      [_stream$]: dart.finalFieldType(async._ForwardingStream$(S, T)),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
    }));
    return _ForwardingStreamSubscription;
  });
  async._ForwardingStreamSubscription = async._ForwardingStreamSubscription$();
  dart.addTypeTests(async._ForwardingStreamSubscription, _is__ForwardingStreamSubscription_default);
  var _test = dart.privateName(async, "_test");
  const _is__WhereStream_default = Symbol('_is__WhereStream_default');
  async._WhereStream$ = dart.generic(T => {
    class _WhereStream extends async._ForwardingStream$(T, T) {
      [_handleData$](inputEvent, sink) {
        let t116;
        if (sink == null) dart.nullFailed(I[70], 186, 48, "sink");
        let satisfies = null;
        try {
          satisfies = (t116 = inputEvent, this[_test](t116));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            return;
          } else
            throw e$;
        }
        if (dart.test(satisfies)) {
          sink[_add](inputEvent);
        }
      }
    }
    (_WhereStream.new = function(source, test) {
      if (source == null) dart.nullFailed(I[70], 182, 26, "source");
      if (test == null) dart.nullFailed(I[70], 182, 39, "test");
      this[_test] = test;
      _WhereStream.__proto__.new.call(this, source);
      ;
    }).prototype = _WhereStream.prototype;
    dart.addTypeTests(_WhereStream);
    _WhereStream.prototype[_is__WhereStream_default] = true;
    dart.addTypeCaches(_WhereStream);
    dart.setMethodSignature(_WhereStream, () => ({
      __proto__: dart.getMethods(_WhereStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_WhereStream, I[29]);
    dart.setFieldSignature(_WhereStream, () => ({
      __proto__: dart.getFields(_WhereStream.__proto__),
      [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
    }));
    return _WhereStream;
  });
  async._WhereStream = async._WhereStream$();
  dart.addTypeTests(async._WhereStream, _is__WhereStream_default);
  var _transform = dart.privateName(async, "_transform");
  const _is__MapStream_default = Symbol('_is__MapStream_default');
  async._MapStream$ = dart.generic((S, T) => {
    class _MapStream extends async._ForwardingStream$(S, T) {
      [_handleData$](inputEvent, sink) {
        let t117;
        if (sink == null) dart.nullFailed(I[70], 210, 48, "sink");
        let outputEvent = null;
        try {
          outputEvent = (t117 = inputEvent, this[_transform](t117));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            return;
          } else
            throw e$;
        }
        sink[_add](outputEvent);
      }
    }
    (_MapStream.new = function(source, transform) {
      if (source == null) dart.nullFailed(I[70], 206, 24, "source");
      if (transform == null) dart.nullFailed(I[70], 206, 34, "transform");
      this[_transform] = transform;
      _MapStream.__proto__.new.call(this, source);
      ;
    }).prototype = _MapStream.prototype;
    dart.addTypeTests(_MapStream);
    _MapStream.prototype[_is__MapStream_default] = true;
    dart.addTypeCaches(_MapStream);
    dart.setMethodSignature(_MapStream, () => ({
      __proto__: dart.getMethods(_MapStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [S, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_MapStream, I[29]);
    dart.setFieldSignature(_MapStream, () => ({
      __proto__: dart.getFields(_MapStream.__proto__),
      [_transform]: dart.finalFieldType(dart.fnType(T, [S]))
    }));
    return _MapStream;
  });
  async._MapStream = async._MapStream$();
  dart.addTypeTests(async._MapStream, _is__MapStream_default);
  var _expand = dart.privateName(async, "_expand");
  const _is__ExpandStream_default = Symbol('_is__ExpandStream_default');
  async._ExpandStream$ = dart.generic((S, T) => {
    class _ExpandStream extends async._ForwardingStream$(S, T) {
      [_handleData$](inputEvent, sink) {
        let t118;
        if (sink == null) dart.nullFailed(I[70], 230, 48, "sink");
        try {
          for (let value of (t118 = inputEvent, this[_expand](t118))) {
            sink[_add](value);
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
          } else
            throw e$;
        }
      }
    }
    (_ExpandStream.new = function(source, expand) {
      if (source == null) dart.nullFailed(I[70], 226, 27, "source");
      if (expand == null) dart.nullFailed(I[70], 226, 47, "expand");
      this[_expand] = expand;
      _ExpandStream.__proto__.new.call(this, source);
      ;
    }).prototype = _ExpandStream.prototype;
    dart.addTypeTests(_ExpandStream);
    _ExpandStream.prototype[_is__ExpandStream_default] = true;
    dart.addTypeCaches(_ExpandStream);
    dart.setMethodSignature(_ExpandStream, () => ({
      __proto__: dart.getMethods(_ExpandStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [S, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_ExpandStream, I[29]);
    dart.setFieldSignature(_ExpandStream, () => ({
      __proto__: dart.getFields(_ExpandStream.__proto__),
      [_expand]: dart.finalFieldType(dart.fnType(core.Iterable$(T), [S]))
    }));
    return _ExpandStream;
  });
  async._ExpandStream = async._ExpandStream$();
  dart.addTypeTests(async._ExpandStream, _is__ExpandStream_default);
  const _is__HandleErrorStream_default = Symbol('_is__HandleErrorStream_default');
  async._HandleErrorStream$ = dart.generic(T => {
    class _HandleErrorStream extends async._ForwardingStream$(T, T) {
      [_handleData$](data, sink) {
        if (sink == null) dart.nullFailed(I[70], 255, 42, "sink");
        sink[_add](data);
      }
      [_handleError$](error, stackTrace, sink) {
        if (error == null) dart.nullFailed(I[70], 259, 28, "error");
        if (stackTrace == null) dart.nullFailed(I[70], 259, 46, "stackTrace");
        if (sink == null) dart.nullFailed(I[70], 259, 72, "sink");
        let matches = true;
        let test = this[_test];
        if (test != null) {
          try {
            matches = test(error);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._addErrorWithReplacement(sink, e, s);
              return;
            } else
              throw e$;
          }
        }
        if (dart.test(matches)) {
          try {
            async._invokeErrorHandler(this[_transform], error, stackTrace);
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            let s = dart.stackTrace(e$0);
            if (core.Object.is(e)) {
              if (core.identical(e, error)) {
                sink[_addError](error, stackTrace);
              } else {
                async._addErrorWithReplacement(sink, e, s);
              }
              return;
            } else
              throw e$0;
          }
        } else {
          sink[_addError](error, stackTrace);
        }
      }
    }
    (_HandleErrorStream.new = function(source, onError, test) {
      if (source == null) dart.nullFailed(I[70], 250, 17, "source");
      if (onError == null) dart.nullFailed(I[70], 250, 34, "onError");
      this[_transform] = onError;
      this[_test] = test;
      _HandleErrorStream.__proto__.new.call(this, source);
      ;
    }).prototype = _HandleErrorStream.prototype;
    dart.addTypeTests(_HandleErrorStream);
    _HandleErrorStream.prototype[_is__HandleErrorStream_default] = true;
    dart.addTypeCaches(_HandleErrorStream);
    dart.setMethodSignature(_HandleErrorStream, () => ({
      __proto__: dart.getMethods(_HandleErrorStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)]),
      [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_HandleErrorStream, I[29]);
    dart.setFieldSignature(_HandleErrorStream, () => ({
      __proto__: dart.getFields(_HandleErrorStream.__proto__),
      [_transform]: dart.finalFieldType(core.Function),
      [_test]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.Object])))
    }));
    return _HandleErrorStream;
  });
  async._HandleErrorStream = async._HandleErrorStream$();
  dart.addTypeTests(async._HandleErrorStream, _is__HandleErrorStream_default);
  var _count = dart.privateName(async, "_count");
  var _subState = dart.privateName(async, "_subState");
  const _is__TakeStream_default = Symbol('_is__TakeStream_default');
  async._TakeStream$ = dart.generic(T => {
    var _DoneStreamSubscriptionOfT = () => (_DoneStreamSubscriptionOfT = dart.constFn(async._DoneStreamSubscription$(T)))();
    var _StateStreamSubscriptionOfint$T = () => (_StateStreamSubscriptionOfint$T = dart.constFn(async._StateStreamSubscription$(core.int, T)))();
    class _TakeStream extends async._ForwardingStream$(T, T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[70], 295, 47, "cancelOnError");
        if (this[_count] === 0) {
          this[_source$4].listen(null).cancel();
          return new (_DoneStreamSubscriptionOfT()).new(onDone);
        }
        return new (_StateStreamSubscriptionOfint$T()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
      }
      [_handleData$](inputEvent, sink) {
        if (sink == null) dart.nullFailed(I[70], 304, 48, "sink");
        let subscription = _StateStreamSubscriptionOfint$T().as(sink);
        let count = subscription[_subState];
        if (dart.notNull(count) > 0) {
          sink[_add](inputEvent);
          count = dart.notNull(count) - 1;
          subscription[_subState] = count;
          if (count === 0) {
            sink[_close]();
          }
        }
      }
    }
    (_TakeStream.new = function(source, count) {
      if (source == null) dart.nullFailed(I[70], 290, 25, "source");
      if (count == null) dart.nullFailed(I[70], 290, 37, "count");
      this[_count] = count;
      _TakeStream.__proto__.new.call(this, source);
      ;
    }).prototype = _TakeStream.prototype;
    dart.addTypeTests(_TakeStream);
    _TakeStream.prototype[_is__TakeStream_default] = true;
    dart.addTypeCaches(_TakeStream);
    dart.setMethodSignature(_TakeStream, () => ({
      __proto__: dart.getMethods(_TakeStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_TakeStream, I[29]);
    dart.setFieldSignature(_TakeStream, () => ({
      __proto__: dart.getFields(_TakeStream.__proto__),
      [_count]: dart.finalFieldType(core.int)
    }));
    return _TakeStream;
  });
  async._TakeStream = async._TakeStream$();
  dart.addTypeTests(async._TakeStream, _is__TakeStream_default);
  var _subState$ = dart.privateName(async, "_StateStreamSubscription._subState");
  const _is__StateStreamSubscription_default = Symbol('_is__StateStreamSubscription_default');
  async._StateStreamSubscription$ = dart.generic((S, T) => {
    class _StateStreamSubscription extends async._ForwardingStreamSubscription$(T, T) {
      get [_subState]() {
        return this[_subState$];
      }
      set [_subState](value) {
        this[_subState$] = S.as(value);
      }
    }
    (_StateStreamSubscription.new = function(stream, onData, onError, onDone, cancelOnError, _subState) {
      if (stream == null) dart.nullFailed(I[70], 327, 52, "stream");
      if (cancelOnError == null) dart.nullFailed(I[70], 328, 47, "cancelOnError");
      this[_subState$] = _subState;
      _StateStreamSubscription.__proto__.new.call(this, stream, onData, onError, onDone, cancelOnError);
      ;
    }).prototype = _StateStreamSubscription.prototype;
    dart.addTypeTests(_StateStreamSubscription);
    _StateStreamSubscription.prototype[_is__StateStreamSubscription_default] = true;
    dart.addTypeCaches(_StateStreamSubscription);
    dart.setLibraryUri(_StateStreamSubscription, I[29]);
    dart.setFieldSignature(_StateStreamSubscription, () => ({
      __proto__: dart.getFields(_StateStreamSubscription.__proto__),
      [_subState]: dart.fieldType(S)
    }));
    return _StateStreamSubscription;
  });
  async._StateStreamSubscription = async._StateStreamSubscription$();
  dart.addTypeTests(async._StateStreamSubscription, _is__StateStreamSubscription_default);
  const _is__TakeWhileStream_default = Symbol('_is__TakeWhileStream_default');
  async._TakeWhileStream$ = dart.generic(T => {
    class _TakeWhileStream extends async._ForwardingStream$(T, T) {
      [_handleData$](inputEvent, sink) {
        let t121;
        if (sink == null) dart.nullFailed(I[70], 339, 48, "sink");
        let satisfies = null;
        try {
          satisfies = (t121 = inputEvent, this[_test](t121));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            sink[_close]();
            return;
          } else
            throw e$;
        }
        if (dart.test(satisfies)) {
          sink[_add](inputEvent);
        } else {
          sink[_close]();
        }
      }
    }
    (_TakeWhileStream.new = function(source, test) {
      if (source == null) dart.nullFailed(I[70], 335, 30, "source");
      if (test == null) dart.nullFailed(I[70], 335, 43, "test");
      this[_test] = test;
      _TakeWhileStream.__proto__.new.call(this, source);
      ;
    }).prototype = _TakeWhileStream.prototype;
    dart.addTypeTests(_TakeWhileStream);
    _TakeWhileStream.prototype[_is__TakeWhileStream_default] = true;
    dart.addTypeCaches(_TakeWhileStream);
    dart.setMethodSignature(_TakeWhileStream, () => ({
      __proto__: dart.getMethods(_TakeWhileStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_TakeWhileStream, I[29]);
    dart.setFieldSignature(_TakeWhileStream, () => ({
      __proto__: dart.getFields(_TakeWhileStream.__proto__),
      [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
    }));
    return _TakeWhileStream;
  });
  async._TakeWhileStream = async._TakeWhileStream$();
  dart.addTypeTests(async._TakeWhileStream, _is__TakeWhileStream_default);
  const _is__SkipStream_default = Symbol('_is__SkipStream_default');
  async._SkipStream$ = dart.generic(T => {
    var _StateStreamSubscriptionOfint$T = () => (_StateStreamSubscriptionOfint$T = dart.constFn(async._StateStreamSubscription$(core.int, T)))();
    class _SkipStream extends async._ForwardingStream$(T, T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[70], 369, 47, "cancelOnError");
        return new (_StateStreamSubscriptionOfint$T()).new(this, onData, onError, onDone, cancelOnError, this[_count]);
      }
      [_handleData$](inputEvent, sink) {
        if (sink == null) dart.nullFailed(I[70], 374, 48, "sink");
        let subscription = _StateStreamSubscriptionOfint$T().as(sink);
        let count = subscription[_subState];
        if (dart.notNull(count) > 0) {
          subscription[_subState] = dart.notNull(count) - 1;
          return;
        }
        sink[_add](inputEvent);
      }
    }
    (_SkipStream.new = function(source, count) {
      if (source == null) dart.nullFailed(I[70], 360, 25, "source");
      if (count == null) dart.nullFailed(I[70], 360, 37, "count");
      this[_count] = count;
      _SkipStream.__proto__.new.call(this, source);
      core.RangeError.checkNotNegative(count, "count");
    }).prototype = _SkipStream.prototype;
    dart.addTypeTests(_SkipStream);
    _SkipStream.prototype[_is__SkipStream_default] = true;
    dart.addTypeCaches(_SkipStream);
    dart.setMethodSignature(_SkipStream, () => ({
      __proto__: dart.getMethods(_SkipStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_SkipStream, I[29]);
    dart.setFieldSignature(_SkipStream, () => ({
      __proto__: dart.getFields(_SkipStream.__proto__),
      [_count]: dart.finalFieldType(core.int)
    }));
    return _SkipStream;
  });
  async._SkipStream = async._SkipStream$();
  dart.addTypeTests(async._SkipStream, _is__SkipStream_default);
  const _is__SkipWhileStream_default = Symbol('_is__SkipWhileStream_default');
  async._SkipWhileStream$ = dart.generic(T => {
    var _StateStreamSubscriptionOfbool$T = () => (_StateStreamSubscriptionOfbool$T = dart.constFn(async._StateStreamSubscription$(core.bool, T)))();
    class _SkipWhileStream extends async._ForwardingStream$(T, T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[70], 393, 47, "cancelOnError");
        return new (_StateStreamSubscriptionOfbool$T()).new(this, onData, onError, onDone, cancelOnError, false);
      }
      [_handleData$](inputEvent, sink) {
        let t122;
        if (sink == null) dart.nullFailed(I[70], 398, 48, "sink");
        let subscription = _StateStreamSubscriptionOfbool$T().as(sink);
        let hasFailed = subscription[_subState];
        if (dart.test(hasFailed)) {
          sink[_add](inputEvent);
          return;
        }
        let satisfies = null;
        try {
          satisfies = (t122 = inputEvent, this[_test](t122));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            async._addErrorWithReplacement(sink, e, s);
            subscription[_subState] = true;
            return;
          } else
            throw e$;
        }
        if (!dart.test(satisfies)) {
          subscription[_subState] = true;
          sink[_add](inputEvent);
        }
      }
    }
    (_SkipWhileStream.new = function(source, test) {
      if (source == null) dart.nullFailed(I[70], 388, 30, "source");
      if (test == null) dart.nullFailed(I[70], 388, 43, "test");
      this[_test] = test;
      _SkipWhileStream.__proto__.new.call(this, source);
      ;
    }).prototype = _SkipWhileStream.prototype;
    dart.addTypeTests(_SkipWhileStream);
    _SkipWhileStream.prototype[_is__SkipWhileStream_default] = true;
    dart.addTypeCaches(_SkipWhileStream);
    dart.setMethodSignature(_SkipWhileStream, () => ({
      __proto__: dart.getMethods(_SkipWhileStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_SkipWhileStream, I[29]);
    dart.setFieldSignature(_SkipWhileStream, () => ({
      __proto__: dart.getFields(_SkipWhileStream.__proto__),
      [_test]: dart.finalFieldType(dart.fnType(core.bool, [T]))
    }));
    return _SkipWhileStream;
  });
  async._SkipWhileStream = async._SkipWhileStream$();
  dart.addTypeTests(async._SkipWhileStream, _is__SkipWhileStream_default);
  var _equals = dart.privateName(async, "_equals");
  const _is__DistinctStream_default = Symbol('_is__DistinctStream_default');
  async._DistinctStream$ = dart.generic(T => {
    var _StateStreamSubscriptionOfObjectN$T = () => (_StateStreamSubscriptionOfObjectN$T = dart.constFn(async._StateStreamSubscription$(T$.ObjectN(), T)))();
    class _DistinctStream extends async._ForwardingStream$(T, T) {
      [_createSubscription](onData, onError, onDone, cancelOnError) {
        if (cancelOnError == null) dart.nullFailed(I[70], 431, 47, "cancelOnError");
        return new (_StateStreamSubscriptionOfObjectN$T()).new(this, onData, onError, onDone, cancelOnError, async._DistinctStream._SENTINEL);
      }
      [_handleData$](inputEvent, sink) {
        if (sink == null) dart.nullFailed(I[70], 436, 48, "sink");
        let subscription = _StateStreamSubscriptionOfObjectN$T().as(sink);
        let previous = subscription[_subState];
        if (core.identical(previous, async._DistinctStream._SENTINEL)) {
          subscription[_subState] = inputEvent;
          sink[_add](inputEvent);
        } else {
          let previousEvent = T.as(previous);
          let equals = this[_equals];
          let isEqual = null;
          try {
            if (equals == null) {
              isEqual = dart.equals(previousEvent, inputEvent);
            } else {
              isEqual = equals(previousEvent, inputEvent);
            }
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              async._addErrorWithReplacement(sink, e, s);
              return;
            } else
              throw e$;
          }
          if (!dart.test(isEqual)) {
            sink[_add](inputEvent);
            subscription[_subState] = inputEvent;
          }
        }
      }
    }
    (_DistinctStream.new = function(source, equals) {
      if (source == null) dart.nullFailed(I[70], 426, 29, "source");
      this[_equals] = equals;
      _DistinctStream.__proto__.new.call(this, source);
      ;
    }).prototype = _DistinctStream.prototype;
    dart.addTypeTests(_DistinctStream);
    _DistinctStream.prototype[_is__DistinctStream_default] = true;
    dart.addTypeCaches(_DistinctStream);
    dart.setMethodSignature(_DistinctStream, () => ({
      __proto__: dart.getMethods(_DistinctStream.__proto__),
      [_handleData$]: dart.fnType(dart.void, [T, async._EventSink$(T)])
    }));
    dart.setLibraryUri(_DistinctStream, I[29]);
    dart.setFieldSignature(_DistinctStream, () => ({
      __proto__: dart.getFields(_DistinctStream.__proto__),
      [_equals]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [T, T])))
    }));
    return _DistinctStream;
  });
  async._DistinctStream = async._DistinctStream$();
  dart.defineLazy(async._DistinctStream, {
    /*async._DistinctStream._SENTINEL*/get _SENTINEL() {
      return new core.Object.new();
    }
  }, false);
  dart.addTypeTests(async._DistinctStream, _is__DistinctStream_default);
  const _is__EventSinkWrapper_default = Symbol('_is__EventSinkWrapper_default');
  async._EventSinkWrapper$ = dart.generic(T => {
    class _EventSinkWrapper extends core.Object {
      add(data) {
        T.as(data);
        this[_sink$][_add](data);
      }
      addError(error, stackTrace = null) {
        let t124;
        if (error == null) dart.nullFailed(I[71], 16, 24, "error");
        this[_sink$][_addError](error, (t124 = stackTrace, t124 == null ? async.AsyncError.defaultStackTrace(error) : t124));
      }
      close() {
        this[_sink$][_close]();
      }
    }
    (_EventSinkWrapper.new = function(_sink) {
      if (_sink == null) dart.nullFailed(I[71], 10, 26, "_sink");
      this[_sink$] = _sink;
      ;
    }).prototype = _EventSinkWrapper.prototype;
    dart.addTypeTests(_EventSinkWrapper);
    _EventSinkWrapper.prototype[_is__EventSinkWrapper_default] = true;
    dart.addTypeCaches(_EventSinkWrapper);
    _EventSinkWrapper[dart.implements] = () => [async.EventSink$(T)];
    dart.setMethodSignature(_EventSinkWrapper, () => ({
      __proto__: dart.getMethods(_EventSinkWrapper.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_EventSinkWrapper, I[29]);
    dart.setFieldSignature(_EventSinkWrapper, () => ({
      __proto__: dart.getFields(_EventSinkWrapper.__proto__),
      [_sink$]: dart.fieldType(async._EventSink$(T))
    }));
    return _EventSinkWrapper;
  });
  async._EventSinkWrapper = async._EventSinkWrapper$();
  dart.addTypeTests(async._EventSinkWrapper, _is__EventSinkWrapper_default);
  var ___SinkTransformerStreamSubscription__transformerSink = dart.privateName(async, "_#_SinkTransformerStreamSubscription#_transformerSink");
  var ___SinkTransformerStreamSubscription__transformerSink_isSet = dart.privateName(async, "_#_SinkTransformerStreamSubscription#_transformerSink#isSet");
  var _transformerSink = dart.privateName(async, "_transformerSink");
  const _is__SinkTransformerStreamSubscription_default = Symbol('_is__SinkTransformerStreamSubscription_default');
  async._SinkTransformerStreamSubscription$ = dart.generic((S, T) => {
    var _EventSinkWrapperOfT = () => (_EventSinkWrapperOfT = dart.constFn(async._EventSinkWrapper$(T)))();
    class _SinkTransformerStreamSubscription extends async._BufferingStreamSubscription$(T) {
      get [_transformerSink]() {
        let t124;
        return dart.test(this[___SinkTransformerStreamSubscription__transformerSink_isSet]) ? (t124 = this[___SinkTransformerStreamSubscription__transformerSink], t124) : dart.throw(new _internal.LateError.fieldNI("_transformerSink"));
      }
      set [_transformerSink](t124) {
        if (t124 == null) dart.nullFailed(I[71], 33, 21, "null");
        this[___SinkTransformerStreamSubscription__transformerSink_isSet] = true;
        this[___SinkTransformerStreamSubscription__transformerSink] = t124;
      }
      [_add](data) {
        if (dart.test(this[_isClosed])) {
          dart.throw(new core.StateError.new("Stream is already closed"));
        }
        super[_add](data);
      }
      [_addError](error, stackTrace) {
        if (error == null) dart.nullFailed(I[71], 71, 25, "error");
        if (stackTrace == null) dart.nullFailed(I[71], 71, 43, "stackTrace");
        if (dart.test(this[_isClosed])) {
          dart.throw(new core.StateError.new("Stream is already closed"));
        }
        super[_addError](error, stackTrace);
      }
      [_close]() {
        if (dart.test(this[_isClosed])) {
          dart.throw(new core.StateError.new("Stream is already closed"));
        }
        super[_close]();
      }
      [_onPause]() {
        let t125;
        t125 = this[_subscription];
        t125 == null ? null : t125.pause();
      }
      [_onResume]() {
        let t125;
        t125 = this[_subscription];
        t125 == null ? null : t125.resume();
      }
      [_onCancel]() {
        let subscription = this[_subscription];
        if (subscription != null) {
          this[_subscription] = null;
          return subscription.cancel();
        }
        return null;
      }
      [_handleData$](data) {
        S.as(data);
        try {
          this[_transformerSink].add(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[_addError](e, s);
          } else
            throw e$;
        }
      }
      [_handleError$](error, stackTrace) {
        if (error == null) dart.nullFailed(I[71], 117, 28, "error");
        if (stackTrace == null) dart.nullFailed(I[71], 117, 46, "stackTrace");
        try {
          this[_transformerSink].addError(error, stackTrace);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            if (core.identical(e, error)) {
              this[_addError](error, stackTrace);
            } else {
              this[_addError](e, s);
            }
          } else
            throw e$;
        }
      }
      [_handleDone$]() {
        try {
          this[_subscription] = null;
          this[_transformerSink].close();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[_addError](e, s);
          } else
            throw e$;
        }
      }
    }
    (_SinkTransformerStreamSubscription.new = function(source, mapper, onData, onError, onDone, cancelOnError) {
      if (source == null) dart.nullFailed(I[71], 39, 17, "source");
      if (mapper == null) dart.nullFailed(I[71], 40, 25, "mapper");
      if (cancelOnError == null) dart.nullFailed(I[71], 44, 12, "cancelOnError");
      this[___SinkTransformerStreamSubscription__transformerSink] = null;
      this[___SinkTransformerStreamSubscription__transformerSink_isSet] = false;
      this[_subscription] = null;
      _SinkTransformerStreamSubscription.__proto__.new.call(this, onData, onError, onDone, cancelOnError);
      this[_transformerSink] = mapper(new (_EventSinkWrapperOfT()).new(this));
      this[_subscription] = source.listen(dart.bind(this, _handleData$), {onError: dart.bind(this, _handleError$), onDone: dart.bind(this, _handleDone$)});
    }).prototype = _SinkTransformerStreamSubscription.prototype;
    dart.addTypeTests(_SinkTransformerStreamSubscription);
    _SinkTransformerStreamSubscription.prototype[_is__SinkTransformerStreamSubscription_default] = true;
    dart.addTypeCaches(_SinkTransformerStreamSubscription);
    dart.setMethodSignature(_SinkTransformerStreamSubscription, () => ({
      __proto__: dart.getMethods(_SinkTransformerStreamSubscription.__proto__),
      [_add]: dart.fnType(dart.void, [T]),
      [_handleData$]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_handleError$]: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      [_handleDone$]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_SinkTransformerStreamSubscription, () => ({
      __proto__: dart.getGetters(_SinkTransformerStreamSubscription.__proto__),
      [_transformerSink]: async.EventSink$(S)
    }));
    dart.setSetterSignature(_SinkTransformerStreamSubscription, () => ({
      __proto__: dart.getSetters(_SinkTransformerStreamSubscription.__proto__),
      [_transformerSink]: async.EventSink$(S)
    }));
    dart.setLibraryUri(_SinkTransformerStreamSubscription, I[29]);
    dart.setFieldSignature(_SinkTransformerStreamSubscription, () => ({
      __proto__: dart.getFields(_SinkTransformerStreamSubscription.__proto__),
      [___SinkTransformerStreamSubscription__transformerSink]: dart.fieldType(dart.nullable(async.EventSink$(S))),
      [___SinkTransformerStreamSubscription__transformerSink_isSet]: dart.fieldType(core.bool),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(S)))
    }));
    return _SinkTransformerStreamSubscription;
  });
  async._SinkTransformerStreamSubscription = async._SinkTransformerStreamSubscription$();
  dart.addTypeTests(async._SinkTransformerStreamSubscription, _is__SinkTransformerStreamSubscription_default);
  var _sinkMapper$ = dart.privateName(async, "_StreamSinkTransformer._sinkMapper");
  var _sinkMapper$0 = dart.privateName(async, "_sinkMapper");
  const _is__StreamSinkTransformer_default = Symbol('_is__StreamSinkTransformer_default');
  async._StreamSinkTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _BoundSinkStreamOfS$T = () => (_BoundSinkStreamOfS$T = dart.constFn(async._BoundSinkStream$(S, T)))();
    class _StreamSinkTransformer extends async.StreamTransformerBase$(S, T) {
      get [_sinkMapper$0]() {
        return this[_sinkMapper$];
      }
      set [_sinkMapper$0](value) {
        super[_sinkMapper$0] = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        if (stream == null) dart.nullFailed(I[71], 151, 28, "stream");
        return new (_BoundSinkStreamOfS$T()).new(stream, this[_sinkMapper$0]);
      }
    }
    (_StreamSinkTransformer.new = function(_sinkMapper) {
      if (_sinkMapper == null) dart.nullFailed(I[71], 149, 37, "_sinkMapper");
      this[_sinkMapper$] = _sinkMapper;
      _StreamSinkTransformer.__proto__.new.call(this);
      ;
    }).prototype = _StreamSinkTransformer.prototype;
    dart.addTypeTests(_StreamSinkTransformer);
    _StreamSinkTransformer.prototype[_is__StreamSinkTransformer_default] = true;
    dart.addTypeCaches(_StreamSinkTransformer);
    dart.setMethodSignature(_StreamSinkTransformer, () => ({
      __proto__: dart.getMethods(_StreamSinkTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_StreamSinkTransformer, I[29]);
    dart.setFieldSignature(_StreamSinkTransformer, () => ({
      __proto__: dart.getFields(_StreamSinkTransformer.__proto__),
      [_sinkMapper$0]: dart.finalFieldType(dart.fnType(async.EventSink$(S), [async.EventSink$(T)]))
    }));
    return _StreamSinkTransformer;
  });
  async._StreamSinkTransformer = async._StreamSinkTransformer$();
  dart.addTypeTests(async._StreamSinkTransformer, _is__StreamSinkTransformer_default);
  const _is__BoundSinkStream_default = Symbol('_is__BoundSinkStream_default');
  async._BoundSinkStream$ = dart.generic((S, T) => {
    var _SinkTransformerStreamSubscriptionOfS$T = () => (_SinkTransformerStreamSubscriptionOfS$T = dart.constFn(async._SinkTransformerStreamSubscription$(S, T)))();
    class _BoundSinkStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[_stream$].isBroadcast;
      }
      listen(onData, opts) {
        let t128;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let subscription = new (_SinkTransformerStreamSubscriptionOfS$T()).new(this[_stream$], this[_sinkMapper$0], onData, onError, onDone, (t128 = cancelOnError, t128 == null ? false : t128));
        return subscription;
      }
    }
    (_BoundSinkStream.new = function(_stream, _sinkMapper) {
      if (_stream == null) dart.nullFailed(I[71], 166, 25, "_stream");
      if (_sinkMapper == null) dart.nullFailed(I[71], 166, 39, "_sinkMapper");
      this[_stream$] = _stream;
      this[_sinkMapper$0] = _sinkMapper;
      _BoundSinkStream.__proto__.new.call(this);
      ;
    }).prototype = _BoundSinkStream.prototype;
    dart.addTypeTests(_BoundSinkStream);
    _BoundSinkStream.prototype[_is__BoundSinkStream_default] = true;
    dart.addTypeCaches(_BoundSinkStream);
    dart.setMethodSignature(_BoundSinkStream, () => ({
      __proto__: dart.getMethods(_BoundSinkStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_BoundSinkStream, I[29]);
    dart.setFieldSignature(_BoundSinkStream, () => ({
      __proto__: dart.getFields(_BoundSinkStream.__proto__),
      [_sinkMapper$0]: dart.finalFieldType(dart.fnType(async.EventSink$(S), [async.EventSink$(T)])),
      [_stream$]: dart.finalFieldType(async.Stream$(S))
    }));
    return _BoundSinkStream;
  });
  async._BoundSinkStream = async._BoundSinkStream$();
  dart.addTypeTests(async._BoundSinkStream, _is__BoundSinkStream_default);
  const _is__HandlerEventSink_default = Symbol('_is__HandlerEventSink_default');
  async._HandlerEventSink$ = dart.generic((S, T) => {
    class _HandlerEventSink extends core.Object {
      add(data) {
        S.as(data);
        let sink = this[_sink$];
        if (sink == null) {
          dart.throw(new core.StateError.new("Sink is closed"));
        }
        let handleData = this[_handleData$];
        if (handleData != null) {
          handleData(data, sink);
        } else {
          sink.add(T.as(data));
        }
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[71], 215, 24, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        let sink = this[_sink$];
        if (sink == null) {
          dart.throw(new core.StateError.new("Sink is closed"));
        }
        let handleError = this[_handleError$];
        stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
        if (handleError != null) {
          handleError(error, stackTrace, sink);
        } else {
          sink.addError(error, stackTrace);
        }
      }
      close() {
        let sink = this[_sink$];
        if (sink == null) return;
        this[_sink$] = null;
        let handleDone = this[_handleDone$];
        if (handleDone != null) {
          handleDone(sink);
        } else {
          sink.close();
        }
      }
    }
    (_HandlerEventSink.new = function(_handleData, _handleError, _handleDone, _sink) {
      if (_sink == null) dart.nullFailed(I[71], 200, 25, "_sink");
      this[_handleData$] = _handleData;
      this[_handleError$] = _handleError;
      this[_handleDone$] = _handleDone;
      this[_sink$] = _sink;
      ;
    }).prototype = _HandlerEventSink.prototype;
    dart.addTypeTests(_HandlerEventSink);
    _HandlerEventSink.prototype[_is__HandlerEventSink_default] = true;
    dart.addTypeCaches(_HandlerEventSink);
    _HandlerEventSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_HandlerEventSink, () => ({
      __proto__: dart.getMethods(_HandlerEventSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_HandlerEventSink, I[29]);
    dart.setFieldSignature(_HandlerEventSink, () => ({
      __proto__: dart.getFields(_HandlerEventSink.__proto__),
      [_handleData$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [S, async.EventSink$(T)]))),
      [_handleError$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core.StackTrace, async.EventSink$(T)]))),
      [_handleDone$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))),
      [_sink$]: dart.fieldType(dart.nullable(async.EventSink$(T)))
    }));
    return _HandlerEventSink;
  });
  async._HandlerEventSink = async._HandlerEventSink$();
  dart.addTypeTests(async._HandlerEventSink, _is__HandlerEventSink_default);
  const _is__StreamHandlerTransformer_default = Symbol('_is__StreamHandlerTransformer_default');
  async._StreamHandlerTransformer$ = dart.generic((S, T) => {
    var _HandlerEventSinkOfS$T = () => (_HandlerEventSinkOfS$T = dart.constFn(async._HandlerEventSink$(S, T)))();
    var EventSinkOfTTo_HandlerEventSinkOfS$T = () => (EventSinkOfTTo_HandlerEventSinkOfS$T = dart.constFn(dart.fnType(_HandlerEventSinkOfS$T(), [EventSinkOfT()])))();
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var EventSinkOfT = () => (EventSinkOfT = dart.constFn(async.EventSink$(T)))();
    class _StreamHandlerTransformer extends async._StreamSinkTransformer$(S, T) {
      bind(stream) {
        StreamOfS().as(stream);
        if (stream == null) dart.nullFailed(I[71], 256, 28, "stream");
        return super.bind(stream);
      }
    }
    (_StreamHandlerTransformer.new = function(opts) {
      let handleData = opts && 'handleData' in opts ? opts.handleData : null;
      let handleError = opts && 'handleError' in opts ? opts.handleError : null;
      let handleDone = opts && 'handleDone' in opts ? opts.handleDone : null;
      _StreamHandlerTransformer.__proto__.new.call(this, dart.fn(outputSink => {
        if (outputSink == null) dart.nullFailed(I[71], 251, 29, "outputSink");
        return new (_HandlerEventSinkOfS$T()).new(handleData, handleError, handleDone, outputSink);
      }, EventSinkOfTTo_HandlerEventSinkOfS$T()));
      ;
    }).prototype = _StreamHandlerTransformer.prototype;
    dart.addTypeTests(_StreamHandlerTransformer);
    _StreamHandlerTransformer.prototype[_is__StreamHandlerTransformer_default] = true;
    dart.addTypeCaches(_StreamHandlerTransformer);
    dart.setLibraryUri(_StreamHandlerTransformer, I[29]);
    return _StreamHandlerTransformer;
  });
  async._StreamHandlerTransformer = async._StreamHandlerTransformer$();
  dart.addTypeTests(async._StreamHandlerTransformer, _is__StreamHandlerTransformer_default);
  var _bind$ = dart.privateName(async, "_bind");
  const _is__StreamBindTransformer_default = Symbol('_is__StreamBindTransformer_default');
  async._StreamBindTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    class _StreamBindTransformer extends async.StreamTransformerBase$(S, T) {
      bind(stream) {
        let t128;
        StreamOfS().as(stream);
        if (stream == null) dart.nullFailed(I[71], 266, 28, "stream");
        t128 = stream;
        return this[_bind$](t128);
      }
    }
    (_StreamBindTransformer.new = function(_bind) {
      if (_bind == null) dart.nullFailed(I[71], 264, 31, "_bind");
      this[_bind$] = _bind;
      _StreamBindTransformer.__proto__.new.call(this);
      ;
    }).prototype = _StreamBindTransformer.prototype;
    dart.addTypeTests(_StreamBindTransformer);
    _StreamBindTransformer.prototype[_is__StreamBindTransformer_default] = true;
    dart.addTypeCaches(_StreamBindTransformer);
    dart.setMethodSignature(_StreamBindTransformer, () => ({
      __proto__: dart.getMethods(_StreamBindTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_StreamBindTransformer, I[29]);
    dart.setFieldSignature(_StreamBindTransformer, () => ({
      __proto__: dart.getFields(_StreamBindTransformer.__proto__),
      [_bind$]: dart.finalFieldType(dart.fnType(async.Stream$(T), [async.Stream$(S)]))
    }));
    return _StreamBindTransformer;
  });
  async._StreamBindTransformer = async._StreamBindTransformer$();
  dart.addTypeTests(async._StreamBindTransformer, _is__StreamBindTransformer_default);
  var _onListen$0 = dart.privateName(async, "_StreamSubscriptionTransformer._onListen");
  const _is__StreamSubscriptionTransformer_default = Symbol('_is__StreamSubscriptionTransformer_default');
  async._StreamSubscriptionTransformer$ = dart.generic((S, T) => {
    var StreamOfS = () => (StreamOfS = dart.constFn(async.Stream$(S)))();
    var _BoundSubscriptionStreamOfS$T = () => (_BoundSubscriptionStreamOfS$T = dart.constFn(async._BoundSubscriptionStream$(S, T)))();
    class _StreamSubscriptionTransformer extends async.StreamTransformerBase$(S, T) {
      get [_onListen$]() {
        return this[_onListen$0];
      }
      set [_onListen$](value) {
        super[_onListen$] = value;
      }
      bind(stream) {
        StreamOfS().as(stream);
        if (stream == null) dart.nullFailed(I[71], 288, 28, "stream");
        return new (_BoundSubscriptionStreamOfS$T()).new(stream, this[_onListen$]);
      }
    }
    (_StreamSubscriptionTransformer.new = function(_onListen) {
      if (_onListen == null) dart.nullFailed(I[71], 286, 45, "_onListen");
      this[_onListen$0] = _onListen;
      _StreamSubscriptionTransformer.__proto__.new.call(this);
      ;
    }).prototype = _StreamSubscriptionTransformer.prototype;
    dart.addTypeTests(_StreamSubscriptionTransformer);
    _StreamSubscriptionTransformer.prototype[_is__StreamSubscriptionTransformer_default] = true;
    dart.addTypeCaches(_StreamSubscriptionTransformer);
    dart.setMethodSignature(_StreamSubscriptionTransformer, () => ({
      __proto__: dart.getMethods(_StreamSubscriptionTransformer.__proto__),
      bind: dart.fnType(async.Stream$(T), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_StreamSubscriptionTransformer, I[29]);
    dart.setFieldSignature(_StreamSubscriptionTransformer, () => ({
      __proto__: dart.getFields(_StreamSubscriptionTransformer.__proto__),
      [_onListen$]: dart.finalFieldType(dart.fnType(async.StreamSubscription$(T), [async.Stream$(S), core.bool]))
    }));
    return _StreamSubscriptionTransformer;
  });
  async._StreamSubscriptionTransformer = async._StreamSubscriptionTransformer$();
  dart.addTypeTests(async._StreamSubscriptionTransformer, _is__StreamSubscriptionTransformer_default);
  const _is__BoundSubscriptionStream_default = Symbol('_is__BoundSubscriptionStream_default');
  async._BoundSubscriptionStream$ = dart.generic((S, T) => {
    class _BoundSubscriptionStream extends async.Stream$(T) {
      get isBroadcast() {
        return this[_stream$].isBroadcast;
      }
      listen(onData, opts) {
        let t128, t129, t128$;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let result = (t128$ = this[_stream$], t129 = (t128 = cancelOnError, t128 == null ? false : t128), this[_onListen$](t128$, t129));
        result.onData(onData);
        result.onError(onError);
        result.onDone(onDone);
        return result;
      }
    }
    (_BoundSubscriptionStream.new = function(_stream, _onListen) {
      if (_stream == null) dart.nullFailed(I[71], 303, 33, "_stream");
      if (_onListen == null) dart.nullFailed(I[71], 303, 47, "_onListen");
      this[_stream$] = _stream;
      this[_onListen$] = _onListen;
      _BoundSubscriptionStream.__proto__.new.call(this);
      ;
    }).prototype = _BoundSubscriptionStream.prototype;
    dart.addTypeTests(_BoundSubscriptionStream);
    _BoundSubscriptionStream.prototype[_is__BoundSubscriptionStream_default] = true;
    dart.addTypeCaches(_BoundSubscriptionStream);
    dart.setMethodSignature(_BoundSubscriptionStream, () => ({
      __proto__: dart.getMethods(_BoundSubscriptionStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_BoundSubscriptionStream, I[29]);
    dart.setFieldSignature(_BoundSubscriptionStream, () => ({
      __proto__: dart.getFields(_BoundSubscriptionStream.__proto__),
      [_onListen$]: dart.finalFieldType(dart.fnType(async.StreamSubscription$(T), [async.Stream$(S), core.bool])),
      [_stream$]: dart.finalFieldType(async.Stream$(S))
    }));
    return _BoundSubscriptionStream;
  });
  async._BoundSubscriptionStream = async._BoundSubscriptionStream$();
  dart.addTypeTests(async._BoundSubscriptionStream, _is__BoundSubscriptionStream_default);
  async.Timer = class Timer extends core.Object {
    static new(duration, callback) {
      if (duration == null) dart.nullFailed(I[72], 41, 26, "duration");
      if (callback == null) dart.nullFailed(I[72], 41, 52, "callback");
      if (dart.equals(async.Zone.current, async.Zone.root)) {
        return async.Zone.current.createTimer(duration, callback);
      }
      return async.Zone.current.createTimer(duration, async.Zone.current.bindCallbackGuarded(callback));
    }
    static periodic(duration, callback) {
      if (duration == null) dart.nullFailed(I[72], 67, 35, "duration");
      if (callback == null) dart.nullFailed(I[72], 67, 50, "callback");
      if (dart.equals(async.Zone.current, async.Zone.root)) {
        return async.Zone.current.createPeriodicTimer(duration, callback);
      }
      let boundCallback = async.Zone.current.bindUnaryCallbackGuarded(async.Timer, callback);
      return async.Zone.current.createPeriodicTimer(duration, boundCallback);
    }
    static run(callback) {
      if (callback == null) dart.nullFailed(I[72], 80, 35, "callback");
      async.Timer.new(core.Duration.zero, callback);
    }
    static _createTimer(duration, callback) {
      if (duration == null) dart.nullFailed(I[61], 183, 38, "duration");
      if (callback == null) dart.nullFailed(I[61], 183, 64, "callback");
      let milliseconds = duration.inMilliseconds;
      if (dart.notNull(milliseconds) < 0) milliseconds = 0;
      return new _isolate_helper.TimerImpl.new(milliseconds, callback);
    }
    static _createPeriodicTimer(duration, callback) {
      if (duration == null) dart.nullFailed(I[61], 191, 16, "duration");
      if (callback == null) dart.nullFailed(I[61], 191, 31, "callback");
      let milliseconds = duration.inMilliseconds;
      if (dart.notNull(milliseconds) < 0) milliseconds = 0;
      return new _isolate_helper.TimerImpl.periodic(milliseconds, callback);
    }
  };
  (async.Timer[dart.mixinNew] = function() {
  }).prototype = async.Timer.prototype;
  dart.addTypeTests(async.Timer);
  dart.addTypeCaches(async.Timer);
  dart.setLibraryUri(async.Timer, I[29]);
  var zone$ = dart.privateName(async, "_ZoneFunction.zone");
  var $function$0 = dart.privateName(async, "_ZoneFunction.function");
  const _is__ZoneFunction_default = Symbol('_is__ZoneFunction_default');
  async._ZoneFunction$ = dart.generic(T => {
    class _ZoneFunction extends core.Object {
      get zone() {
        return this[zone$];
      }
      set zone(value) {
        super.zone = value;
      }
      get function() {
        return this[$function$0];
      }
      set function(value) {
        super.function = value;
      }
    }
    (_ZoneFunction.new = function(zone, $function) {
      if (zone == null) dart.nullFailed(I[73], 244, 28, "zone");
      if ($function == null) dart.nullFailed(I[73], 244, 39, "function");
      this[zone$] = zone;
      this[$function$0] = $function;
      ;
    }).prototype = _ZoneFunction.prototype;
    dart.addTypeTests(_ZoneFunction);
    _ZoneFunction.prototype[_is__ZoneFunction_default] = true;
    dart.addTypeCaches(_ZoneFunction);
    dart.setLibraryUri(_ZoneFunction, I[29]);
    dart.setFieldSignature(_ZoneFunction, () => ({
      __proto__: dart.getFields(_ZoneFunction.__proto__),
      zone: dart.finalFieldType(async._Zone),
      function: dart.finalFieldType(T)
    }));
    return _ZoneFunction;
  });
  async._ZoneFunction = async._ZoneFunction$();
  dart.addTypeTests(async._ZoneFunction, _is__ZoneFunction_default);
  var zone$0 = dart.privateName(async, "_RunNullaryZoneFunction.zone");
  var $function$1 = dart.privateName(async, "_RunNullaryZoneFunction.function");
  async._RunNullaryZoneFunction = class _RunNullaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$0];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$1];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RunNullaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 250, 38, "zone");
    if ($function == null) dart.nullFailed(I[73], 250, 49, "function");
    this[zone$0] = zone;
    this[$function$1] = $function;
    ;
  }).prototype = async._RunNullaryZoneFunction.prototype;
  dart.addTypeTests(async._RunNullaryZoneFunction);
  dart.addTypeCaches(async._RunNullaryZoneFunction);
  dart.setLibraryUri(async._RunNullaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RunNullaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RunNullaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))
  }));
  var zone$1 = dart.privateName(async, "_RunUnaryZoneFunction.zone");
  var $function$2 = dart.privateName(async, "_RunUnaryZoneFunction.function");
  async._RunUnaryZoneFunction = class _RunUnaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$1];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$2];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RunUnaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 256, 36, "zone");
    if ($function == null) dart.nullFailed(I[73], 256, 47, "function");
    this[zone$1] = zone;
    this[$function$2] = $function;
    ;
  }).prototype = async._RunUnaryZoneFunction.prototype;
  dart.addTypeTests(async._RunUnaryZoneFunction);
  dart.addTypeCaches(async._RunUnaryZoneFunction);
  dart.setLibraryUri(async._RunUnaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RunUnaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RunUnaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType((R, T) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))
  }));
  var zone$2 = dart.privateName(async, "_RunBinaryZoneFunction.zone");
  var $function$3 = dart.privateName(async, "_RunBinaryZoneFunction.function");
  async._RunBinaryZoneFunction = class _RunBinaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$2];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$3];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RunBinaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 262, 37, "zone");
    if ($function == null) dart.nullFailed(I[73], 262, 48, "function");
    this[zone$2] = zone;
    this[$function$3] = $function;
    ;
  }).prototype = async._RunBinaryZoneFunction.prototype;
  dart.addTypeTests(async._RunBinaryZoneFunction);
  dart.addTypeCaches(async._RunBinaryZoneFunction);
  dart.setLibraryUri(async._RunBinaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RunBinaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RunBinaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType((R, T1, T2) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))
  }));
  var zone$3 = dart.privateName(async, "_RegisterNullaryZoneFunction.zone");
  var $function$4 = dart.privateName(async, "_RegisterNullaryZoneFunction.function");
  async._RegisterNullaryZoneFunction = class _RegisterNullaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$3];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$4];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RegisterNullaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 268, 43, "zone");
    if ($function == null) dart.nullFailed(I[73], 268, 54, "function");
    this[zone$3] = zone;
    this[$function$4] = $function;
    ;
  }).prototype = async._RegisterNullaryZoneFunction.prototype;
  dart.addTypeTests(async._RegisterNullaryZoneFunction);
  dart.addTypeCaches(async._RegisterNullaryZoneFunction);
  dart.setLibraryUri(async._RegisterNullaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RegisterNullaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RegisterNullaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))
  }));
  var zone$4 = dart.privateName(async, "_RegisterUnaryZoneFunction.zone");
  var $function$5 = dart.privateName(async, "_RegisterUnaryZoneFunction.function");
  async._RegisterUnaryZoneFunction = class _RegisterUnaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$4];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$5];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RegisterUnaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 274, 41, "zone");
    if ($function == null) dart.nullFailed(I[73], 274, 52, "function");
    this[zone$4] = zone;
    this[$function$5] = $function;
    ;
  }).prototype = async._RegisterUnaryZoneFunction.prototype;
  dart.addTypeTests(async._RegisterUnaryZoneFunction);
  dart.addTypeCaches(async._RegisterUnaryZoneFunction);
  dart.setLibraryUri(async._RegisterUnaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RegisterUnaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RegisterUnaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))
  }));
  var zone$5 = dart.privateName(async, "_RegisterBinaryZoneFunction.zone");
  var $function$6 = dart.privateName(async, "_RegisterBinaryZoneFunction.function");
  async._RegisterBinaryZoneFunction = class _RegisterBinaryZoneFunction extends core.Object {
    get zone() {
      return this[zone$5];
    }
    set zone(value) {
      super.zone = value;
    }
    get function() {
      return this[$function$6];
    }
    set function(value) {
      super.function = value;
    }
  };
  (async._RegisterBinaryZoneFunction.new = function(zone, $function) {
    if (zone == null) dart.nullFailed(I[73], 280, 42, "zone");
    if ($function == null) dart.nullFailed(I[73], 280, 53, "function");
    this[zone$5] = zone;
    this[$function$6] = $function;
    ;
  }).prototype = async._RegisterBinaryZoneFunction.prototype;
  dart.addTypeTests(async._RegisterBinaryZoneFunction);
  dart.addTypeCaches(async._RegisterBinaryZoneFunction);
  dart.setLibraryUri(async._RegisterBinaryZoneFunction, I[29]);
  dart.setFieldSignature(async._RegisterBinaryZoneFunction, () => ({
    __proto__: dart.getFields(async._RegisterBinaryZoneFunction.__proto__),
    zone: dart.finalFieldType(async._Zone),
    function: dart.finalFieldType(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))
  }));
  async.ZoneSpecification = class ZoneSpecification extends core.Object {
    static from(other, opts) {
      let t128, t128$, t128$0, t128$1, t128$2, t128$3, t128$4, t128$5, t128$6, t128$7, t128$8, t128$9, t128$10;
      if (other == null) dart.nullFailed(I[73], 331, 52, "other");
      let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
      let run = opts && 'run' in opts ? opts.run : null;
      let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
      let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
      let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
      let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
      let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
      let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
      let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
      let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
      let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
      let print = opts && 'print' in opts ? opts.print : null;
      let fork = opts && 'fork' in opts ? opts.fork : null;
      return new async._ZoneSpecification.new({handleUncaughtError: (t128 = handleUncaughtError, t128 == null ? other.handleUncaughtError : t128), run: (t128$ = run, t128$ == null ? other.run : t128$), runUnary: (t128$0 = runUnary, t128$0 == null ? other.runUnary : t128$0), runBinary: (t128$1 = runBinary, t128$1 == null ? other.runBinary : t128$1), registerCallback: (t128$2 = registerCallback, t128$2 == null ? other.registerCallback : t128$2), registerUnaryCallback: (t128$3 = registerUnaryCallback, t128$3 == null ? other.registerUnaryCallback : t128$3), registerBinaryCallback: (t128$4 = registerBinaryCallback, t128$4 == null ? other.registerBinaryCallback : t128$4), errorCallback: (t128$5 = errorCallback, t128$5 == null ? other.errorCallback : t128$5), scheduleMicrotask: (t128$6 = scheduleMicrotask, t128$6 == null ? other.scheduleMicrotask : t128$6), createTimer: (t128$7 = createTimer, t128$7 == null ? other.createTimer : t128$7), createPeriodicTimer: (t128$8 = createPeriodicTimer, t128$8 == null ? other.createPeriodicTimer : t128$8), print: (t128$9 = print, t128$9 == null ? other.print : t128$9), fork: (t128$10 = fork, t128$10 == null ? other.fork : t128$10)});
    }
  };
  (async.ZoneSpecification[dart.mixinNew] = function() {
  }).prototype = async.ZoneSpecification.prototype;
  dart.addTypeTests(async.ZoneSpecification);
  dart.addTypeCaches(async.ZoneSpecification);
  dart.setLibraryUri(async.ZoneSpecification, I[29]);
  var handleUncaughtError$ = dart.privateName(async, "_ZoneSpecification.handleUncaughtError");
  var run$ = dart.privateName(async, "_ZoneSpecification.run");
  var runUnary$ = dart.privateName(async, "_ZoneSpecification.runUnary");
  var runBinary$ = dart.privateName(async, "_ZoneSpecification.runBinary");
  var registerCallback$ = dart.privateName(async, "_ZoneSpecification.registerCallback");
  var registerUnaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerUnaryCallback");
  var registerBinaryCallback$ = dart.privateName(async, "_ZoneSpecification.registerBinaryCallback");
  var errorCallback$ = dart.privateName(async, "_ZoneSpecification.errorCallback");
  var scheduleMicrotask$ = dart.privateName(async, "_ZoneSpecification.scheduleMicrotask");
  var createTimer$ = dart.privateName(async, "_ZoneSpecification.createTimer");
  var createPeriodicTimer$ = dart.privateName(async, "_ZoneSpecification.createPeriodicTimer");
  var print$ = dart.privateName(async, "_ZoneSpecification.print");
  var fork$ = dart.privateName(async, "_ZoneSpecification.fork");
  async._ZoneSpecification = class _ZoneSpecification extends core.Object {
    get handleUncaughtError() {
      return this[handleUncaughtError$];
    }
    set handleUncaughtError(value) {
      super.handleUncaughtError = value;
    }
    get run() {
      return this[run$];
    }
    set run(value) {
      super.run = value;
    }
    get runUnary() {
      return this[runUnary$];
    }
    set runUnary(value) {
      super.runUnary = value;
    }
    get runBinary() {
      return this[runBinary$];
    }
    set runBinary(value) {
      super.runBinary = value;
    }
    get registerCallback() {
      return this[registerCallback$];
    }
    set registerCallback(value) {
      super.registerCallback = value;
    }
    get registerUnaryCallback() {
      return this[registerUnaryCallback$];
    }
    set registerUnaryCallback(value) {
      super.registerUnaryCallback = value;
    }
    get registerBinaryCallback() {
      return this[registerBinaryCallback$];
    }
    set registerBinaryCallback(value) {
      super.registerBinaryCallback = value;
    }
    get errorCallback() {
      return this[errorCallback$];
    }
    set errorCallback(value) {
      super.errorCallback = value;
    }
    get scheduleMicrotask() {
      return this[scheduleMicrotask$];
    }
    set scheduleMicrotask(value) {
      super.scheduleMicrotask = value;
    }
    get createTimer() {
      return this[createTimer$];
    }
    set createTimer(value) {
      super.createTimer = value;
    }
    get createPeriodicTimer() {
      return this[createPeriodicTimer$];
    }
    set createPeriodicTimer(value) {
      super.createPeriodicTimer = value;
    }
    get print() {
      return this[print$];
    }
    set print(value) {
      super.print = value;
    }
    get fork() {
      return this[fork$];
    }
    set fork(value) {
      super.fork = value;
    }
  };
  (async._ZoneSpecification.new = function(opts) {
    let handleUncaughtError = opts && 'handleUncaughtError' in opts ? opts.handleUncaughtError : null;
    let run = opts && 'run' in opts ? opts.run : null;
    let runUnary = opts && 'runUnary' in opts ? opts.runUnary : null;
    let runBinary = opts && 'runBinary' in opts ? opts.runBinary : null;
    let registerCallback = opts && 'registerCallback' in opts ? opts.registerCallback : null;
    let registerUnaryCallback = opts && 'registerUnaryCallback' in opts ? opts.registerUnaryCallback : null;
    let registerBinaryCallback = opts && 'registerBinaryCallback' in opts ? opts.registerBinaryCallback : null;
    let errorCallback = opts && 'errorCallback' in opts ? opts.errorCallback : null;
    let scheduleMicrotask = opts && 'scheduleMicrotask' in opts ? opts.scheduleMicrotask : null;
    let createTimer = opts && 'createTimer' in opts ? opts.createTimer : null;
    let createPeriodicTimer = opts && 'createPeriodicTimer' in opts ? opts.createPeriodicTimer : null;
    let print = opts && 'print' in opts ? opts.print : null;
    let fork = opts && 'fork' in opts ? opts.fork : null;
    this[handleUncaughtError$] = handleUncaughtError;
    this[run$] = run;
    this[runUnary$] = runUnary;
    this[runBinary$] = runBinary;
    this[registerCallback$] = registerCallback;
    this[registerUnaryCallback$] = registerUnaryCallback;
    this[registerBinaryCallback$] = registerBinaryCallback;
    this[errorCallback$] = errorCallback;
    this[scheduleMicrotask$] = scheduleMicrotask;
    this[createTimer$] = createTimer;
    this[createPeriodicTimer$] = createPeriodicTimer;
    this[print$] = print;
    this[fork$] = fork;
    ;
  }).prototype = async._ZoneSpecification.prototype;
  dart.addTypeTests(async._ZoneSpecification);
  dart.addTypeCaches(async._ZoneSpecification);
  async._ZoneSpecification[dart.implements] = () => [async.ZoneSpecification];
  dart.setLibraryUri(async._ZoneSpecification, I[29]);
  dart.setFieldSignature(async._ZoneSpecification, () => ({
    __proto__: dart.getFields(async._ZoneSpecification.__proto__),
    handleUncaughtError: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace]))),
    run: dart.finalFieldType(dart.nullable(dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))),
    runUnary: dart.finalFieldType(dart.nullable(dart.gFnType((R, T) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))),
    runBinary: dart.finalFieldType(dart.nullable(dart.gFnType((R, T1, T2) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))),
    registerCallback: dart.finalFieldType(dart.nullable(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]))),
    registerUnaryCallback: dart.finalFieldType(dart.nullable(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]))),
    registerBinaryCallback: dart.finalFieldType(dart.nullable(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]))),
    errorCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)]))),
    scheduleMicrotask: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])]))),
    createTimer: dart.finalFieldType(dart.nullable(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])]))),
    createPeriodicTimer: dart.finalFieldType(dart.nullable(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]))),
    print: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String]))),
    fork: dart.finalFieldType(dart.nullable(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])))
  }));
  async.ZoneDelegate = class ZoneDelegate extends core.Object {};
  (async.ZoneDelegate.new = function() {
    ;
  }).prototype = async.ZoneDelegate.prototype;
  dart.addTypeTests(async.ZoneDelegate);
  dart.addTypeCaches(async.ZoneDelegate);
  dart.setLibraryUri(async.ZoneDelegate, I[29]);
  async.Zone = class Zone extends core.Object {
    static get current() {
      return async.Zone._current;
    }
    static _enter(zone) {
      if (zone == null) dart.nullFailed(I[73], 885, 29, "zone");
      if (!(zone != async.Zone._current)) dart.assertFailed(null, I[73], 886, 12, "!identical(zone, _current)");
      let previous = async.Zone._current;
      async.Zone._current = zone;
      return previous;
    }
    static _leave(previous) {
      if (previous == null) dart.nullFailed(I[73], 895, 28, "previous");
      if (!(previous != null)) dart.assertFailed(null, I[73], 896, 12, "previous != null");
      async.Zone._current = previous;
    }
  };
  (async.Zone.__ = function() {
    ;
  }).prototype = async.Zone.prototype;
  dart.addTypeTests(async.Zone);
  dart.addTypeCaches(async.Zone);
  dart.setLibraryUri(async.Zone, I[29]);
  dart.defineLazy(async.Zone, {
    /*async.Zone.root*/get root() {
      return C[44] || CT.C44;
    },
    /*async.Zone._current*/get _current() {
      return async._rootZone;
    },
    set _current(_) {}
  }, false);
  var _delegationTarget$ = dart.privateName(async, "_delegationTarget");
  var _handleUncaughtError = dart.privateName(async, "_handleUncaughtError");
  var _parentDelegate = dart.privateName(async, "_parentDelegate");
  var _run = dart.privateName(async, "_run");
  var _runUnary = dart.privateName(async, "_runUnary");
  var _runBinary = dart.privateName(async, "_runBinary");
  var _registerCallback = dart.privateName(async, "_registerCallback");
  var _registerUnaryCallback = dart.privateName(async, "_registerUnaryCallback");
  var _registerBinaryCallback = dart.privateName(async, "_registerBinaryCallback");
  var _errorCallback = dart.privateName(async, "_errorCallback");
  var _scheduleMicrotask = dart.privateName(async, "_scheduleMicrotask");
  var _createTimer = dart.privateName(async, "_createTimer");
  var _createPeriodicTimer = dart.privateName(async, "_createPeriodicTimer");
  var _print = dart.privateName(async, "_print");
  var _fork = dart.privateName(async, "_fork");
  async._ZoneDelegate = class _ZoneDelegate extends core.Object {
    handleUncaughtError(zone, error, stackTrace) {
      if (zone == null) dart.nullFailed(I[73], 917, 33, "zone");
      if (error == null) dart.nullFailed(I[73], 917, 46, "error");
      if (stackTrace == null) dart.nullFailed(I[73], 917, 64, "stackTrace");
      let implementation = this[_delegationTarget$][_handleUncaughtError];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(implZone, implZone[_parentDelegate], zone, error, stackTrace);
    }
    run(R, zone, f) {
      if (zone == null) dart.nullFailed(I[73], 924, 17, "zone");
      if (f == null) dart.nullFailed(I[73], 924, 25, "f");
      let implementation = this[_delegationTarget$][_run];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, implZone, implZone[_parentDelegate], zone, f);
    }
    runUnary(R, T, zone, f, arg) {
      if (zone == null) dart.nullFailed(I[73], 931, 25, "zone");
      if (f == null) dart.nullFailed(I[73], 931, 33, "f");
      let implementation = this[_delegationTarget$][_runUnary];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, T, implZone, implZone[_parentDelegate], zone, f, arg);
    }
    runBinary(R, T1, T2, zone, f, arg1, arg2) {
      if (zone == null) dart.nullFailed(I[73], 938, 31, "zone");
      if (f == null) dart.nullFailed(I[73], 938, 39, "f");
      let implementation = this[_delegationTarget$][_runBinary];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, T1, T2, implZone, implZone[_parentDelegate], zone, f, arg1, arg2);
    }
    registerCallback(R, zone, f) {
      if (zone == null) dart.nullFailed(I[73], 945, 44, "zone");
      if (f == null) dart.nullFailed(I[73], 945, 52, "f");
      let implementation = this[_delegationTarget$][_registerCallback];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, implZone, implZone[_parentDelegate], zone, f);
    }
    registerUnaryCallback(R, T, zone, f) {
      if (zone == null) dart.nullFailed(I[73], 952, 60, "zone");
      if (f == null) dart.nullFailed(I[73], 952, 68, "f");
      let implementation = this[_delegationTarget$][_registerUnaryCallback];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, T, implZone, implZone[_parentDelegate], zone, f);
    }
    registerBinaryCallback(R, T1, T2, zone, f) {
      if (zone == null) dart.nullFailed(I[73], 960, 12, "zone");
      if (f == null) dart.nullFailed(I[73], 960, 20, "f");
      let implementation = this[_delegationTarget$][_registerBinaryCallback];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(R, T1, T2, implZone, implZone[_parentDelegate], zone, f);
    }
    errorCallback(zone, error, stackTrace) {
      if (zone == null) dart.nullFailed(I[73], 967, 34, "zone");
      if (error == null) dart.nullFailed(I[73], 967, 47, "error");
      _internal.checkNotNullable(core.Object, error, "error");
      let implementation = this[_delegationTarget$][_errorCallback];
      let implZone = implementation.zone;
      if (implZone == async._rootZone) return null;
      let handler = implementation.function;
      return handler(implZone, implZone[_parentDelegate], zone, error, stackTrace);
    }
    scheduleMicrotask(zone, f) {
      if (zone == null) dart.nullFailed(I[73], 976, 31, "zone");
      if (f == null) dart.nullFailed(I[73], 976, 37, "f");
      let implementation = this[_delegationTarget$][_scheduleMicrotask];
      let implZone = implementation.zone;
      let handler = implementation.function;
      handler(implZone, implZone[_parentDelegate], zone, f);
    }
    createTimer(zone, duration, f) {
      if (zone == null) dart.nullFailed(I[73], 983, 26, "zone");
      if (duration == null) dart.nullFailed(I[73], 983, 41, "duration");
      if (f == null) dart.nullFailed(I[73], 983, 56, "f");
      let implementation = this[_delegationTarget$][_createTimer];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(implZone, implZone[_parentDelegate], zone, duration, f);
    }
    createPeriodicTimer(zone, period, f) {
      if (zone == null) dart.nullFailed(I[73], 990, 34, "zone");
      if (period == null) dart.nullFailed(I[73], 990, 49, "period");
      if (f == null) dart.nullFailed(I[73], 990, 62, "f");
      let implementation = this[_delegationTarget$][_createPeriodicTimer];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(implZone, implZone[_parentDelegate], zone, period, f);
    }
    print(zone, line) {
      if (zone == null) dart.nullFailed(I[73], 997, 19, "zone");
      if (line == null) dart.nullFailed(I[73], 997, 32, "line");
      let implementation = this[_delegationTarget$][_print];
      let implZone = implementation.zone;
      let handler = implementation.function;
      handler(implZone, implZone[_parentDelegate], zone, line);
    }
    fork(zone, specification, zoneValues) {
      if (zone == null) dart.nullFailed(I[73], 1004, 18, "zone");
      let implementation = this[_delegationTarget$][_fork];
      let implZone = implementation.zone;
      let handler = implementation.function;
      return handler(implZone, implZone[_parentDelegate], zone, specification, zoneValues);
    }
  };
  (async._ZoneDelegate.new = function(_delegationTarget) {
    if (_delegationTarget == null) dart.nullFailed(I[73], 915, 22, "_delegationTarget");
    this[_delegationTarget$] = _delegationTarget;
    ;
  }).prototype = async._ZoneDelegate.prototype;
  dart.addTypeTests(async._ZoneDelegate);
  dart.addTypeCaches(async._ZoneDelegate);
  async._ZoneDelegate[dart.implements] = () => [async.ZoneDelegate];
  dart.setMethodSignature(async._ZoneDelegate, () => ({
    __proto__: dart.getMethods(async._ZoneDelegate.__proto__),
    handleUncaughtError: dart.fnType(dart.void, [async.Zone, core.Object, core.StackTrace]),
    run: dart.gFnType(R => [R, [async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    runUnary: dart.gFnType((R, T) => [R, [async.Zone, dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    runBinary: dart.gFnType((R, T1, T2) => [R, [async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerCallback: dart.gFnType(R => [dart.fnType(R, []), [async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    errorCallback: dart.fnType(dart.nullable(async.AsyncError), [async.Zone, core.Object, dart.nullable(core.StackTrace)]),
    scheduleMicrotask: dart.fnType(dart.void, [async.Zone, dart.fnType(dart.dynamic, [])]),
    createTimer: dart.fnType(async.Timer, [async.Zone, core.Duration, dart.fnType(dart.void, [])]),
    createPeriodicTimer: dart.fnType(async.Timer, [async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]),
    print: dart.fnType(dart.void, [async.Zone, core.String]),
    fork: dart.fnType(async.Zone, [async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])
  }));
  dart.setLibraryUri(async._ZoneDelegate, I[29]);
  dart.setFieldSignature(async._ZoneDelegate, () => ({
    __proto__: dart.getFields(async._ZoneDelegate.__proto__),
    [_delegationTarget$]: dart.finalFieldType(async._Zone)
  }));
  async._Zone = class _Zone extends core.Object {
    inSameErrorZone(otherZone) {
      if (otherZone == null) dart.nullFailed(I[73], 1039, 29, "otherZone");
      return this === otherZone || this.errorZone == otherZone.errorZone;
    }
  };
  (async._Zone.new = function() {
    ;
  }).prototype = async._Zone.prototype;
  dart.addTypeTests(async._Zone);
  dart.addTypeCaches(async._Zone);
  async._Zone[dart.implements] = () => [async.Zone];
  dart.setMethodSignature(async._Zone, () => ({
    __proto__: dart.getMethods(async._Zone.__proto__),
    inSameErrorZone: dart.fnType(core.bool, [async.Zone])
  }));
  dart.setLibraryUri(async._Zone, I[29]);
  var _run$ = dart.privateName(async, "_CustomZone._run");
  var _runUnary$ = dart.privateName(async, "_CustomZone._runUnary");
  var _runBinary$ = dart.privateName(async, "_CustomZone._runBinary");
  var _registerCallback$ = dart.privateName(async, "_CustomZone._registerCallback");
  var _registerUnaryCallback$ = dart.privateName(async, "_CustomZone._registerUnaryCallback");
  var _registerBinaryCallback$ = dart.privateName(async, "_CustomZone._registerBinaryCallback");
  var _errorCallback$ = dart.privateName(async, "_CustomZone._errorCallback");
  var _scheduleMicrotask$ = dart.privateName(async, "_CustomZone._scheduleMicrotask");
  var _createTimer$ = dart.privateName(async, "_CustomZone._createTimer");
  var _createPeriodicTimer$ = dart.privateName(async, "_CustomZone._createPeriodicTimer");
  var _print$ = dart.privateName(async, "_CustomZone._print");
  var _fork$ = dart.privateName(async, "_CustomZone._fork");
  var _handleUncaughtError$ = dart.privateName(async, "_CustomZone._handleUncaughtError");
  var parent$ = dart.privateName(async, "_CustomZone.parent");
  var _map$2 = dart.privateName(async, "_CustomZone._map");
  var _delegateCache = dart.privateName(async, "_delegateCache");
  var _map$3 = dart.privateName(async, "_map");
  var _delegate = dart.privateName(async, "_delegate");
  async._CustomZone = class _CustomZone extends async._Zone {
    get [_run]() {
      return this[_run$];
    }
    set [_run](value) {
      this[_run$] = value;
    }
    get [_runUnary]() {
      return this[_runUnary$];
    }
    set [_runUnary](value) {
      this[_runUnary$] = value;
    }
    get [_runBinary]() {
      return this[_runBinary$];
    }
    set [_runBinary](value) {
      this[_runBinary$] = value;
    }
    get [_registerCallback]() {
      return this[_registerCallback$];
    }
    set [_registerCallback](value) {
      this[_registerCallback$] = value;
    }
    get [_registerUnaryCallback]() {
      return this[_registerUnaryCallback$];
    }
    set [_registerUnaryCallback](value) {
      this[_registerUnaryCallback$] = value;
    }
    get [_registerBinaryCallback]() {
      return this[_registerBinaryCallback$];
    }
    set [_registerBinaryCallback](value) {
      this[_registerBinaryCallback$] = value;
    }
    get [_errorCallback]() {
      return this[_errorCallback$];
    }
    set [_errorCallback](value) {
      this[_errorCallback$] = value;
    }
    get [_scheduleMicrotask]() {
      return this[_scheduleMicrotask$];
    }
    set [_scheduleMicrotask](value) {
      this[_scheduleMicrotask$] = value;
    }
    get [_createTimer]() {
      return this[_createTimer$];
    }
    set [_createTimer](value) {
      this[_createTimer$] = value;
    }
    get [_createPeriodicTimer]() {
      return this[_createPeriodicTimer$];
    }
    set [_createPeriodicTimer](value) {
      this[_createPeriodicTimer$] = value;
    }
    get [_print]() {
      return this[_print$];
    }
    set [_print](value) {
      this[_print$] = value;
    }
    get [_fork]() {
      return this[_fork$];
    }
    set [_fork](value) {
      this[_fork$] = value;
    }
    get [_handleUncaughtError]() {
      return this[_handleUncaughtError$];
    }
    set [_handleUncaughtError](value) {
      this[_handleUncaughtError$] = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get [_map$3]() {
      return this[_map$2];
    }
    set [_map$3](value) {
      super[_map$3] = value;
    }
    get [_delegate]() {
      let t128;
      t128 = this[_delegateCache];
      return t128 == null ? this[_delegateCache] = new async._ZoneDelegate.new(this) : t128;
    }
    get [_parentDelegate]() {
      return this.parent[_delegate];
    }
    get errorZone() {
      return this[_handleUncaughtError].zone;
    }
    runGuarded(f) {
      if (f == null) dart.nullFailed(I[73], 1160, 24, "f");
      try {
        this.run(dart.void, f);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    runUnaryGuarded(T, f, arg) {
      if (f == null) dart.nullFailed(I[73], 1168, 32, "f");
      try {
        this.runUnary(dart.void, T, f, arg);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    runBinaryGuarded(T1, T2, f, arg1, arg2) {
      if (f == null) dart.nullFailed(I[73], 1176, 38, "f");
      try {
        this.runBinary(dart.void, T1, T2, f, arg1, arg2);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    bindCallback(R, f) {
      if (f == null) dart.nullFailed(I[73], 1184, 37, "f");
      let registered = this.registerCallback(R, f);
      return dart.fn(() => this.run(R, registered), dart.fnType(R, []));
    }
    bindUnaryCallback(R, T, f) {
      if (f == null) dart.nullFailed(I[73], 1189, 53, "f");
      let registered = this.registerUnaryCallback(R, T, f);
      return dart.fn(arg => this.runUnary(R, T, registered, arg), dart.fnType(R, [T]));
    }
    bindBinaryCallback(R, T1, T2, f) {
      if (f == null) dart.nullFailed(I[73], 1195, 9, "f");
      let registered = this.registerBinaryCallback(R, T1, T2, f);
      return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, registered, arg1, arg2), dart.fnType(R, [T1, T2]));
    }
    bindCallbackGuarded(f) {
      if (f == null) dart.nullFailed(I[73], 1200, 44, "f");
      let registered = this.registerCallback(dart.void, f);
      return dart.fn(() => this.runGuarded(registered), T$.VoidTovoid());
    }
    bindUnaryCallbackGuarded(T, f) {
      if (f == null) dart.nullFailed(I[73], 1205, 53, "f");
      let registered = this.registerUnaryCallback(dart.void, T, f);
      return dart.fn(arg => this.runUnaryGuarded(T, registered, arg), dart.fnType(dart.void, [T]));
    }
    bindBinaryCallbackGuarded(T1, T2, f) {
      if (f == null) dart.nullFailed(I[73], 1211, 12, "f");
      let registered = this.registerBinaryCallback(dart.void, T1, T2, f);
      return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, registered, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
    }
    _get(key) {
      let result = this[_map$3][$_get](key);
      if (result != null || dart.test(this[_map$3][$containsKey](key))) return result;
      if (this.parent != null) {
        let value = this.parent._get(key);
        if (value != null) {
          this[_map$3][$_set](key, value);
        }
        return value;
      }
      if (!this[$_equals](async._rootZone)) dart.assertFailed(null, I[73], 1231, 12, "this == _rootZone");
      return null;
    }
    handleUncaughtError(error, stackTrace) {
      if (error == null) dart.nullFailed(I[73], 1237, 35, "error");
      if (stackTrace == null) dart.nullFailed(I[73], 1237, 53, "stackTrace");
      let implementation = this[_handleUncaughtError];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, error, stackTrace);
    }
    fork(opts) {
      let specification = opts && 'specification' in opts ? opts.specification : null;
      let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
      let implementation = this[_fork];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, specification, zoneValues);
    }
    run(R, f) {
      if (f == null) dart.nullFailed(I[73], 1254, 14, "f");
      let implementation = this[_run];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, implementation.zone, parentDelegate, this, f);
    }
    runUnary(R, T, f, arg) {
      if (f == null) dart.nullFailed(I[73], 1261, 22, "f");
      let implementation = this[_runUnary];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, T, implementation.zone, parentDelegate, this, f, arg);
    }
    runBinary(R, T1, T2, f, arg1, arg2) {
      if (f == null) dart.nullFailed(I[73], 1268, 28, "f");
      let implementation = this[_runBinary];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, T1, T2, implementation.zone, parentDelegate, this, f, arg1, arg2);
    }
    registerCallback(R, callback) {
      if (callback == null) dart.nullFailed(I[73], 1275, 41, "callback");
      let implementation = this[_registerCallback];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, implementation.zone, parentDelegate, this, callback);
    }
    registerUnaryCallback(R, T, callback) {
      if (callback == null) dart.nullFailed(I[73], 1282, 57, "callback");
      let implementation = this[_registerUnaryCallback];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, T, implementation.zone, parentDelegate, this, callback);
    }
    registerBinaryCallback(R, T1, T2, callback) {
      if (callback == null) dart.nullFailed(I[73], 1290, 9, "callback");
      let implementation = this[_registerBinaryCallback];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(R, T1, T2, implementation.zone, parentDelegate, this, callback);
    }
    errorCallback(error, stackTrace) {
      if (error == null) dart.nullFailed(I[73], 1297, 36, "error");
      _internal.checkNotNullable(core.Object, error, "error");
      let implementation = this[_errorCallback];
      let implementationZone = implementation.zone;
      if (implementationZone == async._rootZone) return null;
      let parentDelegate = implementationZone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementationZone, parentDelegate, this, error, stackTrace);
    }
    scheduleMicrotask(f) {
      if (f == null) dart.nullFailed(I[73], 1307, 31, "f");
      let implementation = this[_scheduleMicrotask];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, f);
    }
    createTimer(duration, f) {
      if (duration == null) dart.nullFailed(I[73], 1314, 30, "duration");
      if (f == null) dart.nullFailed(I[73], 1314, 45, "f");
      let implementation = this[_createTimer];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, duration, f);
    }
    createPeriodicTimer(duration, f) {
      if (duration == null) dart.nullFailed(I[73], 1321, 38, "duration");
      if (f == null) dart.nullFailed(I[73], 1321, 53, "f");
      let implementation = this[_createPeriodicTimer];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, duration, f);
    }
    print(line) {
      if (line == null) dart.nullFailed(I[73], 1328, 21, "line");
      let implementation = this[_print];
      let parentDelegate = implementation.zone[_parentDelegate];
      let handler = implementation.function;
      return handler(implementation.zone, parentDelegate, this, line);
    }
  };
  (async._CustomZone.new = function(parent, specification, _map) {
    if (parent == null) dart.nullFailed(I[73], 1078, 20, "parent");
    if (specification == null) dart.nullFailed(I[73], 1078, 46, "specification");
    if (_map == null) dart.nullFailed(I[73], 1078, 66, "_map");
    this[_delegateCache] = null;
    this[parent$] = parent;
    this[_map$2] = _map;
    this[_run$] = parent[_run];
    this[_runUnary$] = parent[_runUnary];
    this[_runBinary$] = parent[_runBinary];
    this[_registerCallback$] = parent[_registerCallback];
    this[_registerUnaryCallback$] = parent[_registerUnaryCallback];
    this[_registerBinaryCallback$] = parent[_registerBinaryCallback];
    this[_errorCallback$] = parent[_errorCallback];
    this[_scheduleMicrotask$] = parent[_scheduleMicrotask];
    this[_createTimer$] = parent[_createTimer];
    this[_createPeriodicTimer$] = parent[_createPeriodicTimer];
    this[_print$] = parent[_print];
    this[_fork$] = parent[_fork];
    this[_handleUncaughtError$] = parent[_handleUncaughtError];
    async._CustomZone.__proto__.new.call(this);
    let run = specification.run;
    if (run != null) {
      this[_run] = new async._RunNullaryZoneFunction.new(this, run);
    }
    let runUnary = specification.runUnary;
    if (runUnary != null) {
      this[_runUnary] = new async._RunUnaryZoneFunction.new(this, runUnary);
    }
    let runBinary = specification.runBinary;
    if (runBinary != null) {
      this[_runBinary] = new async._RunBinaryZoneFunction.new(this, runBinary);
    }
    let registerCallback = specification.registerCallback;
    if (registerCallback != null) {
      this[_registerCallback] = new async._RegisterNullaryZoneFunction.new(this, registerCallback);
    }
    let registerUnaryCallback = specification.registerUnaryCallback;
    if (registerUnaryCallback != null) {
      this[_registerUnaryCallback] = new async._RegisterUnaryZoneFunction.new(this, registerUnaryCallback);
    }
    let registerBinaryCallback = specification.registerBinaryCallback;
    if (registerBinaryCallback != null) {
      this[_registerBinaryCallback] = new async._RegisterBinaryZoneFunction.new(this, registerBinaryCallback);
    }
    let errorCallback = specification.errorCallback;
    if (errorCallback != null) {
      this[_errorCallback] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN()).new(this, errorCallback);
    }
    let scheduleMicrotask = specification.scheduleMicrotask;
    if (scheduleMicrotask != null) {
      this[_scheduleMicrotask] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid()).new(this, scheduleMicrotask);
    }
    let createTimer = specification.createTimer;
    if (createTimer != null) {
      this[_createTimer] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer()).new(this, createTimer);
    }
    let createPeriodicTimer = specification.createPeriodicTimer;
    if (createPeriodicTimer != null) {
      this[_createPeriodicTimer] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1()).new(this, createPeriodicTimer);
    }
    let print = specification.print;
    if (print != null) {
      this[_print] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1()).new(this, print);
    }
    let fork = specification.fork;
    if (fork != null) {
      this[_fork] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone()).new(this, fork);
    }
    let handleUncaughtError = specification.handleUncaughtError;
    if (handleUncaughtError != null) {
      this[_handleUncaughtError] = new (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2()).new(this, handleUncaughtError);
    }
  }).prototype = async._CustomZone.prototype;
  dart.addTypeTests(async._CustomZone);
  dart.addTypeCaches(async._CustomZone);
  dart.setMethodSignature(async._CustomZone, () => ({
    __proto__: dart.getMethods(async._CustomZone.__proto__),
    runGuarded: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    runUnaryGuarded: dart.gFnType(T => [dart.void, [dart.fnType(dart.void, [T]), T]], T => [dart.nullable(core.Object)]),
    runBinaryGuarded: dart.gFnType((T1, T2) => [dart.void, [dart.fnType(dart.void, [T1, T2]), T1, T2]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    bindUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindCallbackGuarded: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
    bindUnaryCallbackGuarded: dart.gFnType(T => [dart.fnType(dart.void, [T]), [dart.fnType(dart.void, [T])]], T => [dart.nullable(core.Object)]),
    bindBinaryCallbackGuarded: dart.gFnType((T1, T2) => [dart.fnType(dart.void, [T1, T2]), [dart.fnType(dart.void, [T1, T2])]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    handleUncaughtError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    fork: dart.fnType(async.Zone, [], {specification: dart.nullable(async.ZoneSpecification), zoneValues: dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))}, {}),
    run: dart.gFnType(R => [R, [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    runUnary: dart.gFnType((R, T) => [R, [dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    runBinary: dart.gFnType((R, T1, T2) => [R, [dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    errorCallback: dart.fnType(dart.nullable(async.AsyncError), [core.Object, dart.nullable(core.StackTrace)]),
    scheduleMicrotask: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    createTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [])]),
    createPeriodicTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [async.Timer])]),
    print: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(async._CustomZone, () => ({
    __proto__: dart.getGetters(async._CustomZone.__proto__),
    [_delegate]: async.ZoneDelegate,
    [_parentDelegate]: async.ZoneDelegate,
    errorZone: async.Zone
  }));
  dart.setLibraryUri(async._CustomZone, I[29]);
  dart.setFieldSignature(async._CustomZone, () => ({
    __proto__: dart.getFields(async._CustomZone.__proto__),
    [_run]: dart.fieldType(async._RunNullaryZoneFunction),
    [_runUnary]: dart.fieldType(async._RunUnaryZoneFunction),
    [_runBinary]: dart.fieldType(async._RunBinaryZoneFunction),
    [_registerCallback]: dart.fieldType(async._RegisterNullaryZoneFunction),
    [_registerUnaryCallback]: dart.fieldType(async._RegisterUnaryZoneFunction),
    [_registerBinaryCallback]: dart.fieldType(async._RegisterBinaryZoneFunction),
    [_errorCallback]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)]))),
    [_scheduleMicrotask]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])]))),
    [_createTimer]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])]))),
    [_createPeriodicTimer]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])]))),
    [_print]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String]))),
    [_fork]: dart.fieldType(async._ZoneFunction$(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))]))),
    [_handleUncaughtError]: dart.fieldType(async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace]))),
    [_delegateCache]: dart.fieldType(dart.nullable(async.ZoneDelegate)),
    parent: dart.finalFieldType(async._Zone),
    [_map$3]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))
  }));
  async._RootZone = class _RootZone extends async._Zone {
    get [_run]() {
      return C[45] || CT.C45;
    }
    get [_runUnary]() {
      return C[47] || CT.C47;
    }
    get [_runBinary]() {
      return C[49] || CT.C49;
    }
    get [_registerCallback]() {
      return C[51] || CT.C51;
    }
    get [_registerUnaryCallback]() {
      return C[53] || CT.C53;
    }
    get [_registerBinaryCallback]() {
      return C[55] || CT.C55;
    }
    get [_errorCallback]() {
      return C[57] || CT.C57;
    }
    get [_scheduleMicrotask]() {
      return C[59] || CT.C59;
    }
    get [_createTimer]() {
      return C[61] || CT.C61;
    }
    get [_createPeriodicTimer]() {
      return C[63] || CT.C63;
    }
    get [_print]() {
      return C[65] || CT.C65;
    }
    get [_fork]() {
      return C[67] || CT.C67;
    }
    get [_handleUncaughtError]() {
      return C[69] || CT.C69;
    }
    get parent() {
      return null;
    }
    get [_map$3]() {
      return async._RootZone._rootMap;
    }
    get [_delegate]() {
      let t131;
      t131 = async._RootZone._rootDelegate;
      return t131 == null ? async._RootZone._rootDelegate = new async._ZoneDelegate.new(this) : t131;
    }
    get [_parentDelegate]() {
      return this[_delegate];
    }
    get errorZone() {
      return this;
    }
    runGuarded(f) {
      if (f == null) dart.nullFailed(I[73], 1531, 24, "f");
      try {
        if (async._rootZone == async.Zone._current) {
          f();
          return;
        }
        async._rootRun(dart.void, null, null, this, f);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    runUnaryGuarded(T, f, arg) {
      if (f == null) dart.nullFailed(I[73], 1543, 32, "f");
      try {
        if (async._rootZone == async.Zone._current) {
          f(arg);
          return;
        }
        async._rootRunUnary(dart.void, T, null, null, this, f, arg);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    runBinaryGuarded(T1, T2, f, arg1, arg2) {
      if (f == null) dart.nullFailed(I[73], 1555, 38, "f");
      try {
        if (async._rootZone == async.Zone._current) {
          f(arg1, arg2);
          return;
        }
        async._rootRunBinary(dart.void, T1, T2, null, null, this, f, arg1, arg2);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this.handleUncaughtError(e, s);
        } else
          throw e$;
      }
    }
    bindCallback(R, f) {
      if (f == null) dart.nullFailed(I[73], 1567, 37, "f");
      return dart.fn(() => this.run(R, f), dart.fnType(R, []));
    }
    bindUnaryCallback(R, T, f) {
      if (f == null) dart.nullFailed(I[73], 1571, 53, "f");
      return dart.fn(arg => this.runUnary(R, T, f, arg), dart.fnType(R, [T]));
    }
    bindBinaryCallback(R, T1, T2, f) {
      if (f == null) dart.nullFailed(I[73], 1576, 9, "f");
      return dart.fn((arg1, arg2) => this.runBinary(R, T1, T2, f, arg1, arg2), dart.fnType(R, [T1, T2]));
    }
    bindCallbackGuarded(f) {
      if (f == null) dart.nullFailed(I[73], 1580, 44, "f");
      return dart.fn(() => this.runGuarded(f), T$.VoidTovoid());
    }
    bindUnaryCallbackGuarded(T, f) {
      if (f == null) dart.nullFailed(I[73], 1584, 53, "f");
      return dart.fn(arg => this.runUnaryGuarded(T, f, arg), dart.fnType(dart.void, [T]));
    }
    bindBinaryCallbackGuarded(T1, T2, f) {
      if (f == null) dart.nullFailed(I[73], 1589, 12, "f");
      return dart.fn((arg1, arg2) => this.runBinaryGuarded(T1, T2, f, arg1, arg2), dart.fnType(dart.void, [T1, T2]));
    }
    _get(key) {
      return null;
    }
    handleUncaughtError(error, stackTrace) {
      if (error == null) dart.nullFailed(I[73], 1597, 35, "error");
      if (stackTrace == null) dart.nullFailed(I[73], 1597, 53, "stackTrace");
      async._rootHandleUncaughtError(null, null, this, error, stackTrace);
    }
    fork(opts) {
      let specification = opts && 'specification' in opts ? opts.specification : null;
      let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
      return async._rootFork(null, null, this, specification, zoneValues);
    }
    run(R, f) {
      if (f == null) dart.nullFailed(I[73], 1606, 14, "f");
      if (async.Zone._current == async._rootZone) return f();
      return async._rootRun(R, null, null, this, f);
    }
    runUnary(R, T, f, arg) {
      if (f == null) dart.nullFailed(I[73], 1611, 22, "f");
      if (async.Zone._current == async._rootZone) return f(arg);
      return async._rootRunUnary(R, T, null, null, this, f, arg);
    }
    runBinary(R, T1, T2, f, arg1, arg2) {
      if (f == null) dart.nullFailed(I[73], 1616, 28, "f");
      if (async.Zone._current == async._rootZone) return f(arg1, arg2);
      return async._rootRunBinary(R, T1, T2, null, null, this, f, arg1, arg2);
    }
    registerCallback(R, f) {
      if (f == null) dart.nullFailed(I[73], 1621, 41, "f");
      return f;
    }
    registerUnaryCallback(R, T, f) {
      if (f == null) dart.nullFailed(I[73], 1623, 57, "f");
      return f;
    }
    registerBinaryCallback(R, T1, T2, f) {
      if (f == null) dart.nullFailed(I[73], 1626, 13, "f");
      return f;
    }
    errorCallback(error, stackTrace) {
      if (error == null) dart.nullFailed(I[73], 1629, 36, "error");
      return null;
    }
    scheduleMicrotask(f) {
      if (f == null) dart.nullFailed(I[73], 1631, 31, "f");
      async._rootScheduleMicrotask(null, null, this, f);
    }
    createTimer(duration, f) {
      if (duration == null) dart.nullFailed(I[73], 1635, 30, "duration");
      if (f == null) dart.nullFailed(I[73], 1635, 45, "f");
      return async.Timer._createTimer(duration, f);
    }
    createPeriodicTimer(duration, f) {
      if (duration == null) dart.nullFailed(I[73], 1639, 38, "duration");
      if (f == null) dart.nullFailed(I[73], 1639, 53, "f");
      return async.Timer._createPeriodicTimer(duration, f);
    }
    print(line) {
      if (line == null) dart.nullFailed(I[73], 1643, 21, "line");
      _internal.printToConsole(line);
    }
  };
  (async._RootZone.new = function() {
    async._RootZone.__proto__.new.call(this);
    ;
  }).prototype = async._RootZone.prototype;
  dart.addTypeTests(async._RootZone);
  dart.addTypeCaches(async._RootZone);
  dart.setMethodSignature(async._RootZone, () => ({
    __proto__: dart.getMethods(async._RootZone.__proto__),
    runGuarded: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    runUnaryGuarded: dart.gFnType(T => [dart.void, [dart.fnType(dart.void, [T]), T]], T => [dart.nullable(core.Object)]),
    runBinaryGuarded: dart.gFnType((T1, T2) => [dart.void, [dart.fnType(dart.void, [T1, T2]), T1, T2]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    bindUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    bindCallbackGuarded: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
    bindUnaryCallbackGuarded: dart.gFnType(T => [dart.fnType(dart.void, [T]), [dart.fnType(dart.void, [T])]], T => [dart.nullable(core.Object)]),
    bindBinaryCallbackGuarded: dart.gFnType((T1, T2) => [dart.fnType(dart.void, [T1, T2]), [dart.fnType(dart.void, [T1, T2])]], (T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    handleUncaughtError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
    fork: dart.fnType(async.Zone, [], {specification: dart.nullable(async.ZoneSpecification), zoneValues: dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))}, {}),
    run: dart.gFnType(R => [R, [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    runUnary: dart.gFnType((R, T) => [R, [dart.fnType(R, [T]), T]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    runBinary: dart.gFnType((R, T1, T2) => [R, [dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerCallback: dart.gFnType(R => [dart.fnType(R, []), [dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    registerUnaryCallback: dart.gFnType((R, T) => [dart.fnType(R, [T]), [dart.fnType(R, [T])]], (R, T) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    registerBinaryCallback: dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [dart.fnType(R, [T1, T2])]], (R, T1, T2) => [dart.nullable(core.Object), dart.nullable(core.Object), dart.nullable(core.Object)]),
    errorCallback: dart.fnType(dart.nullable(async.AsyncError), [core.Object, dart.nullable(core.StackTrace)]),
    scheduleMicrotask: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    createTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [])]),
    createPeriodicTimer: dart.fnType(async.Timer, [core.Duration, dart.fnType(dart.void, [async.Timer])]),
    print: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(async._RootZone, () => ({
    __proto__: dart.getGetters(async._RootZone.__proto__),
    [_run]: async._RunNullaryZoneFunction,
    [_runUnary]: async._RunUnaryZoneFunction,
    [_runBinary]: async._RunBinaryZoneFunction,
    [_registerCallback]: async._RegisterNullaryZoneFunction,
    [_registerUnaryCallback]: async._RegisterUnaryZoneFunction,
    [_registerBinaryCallback]: async._RegisterBinaryZoneFunction,
    [_errorCallback]: async._ZoneFunction$(dart.fnType(dart.nullable(async.AsyncError), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, dart.nullable(core.StackTrace)])),
    [_scheduleMicrotask]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(dart.void, [])])),
    [_createTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [])])),
    [_createPeriodicTimer]: async._ZoneFunction$(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, dart.fnType(dart.void, [async.Timer])])),
    [_print]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])),
    [_fork]: async._ZoneFunction$(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, dart.nullable(async.ZoneSpecification), dart.nullable(core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)))])),
    [_handleUncaughtError]: async._ZoneFunction$(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])),
    parent: dart.nullable(async._Zone),
    [_map$3]: core.Map$(dart.nullable(core.Object), dart.nullable(core.Object)),
    [_delegate]: async.ZoneDelegate,
    [_parentDelegate]: async.ZoneDelegate,
    errorZone: async.Zone
  }));
  dart.setLibraryUri(async._RootZone, I[29]);
  dart.defineLazy(async._RootZone, {
    /*async._RootZone._rootMap*/get _rootMap() {
      return new _js_helper.LinkedMap.new();
    },
    /*async._RootZone._rootDelegate*/get _rootDelegate() {
      return null;
    },
    set _rootDelegate(_) {}
  }, false);
  async.async = function _async(T, initGenerator) {
    if (initGenerator == null) dart.nullFailed(I[61], 25, 22, "initGenerator");
    let iter = null;
    let onValue = null;
    let onValue$35isSet = false;
    function onValue$35get() {
      return onValue$35isSet ? onValue : dart.throw(new _internal.LateError.localNI("onValue"));
    }
    function onValue$35set(t137) {
      if (t137 == null) dart.nullFailed(I[61], 27, 34, "null");
      onValue$35isSet = true;
      return onValue = t137;
    }
    let onError = null;
    let onError$35isSet = false;
    function onError$35get() {
      return onError$35isSet ? onError : dart.throw(new _internal.LateError.localNI("onError"));
    }
    function onError$35set(t142) {
      if (t142 == null) dart.nullFailed(I[61], 28, 45, "null");
      onError$35isSet = true;
      return onError = t142;
    }
    function onAwait(value) {
      let f = null;
      if (async._Future.is(value)) {
        f = value;
      } else if (async.Future.is(value)) {
        f = new (T$._FutureOfObjectN()).new();
        f[_chainForeignFuture](value);
      } else {
        f = new (T$._FutureOfObjectN()).value(value);
      }
      f = f[_thenAwait](T$.ObjectN(), onValue$35get(), onError$35get());
      return f;
    }
    onValue$35set(value => {
      let iteratorResult = iter.next(value);
      value = iteratorResult.value;
      return iteratorResult.done ? value : onAwait(value);
    });
    onError$35set((value, stackTrace) => {
      if (value == null) dart.nullFailed(I[61], 58, 14, "value");
      let iteratorResult = iter.throw(dart.createErrorWithStack(value, stackTrace));
      value = iteratorResult.value;
      return iteratorResult.done ? value : onAwait(value);
    });
    let zone = async.Zone.current;
    if (zone != async._rootZone) {
      onValue$35set(zone.registerUnaryCallback(T$.ObjectN(), T$.ObjectN(), onValue$35get()));
      onError$35set(zone.registerBinaryCallback(core.Object, core.Object, T$.StackTraceN(), onError$35get()));
    }
    let asyncFuture = new (async._Future$(T)).new();
    let isRunningAsEvent = false;
    function runBody() {
      try {
        iter = initGenerator()[Symbol.iterator]();
        let iteratorValue = iter.next(null);
        let value = iteratorValue.value;
        if (iteratorValue.done) {
          if (async.Future.is(value)) {
            if (async._Future.is(value)) {
              async._Future._chainCoreFuture(value, asyncFuture);
            } else {
              asyncFuture[_chainForeignFuture](value);
            }
          } else if (isRunningAsEvent) {
            asyncFuture[_completeWithValue](value);
          } else {
            asyncFuture[_asyncComplete](value);
          }
        } else {
          async._Future._chainCoreFuture(onAwait(value), asyncFuture);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (isRunningAsEvent) {
            async._completeWithErrorCallback(asyncFuture, e, s);
          } else {
            async._asyncCompleteWithErrorCallback(asyncFuture, e, s);
          }
        } else
          throw e$;
      }
    }
    if (dart.test(dart.startAsyncSynchronously)) {
      runBody();
      isRunningAsEvent = true;
    } else {
      isRunningAsEvent = true;
      async.scheduleMicrotask(runBody);
    }
    return asyncFuture;
  };
  async._invokeErrorHandler = function _invokeErrorHandler(errorHandler, error, stackTrace) {
    if (errorHandler == null) dart.nullFailed(I[62], 37, 14, "errorHandler");
    if (error == null) dart.nullFailed(I[62], 37, 35, "error");
    if (stackTrace == null) dart.nullFailed(I[62], 37, 53, "stackTrace");
    let handler = errorHandler;
    if (T$.NeverAndNeverTodynamic().is(handler)) {
      return dart.dcall(errorHandler, [error, stackTrace]);
    } else {
      return dart.dcall(errorHandler, [error]);
    }
  };
  async['FutureExtensions|onError'] = function FutureExtensions$124onError(T, E, $this, handleError, opts) {
    if ($this == null) dart.nullFailed(I[67], 763, 13, "#this");
    if (handleError == null) dart.nullFailed(I[67], 764, 19, "handleError");
    let test = opts && 'test' in opts ? opts.test : null;
    return $this.catchError(dart.fn((error, stackTrace) => {
      if (error == null) dart.nullFailed(I[67], 769, 17, "error");
      if (stackTrace == null) dart.nullFailed(I[67], 769, 35, "stackTrace");
      return handleError(E.as(error), stackTrace);
    }, dart.fnType(async.FutureOr$(T), [core.Object, core.StackTrace])), {test: dart.fn(error => {
        if (error == null) dart.nullFailed(I[67], 771, 23, "error");
        return E.is(error) && (test == null || dart.test(test(error)));
      }, T$.ObjectTobool())});
  };
  async['FutureExtensions|get#onError'] = function FutureExtensions$124get$35onError(T, $this) {
    if ($this == null) dart.nullFailed(I[67], 763, 13, "#this");
    return dart.fn((E, handleError, opts) => {
      if (handleError == null) dart.nullFailed(I[67], 764, 19, "handleError");
      let test = opts && 'test' in opts ? opts.test : null;
      return async['FutureExtensions|onError'](T, E, $this, handleError, {test: test});
    }, dart.gFnType(E => {
      var ETobool = () => (ETobool = dart.constFn(dart.fnType(core.bool, [E])))();
      var EToNbool = () => (EToNbool = dart.constFn(dart.nullable(ETobool())))();
      return [async.Future$(T), [dart.fnType(async.FutureOr$(T), [E, core.StackTrace])], {test: EToNbool()}, {}];
    }, E => {
      var ETobool = () => (ETobool = dart.constFn(dart.fnType(core.bool, [E])))();
      var EToNbool = () => (EToNbool = dart.constFn(dart.nullable(ETobool())))();
      return [core.Object];
    }));
  };
  async._completeWithErrorCallback = function _completeWithErrorCallback(result, error, stackTrace) {
    if (result == null) dart.nullFailed(I[67], 963, 13, "result");
    if (error == null) dart.nullFailed(I[67], 963, 28, "error");
    let replacement = async.Zone.current.errorCallback(error, stackTrace);
    if (replacement != null) {
      error = replacement.error;
      stackTrace = replacement.stackTrace;
    } else {
      stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
    }
    if (stackTrace == null) dart.throw("unreachable");
    result[_completeError](error, stackTrace);
  };
  async._asyncCompleteWithErrorCallback = function _asyncCompleteWithErrorCallback(result, error, stackTrace) {
    if (result == null) dart.nullFailed(I[67], 977, 13, "result");
    if (error == null) dart.nullFailed(I[67], 977, 28, "error");
    let replacement = async.Zone.current.errorCallback(error, stackTrace);
    if (replacement != null) {
      error = replacement.error;
      stackTrace = replacement.stackTrace;
    } else {
      stackTrace == null ? stackTrace = async.AsyncError.defaultStackTrace(error) : null;
    }
    if (stackTrace == null) {
      dart.throw("unreachable");
    }
    result[_asyncCompleteError](error, stackTrace);
  };
  async._registerErrorHandler = function _registerErrorHandler(errorHandler, zone) {
    if (errorHandler == null) dart.nullFailed(I[68], 833, 41, "errorHandler");
    if (zone == null) dart.nullFailed(I[68], 833, 60, "zone");
    if (T$.ObjectAndStackTraceTodynamic().is(errorHandler)) {
      return zone.registerBinaryCallback(dart.dynamic, core.Object, core.StackTrace, errorHandler);
    }
    if (T$.ObjectTodynamic().is(errorHandler)) {
      return zone.registerUnaryCallback(dart.dynamic, core.Object, errorHandler);
    }
    dart.throw(new core.ArgumentError.value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace" + " as arguments, and return a valid result"));
  };
  async._microtaskLoop = function _microtaskLoop() {
    for (let entry = async._nextCallback; entry != null; entry = async._nextCallback) {
      async._lastPriorityCallback = null;
      let next = entry.next;
      async._nextCallback = next;
      if (next == null) async._lastCallback = null;
      entry.callback();
    }
  };
  async._startMicrotaskLoop = function _startMicrotaskLoop() {
    async._isInCallbackLoop = true;
    try {
      async._microtaskLoop();
    } finally {
      async._lastPriorityCallback = null;
      async._isInCallbackLoop = false;
      if (async._nextCallback != null) {
        async._AsyncRun._scheduleImmediate(C[71] || CT.C71);
      }
    }
  };
  async._scheduleAsyncCallback = function _scheduleAsyncCallback(callback) {
    if (callback == null) dart.nullFailed(I[69], 63, 44, "callback");
    let newEntry = new async._AsyncCallbackEntry.new(callback);
    let lastCallback = async._lastCallback;
    if (lastCallback == null) {
      async._nextCallback = async._lastCallback = newEntry;
      if (!dart.test(async._isInCallbackLoop)) {
        async._AsyncRun._scheduleImmediate(C[71] || CT.C71);
      }
    } else {
      lastCallback.next = newEntry;
      async._lastCallback = newEntry;
    }
  };
  async._schedulePriorityAsyncCallback = function _schedulePriorityAsyncCallback(callback) {
    if (callback == null) dart.nullFailed(I[69], 83, 52, "callback");
    if (async._nextCallback == null) {
      async._scheduleAsyncCallback(callback);
      async._lastPriorityCallback = async._lastCallback;
      return;
    }
    let entry = new async._AsyncCallbackEntry.new(callback);
    let lastPriorityCallback = async._lastPriorityCallback;
    if (lastPriorityCallback == null) {
      entry.next = async._nextCallback;
      async._nextCallback = async._lastPriorityCallback = entry;
    } else {
      let next = lastPriorityCallback.next;
      entry.next = next;
      lastPriorityCallback.next = entry;
      async._lastPriorityCallback = entry;
      if (next == null) {
        async._lastCallback = entry;
      }
    }
  };
  async.scheduleMicrotask = function scheduleMicrotask(callback) {
    if (callback == null) dart.nullFailed(I[69], 129, 40, "callback");
    let currentZone = async.Zone._current;
    if (async._rootZone == currentZone) {
      async._rootScheduleMicrotask(null, null, async._rootZone, callback);
      return;
    }
    let implementation = currentZone[_scheduleMicrotask];
    if (async._rootZone == implementation.zone && dart.test(async._rootZone.inSameErrorZone(currentZone))) {
      async._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback(dart.void, callback));
      return;
    }
    async.Zone.current.scheduleMicrotask(async.Zone.current.bindCallbackGuarded(callback));
  };
  async._runGuarded = function _runGuarded(notificationHandler) {
    if (notificationHandler == null) return;
    try {
      notificationHandler();
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        async.Zone.current.handleUncaughtError(e, s);
      } else
        throw e$;
    }
  };
  async._nullDataHandler = function _nullDataHandler(value) {
  };
  async._nullErrorHandler = function _nullErrorHandler(error, stackTrace) {
    if (error == null) dart.nullFailed(I[65], 570, 31, "error");
    if (stackTrace == null) dart.nullFailed(I[65], 570, 49, "stackTrace");
    async.Zone.current.handleUncaughtError(error, stackTrace);
  };
  async._nullDoneHandler = function _nullDoneHandler() {
  };
  async._runUserCode = function _runUserCode(T, userCode, onSuccess, onError) {
    if (userCode == null) dart.nullFailed(I[70], 8, 19, "userCode");
    if (onSuccess == null) dart.nullFailed(I[70], 8, 31, "onSuccess");
    if (onError == null) dart.nullFailed(I[70], 9, 5, "onError");
    try {
      onSuccess(userCode());
    } catch (e$) {
      let e = dart.getThrown(e$);
      let s = dart.stackTrace(e$);
      if (core.Object.is(e)) {
        let replacement = async.Zone.current.errorCallback(e, s);
        if (replacement == null) {
          onError(e, s);
        } else {
          let error = replacement.error;
          let stackTrace = replacement.stackTrace;
          onError(error, stackTrace);
        }
      } else
        throw e$;
    }
  };
  async._cancelAndError = function _cancelAndError(subscription, future, error, stackTrace) {
    if (subscription == null) dart.nullFailed(I[70], 26, 41, "subscription");
    if (future == null) dart.nullFailed(I[70], 26, 63, "future");
    if (error == null) dart.nullFailed(I[70], 27, 12, "error");
    if (stackTrace == null) dart.nullFailed(I[70], 27, 30, "stackTrace");
    let cancelFuture = subscription.cancel();
    if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
      cancelFuture.whenComplete(dart.fn(() => future[_completeError](error, stackTrace), T$.VoidTovoid()));
    } else {
      future[_completeError](error, stackTrace);
    }
  };
  async._cancelAndErrorWithReplacement = function _cancelAndErrorWithReplacement(subscription, future, error, stackTrace) {
    if (subscription == null) dart.nullFailed(I[70], 36, 56, "subscription");
    if (future == null) dart.nullFailed(I[70], 37, 13, "future");
    if (error == null) dart.nullFailed(I[70], 37, 28, "error");
    if (stackTrace == null) dart.nullFailed(I[70], 37, 46, "stackTrace");
    let replacement = async.Zone.current.errorCallback(error, stackTrace);
    if (replacement != null) {
      error = replacement.error;
      stackTrace = replacement.stackTrace;
    }
    async._cancelAndError(subscription, future, error, stackTrace);
  };
  async._cancelAndErrorClosure = function _cancelAndErrorClosure(subscription, future) {
    if (subscription == null) dart.nullFailed(I[70], 48, 24, "subscription");
    if (future == null) dart.nullFailed(I[70], 48, 46, "future");
    return dart.fn((error, stackTrace) => {
      if (error == null) dart.nullFailed(I[70], 49, 18, "error");
      if (stackTrace == null) dart.nullFailed(I[70], 49, 36, "stackTrace");
      async._cancelAndError(subscription, future, error, stackTrace);
    }, T$.ObjectAndStackTraceTovoid());
  };
  async._cancelAndValue = function _cancelAndValue(subscription, future, value) {
    if (subscription == null) dart.nullFailed(I[70], 56, 41, "subscription");
    if (future == null) dart.nullFailed(I[70], 56, 63, "future");
    let cancelFuture = subscription.cancel();
    if (cancelFuture != null && cancelFuture != async.Future._nullFuture) {
      cancelFuture.whenComplete(dart.fn(() => future[_complete](value), T$.VoidTovoid()));
    } else {
      future[_complete](value);
    }
  };
  async._addErrorWithReplacement = function _addErrorWithReplacement(sink, error, stackTrace) {
    if (sink == null) dart.nullFailed(I[70], 170, 16, "sink");
    if (error == null) dart.nullFailed(I[70], 170, 29, "error");
    if (stackTrace == null) dart.nullFailed(I[70], 170, 47, "stackTrace");
    let replacement = async.Zone.current.errorCallback(error, stackTrace);
    if (replacement != null) {
      error = replacement.error;
      stackTrace = replacement.stackTrace;
    }
    sink[_addError](error, stackTrace);
  };
  async._rootHandleUncaughtError = function _rootHandleUncaughtError(self, parent, zone, error, stackTrace) {
    if (zone == null) dart.nullFailed(I[73], 1336, 70, "zone");
    if (error == null) dart.nullFailed(I[73], 1337, 12, "error");
    if (stackTrace == null) dart.nullFailed(I[73], 1337, 30, "stackTrace");
    async._schedulePriorityAsyncCallback(dart.fn(() => {
      async._rethrow(error, stackTrace);
    }, T$.VoidTovoid()));
  };
  async._rethrow = function _rethrow(error, stackTrace) {
    if (error == null) dart.nullFailed(I[61], 199, 22, "error");
    if (stackTrace == null) dart.nullFailed(I[61], 199, 40, "stackTrace");
    throw dart.createErrorWithStack(error, stackTrace);
  };
  async._rootRun = function _rootRun(R, self, parent, zone, f) {
    if (zone == null) dart.nullFailed(I[73], 1345, 54, "zone");
    if (f == null) dart.nullFailed(I[73], 1345, 62, "f");
    if (async.Zone._current == zone) return f();
    if (!async._Zone.is(zone)) {
      dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
    }
    let old = async.Zone._enter(zone);
    try {
      return f();
    } finally {
      async.Zone._leave(old);
    }
  };
  async._rootRunUnary = function _rootRunUnary(R, T, self, parent, zone, f, arg) {
    if (zone == null) dart.nullFailed(I[73], 1361, 44, "zone");
    if (f == null) dart.nullFailed(I[73], 1361, 52, "f");
    if (async.Zone._current == zone) return f(arg);
    if (!async._Zone.is(zone)) {
      dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
    }
    let old = async.Zone._enter(zone);
    try {
      return f(arg);
    } finally {
      async.Zone._leave(old);
    }
  };
  async._rootRunBinary = function _rootRunBinary(R, T1, T2, self, parent, zone, f, arg1, arg2) {
    if (zone == null) dart.nullFailed(I[73], 1376, 68, "zone");
    if (f == null) dart.nullFailed(I[73], 1377, 7, "f");
    if (async.Zone._current == zone) return f(arg1, arg2);
    if (!async._Zone.is(zone)) {
      dart.throw(new core.ArgumentError.value(zone, "zone", "Can only run in platform zones"));
    }
    let old = async.Zone._enter(zone);
    try {
      return f(arg1, arg2);
    } finally {
      async.Zone._leave(old);
    }
  };
  async._rootRegisterCallback = function _rootRegisterCallback(R, self, parent, zone, f) {
    if (self == null) dart.nullFailed(I[73], 1393, 10, "self");
    if (parent == null) dart.nullFailed(I[73], 1393, 29, "parent");
    if (zone == null) dart.nullFailed(I[73], 1393, 42, "zone");
    if (f == null) dart.nullFailed(I[73], 1393, 50, "f");
    return f;
  };
  async._rootRegisterUnaryCallback = function _rootRegisterUnaryCallback(R, T, self, parent, zone, f) {
    if (self == null) dart.nullFailed(I[73], 1398, 10, "self");
    if (parent == null) dart.nullFailed(I[73], 1398, 29, "parent");
    if (zone == null) dart.nullFailed(I[73], 1398, 42, "zone");
    if (f == null) dart.nullFailed(I[73], 1398, 50, "f");
    return f;
  };
  async._rootRegisterBinaryCallback = function _rootRegisterBinaryCallback(R, T1, T2, self, parent, zone, f) {
    if (self == null) dart.nullFailed(I[73], 1403, 10, "self");
    if (parent == null) dart.nullFailed(I[73], 1403, 29, "parent");
    if (zone == null) dart.nullFailed(I[73], 1403, 42, "zone");
    if (f == null) dart.nullFailed(I[73], 1403, 50, "f");
    return f;
  };
  async._rootErrorCallback = function _rootErrorCallback(self, parent, zone, error, stackTrace) {
    if (self == null) dart.nullFailed(I[73], 1407, 37, "self");
    if (parent == null) dart.nullFailed(I[73], 1407, 56, "parent");
    if (zone == null) dart.nullFailed(I[73], 1407, 69, "zone");
    if (error == null) dart.nullFailed(I[73], 1408, 16, "error");
    return null;
  };
  async._rootScheduleMicrotask = function _rootScheduleMicrotask(self, parent, zone, f) {
    if (zone == null) dart.nullFailed(I[73], 1412, 44, "zone");
    if (f == null) dart.nullFailed(I[73], 1412, 55, "f");
    if (async._rootZone != zone) {
      let hasErrorHandler = !dart.test(async._rootZone.inSameErrorZone(zone));
      if (hasErrorHandler) {
        f = zone.bindCallbackGuarded(f);
      } else {
        f = zone.bindCallback(dart.void, f);
      }
    }
    async._scheduleAsyncCallback(f);
  };
  async._rootCreateTimer = function _rootCreateTimer(self, parent, zone, duration, callback) {
    if (self == null) dart.nullFailed(I[73], 1424, 29, "self");
    if (parent == null) dart.nullFailed(I[73], 1424, 48, "parent");
    if (zone == null) dart.nullFailed(I[73], 1424, 61, "zone");
    if (duration == null) dart.nullFailed(I[73], 1425, 14, "duration");
    if (callback == null) dart.nullFailed(I[73], 1425, 40, "callback");
    if (async._rootZone != zone) {
      callback = zone.bindCallback(dart.void, callback);
    }
    return async.Timer._createTimer(duration, callback);
  };
  async._rootCreatePeriodicTimer = function _rootCreatePeriodicTimer(self, parent, zone, duration, callback) {
    if (self == null) dart.nullFailed(I[73], 1432, 37, "self");
    if (parent == null) dart.nullFailed(I[73], 1432, 56, "parent");
    if (zone == null) dart.nullFailed(I[73], 1432, 69, "zone");
    if (duration == null) dart.nullFailed(I[73], 1433, 14, "duration");
    if (callback == null) dart.nullFailed(I[73], 1433, 29, "callback");
    if (async._rootZone != zone) {
      callback = zone.bindUnaryCallback(dart.void, async.Timer, callback);
    }
    return async.Timer._createPeriodicTimer(duration, callback);
  };
  async._rootPrint = function _rootPrint(self, parent, zone, line) {
    if (self == null) dart.nullFailed(I[73], 1440, 22, "self");
    if (parent == null) dart.nullFailed(I[73], 1440, 41, "parent");
    if (zone == null) dart.nullFailed(I[73], 1440, 54, "zone");
    if (line == null) dart.nullFailed(I[73], 1440, 67, "line");
    _internal.printToConsole(line);
  };
  async._printToZone = function _printToZone(line) {
    if (line == null) dart.nullFailed(I[73], 1444, 26, "line");
    async.Zone.current.print(line);
  };
  async._rootFork = function _rootFork(self, parent, zone, specification, zoneValues) {
    if (zone == null) dart.nullFailed(I[73], 1448, 55, "zone");
    if (!async._Zone.is(zone)) {
      dart.throw(new core.ArgumentError.value(zone, "zone", "Can only fork a platform zone"));
    }
    _internal.printToZone = C[72] || CT.C72;
    if (specification == null) {
      specification = C[73] || CT.C73;
    } else if (!async._ZoneSpecification.is(specification)) {
      specification = async.ZoneSpecification.from(specification);
    }
    let valueMap = null;
    if (zoneValues == null) {
      valueMap = zone[_map$3];
    } else {
      valueMap = T$.HashMapOfObjectN$ObjectN().from(zoneValues);
    }
    if (specification == null) dart.throw("unreachable");
    return new async._CustomZone.new(zone, specification, valueMap);
  };
  async.runZoned = function runZoned(R, body, opts) {
    if (body == null) dart.nullFailed(I[73], 1691, 17, "body");
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    _internal.checkNotNullable(dart.fnType(R, []), body, "body");
    if (onError != null) {
      if (!T$.ObjectAndStackTraceTovoid().is(onError)) {
        if (T$.ObjectTovoid().is(onError)) {
          let originalOnError = onError;
          onError = dart.fn((error, stack) => {
            if (error == null) dart.nullFailed(I[73], 1701, 27, "error");
            if (stack == null) dart.nullFailed(I[73], 1701, 45, "stack");
            return originalOnError(error);
          }, T$.ObjectAndStackTraceTovoid());
        } else {
          dart.throw(new core.ArgumentError.value(onError, "onError", "Must be Function(Object) or Function(Object, StackTrace)"));
        }
      }
      return R.as(async.runZonedGuarded(R, body, onError, {zoneSpecification: zoneSpecification, zoneValues: zoneValues}));
    }
    return async._runZoned(R, body, zoneValues, zoneSpecification);
  };
  async.runZonedGuarded = function runZonedGuarded(R, body, onError, opts) {
    if (body == null) dart.nullFailed(I[73], 1751, 25, "body");
    if (onError == null) dart.nullFailed(I[73], 1751, 38, "onError");
    let zoneValues = opts && 'zoneValues' in opts ? opts.zoneValues : null;
    let zoneSpecification = opts && 'zoneSpecification' in opts ? opts.zoneSpecification : null;
    _internal.checkNotNullable(dart.fnType(R, []), body, "body");
    _internal.checkNotNullable(T$.ObjectAndStackTraceTovoid(), onError, "onError");
    let parentZone = async.Zone._current;
    let errorHandler = dart.fn((self, parent, zone, error, stackTrace) => {
      if (self == null) dart.nullFailed(I[73], 1756, 51, "self");
      if (parent == null) dart.nullFailed(I[73], 1756, 70, "parent");
      if (zone == null) dart.nullFailed(I[73], 1757, 12, "zone");
      if (error == null) dart.nullFailed(I[73], 1757, 25, "error");
      if (stackTrace == null) dart.nullFailed(I[73], 1757, 43, "stackTrace");
      try {
        parentZone.runBinary(dart.void, core.Object, core.StackTrace, onError, error, stackTrace);
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          if (core.identical(e, error)) {
            parent.handleUncaughtError(zone, error, stackTrace);
          } else {
            parent.handleUncaughtError(zone, e, s);
          }
        } else
          throw e$;
      }
    }, T$.ZoneAndZoneDelegateAndZone__Tovoid$2());
    if (zoneSpecification == null) {
      zoneSpecification = new async._ZoneSpecification.new({handleUncaughtError: errorHandler});
    } else {
      zoneSpecification = async.ZoneSpecification.from(zoneSpecification, {handleUncaughtError: errorHandler});
    }
    try {
      return async._runZoned(R, body, zoneValues, zoneSpecification);
    } catch (e) {
      let error = dart.getThrown(e);
      let stackTrace = dart.stackTrace(e);
      if (core.Object.is(error)) {
        onError(error, stackTrace);
      } else
        throw e;
    }
    return null;
  };
  async._runZoned = function _runZoned(R, body, zoneValues, specification) {
    if (body == null) dart.nullFailed(I[73], 1784, 18, "body");
    return async.Zone.current.fork({specification: specification, zoneValues: zoneValues}).run(R, body);
  };
  dart.defineLazy(async, {
    /*async._nextCallback*/get _nextCallback() {
      return null;
    },
    set _nextCallback(_) {},
    /*async._lastCallback*/get _lastCallback() {
      return null;
    },
    set _lastCallback(_) {},
    /*async._lastPriorityCallback*/get _lastPriorityCallback() {
      return null;
    },
    set _lastPriorityCallback(_) {},
    /*async._isInCallbackLoop*/get _isInCallbackLoop() {
      return false;
    },
    set _isInCallbackLoop(_) {},
    /*async._rootZone*/get _rootZone() {
      return C[44] || CT.C44;
    }
  }, false);
  var _map$4 = dart.privateName(collection, "_HashSet._map");
  var _modifications$2 = dart.privateName(collection, "_HashSet._modifications");
  var _keyMap$ = dart.privateName(collection, "_keyMap");
  var _map$5 = dart.privateName(collection, "_map");
  var _modifications$3 = dart.privateName(collection, "_modifications");
  var _newSet = dart.privateName(collection, "_newSet");
  var _newSimilarSet = dart.privateName(collection, "_newSimilarSet");
  const _is_SetMixin_default = Symbol('_is_SetMixin_default');
  collection.SetMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
    class SetMixin extends core.Object {
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
      get isEmpty() {
        return this.length === 0;
      }
      get isNotEmpty() {
        return this.length !== 0;
      }
      cast(R) {
        return core.Set.castFrom(E, R, this);
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(I[75], 47, 38, "other");
        return FollowedByIterableOfE().firstEfficient(this, other);
      }
      whereType(T) {
        return new (_internal.WhereTypeIterable$(T)).new(this);
      }
      clear() {
        this.removeAll(this.toList());
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(I[75], 56, 27, "elements");
        for (let element of elements)
          this.add(element);
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(I[75], 60, 36, "elements");
        for (let element of elements)
          this.remove(element);
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(I[75], 64, 36, "elements");
        let toRemove = this.toSet();
        for (let o of elements) {
          toRemove.remove(o);
        }
        this.removeAll(toRemove);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[75], 74, 25, "test");
        let toRemove = T$.JSArrayOfObjectN().of([]);
        for (let element of this) {
          if (dart.test(test(element))) toRemove[$add](element);
        }
        this.removeAll(toRemove);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[75], 82, 25, "test");
        let toRemove = T$.JSArrayOfObjectN().of([]);
        for (let element of this) {
          if (!dart.test(test(element))) toRemove[$add](element);
        }
        this.removeAll(toRemove);
      }
      containsAll(other) {
        if (other == null) dart.nullFailed(I[75], 90, 38, "other");
        for (let o of other) {
          if (!dart.test(this.contains(o))) return false;
        }
        return true;
      }
      union(other) {
        let t151;
        SetOfE().as(other);
        if (other == null) dart.nullFailed(I[75], 97, 23, "other");
        t151 = this.toSet();
        return (() => {
          t151.addAll(other);
          return t151;
        })();
      }
      intersection(other) {
        if (other == null) dart.nullFailed(I[75], 101, 36, "other");
        let result = this.toSet();
        for (let element of this) {
          if (!dart.test(other.contains(element))) result.remove(element);
        }
        return result;
      }
      difference(other) {
        if (other == null) dart.nullFailed(I[75], 109, 34, "other");
        let result = this.toSet();
        for (let element of this) {
          if (dart.test(other.contains(element))) result.remove(element);
        }
        return result;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[75], 117, 24, "growable");
        return ListOfE().of(this, {growable: growable});
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[75], 120, 24, "f");
        return new (_internal.EfficientLengthMappedIterable$(E, T)).new(this, f);
      }
      get single() {
        if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
        let it = this.iterator;
        if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
        let result = it.current;
        return result;
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
      where(f) {
        if (f == null) dart.nullFailed(I[75], 136, 26, "f");
        return new (WhereIterableOfE()).new(this, f);
      }
      expand(T, f) {
        if (f == null) dart.nullFailed(I[75], 138, 37, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[75], 141, 21, "f");
        for (let element of this)
          f(element);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[75], 145, 14, "combine");
        let iterator = this.iterator;
        if (!dart.test(iterator.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let value = iterator.current;
        while (dart.test(iterator.moveNext())) {
          value = combine(value, iterator.current);
        }
        return value;
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[75], 157, 31, "combine");
        let value = initialValue;
        for (let element of this)
          value = combine(value, element);
        return value;
      }
      every(f) {
        if (f == null) dart.nullFailed(I[75], 163, 19, "f");
        for (let element of this) {
          if (!dart.test(f(element))) return false;
        }
        return true;
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[75], 170, 23, "separator");
        let iterator = this.iterator;
        if (!dart.test(iterator.moveNext())) return "";
        let buffer = new core.StringBuffer.new();
        if (separator == null || separator === "") {
          do {
            buffer.write(iterator.current);
          } while (dart.test(iterator.moveNext()));
        } else {
          buffer.write(iterator.current);
          while (dart.test(iterator.moveNext())) {
            buffer.write(separator);
            buffer.write(iterator.current);
          }
        }
        return buffer.toString();
      }
      any(test) {
        if (test == null) dart.nullFailed(I[75], 188, 17, "test");
        for (let element of this) {
          if (dart.test(test(element))) return true;
        }
        return false;
      }
      take(n) {
        if (n == null) dart.nullFailed(I[75], 195, 24, "n");
        return TakeIterableOfE().new(this, n);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[75], 199, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      skip(n) {
        if (n == null) dart.nullFailed(I[75], 203, 24, "n");
        return SkipIterableOfE().new(this, n);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[75], 207, 30, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      get first() {
        let it = this.iterator;
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        return it.current;
      }
      get last() {
        let it = this.iterator;
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let result = null;
        do {
          result = it.current;
        } while (dart.test(it.moveNext()));
        return result;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[75], 231, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        for (let element of this) {
          if (dart.test(test(element))) return element;
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[75], 239, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t154) {
          result$35isSet = true;
          return result = t154;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[75], 253, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t159) {
          result$35isSet = true;
          return result = t159;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            if (foundMatching) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[75], 270, 19, "index");
        _internal.checkNotNullable(core.int, index, "index");
        core.RangeError.checkNotNegative(index, "index");
        let elementIndex = 0;
        for (let element of this) {
          if (index === elementIndex) return element;
          elementIndex = elementIndex + 1;
        }
        dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
      }
    }
    (SetMixin.new = function() {
      ;
    }).prototype = SetMixin.prototype;
    dart.addTypeTests(SetMixin);
    SetMixin.prototype[_is_SetMixin_default] = true;
    dart.addTypeCaches(SetMixin);
    SetMixin[dart.implements] = () => [core.Set$(E)];
    dart.setMethodSignature(SetMixin, () => ({
      __proto__: dart.getMethods(SetMixin.__proto__),
      cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)]),
      intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      join: dart.fnType(core.String, [], [core.String]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      elementAt: dart.fnType(E, [core.int]),
      [$elementAt]: dart.fnType(E, [core.int])
    }));
    dart.setGetterSignature(SetMixin, () => ({
      __proto__: dart.getGetters(SetMixin.__proto__),
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      single: E,
      [$single]: E,
      first: E,
      [$first]: E,
      last: E,
      [$last]: E
    }));
    dart.setLibraryUri(SetMixin, I[24]);
    dart.defineExtensionMethods(SetMixin, [
      'cast',
      'followedBy',
      'whereType',
      'toList',
      'map',
      'toString',
      'where',
      'expand',
      'forEach',
      'reduce',
      'fold',
      'every',
      'join',
      'any',
      'take',
      'takeWhile',
      'skip',
      'skipWhile',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'elementAt'
    ]);
    dart.defineExtensionAccessors(SetMixin, [
      'isEmpty',
      'isNotEmpty',
      'single',
      'first',
      'last'
    ]);
    return SetMixin;
  });
  collection.SetMixin = collection.SetMixin$();
  dart.addTypeTests(collection.SetMixin, _is_SetMixin_default);
  const _is__SetBase_default = Symbol('_is__SetBase_default');
  collection._SetBase$ = dart.generic(E => {
    const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
    (Object_SetMixin$36.new = function() {
    }).prototype = Object_SetMixin$36.prototype;
    dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(E));
    class _SetBase extends Object_SetMixin$36 {
      cast(R) {
        return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSimilarSet)});
      }
      difference(other) {
        if (other == null) dart.nullFailed(I[75], 323, 34, "other");
        let result = this[_newSet]();
        for (let element of this) {
          if (!dart.test(other.contains(element))) result.add(element);
        }
        return result;
      }
      intersection(other) {
        if (other == null) dart.nullFailed(I[75], 331, 36, "other");
        let result = this[_newSet]();
        for (let element of this) {
          if (dart.test(other.contains(element))) result.add(element);
        }
        return result;
      }
      toSet() {
        let t151;
        t151 = this[_newSet]();
        return (() => {
          t151.addAll(this);
          return t151;
        })();
      }
    }
    (_SetBase.new = function() {
      ;
    }).prototype = _SetBase.prototype;
    dart.addTypeTests(_SetBase);
    _SetBase.prototype[_is__SetBase_default] = true;
    dart.addTypeCaches(_SetBase);
    dart.setMethodSignature(_SetBase, () => ({
      __proto__: dart.getMethods(_SetBase.__proto__),
      cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), [])
    }));
    dart.setLibraryUri(_SetBase, I[24]);
    dart.defineExtensionMethods(_SetBase, ['cast', 'toSet']);
    return _SetBase;
  });
  collection._SetBase = collection._SetBase$();
  dart.addTypeTests(collection._SetBase, _is__SetBase_default);
  const _is__InternalSet_default = Symbol('_is__InternalSet_default');
  collection._InternalSet$ = dart.generic(E => {
    var DartIteratorOfE = () => (DartIteratorOfE = dart.constFn(_js_helper.DartIterator$(E)))();
    class _InternalSet extends collection._SetBase$(E) {
      get length() {
        return this[_map$5].size;
      }
      get isEmpty() {
        return this[_map$5].size == 0;
      }
      get isNotEmpty() {
        return this[_map$5].size != 0;
      }
      get iterator() {
        return new (DartIteratorOfE()).new(this[Symbol.iterator]());
      }
      [Symbol.iterator]() {
        let self = this;
        let iterator = self[_map$5].values();
        let modifications = self[_modifications$3];
        return {
          next() {
            if (modifications != self[_modifications$3]) {
              throw new core.ConcurrentModificationError.new(self);
            }
            return iterator.next();
          }
        };
      }
    }
    (_InternalSet.new = function() {
      _InternalSet.__proto__.new.call(this);
      ;
    }).prototype = _InternalSet.prototype;
    dart.addTypeTests(_InternalSet);
    _InternalSet.prototype[_is__InternalSet_default] = true;
    dart.addTypeCaches(_InternalSet);
    dart.setMethodSignature(_InternalSet, () => ({
      __proto__: dart.getMethods(_InternalSet.__proto__),
      [Symbol.iterator]: dart.fnType(dart.dynamic, [])
    }));
    dart.setGetterSignature(_InternalSet, () => ({
      __proto__: dart.getGetters(_InternalSet.__proto__),
      length: core.int,
      [$length]: core.int,
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(_InternalSet, I[24]);
    dart.defineExtensionAccessors(_InternalSet, ['length', 'isEmpty', 'isNotEmpty', 'iterator']);
    return _InternalSet;
  });
  collection._InternalSet = collection._InternalSet$();
  dart.addTypeTests(collection._InternalSet, _is__InternalSet_default);
  const _is__HashSet_default = Symbol('_is__HashSet_default');
  collection._HashSet$ = dart.generic(E => {
    var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class _HashSet extends collection._InternalSet$(E) {
      get [_map$5]() {
        return this[_map$4];
      }
      set [_map$5](value) {
        super[_map$5] = value;
      }
      get [_modifications$3]() {
        return this[_modifications$2];
      }
      set [_modifications$3](value) {
        this[_modifications$2] = value;
      }
      [_newSet]() {
        return new (_HashSetOfE()).new();
      }
      [_newSimilarSet](R) {
        return new (collection._HashSet$(R)).new();
      }
      contains(key) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let k = key;
          let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
          if (buckets != null) {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              k = buckets[i];
              if (dart.equals(k, key)) return true;
            }
          }
          return false;
        }
        return this[_map$5].has(key);
      }
      lookup(key) {
        if (key == null) return null;
        if (key[$_equals] !== dart.identityEquals) {
          let k = key;
          let buckets = this[_keyMap$].get(dart.hashCode(k) & 0x3ffffff);
          if (buckets != null) {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              k = buckets[i];
              if (dart.equals(k, key)) return k;
            }
          }
          return null;
        }
        return this[_map$5].has(key) ? key : null;
      }
      add(key) {
        E.as(key);
        let map = this[_map$5];
        if (key == null) {
          if (dart.test(map.has(null))) return false;
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let keyMap = this[_keyMap$];
          let k = key;
          let hash = dart.hashCode(k) & 0x3ffffff;
          let buckets = keyMap.get(hash);
          if (buckets == null) {
            keyMap.set(hash, [key]);
          } else {
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              k = buckets[i];
              if (dart.equals(k, key)) return false;
            }
            buckets.push(key);
          }
        } else if (dart.test(map.has(key))) {
          return false;
        }
        map.add(key);
        this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        return true;
      }
      addAll(objects) {
        IterableOfE().as(objects);
        if (objects == null) dart.nullFailed(I[74], 247, 27, "objects");
        let map = this[_map$5];
        let length = map.size;
        for (let key of objects) {
          if (key == null) {
            key = null;
          } else if (key[$_equals] !== dart.identityEquals) {
            key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
          }
          map.add(key);
        }
        if (length !== map.size) {
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        }
      }
      remove(key) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          let k = key;
          let hash = dart.hashCode(k) & 0x3ffffff;
          let buckets = this[_keyMap$].get(hash);
          if (buckets == null) return false;
          for (let i = 0, n = buckets.length;;) {
            k = buckets[i];
            if (dart.equals(k, key)) {
              key = k;
              if (n === 1) {
                this[_keyMap$].delete(hash);
              } else {
                buckets.splice(i, 1);
              }
              break;
            }
            if ((i = i + 1) >= n) return false;
          }
        }
        let map = this[_map$5];
        if (map.delete(key)) {
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
          return true;
        }
        return false;
      }
      clear() {
        let map = this[_map$5];
        if (map.size > 0) {
          map.clear();
          this[_keyMap$].clear();
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        }
      }
    }
    (_HashSet.new = function() {
      this[_map$4] = new Set();
      this[_keyMap$] = new Map();
      this[_modifications$2] = 0;
      _HashSet.__proto__.new.call(this);
      ;
    }).prototype = _HashSet.prototype;
    dart.addTypeTests(_HashSet);
    _HashSet.prototype[_is__HashSet_default] = true;
    dart.addTypeCaches(_HashSet);
    _HashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
    dart.setMethodSignature(_HashSet, () => ({
      __proto__: dart.getMethods(_HashSet.__proto__),
      [_newSet]: dart.fnType(core.Set$(E), []),
      [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_HashSet, I[24]);
    dart.setFieldSignature(_HashSet, () => ({
      __proto__: dart.getFields(_HashSet.__proto__),
      [_map$5]: dart.finalFieldType(dart.dynamic),
      [_keyMap$]: dart.finalFieldType(dart.nullable(core.Object)),
      [_modifications$3]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_HashSet, ['contains']);
    return _HashSet;
  });
  collection._HashSet = collection._HashSet$();
  dart.addTypeTests(collection._HashSet, _is__HashSet_default);
  const _is__ImmutableSet_default = Symbol('_is__ImmutableSet_default');
  collection._ImmutableSet$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class _ImmutableSet extends collection._HashSet$(E) {
      add(value) {
        E.as(value);
        return dart.throw(collection._ImmutableSet._unsupported());
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(I[74], 325, 27, "elements");
        return dart.throw(collection._ImmutableSet._unsupported());
      }
      clear() {
        return dart.throw(collection._ImmutableSet._unsupported());
      }
      remove(value) {
        return dart.throw(collection._ImmutableSet._unsupported());
      }
      static _unsupported() {
        return new core.UnsupportedError.new("Cannot modify unmodifiable set");
      }
    }
    (_ImmutableSet.from = function(entries) {
      if (entries == null) dart.nullFailed(I[74], 310, 33, "entries");
      _ImmutableSet.__proto__.new.call(this);
      let map = this[_map$5];
      for (let key of entries) {
        if (key == null) {
          key = null;
        } else if (key[$_equals] !== dart.identityEquals) {
          key = _js_helper.putLinkedMapKey(key, this[_keyMap$]);
        }
        map.add(key);
      }
    }).prototype = _ImmutableSet.prototype;
    dart.addTypeTests(_ImmutableSet);
    _ImmutableSet.prototype[_is__ImmutableSet_default] = true;
    dart.addTypeCaches(_ImmutableSet);
    dart.setLibraryUri(_ImmutableSet, I[24]);
    return _ImmutableSet;
  });
  collection._ImmutableSet = collection._ImmutableSet$();
  dart.addTypeTests(collection._ImmutableSet, _is__ImmutableSet_default);
  var _map$6 = dart.privateName(collection, "_IdentityHashSet._map");
  var _modifications$4 = dart.privateName(collection, "_IdentityHashSet._modifications");
  const _is__IdentityHashSet_default = Symbol('_is__IdentityHashSet_default');
  collection._IdentityHashSet$ = dart.generic(E => {
    var _IdentityHashSetOfE = () => (_IdentityHashSetOfE = dart.constFn(collection._IdentityHashSet$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class _IdentityHashSet extends collection._InternalSet$(E) {
      get [_map$5]() {
        return this[_map$6];
      }
      set [_map$5](value) {
        super[_map$5] = value;
      }
      get [_modifications$3]() {
        return this[_modifications$4];
      }
      set [_modifications$3](value) {
        this[_modifications$4] = value;
      }
      [_newSet]() {
        return new (_IdentityHashSetOfE()).new();
      }
      [_newSimilarSet](R) {
        return new (collection._IdentityHashSet$(R)).new();
      }
      contains(element) {
        return this[_map$5].has(element);
      }
      lookup(element) {
        return E.is(element) && this[_map$5].has(element) ? element : null;
      }
      add(element) {
        E.as(element);
        let map = this[_map$5];
        if (map.has(element)) return false;
        map.add(element);
        this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        return true;
      }
      addAll(objects) {
        IterableOfE().as(objects);
        if (objects == null) dart.nullFailed(I[74], 366, 27, "objects");
        let map = this[_map$5];
        let length = map.size;
        for (let key of objects) {
          map.add(key);
        }
        if (length !== map.size) {
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        }
      }
      remove(element) {
        if (this[_map$5].delete(element)) {
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
          return true;
        }
        return false;
      }
      clear() {
        let map = this[_map$5];
        if (map.size > 0) {
          map.clear();
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        }
      }
    }
    (_IdentityHashSet.new = function() {
      this[_map$6] = new Set();
      this[_modifications$4] = 0;
      _IdentityHashSet.__proto__.new.call(this);
      ;
    }).prototype = _IdentityHashSet.prototype;
    dart.addTypeTests(_IdentityHashSet);
    _IdentityHashSet.prototype[_is__IdentityHashSet_default] = true;
    dart.addTypeCaches(_IdentityHashSet);
    _IdentityHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
    dart.setMethodSignature(_IdentityHashSet, () => ({
      __proto__: dart.getMethods(_IdentityHashSet.__proto__),
      [_newSet]: dart.fnType(core.Set$(E), []),
      [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_IdentityHashSet, I[24]);
    dart.setFieldSignature(_IdentityHashSet, () => ({
      __proto__: dart.getFields(_IdentityHashSet.__proto__),
      [_map$5]: dart.finalFieldType(dart.dynamic),
      [_modifications$3]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(_IdentityHashSet, ['contains']);
    return _IdentityHashSet;
  });
  collection._IdentityHashSet = collection._IdentityHashSet$();
  dart.addTypeTests(collection._IdentityHashSet, _is__IdentityHashSet_default);
  var _validKey$0 = dart.privateName(collection, "_validKey");
  var _equals$0 = dart.privateName(collection, "_equals");
  var _hashCode$0 = dart.privateName(collection, "_hashCode");
  var _modifications$5 = dart.privateName(collection, "_CustomHashSet._modifications");
  var _map$7 = dart.privateName(collection, "_CustomHashSet._map");
  const _is__CustomHashSet_default = Symbol('_is__CustomHashSet_default');
  collection._CustomHashSet$ = dart.generic(E => {
    var _CustomHashSetOfE = () => (_CustomHashSetOfE = dart.constFn(collection._CustomHashSet$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class _CustomHashSet extends collection._InternalSet$(E) {
      get [_modifications$3]() {
        return this[_modifications$5];
      }
      set [_modifications$3](value) {
        this[_modifications$5] = value;
      }
      get [_map$5]() {
        return this[_map$7];
      }
      set [_map$5](value) {
        super[_map$5] = value;
      }
      [_newSet]() {
        return new (_CustomHashSetOfE()).new(this[_equals$0], this[_hashCode$0]);
      }
      [_newSimilarSet](R) {
        return new (collection._HashSet$(R)).new();
      }
      contains(key) {
        let t161;
        if (E.is(key)) {
          let buckets = this[_keyMap$].get((t161 = key, this[_hashCode$0](t161)) & 0x3ffffff);
          if (buckets != null) {
            let equals = this[_equals$0];
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.test(equals(k, key))) return true;
            }
          }
        }
        return false;
      }
      lookup(key) {
        let t161;
        if (E.is(key)) {
          let buckets = this[_keyMap$].get((t161 = key, this[_hashCode$0](t161)) & 0x3ffffff);
          if (buckets != null) {
            let equals = this[_equals$0];
            for (let i = 0, n = buckets.length; i < n; i = i + 1) {
              let k = buckets[i];
              if (dart.test(equals(k, key))) return k;
            }
          }
        }
        return null;
      }
      add(key) {
        let t161;
        E.as(key);
        let keyMap = this[_keyMap$];
        let hash = (t161 = key, this[_hashCode$0](t161)) & 0x3ffffff;
        let buckets = keyMap.get(hash);
        if (buckets == null) {
          keyMap.set(hash, [key]);
        } else {
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) return false;
          }
          buckets.push(key);
        }
        this[_map$5].add(key);
        this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        return true;
      }
      addAll(objects) {
        IterableOfE().as(objects);
        if (objects == null) dart.nullFailed(I[74], 500, 27, "objects");
        for (let element of objects)
          this.add(element);
      }
      remove(key) {
        let t161;
        if (E.is(key)) {
          let hash = (t161 = key, this[_hashCode$0](t161)) & 0x3ffffff;
          let keyMap = this[_keyMap$];
          let buckets = keyMap.get(hash);
          if (buckets == null) return false;
          let equals = this[_equals$0];
          for (let i = 0, n = buckets.length; i < n; i = i + 1) {
            let k = buckets[i];
            if (dart.test(equals(k, key))) {
              if (n === 1) {
                keyMap.delete(hash);
              } else {
                buckets.splice(i, 1);
              }
              this[_map$5].delete(k);
              this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
              return true;
            }
          }
        }
        return false;
      }
      clear() {
        let map = this[_map$5];
        if (map.size > 0) {
          map.clear();
          this[_keyMap$].clear();
          this[_modifications$3] = this[_modifications$3] + 1 & 67108863;
        }
      }
    }
    (_CustomHashSet.new = function(_equals, _hashCode) {
      if (_equals == null) dart.nullFailed(I[74], 448, 23, "_equals");
      if (_hashCode == null) dart.nullFailed(I[74], 448, 37, "_hashCode");
      this[_modifications$5] = 0;
      this[_map$7] = new Set();
      this[_keyMap$] = new Map();
      this[_equals$0] = _equals;
      this[_hashCode$0] = _hashCode;
      _CustomHashSet.__proto__.new.call(this);
      ;
    }).prototype = _CustomHashSet.prototype;
    dart.addTypeTests(_CustomHashSet);
    _CustomHashSet.prototype[_is__CustomHashSet_default] = true;
    dart.addTypeCaches(_CustomHashSet);
    _CustomHashSet[dart.implements] = () => [collection.HashSet$(E), collection.LinkedHashSet$(E)];
    dart.setMethodSignature(_CustomHashSet, () => ({
      __proto__: dart.getMethods(_CustomHashSet.__proto__),
      [_newSet]: dart.fnType(core.Set$(E), []),
      [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_CustomHashSet, I[24]);
    dart.setFieldSignature(_CustomHashSet, () => ({
      __proto__: dart.getFields(_CustomHashSet.__proto__),
      [_equals$0]: dart.fieldType(dart.fnType(core.bool, [E, E])),
      [_hashCode$0]: dart.fieldType(dart.fnType(core.int, [E])),
      [_modifications$3]: dart.fieldType(core.int),
      [_map$5]: dart.finalFieldType(dart.dynamic),
      [_keyMap$]: dart.finalFieldType(dart.nullable(core.Object))
    }));
    dart.defineExtensionMethods(_CustomHashSet, ['contains']);
    return _CustomHashSet;
  });
  collection._CustomHashSet = collection._CustomHashSet$();
  dart.addTypeTests(collection._CustomHashSet, _is__CustomHashSet_default);
  const _is__CustomKeyHashSet_default = Symbol('_is__CustomKeyHashSet_default');
  collection._CustomKeyHashSet$ = dart.generic(E => {
    var _CustomKeyHashSetOfE = () => (_CustomKeyHashSetOfE = dart.constFn(collection._CustomKeyHashSet$(E)))();
    class _CustomKeyHashSet extends collection._CustomHashSet$(E) {
      [_newSet]() {
        return new (_CustomKeyHashSetOfE()).new(this[_equals$0], this[_hashCode$0], this[_validKey$0]);
      }
      [_newSimilarSet](R) {
        return new (collection._HashSet$(R)).new();
      }
      contains(element) {
        let t161;
        if (!dart.test((t161 = element, this[_validKey$0](t161)))) return false;
        return super.contains(element);
      }
      lookup(element) {
        let t161;
        if (!dart.test((t161 = element, this[_validKey$0](t161)))) return null;
        return super.lookup(element);
      }
      remove(element) {
        let t161;
        if (!dart.test((t161 = element, this[_validKey$0](t161)))) return false;
        return super.remove(element);
      }
    }
    (_CustomKeyHashSet.new = function(equals, hashCode, _validKey) {
      if (equals == null) dart.nullFailed(I[74], 396, 34, "equals");
      if (hashCode == null) dart.nullFailed(I[74], 396, 53, "hashCode");
      if (_validKey == null) dart.nullFailed(I[74], 396, 68, "_validKey");
      this[_validKey$0] = _validKey;
      _CustomKeyHashSet.__proto__.new.call(this, equals, hashCode);
      ;
    }).prototype = _CustomKeyHashSet.prototype;
    dart.addTypeTests(_CustomKeyHashSet);
    _CustomKeyHashSet.prototype[_is__CustomKeyHashSet_default] = true;
    dart.addTypeCaches(_CustomKeyHashSet);
    dart.setMethodSignature(_CustomKeyHashSet, () => ({
      __proto__: dart.getMethods(_CustomKeyHashSet.__proto__),
      [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_CustomKeyHashSet, I[24]);
    dart.setFieldSignature(_CustomKeyHashSet, () => ({
      __proto__: dart.getFields(_CustomKeyHashSet.__proto__),
      [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.nullable(core.Object)]))
    }));
    dart.defineExtensionMethods(_CustomKeyHashSet, ['contains']);
    return _CustomKeyHashSet;
  });
  collection._CustomKeyHashSet = collection._CustomKeyHashSet$();
  dart.addTypeTests(collection._CustomKeyHashSet, _is__CustomKeyHashSet_default);
  var _source = dart.privateName(collection, "_source");
  const _is_UnmodifiableListView_default = Symbol('_is_UnmodifiableListView_default');
  collection.UnmodifiableListView$ = dart.generic(E => {
    class UnmodifiableListView extends _internal.UnmodifiableListBase$(E) {
      cast(R) {
        return new (collection.UnmodifiableListView$(R)).new(this[_source][$cast](R));
      }
      get length() {
        return this[_source][$length];
      }
      set length(value) {
        super.length = value;
      }
      _get(index) {
        if (index == null) dart.nullFailed(I[76], 23, 21, "index");
        return this[_source][$elementAt](index);
      }
    }
    (UnmodifiableListView.new = function(source) {
      if (source == null) dart.nullFailed(I[76], 18, 36, "source");
      this[_source] = source;
      ;
    }).prototype = UnmodifiableListView.prototype;
    dart.addTypeTests(UnmodifiableListView);
    UnmodifiableListView.prototype[_is_UnmodifiableListView_default] = true;
    dart.addTypeCaches(UnmodifiableListView);
    dart.setMethodSignature(UnmodifiableListView, () => ({
      __proto__: dart.getMethods(UnmodifiableListView.__proto__),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int])
    }));
    dart.setGetterSignature(UnmodifiableListView, () => ({
      __proto__: dart.getGetters(UnmodifiableListView.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(UnmodifiableListView, I[24]);
    dart.setFieldSignature(UnmodifiableListView, () => ({
      __proto__: dart.getFields(UnmodifiableListView.__proto__),
      [_source]: dart.finalFieldType(core.Iterable$(E))
    }));
    dart.defineExtensionMethods(UnmodifiableListView, ['cast', '_get']);
    dart.defineExtensionAccessors(UnmodifiableListView, ['length']);
    return UnmodifiableListView;
  });
  collection.UnmodifiableListView = collection.UnmodifiableListView$();
  dart.addTypeTests(collection.UnmodifiableListView, _is_UnmodifiableListView_default);
  const _is_HashMap_default = Symbol('_is_HashMap_default');
  collection.HashMap$ = dart.generic((K, V) => {
    class HashMap extends core.Object {
      static new(opts) {
        let t161, t161$, t161$0;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
        let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
        if (isValidKey == null) {
          if (hashCode == null) {
            if (equals == null) {
              if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
                return new (_js_helper.IdentityMap$(K, V)).new();
              }
              return new (_js_helper.LinkedMap$(K, V)).new();
            }
            hashCode = C[74] || CT.C74;
          } else if ((C[75] || CT.C75) === hashCode && (C[76] || CT.C76) === equals) {
            return new (_js_helper.IdentityMap$(K, V)).new();
          }
          return new (_js_helper.CustomHashMap$(K, V)).new((t161 = equals, t161 == null ? C[77] || CT.C77 : t161), hashCode);
        }
        return new (_js_helper.CustomKeyHashMap$(K, V)).new((t161$ = equals, t161$ == null ? C[77] || CT.C77 : t161$), (t161$0 = hashCode, t161$0 == null ? C[74] || CT.C74 : t161$0), isValidKey);
      }
      static from(other) {
        if (other == null) dart.nullFailed(I[77], 101, 46, "other");
        let result = new (_js_helper.LinkedMap$(K, V)).new();
        other[$forEach](dart.fn((k, v) => {
          result[$_set](K.as(k), V.as(v));
        }, T$.dynamicAnddynamicTovoid()));
        return result;
      }
      static of(other) {
        let t161;
        if (other == null) dart.nullFailed(I[77], 110, 32, "other");
        t161 = new (_js_helper.LinkedMap$(K, V)).new();
        return (() => {
          t161[$addAll](other);
          return t161;
        })();
      }
      static fromIterable(iterable, opts) {
        if (iterable == null) dart.nullFailed(I[77], 123, 41, "iterable");
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let map = new (_js_helper.LinkedMap$(K, V)).new();
        collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
        return map;
      }
      static fromIterables(keys, values) {
        if (keys == null) dart.nullFailed(I[77], 139, 45, "keys");
        if (values == null) dart.nullFailed(I[77], 139, 63, "values");
        let map = new (_js_helper.LinkedMap$(K, V)).new();
        collection.MapBase._fillMapWithIterables(map, keys, values);
        return map;
      }
      static fromEntries(entries) {
        let t161;
        if (entries == null) dart.nullFailed(I[77], 153, 56, "entries");
        t161 = new (_js_helper.LinkedMap$(K, V)).new();
        return (() => {
          t161[$addEntries](entries);
          return t161;
        })();
      }
    }
    (HashMap[dart.mixinNew] = function() {
    }).prototype = HashMap.prototype;
    HashMap.prototype[dart.isMap] = true;
    dart.addTypeTests(HashMap);
    HashMap.prototype[_is_HashMap_default] = true;
    dart.addTypeCaches(HashMap);
    HashMap[dart.implements] = () => [core.Map$(K, V)];
    dart.setLibraryUri(HashMap, I[24]);
    return HashMap;
  });
  collection.HashMap = collection.HashMap$();
  dart.addTypeTests(collection.HashMap, _is_HashMap_default);
  const _is_HashSet_default = Symbol('_is_HashSet_default');
  collection.HashSet$ = dart.generic(E => {
    class HashSet extends core.Object {
      static new(opts) {
        let t161, t161$, t161$0, t161$1;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
        let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
        if (isValidKey == null) {
          if (hashCode == null) {
            if (equals == null) {
              if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
                return new (collection._IdentityHashSet$(E)).new();
              }
              return new (collection._HashSet$(E)).new();
            }
          } else if ((C[75] || CT.C75) === hashCode && (C[76] || CT.C76) === equals) {
            return new (collection._IdentityHashSet$(E)).new();
          }
          return new (collection._CustomHashSet$(E)).new((t161 = equals, t161 == null ? C[77] || CT.C77 : t161), (t161$ = hashCode, t161$ == null ? C[74] || CT.C74 : t161$));
        }
        return new (collection._CustomKeyHashSet$(E)).new((t161$0 = equals, t161$0 == null ? C[77] || CT.C77 : t161$0), (t161$1 = hashCode, t161$1 == null ? C[74] || CT.C74 : t161$1), isValidKey);
      }
      static from(elements) {
        if (elements == null) dart.nullFailed(I[78], 93, 42, "elements");
        let result = new (collection._HashSet$(E)).new();
        for (let e of elements) {
          result.add(E.as(e));
        }
        return result;
      }
      static of(elements) {
        let t161;
        if (elements == null) dart.nullFailed(I[78], 107, 34, "elements");
        t161 = new (collection._HashSet$(E)).new();
        return (() => {
          t161.addAll(elements);
          return t161;
        })();
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (HashSet[dart.mixinNew] = function() {
    }).prototype = HashSet.prototype;
    dart.addTypeTests(HashSet);
    HashSet.prototype[_is_HashSet_default] = true;
    dart.addTypeCaches(HashSet);
    HashSet[dart.implements] = () => [core.Set$(E)];
    dart.setLibraryUri(HashSet, I[24]);
    return HashSet;
  });
  collection.HashSet = collection.HashSet$();
  dart.addTypeTests(collection.HashSet, _is_HashSet_default);
  const _is_IterableMixin_default = Symbol('_is_IterableMixin_default');
  collection.IterableMixin$ = dart.generic(E => {
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EfficientLengthIterableOfE = () => (EfficientLengthIterableOfE = dart.constFn(_internal.EfficientLengthIterable$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var TakeIterableOfE = () => (TakeIterableOfE = dart.constFn(_internal.TakeIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var SkipIterableOfE = () => (SkipIterableOfE = dart.constFn(_internal.SkipIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var ETodynamic = () => (ETodynamic = dart.constFn(dart.fnType(dart.dynamic, [E])))();
    class IterableMixin extends core.Object {
      cast(R) {
        return core.Iterable.castFrom(E, R, this);
      }
      map(T, f) {
        if (f == null) dart.nullFailed(I[39], 17, 24, "f");
        return _internal.MappedIterable$(E, T).new(this, f);
      }
      where(f) {
        if (f == null) dart.nullFailed(I[39], 19, 26, "f");
        return new (WhereIterableOfE()).new(this, f);
      }
      whereType(T) {
        return new (_internal.WhereTypeIterable$(T)).new(this);
      }
      expand(T, f) {
        if (f == null) dart.nullFailed(I[39], 23, 37, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(I[39], 26, 38, "other");
        let self = this;
        if (EfficientLengthIterableOfE().is(self)) {
          return FollowedByIterableOfE().firstEfficient(self, other);
        }
        return new (FollowedByIterableOfE()).new(this, other);
      }
      contains(element) {
        for (let e of this) {
          if (dart.equals(e, element)) return true;
        }
        return false;
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[39], 43, 21, "f");
        for (let element of this)
          f(element);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[39], 47, 14, "combine");
        let iterator = this[$iterator];
        if (!dart.test(iterator.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let value = iterator.current;
        while (dart.test(iterator.moveNext())) {
          value = combine(value, iterator.current);
        }
        return value;
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[39], 59, 31, "combine");
        let value = initialValue;
        for (let element of this)
          value = combine(value, element);
        return value;
      }
      every(f) {
        if (f == null) dart.nullFailed(I[39], 65, 19, "f");
        for (let element of this) {
          if (!dart.test(f(element))) return false;
        }
        return true;
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[39], 72, 23, "separator");
        let iterator = this[$iterator];
        if (!dart.test(iterator.moveNext())) return "";
        let buffer = new core.StringBuffer.new();
        if (separator == null || separator === "") {
          do {
            buffer.write(dart.str(iterator.current));
          } while (dart.test(iterator.moveNext()));
        } else {
          buffer.write(dart.str(iterator.current));
          while (dart.test(iterator.moveNext())) {
            buffer.write(separator);
            buffer.write(dart.str(iterator.current));
          }
        }
        return buffer.toString();
      }
      any(test) {
        if (test == null) dart.nullFailed(I[39], 90, 17, "test");
        for (let element of this) {
          if (dart.test(test(element))) return true;
        }
        return false;
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[39], 97, 24, "growable");
        return ListOfE().from(this, {growable: growable});
      }
      toSet() {
        return LinkedHashSetOfE().from(this);
      }
      get length() {
        if (!!_internal.EfficientLengthIterable.is(this)) dart.assertFailed(null, I[39], 103, 12, "this is! EfficientLengthIterable");
        let count = 0;
        let it = this[$iterator];
        while (dart.test(it.moveNext())) {
          count = count + 1;
        }
        return count;
      }
      get isEmpty() {
        return !dart.test(this[$iterator].moveNext());
      }
      get isNotEmpty() {
        return !dart.test(this.isEmpty);
      }
      take(count) {
        if (count == null) dart.nullFailed(I[39], 116, 24, "count");
        return TakeIterableOfE().new(this, count);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[39], 120, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[39], 124, 24, "count");
        return SkipIterableOfE().new(this, count);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[39], 128, 30, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      get first() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        return it.current;
      }
      get last() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) {
          dart.throw(_internal.IterableElementError.noElement());
        }
        let result = null;
        do {
          result = it.current;
        } while (dart.test(it.moveNext()));
        return result;
      }
      get single() {
        let it = this[$iterator];
        if (!dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.noElement());
        let result = it.current;
        if (dart.test(it.moveNext())) dart.throw(_internal.IterableElementError.tooMany());
        return result;
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[39], 160, 21, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        for (let element of this) {
          if (dart.test(test(element))) return element;
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[39], 168, 20, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t164) {
          result$35isSet = true;
          return result = t164;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[39], 182, 22, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let result = null;
        let result$35isSet = false;
        function result$35get() {
          return result$35isSet ? result : dart.throw(new _internal.LateError.localNI("result"));
        }
        dart.fn(result$35get, VoidToE());
        function result$35set(t169) {
          result$35isSet = true;
          return result = t169;
        }
        dart.fn(result$35set, ETodynamic());
        let foundMatching = false;
        for (let element of this) {
          if (dart.test(test(element))) {
            if (foundMatching) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            result$35set(element);
            foundMatching = true;
          }
        }
        if (foundMatching) return result$35get();
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[39], 199, 19, "index");
        _internal.checkNotNullable(core.int, index, "index");
        core.RangeError.checkNotNegative(index, "index");
        let elementIndex = 0;
        for (let element of this) {
          if (index === elementIndex) return element;
          elementIndex = elementIndex + 1;
        }
        dart.throw(new core.IndexError.new(index, this, "index", null, elementIndex));
      }
      toString() {
        return collection.IterableBase.iterableToShortString(this, "(", ")");
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (IterableMixin.new = function() {
      ;
    }).prototype = IterableMixin.prototype;
    IterableMixin.prototype[dart.isIterable] = true;
    dart.addTypeTests(IterableMixin);
    IterableMixin.prototype[_is_IterableMixin_default] = true;
    dart.addTypeCaches(IterableMixin);
    IterableMixin[dart.implements] = () => [core.Iterable$(E)];
    dart.setMethodSignature(IterableMixin, () => ({
      __proto__: dart.getMethods(IterableMixin.__proto__),
      cast: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Iterable$(R), []], R => [dart.nullable(core.Object)]),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      join: dart.fnType(core.String, [], [core.String]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), []),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      elementAt: dart.fnType(E, [core.int]),
      [$elementAt]: dart.fnType(E, [core.int])
    }));
    dart.setGetterSignature(IterableMixin, () => ({
      __proto__: dart.getGetters(IterableMixin.__proto__),
      length: core.int,
      [$length]: core.int,
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      first: E,
      [$first]: E,
      last: E,
      [$last]: E,
      single: E,
      [$single]: E
    }));
    dart.setLibraryUri(IterableMixin, I[24]);
    dart.defineExtensionMethods(IterableMixin, [
      'cast',
      'map',
      'where',
      'whereType',
      'expand',
      'followedBy',
      'contains',
      'forEach',
      'reduce',
      'fold',
      'every',
      'join',
      'any',
      'toList',
      'toSet',
      'take',
      'takeWhile',
      'skip',
      'skipWhile',
      'firstWhere',
      'lastWhere',
      'singleWhere',
      'elementAt',
      'toString'
    ]);
    dart.defineExtensionAccessors(IterableMixin, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last',
      'single'
    ]);
    return IterableMixin;
  });
  collection.IterableMixin = collection.IterableMixin$();
  dart.addTypeTests(collection.IterableMixin, _is_IterableMixin_default);
  var _state$ = dart.privateName(collection, "_state");
  var _iterator$0 = dart.privateName(collection, "_iterator");
  var _move = dart.privateName(collection, "_move");
  const _is_HasNextIterator_default = Symbol('_is_HasNextIterator_default');
  collection.HasNextIterator$ = dart.generic(E => {
    class HasNextIterator extends core.Object {
      get hasNext() {
        if (this[_state$] === 2) this[_move]();
        return this[_state$] === 0;
      }
      next() {
        if (!dart.test(this.hasNext)) dart.throw(new core.StateError.new("No more elements"));
        if (!(this[_state$] === 0)) dart.assertFailed(null, I[79], 30, 12, "_state == _HAS_NEXT_AND_NEXT_IN_CURRENT");
        let result = this[_iterator$0].current;
        this[_move]();
        return result;
      }
      [_move]() {
        if (dart.test(this[_iterator$0].moveNext())) {
          this[_state$] = 0;
        } else {
          this[_state$] = 1;
        }
      }
    }
    (HasNextIterator.new = function(_iterator) {
      if (_iterator == null) dart.nullFailed(I[79], 19, 24, "_iterator");
      this[_state$] = 2;
      this[_iterator$0] = _iterator;
      ;
    }).prototype = HasNextIterator.prototype;
    dart.addTypeTests(HasNextIterator);
    HasNextIterator.prototype[_is_HasNextIterator_default] = true;
    dart.addTypeCaches(HasNextIterator);
    dart.setMethodSignature(HasNextIterator, () => ({
      __proto__: dart.getMethods(HasNextIterator.__proto__),
      next: dart.fnType(E, []),
      [_move]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(HasNextIterator, () => ({
      __proto__: dart.getGetters(HasNextIterator.__proto__),
      hasNext: core.bool
    }));
    dart.setLibraryUri(HasNextIterator, I[24]);
    dart.setFieldSignature(HasNextIterator, () => ({
      __proto__: dart.getFields(HasNextIterator.__proto__),
      [_iterator$0]: dart.fieldType(core.Iterator$(E)),
      [_state$]: dart.fieldType(core.int)
    }));
    return HasNextIterator;
  });
  collection.HasNextIterator = collection.HasNextIterator$();
  dart.defineLazy(collection.HasNextIterator, {
    /*collection.HasNextIterator._HAS_NEXT_AND_NEXT_IN_CURRENT*/get _HAS_NEXT_AND_NEXT_IN_CURRENT() {
      return 0;
    },
    /*collection.HasNextIterator._NO_NEXT*/get _NO_NEXT() {
      return 1;
    },
    /*collection.HasNextIterator._NOT_MOVED_YET*/get _NOT_MOVED_YET() {
      return 2;
    }
  }, false);
  dart.addTypeTests(collection.HasNextIterator, _is_HasNextIterator_default);
  const _is_LinkedHashMap_default = Symbol('_is_LinkedHashMap_default');
  collection.LinkedHashMap$ = dart.generic((K, V) => {
    class LinkedHashMap extends core.Object {
      static new(opts) {
        let t171, t171$, t171$0;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
        let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
        if (isValidKey == null) {
          if (hashCode == null) {
            if (equals == null) {
              if (dart.wrapType(K) === dart.wrapType(core.String) || dart.wrapType(K) === dart.wrapType(core.int)) {
                return new (_js_helper.IdentityMap$(K, V)).new();
              }
              return new (_js_helper.LinkedMap$(K, V)).new();
            }
            hashCode = C[74] || CT.C74;
          } else if ((C[75] || CT.C75) === hashCode && (C[76] || CT.C76) === equals) {
            return new (_js_helper.IdentityMap$(K, V)).new();
          }
          return new (_js_helper.CustomHashMap$(K, V)).new((t171 = equals, t171 == null ? C[77] || CT.C77 : t171), hashCode);
        }
        return new (_js_helper.CustomKeyHashMap$(K, V)).new((t171$ = equals, t171$ == null ? C[77] || CT.C77 : t171$), (t171$0 = hashCode, t171$0 == null ? C[74] || CT.C74 : t171$0), isValidKey);
      }
      static from(other) {
        if (other == null) dart.nullFailed(I[80], 85, 52, "other");
        let result = new (_js_helper.LinkedMap$(K, V)).new();
        other[$forEach](dart.fn((k, v) => {
          result[$_set](K.as(k), V.as(v));
        }, T$.dynamicAnddynamicTovoid()));
        return result;
      }
      static of(other) {
        let t171;
        if (other == null) dart.nullFailed(I[80], 94, 38, "other");
        t171 = new (_js_helper.LinkedMap$(K, V)).new();
        return (() => {
          t171[$addAll](other);
          return t171;
        })();
      }
      static fromIterable(iterable, opts) {
        if (iterable == null) dart.nullFailed(I[80], 108, 47, "iterable");
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let map = new (_js_helper.LinkedMap$(K, V)).new();
        collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
        return map;
      }
      static fromIterables(keys, values) {
        if (keys == null) dart.nullFailed(I[80], 124, 51, "keys");
        if (values == null) dart.nullFailed(I[80], 124, 69, "values");
        let map = new (_js_helper.LinkedMap$(K, V)).new();
        collection.MapBase._fillMapWithIterables(map, keys, values);
        return map;
      }
      static fromEntries(entries) {
        let t171;
        if (entries == null) dart.nullFailed(I[80], 138, 62, "entries");
        t171 = new (_js_helper.LinkedMap$(K, V)).new();
        return (() => {
          t171[$addEntries](entries);
          return t171;
        })();
      }
    }
    (LinkedHashMap[dart.mixinNew] = function() {
    }).prototype = LinkedHashMap.prototype;
    LinkedHashMap.prototype[dart.isMap] = true;
    dart.addTypeTests(LinkedHashMap);
    LinkedHashMap.prototype[_is_LinkedHashMap_default] = true;
    dart.addTypeCaches(LinkedHashMap);
    LinkedHashMap[dart.implements] = () => [core.Map$(K, V)];
    dart.setLibraryUri(LinkedHashMap, I[24]);
    return LinkedHashMap;
  });
  collection.LinkedHashMap = collection.LinkedHashMap$();
  dart.addTypeTests(collection.LinkedHashMap, _is_LinkedHashMap_default);
  const _is_LinkedHashSet_default = Symbol('_is_LinkedHashSet_default');
  collection.LinkedHashSet$ = dart.generic(E => {
    class LinkedHashSet extends core.Object {
      static new(opts) {
        let t171, t171$, t171$0;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
        let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
        if (isValidKey == null) {
          if (hashCode == null) {
            if (equals == null) {
              if (dart.wrapType(E) === dart.wrapType(core.String) || dart.wrapType(E) === dart.wrapType(core.int)) {
                return new (collection._IdentityHashSet$(E)).new();
              }
              return new (collection._HashSet$(E)).new();
            }
            hashCode = C[74] || CT.C74;
          } else if ((C[75] || CT.C75) === hashCode && (C[76] || CT.C76) === equals) {
            return new (collection._IdentityHashSet$(E)).new();
          }
          return new (collection._CustomHashSet$(E)).new((t171 = equals, t171 == null ? C[77] || CT.C77 : t171), hashCode);
        }
        return new (collection._CustomKeyHashSet$(E)).new((t171$ = equals, t171$ == null ? C[77] || CT.C77 : t171$), (t171$0 = hashCode, t171$0 == null ? C[74] || CT.C74 : t171$0), isValidKey);
      }
      static from(elements) {
        if (elements == null) dart.nullFailed(I[81], 98, 48, "elements");
        let result = new (collection._HashSet$(E)).new();
        for (let element of elements) {
          result.add(E.as(element));
        }
        return result;
      }
      static of(elements) {
        let t171;
        if (elements == null) dart.nullFailed(I[81], 110, 40, "elements");
        t171 = new (collection._HashSet$(E)).new();
        return (() => {
          t171.addAll(elements);
          return t171;
        })();
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (LinkedHashSet[dart.mixinNew] = function() {
    }).prototype = LinkedHashSet.prototype;
    dart.addTypeTests(LinkedHashSet);
    LinkedHashSet.prototype[_is_LinkedHashSet_default] = true;
    dart.addTypeCaches(LinkedHashSet);
    LinkedHashSet[dart.implements] = () => [core.Set$(E)];
    dart.setLibraryUri(LinkedHashSet, I[24]);
    return LinkedHashSet;
  });
  collection.LinkedHashSet = collection.LinkedHashSet$();
  dart.addTypeTests(collection.LinkedHashSet, _is_LinkedHashSet_default);
  var _modificationCount = dart.privateName(collection, "_modificationCount");
  var _length$0 = dart.privateName(collection, "_length");
  var _first = dart.privateName(collection, "_first");
  var _insertBefore = dart.privateName(collection, "_insertBefore");
  var _list$0 = dart.privateName(collection, "_list");
  var _unlink = dart.privateName(collection, "_unlink");
  var _next$2 = dart.privateName(collection, "_next");
  var _previous$2 = dart.privateName(collection, "_previous");
  const _is_LinkedList_default$ = Symbol('_is_LinkedList_default');
  collection.LinkedList$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var _LinkedListIteratorOfE = () => (_LinkedListIteratorOfE = dart.constFn(collection._LinkedListIterator$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    class LinkedList extends core.Iterable$(E) {
      addFirst(entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 40, 19, "entry");
        this[_insertBefore](this[_first], entry, {updateFirst: true});
        this[_first] = entry;
      }
      add(entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 46, 14, "entry");
        this[_insertBefore](this[_first], entry, {updateFirst: false});
      }
      addAll(entries) {
        IterableOfE().as(entries);
        if (entries == null) dart.nullFailed(I[82], 51, 27, "entries");
        entries[$forEach](dart.bind(this, 'add'));
      }
      remove(entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 61, 17, "entry");
        if (!dart.equals(entry[_list$0], this)) return false;
        this[_unlink](entry);
        return true;
      }
      contains(entry) {
        return T$.LinkedListEntryOfLinkedListEntry().is(entry) && this === entry.list;
      }
      get iterator() {
        return new (_LinkedListIteratorOfE()).new(this);
      }
      get length() {
        return this[_length$0];
      }
      clear() {
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        if (dart.test(this.isEmpty)) return;
        let next = dart.nullCheck(this[_first]);
        do {
          let entry = next;
          next = dart.nullCheck(entry[_next$2]);
          entry[_next$2] = entry[_previous$2] = entry[_list$0] = null;
        } while (next !== this[_first]);
        this[_first] = null;
        this[_length$0] = 0;
      }
      get first() {
        if (dart.test(this.isEmpty)) {
          dart.throw(new core.StateError.new("No such element"));
        }
        return dart.nullCheck(this[_first]);
      }
      get last() {
        if (dart.test(this.isEmpty)) {
          dart.throw(new core.StateError.new("No such element"));
        }
        return dart.nullCheck(dart.nullCheck(this[_first])[_previous$2]);
      }
      get single() {
        if (dart.test(this.isEmpty)) {
          dart.throw(new core.StateError.new("No such element"));
        }
        if (dart.notNull(this[_length$0]) > 1) {
          dart.throw(new core.StateError.new("Too many elements"));
        }
        return dart.nullCheck(this[_first]);
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[82], 121, 21, "action");
        let modificationCount = this[_modificationCount];
        if (dart.test(this.isEmpty)) return;
        let current = dart.nullCheck(this[_first]);
        do {
          action(current);
          if (modificationCount != this[_modificationCount]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          current = dart.nullCheck(current[_next$2]);
        } while (current !== this[_first]);
      }
      get isEmpty() {
        return this[_length$0] === 0;
      }
      [_insertBefore](entry, newEntry, opts) {
        EN().as(entry);
        E.as(newEntry);
        if (newEntry == null) dart.nullFailed(I[82], 141, 34, "newEntry");
        let updateFirst = opts && 'updateFirst' in opts ? opts.updateFirst : null;
        if (updateFirst == null) dart.nullFailed(I[82], 141, 59, "updateFirst");
        if (newEntry.list != null) {
          dart.throw(new core.StateError.new("LinkedListEntry is already in a LinkedList"));
        }
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        newEntry[_list$0] = this;
        if (dart.test(this.isEmpty)) {
          if (!(entry == null)) dart.assertFailed(null, I[82], 149, 14, "entry == null");
          newEntry[_previous$2] = newEntry[_next$2] = newEntry;
          this[_first] = newEntry;
          this[_length$0] = dart.notNull(this[_length$0]) + 1;
          return;
        }
        let predecessor = dart.nullCheck(dart.nullCheck(entry)[_previous$2]);
        let successor = entry;
        newEntry[_previous$2] = predecessor;
        newEntry[_next$2] = successor;
        predecessor[_next$2] = newEntry;
        successor[_previous$2] = newEntry;
        if (dart.test(updateFirst) && entry == this[_first]) {
          this[_first] = newEntry;
        }
        this[_length$0] = dart.notNull(this[_length$0]) + 1;
      }
      [_unlink](entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 167, 18, "entry");
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        dart.nullCheck(entry[_next$2])[_previous$2] = entry[_previous$2];
        let next = dart.nullCheck(entry[_previous$2])[_next$2] = entry[_next$2];
        this[_length$0] = dart.notNull(this[_length$0]) - 1;
        entry[_list$0] = entry[_next$2] = entry[_previous$2] = null;
        if (dart.test(this.isEmpty)) {
          this[_first] = null;
        } else if (entry == this[_first]) {
          this[_first] = next;
        }
      }
    }
    (LinkedList.new = function() {
      this[_modificationCount] = 0;
      this[_length$0] = 0;
      this[_first] = null;
      LinkedList.__proto__.new.call(this);
      ;
    }).prototype = LinkedList.prototype;
    dart.addTypeTests(LinkedList);
    LinkedList.prototype[_is_LinkedList_default$] = true;
    dart.addTypeCaches(LinkedList);
    dart.setMethodSignature(LinkedList, () => ({
      __proto__: dart.getMethods(LinkedList.__proto__),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [_insertBefore]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)], {updateFirst: core.bool}, {}),
      [_unlink]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LinkedList, () => ({
      __proto__: dart.getGetters(LinkedList.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(LinkedList, I[24]);
    dart.setFieldSignature(LinkedList, () => ({
      __proto__: dart.getFields(LinkedList.__proto__),
      [_modificationCount]: dart.fieldType(core.int),
      [_length$0]: dart.fieldType(core.int),
      [_first]: dart.fieldType(dart.nullable(E))
    }));
    dart.defineExtensionMethods(LinkedList, ['contains', 'forEach']);
    dart.defineExtensionAccessors(LinkedList, [
      'iterator',
      'length',
      'first',
      'last',
      'single',
      'isEmpty'
    ]);
    return LinkedList;
  });
  collection.LinkedList = collection.LinkedList$();
  dart.addTypeTests(collection.LinkedList, _is_LinkedList_default$);
  var _current$1 = dart.privateName(collection, "_current");
  var _visitedFirst = dart.privateName(collection, "_visitedFirst");
  const _is__LinkedListIterator_default$ = Symbol('_is__LinkedListIterator_default');
  collection._LinkedListIterator$ = dart.generic(E => {
    class _LinkedListIterator extends core.Object {
      get current() {
        return dart.nullCast(this[_current$1], E);
      }
      moveNext() {
        if (this[_modificationCount] != this[_list$0][_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (dart.test(this[_list$0].isEmpty) || dart.test(this[_visitedFirst]) && this[_next$2] == this[_list$0].first) {
          this[_current$1] = null;
          return false;
        }
        this[_visitedFirst] = true;
        this[_current$1] = this[_next$2];
        this[_next$2] = dart.nullCheck(this[_next$2])[_next$2];
        return true;
      }
    }
    (_LinkedListIterator.new = function(list) {
      if (list == null) dart.nullFailed(I[82], 188, 37, "list");
      this[_current$1] = null;
      this[_list$0] = list;
      this[_modificationCount] = list[_modificationCount];
      this[_next$2] = list[_first];
      this[_visitedFirst] = false;
      ;
    }).prototype = _LinkedListIterator.prototype;
    dart.addTypeTests(_LinkedListIterator);
    _LinkedListIterator.prototype[_is__LinkedListIterator_default$] = true;
    dart.addTypeCaches(_LinkedListIterator);
    _LinkedListIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_LinkedListIterator, () => ({
      __proto__: dart.getMethods(_LinkedListIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_LinkedListIterator, () => ({
      __proto__: dart.getGetters(_LinkedListIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(_LinkedListIterator, I[24]);
    dart.setFieldSignature(_LinkedListIterator, () => ({
      __proto__: dart.getFields(_LinkedListIterator.__proto__),
      [_list$0]: dart.finalFieldType(collection.LinkedList$(E)),
      [_modificationCount]: dart.finalFieldType(core.int),
      [_current$1]: dart.fieldType(dart.nullable(E)),
      [_next$2]: dart.fieldType(dart.nullable(E)),
      [_visitedFirst]: dart.fieldType(core.bool)
    }));
    return _LinkedListIterator;
  });
  collection._LinkedListIterator = collection._LinkedListIterator$();
  dart.addTypeTests(collection._LinkedListIterator, _is__LinkedListIterator_default$);
  var _list$1 = dart.privateName(collection, "LinkedListEntry._list");
  var _next$3 = dart.privateName(collection, "LinkedListEntry._next");
  var _previous$3 = dart.privateName(collection, "LinkedListEntry._previous");
  const _is_LinkedListEntry_default$ = Symbol('_is_LinkedListEntry_default');
  collection.LinkedListEntry$ = dart.generic(E => {
    var LinkedListOfE = () => (LinkedListOfE = dart.constFn(collection.LinkedList$(E)))();
    var LinkedListNOfE = () => (LinkedListNOfE = dart.constFn(dart.nullable(LinkedListOfE())))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    class LinkedListEntry extends core.Object {
      get [_list$0]() {
        return this[_list$1];
      }
      set [_list$0](value) {
        this[_list$1] = LinkedListNOfE().as(value);
      }
      get [_next$2]() {
        return this[_next$3];
      }
      set [_next$2](value) {
        this[_next$3] = EN().as(value);
      }
      get [_previous$2]() {
        return this[_previous$3];
      }
      set [_previous$2](value) {
        this[_previous$3] = EN().as(value);
      }
      get list() {
        return this[_list$0];
      }
      unlink() {
        dart.nullCheck(this[_list$0])[_unlink](E.as(this));
      }
      get next() {
        if (this[_list$0] == null || dart.nullCheck(this[_list$0]).first == this[_next$2]) return null;
        return this[_next$2];
      }
      get previous() {
        if (this[_list$0] == null || this === dart.nullCheck(this[_list$0]).first) return null;
        return this[_previous$2];
      }
      insertAfter(entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 262, 22, "entry");
        dart.nullCheck(this[_list$0])[_insertBefore](this[_next$2], entry, {updateFirst: false});
      }
      insertBefore(entry) {
        E.as(entry);
        if (entry == null) dart.nullFailed(I[82], 270, 23, "entry");
        dart.nullCheck(this[_list$0])[_insertBefore](E.as(this), entry, {updateFirst: true});
      }
    }
    (LinkedListEntry.new = function() {
      this[_list$1] = null;
      this[_next$3] = null;
      this[_previous$3] = null;
      ;
    }).prototype = LinkedListEntry.prototype;
    dart.addTypeTests(LinkedListEntry);
    LinkedListEntry.prototype[_is_LinkedListEntry_default$] = true;
    dart.addTypeCaches(LinkedListEntry);
    dart.setMethodSignature(LinkedListEntry, () => ({
      __proto__: dart.getMethods(LinkedListEntry.__proto__),
      unlink: dart.fnType(dart.void, []),
      insertAfter: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      insertBefore: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LinkedListEntry, () => ({
      __proto__: dart.getGetters(LinkedListEntry.__proto__),
      list: dart.nullable(collection.LinkedList$(E)),
      next: dart.nullable(E),
      previous: dart.nullable(E)
    }));
    dart.setLibraryUri(LinkedListEntry, I[24]);
    dart.setFieldSignature(LinkedListEntry, () => ({
      __proto__: dart.getFields(LinkedListEntry.__proto__),
      [_list$0]: dart.fieldType(dart.nullable(collection.LinkedList$(E))),
      [_next$2]: dart.fieldType(dart.nullable(E)),
      [_previous$2]: dart.fieldType(dart.nullable(E))
    }));
    return LinkedListEntry;
  });
  collection.LinkedListEntry = collection.LinkedListEntry$();
  dart.addTypeTests(collection.LinkedListEntry, _is_LinkedListEntry_default$);
  const _is__MapBaseValueIterable_default = Symbol('_is__MapBaseValueIterable_default');
  collection._MapBaseValueIterable$ = dart.generic((K, V) => {
    var _MapBaseValueIteratorOfK$V = () => (_MapBaseValueIteratorOfK$V = dart.constFn(collection._MapBaseValueIterator$(K, V)))();
    class _MapBaseValueIterable extends _internal.EfficientLengthIterable$(V) {
      get length() {
        return this[_map$5][$length];
      }
      get isEmpty() {
        return this[_map$5][$isEmpty];
      }
      get isNotEmpty() {
        return this[_map$5][$isNotEmpty];
      }
      get first() {
        return V.as(this[_map$5][$_get](this[_map$5][$keys][$first]));
      }
      get single() {
        return V.as(this[_map$5][$_get](this[_map$5][$keys][$single]));
      }
      get last() {
        return V.as(this[_map$5][$_get](this[_map$5][$keys][$last]));
      }
      get iterator() {
        return new (_MapBaseValueIteratorOfK$V()).new(this[_map$5]);
      }
    }
    (_MapBaseValueIterable.new = function(_map) {
      if (_map == null) dart.nullFailed(I[35], 227, 30, "_map");
      this[_map$5] = _map;
      _MapBaseValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _MapBaseValueIterable.prototype;
    dart.addTypeTests(_MapBaseValueIterable);
    _MapBaseValueIterable.prototype[_is__MapBaseValueIterable_default] = true;
    dart.addTypeCaches(_MapBaseValueIterable);
    dart.setGetterSignature(_MapBaseValueIterable, () => ({
      __proto__: dart.getGetters(_MapBaseValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_MapBaseValueIterable, I[24]);
    dart.setFieldSignature(_MapBaseValueIterable, () => ({
      __proto__: dart.getFields(_MapBaseValueIterable.__proto__),
      [_map$5]: dart.finalFieldType(core.Map$(K, V))
    }));
    dart.defineExtensionAccessors(_MapBaseValueIterable, [
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'single',
      'last',
      'iterator'
    ]);
    return _MapBaseValueIterable;
  });
  collection._MapBaseValueIterable = collection._MapBaseValueIterable$();
  dart.addTypeTests(collection._MapBaseValueIterable, _is__MapBaseValueIterable_default);
  var _keys = dart.privateName(collection, "_keys");
  const _is__MapBaseValueIterator_default = Symbol('_is__MapBaseValueIterator_default');
  collection._MapBaseValueIterator$ = dart.generic((K, V) => {
    class _MapBaseValueIterator extends core.Object {
      moveNext() {
        if (dart.test(this[_keys].moveNext())) {
          this[_current$1] = this[_map$5][$_get](this[_keys].current);
          return true;
        }
        this[_current$1] = null;
        return false;
      }
      get current() {
        return V.as(this[_current$1]);
      }
    }
    (_MapBaseValueIterator.new = function(map) {
      if (map == null) dart.nullFailed(I[35], 248, 35, "map");
      this[_current$1] = null;
      this[_map$5] = map;
      this[_keys] = map[$keys][$iterator];
      ;
    }).prototype = _MapBaseValueIterator.prototype;
    dart.addTypeTests(_MapBaseValueIterator);
    _MapBaseValueIterator.prototype[_is__MapBaseValueIterator_default] = true;
    dart.addTypeCaches(_MapBaseValueIterator);
    _MapBaseValueIterator[dart.implements] = () => [core.Iterator$(V)];
    dart.setMethodSignature(_MapBaseValueIterator, () => ({
      __proto__: dart.getMethods(_MapBaseValueIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_MapBaseValueIterator, () => ({
      __proto__: dart.getGetters(_MapBaseValueIterator.__proto__),
      current: V
    }));
    dart.setLibraryUri(_MapBaseValueIterator, I[24]);
    dart.setFieldSignature(_MapBaseValueIterator, () => ({
      __proto__: dart.getFields(_MapBaseValueIterator.__proto__),
      [_keys]: dart.finalFieldType(core.Iterator$(K)),
      [_map$5]: dart.finalFieldType(core.Map$(K, V)),
      [_current$1]: dart.fieldType(dart.nullable(V))
    }));
    return _MapBaseValueIterator;
  });
  collection._MapBaseValueIterator = collection._MapBaseValueIterator$();
  dart.addTypeTests(collection._MapBaseValueIterator, _is__MapBaseValueIterator_default);
  var _map$8 = dart.privateName(collection, "MapView._map");
  const _is_MapView_default = Symbol('_is_MapView_default');
  collection.MapView$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class MapView extends core.Object {
      get [_map$5]() {
        return this[_map$8];
      }
      set [_map$5](value) {
        super[_map$5] = value;
      }
      cast(RK, RV) {
        return this[_map$5][$cast](RK, RV);
      }
      _get(key) {
        return this[_map$5][$_get](key);
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        this[_map$5][$_set](key, value);
        return value$;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[35], 330, 25, "other");
        this[_map$5][$addAll](other);
      }
      clear() {
        this[_map$5][$clear]();
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[35], 338, 26, "ifAbsent");
        return this[_map$5][$putIfAbsent](key, ifAbsent);
      }
      containsKey(key) {
        return this[_map$5][$containsKey](key);
      }
      containsValue(value) {
        return this[_map$5][$containsValue](value);
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[35], 341, 21, "action");
        this[_map$5][$forEach](action);
      }
      get isEmpty() {
        return this[_map$5][$isEmpty];
      }
      get isNotEmpty() {
        return this[_map$5][$isNotEmpty];
      }
      get length() {
        return this[_map$5][$length];
      }
      get keys() {
        return this[_map$5][$keys];
      }
      remove(key) {
        return this[_map$5][$remove](key);
      }
      toString() {
        return dart.toString(this[_map$5]);
      }
      get values() {
        return this[_map$5][$values];
      }
      get entries() {
        return this[_map$5][$entries];
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(I[35], 355, 44, "entries");
        this[_map$5][$addEntries](entries);
      }
      map(K2, V2, transform) {
        if (transform == null) dart.nullFailed(I[35], 359, 44, "transform");
        return this[_map$5][$map](K2, V2, transform);
      }
      update(key, update, opts) {
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(I[35], 362, 21, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return this[_map$5][$update](key, update, {ifAbsent: ifAbsent});
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(I[35], 365, 20, "update");
        this[_map$5][$updateAll](update);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[35], 369, 25, "test");
        this[_map$5][$removeWhere](test);
      }
    }
    (MapView.new = function(map) {
      if (map == null) dart.nullFailed(I[35], 322, 27, "map");
      this[_map$8] = map;
      ;
    }).prototype = MapView.prototype;
    MapView.prototype[dart.isMap] = true;
    dart.addTypeTests(MapView);
    MapView.prototype[_is_MapView_default] = true;
    dart.addTypeCaches(MapView);
    MapView[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(MapView, () => ({
      __proto__: dart.getMethods(MapView.__proto__),
      cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])])
    }));
    dart.setGetterSignature(MapView, () => ({
      __proto__: dart.getGetters(MapView.__proto__),
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      length: core.int,
      [$length]: core.int,
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K),
      values: core.Iterable$(V),
      [$values]: core.Iterable$(V),
      entries: core.Iterable$(core.MapEntry$(K, V)),
      [$entries]: core.Iterable$(core.MapEntry$(K, V))
    }));
    dart.setLibraryUri(MapView, I[24]);
    dart.setFieldSignature(MapView, () => ({
      __proto__: dart.getFields(MapView.__proto__),
      [_map$5]: dart.finalFieldType(core.Map$(K, V))
    }));
    dart.defineExtensionMethods(MapView, [
      'cast',
      '_get',
      '_set',
      'addAll',
      'clear',
      'putIfAbsent',
      'containsKey',
      'containsValue',
      'forEach',
      'remove',
      'toString',
      'addEntries',
      'map',
      'update',
      'updateAll',
      'removeWhere'
    ]);
    dart.defineExtensionAccessors(MapView, [
      'isEmpty',
      'isNotEmpty',
      'length',
      'keys',
      'values',
      'entries'
    ]);
    return MapView;
  });
  collection.MapView = collection.MapView$();
  dart.addTypeTests(collection.MapView, _is_MapView_default);
  const _is_UnmodifiableMapView_default = Symbol('_is_UnmodifiableMapView_default');
  collection.UnmodifiableMapView$ = dart.generic((K, V) => {
    const MapView__UnmodifiableMapMixin$36 = class MapView__UnmodifiableMapMixin extends collection.MapView$(K, V) {};
    (MapView__UnmodifiableMapMixin$36.new = function(map) {
      MapView__UnmodifiableMapMixin$36.__proto__.new.call(this, map);
    }).prototype = MapView__UnmodifiableMapMixin$36.prototype;
    dart.applyMixin(MapView__UnmodifiableMapMixin$36, collection._UnmodifiableMapMixin$(K, V));
    class UnmodifiableMapView extends MapView__UnmodifiableMapMixin$36 {
      cast(RK, RV) {
        return new (collection.UnmodifiableMapView$(RK, RV)).new(this[_map$5][$cast](RK, RV));
      }
    }
    (UnmodifiableMapView.new = function(map) {
      if (map == null) dart.nullFailed(I[35], 381, 33, "map");
      UnmodifiableMapView.__proto__.new.call(this, map);
      ;
    }).prototype = UnmodifiableMapView.prototype;
    dart.addTypeTests(UnmodifiableMapView);
    UnmodifiableMapView.prototype[_is_UnmodifiableMapView_default] = true;
    dart.addTypeCaches(UnmodifiableMapView);
    dart.setMethodSignature(UnmodifiableMapView, () => ({
      __proto__: dart.getMethods(UnmodifiableMapView.__proto__),
      cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(UnmodifiableMapView, I[24]);
    dart.defineExtensionMethods(UnmodifiableMapView, ['cast']);
    return UnmodifiableMapView;
  });
  collection.UnmodifiableMapView = collection.UnmodifiableMapView$();
  dart.addTypeTests(collection.UnmodifiableMapView, _is_UnmodifiableMapView_default);
  const _is_Queue_default = Symbol('_is_Queue_default');
  collection.Queue$ = dart.generic(E => {
    class Queue extends core.Object {
      static castFrom(S, T, source) {
        if (source == null) dart.nullFailed(I[83], 55, 43, "source");
        return new (_internal.CastQueue$(S, T)).new(source);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (Queue[dart.mixinNew] = function() {
    }).prototype = Queue.prototype;
    dart.addTypeTests(Queue);
    Queue.prototype[_is_Queue_default] = true;
    dart.addTypeCaches(Queue);
    Queue[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
    dart.setLibraryUri(Queue, I[24]);
    return Queue;
  });
  collection.Queue = collection.Queue$();
  dart.addTypeTests(collection.Queue, _is_Queue_default);
  var _previousLink = dart.privateName(collection, "_DoubleLink._previousLink");
  var _nextLink = dart.privateName(collection, "_DoubleLink._nextLink");
  var _previousLink$ = dart.privateName(collection, "_previousLink");
  var _nextLink$ = dart.privateName(collection, "_nextLink");
  var _link = dart.privateName(collection, "_link");
  const _is__DoubleLink_default = Symbol('_is__DoubleLink_default');
  collection._DoubleLink$ = dart.generic(Link => {
    var LinkN = () => (LinkN = dart.constFn(dart.nullable(Link)))();
    class _DoubleLink extends core.Object {
      get [_previousLink$]() {
        return this[_previousLink];
      }
      set [_previousLink$](value) {
        this[_previousLink] = LinkN().as(value);
      }
      get [_nextLink$]() {
        return this[_nextLink];
      }
      set [_nextLink$](value) {
        this[_nextLink] = LinkN().as(value);
      }
      [_link](previous, next) {
        this[_nextLink$] = next;
        this[_previousLink$] = previous;
        if (previous != null) previous[_nextLink$] = Link.as(this);
        if (next != null) next[_previousLink$] = Link.as(this);
      }
      [_unlink]() {
        if (this[_previousLink$] != null) dart.nullCheck(this[_previousLink$])[_nextLink$] = this[_nextLink$];
        if (this[_nextLink$] != null) dart.nullCheck(this[_nextLink$])[_previousLink$] = this[_previousLink$];
        this[_nextLink$] = null;
        this[_previousLink$] = null;
      }
    }
    (_DoubleLink.new = function() {
      this[_previousLink] = null;
      this[_nextLink] = null;
      ;
    }).prototype = _DoubleLink.prototype;
    dart.addTypeTests(_DoubleLink);
    _DoubleLink.prototype[_is__DoubleLink_default] = true;
    dart.addTypeCaches(_DoubleLink);
    dart.setMethodSignature(_DoubleLink, () => ({
      __proto__: dart.getMethods(_DoubleLink.__proto__),
      [_link]: dart.fnType(dart.void, [dart.nullable(Link), dart.nullable(Link)]),
      [_unlink]: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_DoubleLink, I[24]);
    dart.setFieldSignature(_DoubleLink, () => ({
      __proto__: dart.getFields(_DoubleLink.__proto__),
      [_previousLink$]: dart.fieldType(dart.nullable(Link)),
      [_nextLink$]: dart.fieldType(dart.nullable(Link))
    }));
    return _DoubleLink;
  });
  collection._DoubleLink = collection._DoubleLink$();
  dart.addTypeTests(collection._DoubleLink, _is__DoubleLink_default);
  var _element$ = dart.privateName(collection, "DoubleLinkedQueueEntry._element");
  var _element = dart.privateName(collection, "_element");
  const _is_DoubleLinkedQueueEntry_default = Symbol('_is_DoubleLinkedQueueEntry_default');
  collection.DoubleLinkedQueueEntry$ = dart.generic(E => {
    var DoubleLinkedQueueEntryOfE = () => (DoubleLinkedQueueEntryOfE = dart.constFn(collection.DoubleLinkedQueueEntry$(E)))();
    class DoubleLinkedQueueEntry extends collection._DoubleLink {
      get [_element]() {
        return this[_element$];
      }
      set [_element](value) {
        this[_element$] = value;
      }
      get element() {
        return E.as(this[_element]);
      }
      set element(element) {
        E.as(element);
        this[_element] = element;
      }
      append(e) {
        E.as(e);
        new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this, this[_nextLink$]);
      }
      prepend(e) {
        E.as(e);
        new (DoubleLinkedQueueEntryOfE()).new(e)[_link](this[_previousLink$], this);
      }
      remove() {
        this[_unlink]();
        return this.element;
      }
      previousEntry() {
        return this[_previousLink$];
      }
      nextEntry() {
        return this[_nextLink$];
      }
    }
    (DoubleLinkedQueueEntry.new = function(_element) {
      this[_element$] = _element;
      DoubleLinkedQueueEntry.__proto__.new.call(this);
      ;
    }).prototype = DoubleLinkedQueueEntry.prototype;
    dart.addTypeTests(DoubleLinkedQueueEntry);
    DoubleLinkedQueueEntry.prototype[_is_DoubleLinkedQueueEntry_default] = true;
    dart.addTypeCaches(DoubleLinkedQueueEntry);
    dart.setMethodSignature(DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getMethods(DoubleLinkedQueueEntry.__proto__),
      append: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      prepend: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(E, []),
      previousEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
      nextEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), [])
    }));
    dart.setGetterSignature(DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getGetters(DoubleLinkedQueueEntry.__proto__),
      element: E
    }));
    dart.setSetterSignature(DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getSetters(DoubleLinkedQueueEntry.__proto__),
      element: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(DoubleLinkedQueueEntry, I[24]);
    dart.setFieldSignature(DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getFields(DoubleLinkedQueueEntry.__proto__),
      [_element]: dart.fieldType(dart.nullable(E))
    }));
    return DoubleLinkedQueueEntry;
  }, E => {
    dart.setBaseClass(collection.DoubleLinkedQueueEntry$(E), collection._DoubleLink$(collection.DoubleLinkedQueueEntry$(E)));
  });
  collection.DoubleLinkedQueueEntry = collection.DoubleLinkedQueueEntry$();
  dart.addTypeTests(collection.DoubleLinkedQueueEntry, _is_DoubleLinkedQueueEntry_default);
  var _queue$ = dart.privateName(collection, "_queue");
  var _append = dart.privateName(collection, "_append");
  var _prepend = dart.privateName(collection, "_prepend");
  var _asNonSentinelEntry = dart.privateName(collection, "_asNonSentinelEntry");
  const _is__DoubleLinkedQueueEntry_default = Symbol('_is__DoubleLinkedQueueEntry_default');
  collection._DoubleLinkedQueueEntry$ = dart.generic(E => {
    var _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
    var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
    class _DoubleLinkedQueueEntry extends collection.DoubleLinkedQueueEntry$(E) {
      [_append](e) {
        E.as(e);
        new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this, this[_nextLink$]);
      }
      [_prepend](e) {
        E.as(e);
        new (_DoubleLinkedQueueElementOfE()).new(e, this[_queue$])[_link](this[_previousLink$], this);
      }
      get [_element]() {
        return E.as(super[_element]);
      }
      set [_element](value) {
        super[_element] = value;
      }
      nextEntry() {
        let entry = _DoubleLinkedQueueEntryOfE().as(this[_nextLink$]);
        return entry[_asNonSentinelEntry]();
      }
      previousEntry() {
        let entry = _DoubleLinkedQueueEntryOfE().as(this[_previousLink$]);
        return entry[_asNonSentinelEntry]();
      }
    }
    (_DoubleLinkedQueueEntry.new = function(element, _queue) {
      this[_queue$] = _queue;
      _DoubleLinkedQueueEntry.__proto__.new.call(this, element);
      ;
    }).prototype = _DoubleLinkedQueueEntry.prototype;
    dart.addTypeTests(_DoubleLinkedQueueEntry);
    _DoubleLinkedQueueEntry.prototype[_is__DoubleLinkedQueueEntry_default] = true;
    dart.addTypeCaches(_DoubleLinkedQueueEntry);
    dart.setMethodSignature(_DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getMethods(_DoubleLinkedQueueEntry.__proto__),
      [_append]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_prepend]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getGetters(_DoubleLinkedQueueEntry.__proto__),
      [_element]: E
    }));
    dart.setLibraryUri(_DoubleLinkedQueueEntry, I[24]);
    dart.setFieldSignature(_DoubleLinkedQueueEntry, () => ({
      __proto__: dart.getFields(_DoubleLinkedQueueEntry.__proto__),
      [_queue$]: dart.fieldType(dart.nullable(collection.DoubleLinkedQueue$(E)))
    }));
    return _DoubleLinkedQueueEntry;
  });
  collection._DoubleLinkedQueueEntry = collection._DoubleLinkedQueueEntry$();
  dart.addTypeTests(collection._DoubleLinkedQueueEntry, _is__DoubleLinkedQueueEntry_default);
  var _elementCount = dart.privateName(collection, "_elementCount");
  var _remove = dart.privateName(collection, "_remove");
  const _is__DoubleLinkedQueueElement_default = Symbol('_is__DoubleLinkedQueueElement_default');
  collection._DoubleLinkedQueueElement$ = dart.generic(E => {
    class _DoubleLinkedQueueElement extends collection._DoubleLinkedQueueEntry$(E) {
      append(e) {
        let t171;
        E.as(e);
        this[_append](e);
        if (this[_queue$] != null) {
          t171 = dart.nullCheck(this[_queue$]);
          t171[_elementCount] = dart.notNull(t171[_elementCount]) + 1;
        }
      }
      prepend(e) {
        let t171;
        E.as(e);
        this[_prepend](e);
        if (this[_queue$] != null) {
          t171 = dart.nullCheck(this[_queue$]);
          t171[_elementCount] = dart.notNull(t171[_elementCount]) + 1;
        }
      }
      [_remove]() {
        this[_queue$] = null;
        this[_unlink]();
        return this.element;
      }
      remove() {
        let t171;
        if (this[_queue$] != null) {
          t171 = dart.nullCheck(this[_queue$]);
          t171[_elementCount] = dart.notNull(t171[_elementCount]) - 1;
        }
        return this[_remove]();
      }
      [_asNonSentinelEntry]() {
        return this;
      }
    }
    (_DoubleLinkedQueueElement.new = function(element, queue) {
      _DoubleLinkedQueueElement.__proto__.new.call(this, element, queue);
      ;
    }).prototype = _DoubleLinkedQueueElement.prototype;
    dart.addTypeTests(_DoubleLinkedQueueElement);
    _DoubleLinkedQueueElement.prototype[_is__DoubleLinkedQueueElement_default] = true;
    dart.addTypeCaches(_DoubleLinkedQueueElement);
    dart.setMethodSignature(_DoubleLinkedQueueElement, () => ({
      __proto__: dart.getMethods(_DoubleLinkedQueueElement.__proto__),
      [_remove]: dart.fnType(E, []),
      [_asNonSentinelEntry]: dart.fnType(dart.nullable(collection._DoubleLinkedQueueElement$(E)), [])
    }));
    dart.setLibraryUri(_DoubleLinkedQueueElement, I[24]);
    return _DoubleLinkedQueueElement;
  });
  collection._DoubleLinkedQueueElement = collection._DoubleLinkedQueueElement$();
  dart.addTypeTests(collection._DoubleLinkedQueueElement, _is__DoubleLinkedQueueElement_default);
  const _is__DoubleLinkedQueueSentinel_default = Symbol('_is__DoubleLinkedQueueSentinel_default');
  collection._DoubleLinkedQueueSentinel$ = dart.generic(E => {
    class _DoubleLinkedQueueSentinel extends collection._DoubleLinkedQueueEntry$(E) {
      [_asNonSentinelEntry]() {
        return null;
      }
      [_remove]() {
        dart.throw(_internal.IterableElementError.noElement());
      }
      get [_element]() {
        dart.throw(_internal.IterableElementError.noElement());
      }
      set [_element](value) {
        super[_element] = value;
      }
    }
    (_DoubleLinkedQueueSentinel.new = function(queue) {
      if (queue == null) dart.nullFailed(I[83], 247, 51, "queue");
      _DoubleLinkedQueueSentinel.__proto__.new.call(this, null, queue);
      this[_previousLink$] = this;
      this[_nextLink$] = this;
    }).prototype = _DoubleLinkedQueueSentinel.prototype;
    dart.addTypeTests(_DoubleLinkedQueueSentinel);
    _DoubleLinkedQueueSentinel.prototype[_is__DoubleLinkedQueueSentinel_default] = true;
    dart.addTypeCaches(_DoubleLinkedQueueSentinel);
    dart.setMethodSignature(_DoubleLinkedQueueSentinel, () => ({
      __proto__: dart.getMethods(_DoubleLinkedQueueSentinel.__proto__),
      [_asNonSentinelEntry]: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
      [_remove]: dart.fnType(E, [])
    }));
    dart.setLibraryUri(_DoubleLinkedQueueSentinel, I[24]);
    return _DoubleLinkedQueueSentinel;
  });
  collection._DoubleLinkedQueueSentinel = collection._DoubleLinkedQueueSentinel$();
  dart.addTypeTests(collection._DoubleLinkedQueueSentinel, _is__DoubleLinkedQueueSentinel_default);
  var __DoubleLinkedQueue__sentinel = dart.privateName(collection, "_#DoubleLinkedQueue#_sentinel");
  var __DoubleLinkedQueue__sentinel_isSet = dart.privateName(collection, "_#DoubleLinkedQueue#_sentinel#isSet");
  var _sentinel = dart.privateName(collection, "_sentinel");
  const _is_DoubleLinkedQueue_default = Symbol('_is_DoubleLinkedQueue_default');
  collection.DoubleLinkedQueue$ = dart.generic(E => {
    var _DoubleLinkedQueueSentinelOfE = () => (_DoubleLinkedQueueSentinelOfE = dart.constFn(collection._DoubleLinkedQueueSentinel$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
    var _DoubleLinkedQueueElementOfE = () => (_DoubleLinkedQueueElementOfE = dart.constFn(collection._DoubleLinkedQueueElement$(E)))();
    var _DoubleLinkedQueueIteratorOfE = () => (_DoubleLinkedQueueIteratorOfE = dart.constFn(collection._DoubleLinkedQueueIterator$(E)))();
    class DoubleLinkedQueue extends core.Iterable$(E) {
      get [_sentinel]() {
        let t171;
        if (!dart.test(this[__DoubleLinkedQueue__sentinel_isSet])) {
          this[__DoubleLinkedQueue__sentinel] = new (_DoubleLinkedQueueSentinelOfE()).new(this);
          this[__DoubleLinkedQueue__sentinel_isSet] = true;
        }
        t171 = this[__DoubleLinkedQueue__sentinel];
        return t171;
      }
      set [_sentinel](t171) {
        if (t171 == null) dart.nullFailed(I[83], 271, 38, "null");
        this[__DoubleLinkedQueue__sentinel_isSet] = true;
        this[__DoubleLinkedQueue__sentinel] = t171;
      }
      static from(elements) {
        if (elements == null) dart.nullFailed(I[83], 291, 52, "elements");
        let list = new (collection.DoubleLinkedQueue$(E)).new();
        for (let e of elements) {
          list.addLast(E.as(e));
        }
        return list;
      }
      static of(elements) {
        let t172;
        if (elements == null) dart.nullFailed(I[83], 303, 44, "elements");
        t172 = new (collection.DoubleLinkedQueue$(E)).new();
        return (() => {
          t172.addAll(elements);
          return t172;
        })();
      }
      cast(R) {
        return collection.Queue.castFrom(E, R, this);
      }
      get length() {
        return this[_elementCount];
      }
      addLast(value) {
        E.as(value);
        this[_sentinel][_prepend](value);
        this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
      }
      addFirst(value) {
        E.as(value);
        this[_sentinel][_append](value);
        this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
      }
      add(value) {
        E.as(value);
        this[_sentinel][_prepend](value);
        this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[83], 324, 27, "iterable");
        for (let value of iterable) {
          this[_sentinel][_prepend](value);
          this[_elementCount] = dart.notNull(this[_elementCount]) + 1;
        }
      }
      removeLast() {
        let lastEntry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_previousLink$]);
        let result = lastEntry[_remove]();
        this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
        return result;
      }
      removeFirst() {
        let firstEntry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink$]);
        let result = firstEntry[_remove]();
        this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
        return result;
      }
      remove(o) {
        let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink$]);
        while (entry != this[_sentinel]) {
          let equals = dart.equals(entry[_element], o);
          if (this !== entry[_queue$]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          if (equals) {
            entry[_remove]();
            this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
            return true;
          }
          entry = _DoubleLinkedQueueEntryOfE().as(entry[_nextLink$]);
        }
        return false;
      }
      [_filter](test, removeMatching) {
        if (test == null) dart.nullFailed(I[83], 366, 21, "test");
        if (removeMatching == null) dart.nullFailed(I[83], 366, 43, "removeMatching");
        let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink$]);
        while (entry != this[_sentinel]) {
          let matches = test(entry[_element]);
          if (this !== entry[_queue$]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          let next = dart.nullCheck(entry[_nextLink$]);
          if (removeMatching == matches) {
            entry[_remove]();
            this[_elementCount] = dart.notNull(this[_elementCount]) - 1;
          }
          entry = _DoubleLinkedQueueEntryOfE().as(next);
        }
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[83], 384, 25, "test");
        this[_filter](test, true);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[83], 388, 25, "test");
        this[_filter](test, false);
      }
      get first() {
        let firstEntry = dart.nullCheck(this[_sentinel][_nextLink$]);
        return E.as(firstEntry[_element]);
      }
      get last() {
        let lastEntry = dart.nullCheck(this[_sentinel][_previousLink$]);
        return E.as(lastEntry[_element]);
      }
      get single() {
        if (this[_sentinel][_nextLink$] == this[_sentinel][_previousLink$]) {
          let entry = dart.nullCheck(this[_sentinel][_nextLink$]);
          return E.as(entry[_element]);
        }
        dart.throw(_internal.IterableElementError.tooMany());
      }
      firstEntry() {
        return this[_sentinel].nextEntry();
      }
      lastEntry() {
        return this[_sentinel].previousEntry();
      }
      get isEmpty() {
        return this[_sentinel][_nextLink$] == this[_sentinel];
      }
      clear() {
        this[_sentinel][_nextLink$] = this[_sentinel];
        this[_sentinel][_previousLink$] = this[_sentinel];
        this[_elementCount] = 0;
      }
      forEachEntry(action) {
        if (action == null) dart.nullFailed(I[83], 466, 26, "action");
        let entry = _DoubleLinkedQueueEntryOfE().as(this[_sentinel][_nextLink$]);
        while (entry != this[_sentinel]) {
          let element = _DoubleLinkedQueueElementOfE().as(entry);
          let next = _DoubleLinkedQueueEntryOfE().as(element[_nextLink$]);
          action(element);
          if (this === entry[_queue$]) {
            next = _DoubleLinkedQueueEntryOfE().as(entry[_nextLink$]);
          } else if (this !== next[_queue$]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          entry = next;
        }
      }
      get iterator() {
        return new (_DoubleLinkedQueueIteratorOfE()).new(this[_sentinel]);
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
    }
    (DoubleLinkedQueue.new = function() {
      this[__DoubleLinkedQueue__sentinel] = null;
      this[__DoubleLinkedQueue__sentinel_isSet] = false;
      this[_elementCount] = 0;
      DoubleLinkedQueue.__proto__.new.call(this);
      ;
    }).prototype = DoubleLinkedQueue.prototype;
    dart.addTypeTests(DoubleLinkedQueue);
    DoubleLinkedQueue.prototype[_is_DoubleLinkedQueue_default] = true;
    dart.addTypeCaches(DoubleLinkedQueue);
    DoubleLinkedQueue[dart.implements] = () => [collection.Queue$(E)];
    dart.setMethodSignature(DoubleLinkedQueue, () => ({
      __proto__: dart.getMethods(DoubleLinkedQueue.__proto__),
      cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeLast: dart.fnType(E, []),
      removeFirst: dart.fnType(E, []),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [_filter]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      firstEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
      lastEntry: dart.fnType(dart.nullable(collection.DoubleLinkedQueueEntry$(E)), []),
      clear: dart.fnType(dart.void, []),
      forEachEntry: dart.fnType(dart.void, [dart.fnType(dart.void, [collection.DoubleLinkedQueueEntry$(E)])])
    }));
    dart.setGetterSignature(DoubleLinkedQueue, () => ({
      __proto__: dart.getGetters(DoubleLinkedQueue.__proto__),
      [_sentinel]: collection._DoubleLinkedQueueSentinel$(E),
      iterator: collection._DoubleLinkedQueueIterator$(E),
      [$iterator]: collection._DoubleLinkedQueueIterator$(E)
    }));
    dart.setSetterSignature(DoubleLinkedQueue, () => ({
      __proto__: dart.getSetters(DoubleLinkedQueue.__proto__),
      [_sentinel]: collection._DoubleLinkedQueueSentinel$(E)
    }));
    dart.setLibraryUri(DoubleLinkedQueue, I[24]);
    dart.setFieldSignature(DoubleLinkedQueue, () => ({
      __proto__: dart.getFields(DoubleLinkedQueue.__proto__),
      [__DoubleLinkedQueue__sentinel]: dart.fieldType(dart.nullable(collection._DoubleLinkedQueueSentinel$(E))),
      [__DoubleLinkedQueue__sentinel_isSet]: dart.fieldType(core.bool),
      [_elementCount]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(DoubleLinkedQueue, ['cast', 'toString']);
    dart.defineExtensionAccessors(DoubleLinkedQueue, [
      'length',
      'first',
      'last',
      'single',
      'isEmpty',
      'iterator'
    ]);
    return DoubleLinkedQueue;
  });
  collection.DoubleLinkedQueue = collection.DoubleLinkedQueue$();
  dart.addTypeTests(collection.DoubleLinkedQueue, _is_DoubleLinkedQueue_default);
  var _nextEntry = dart.privateName(collection, "_nextEntry");
  const _is__DoubleLinkedQueueIterator_default = Symbol('_is__DoubleLinkedQueueIterator_default');
  collection._DoubleLinkedQueueIterator$ = dart.generic(E => {
    var _DoubleLinkedQueueEntryOfE = () => (_DoubleLinkedQueueEntryOfE = dart.constFn(collection._DoubleLinkedQueueEntry$(E)))();
    class _DoubleLinkedQueueIterator extends core.Object {
      moveNext() {
        if (this[_nextEntry] == this[_sentinel]) {
          this[_current$1] = null;
          this[_nextEntry] = null;
          this[_sentinel] = null;
          return false;
        }
        let elementEntry = _DoubleLinkedQueueEntryOfE().as(this[_nextEntry]);
        if (dart.nullCheck(this[_sentinel])[_queue$] != elementEntry[_queue$]) {
          dart.throw(new core.ConcurrentModificationError.new(dart.nullCheck(this[_sentinel])[_queue$]));
        }
        this[_current$1] = elementEntry[_element];
        this[_nextEntry] = elementEntry[_nextLink$];
        return true;
      }
      get current() {
        return E.as(this[_current$1]);
      }
    }
    (_DoubleLinkedQueueIterator.new = function(sentinel) {
      if (sentinel == null) dart.nullFailed(I[83], 500, 60, "sentinel");
      this[_current$1] = null;
      this[_sentinel] = sentinel;
      this[_nextEntry] = sentinel[_nextLink$];
      ;
    }).prototype = _DoubleLinkedQueueIterator.prototype;
    dart.addTypeTests(_DoubleLinkedQueueIterator);
    _DoubleLinkedQueueIterator.prototype[_is__DoubleLinkedQueueIterator_default] = true;
    dart.addTypeCaches(_DoubleLinkedQueueIterator);
    _DoubleLinkedQueueIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_DoubleLinkedQueueIterator, () => ({
      __proto__: dart.getMethods(_DoubleLinkedQueueIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_DoubleLinkedQueueIterator, () => ({
      __proto__: dart.getGetters(_DoubleLinkedQueueIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(_DoubleLinkedQueueIterator, I[24]);
    dart.setFieldSignature(_DoubleLinkedQueueIterator, () => ({
      __proto__: dart.getFields(_DoubleLinkedQueueIterator.__proto__),
      [_sentinel]: dart.fieldType(dart.nullable(collection._DoubleLinkedQueueSentinel$(E))),
      [_nextEntry]: dart.fieldType(dart.nullable(collection.DoubleLinkedQueueEntry$(E))),
      [_current$1]: dart.fieldType(dart.nullable(E))
    }));
    return _DoubleLinkedQueueIterator;
  });
  collection._DoubleLinkedQueueIterator = collection._DoubleLinkedQueueIterator$();
  dart.addTypeTests(collection._DoubleLinkedQueueIterator, _is__DoubleLinkedQueueIterator_default);
  var _head = dart.privateName(collection, "_head");
  var _tail = dart.privateName(collection, "_tail");
  var _table = dart.privateName(collection, "_table");
  var _checkModification = dart.privateName(collection, "_checkModification");
  var _add$ = dart.privateName(collection, "_add");
  var _preGrow = dart.privateName(collection, "_preGrow");
  var _filterWhere = dart.privateName(collection, "_filterWhere");
  var _grow$ = dart.privateName(collection, "_grow");
  var _writeToList = dart.privateName(collection, "_writeToList");
  const _is_ListQueue_default = Symbol('_is_ListQueue_default');
  collection.ListQueue$ = dart.generic(E => {
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    var ListOfEN = () => (ListOfEN = dart.constFn(core.List$(EN())))();
    var _ListQueueIteratorOfE = () => (_ListQueueIteratorOfE = dart.constFn(collection._ListQueueIterator$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class ListQueue extends _internal.ListIterable$(E) {
      static _calculateCapacity(initialCapacity) {
        if (initialCapacity == null || dart.notNull(initialCapacity) < 8) {
          return 8;
        } else if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) {
          return collection.ListQueue._nextPowerOf2(initialCapacity);
        }
        if (!dart.test(collection.ListQueue._isPowerOf2(initialCapacity))) dart.assertFailed(null, I[83], 553, 12, "_isPowerOf2(initialCapacity)");
        return initialCapacity;
      }
      static from(elements) {
        if (elements == null) dart.nullFailed(I[83], 570, 44, "elements");
        if (core.List.is(elements)) {
          let length = elements[$length];
          let queue = new (collection.ListQueue$(E)).new(dart.notNull(length) + 1);
          if (!(dart.notNull(queue[_table][$length]) > dart.notNull(length))) dart.assertFailed(null, I[83], 574, 14, "queue._table.length > length");
          for (let i = 0; i < dart.notNull(length); i = i + 1) {
            queue[_table][$_set](i, E.as(elements[$_get](i)));
          }
          queue[_tail] = length;
          return queue;
        } else {
          let capacity = 8;
          if (_internal.EfficientLengthIterable.is(elements)) {
            capacity = elements[$length];
          }
          let result = new (collection.ListQueue$(E)).new(capacity);
          for (let element of elements) {
            result.addLast(E.as(element));
          }
          return result;
        }
      }
      static of(elements) {
        let t172;
        if (elements == null) dart.nullFailed(I[83], 597, 36, "elements");
        t172 = new (collection.ListQueue$(E)).new();
        return (() => {
          t172.addAll(elements);
          return t172;
        })();
      }
      cast(R) {
        return collection.Queue.castFrom(E, R, this);
      }
      get iterator() {
        return new (_ListQueueIteratorOfE()).new(this);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[83], 605, 21, "f");
        let modificationCount = this[_modificationCount];
        for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
          f(E.as(this[_table][$_get](i)));
          this[_checkModification](modificationCount);
        }
      }
      get isEmpty() {
        return this[_head] == this[_tail];
      }
      get length() {
        return (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & dart.notNull(this[_table][$length]) - 1) >>> 0;
      }
      get first() {
        if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
        return E.as(this[_table][$_get](this[_head]));
      }
      get last() {
        if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
        return E.as(this[_table][$_get]((dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0));
      }
      get single() {
        if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
        if (dart.notNull(this.length) > 1) dart.throw(_internal.IterableElementError.tooMany());
        return E.as(this[_table][$_get](this[_head]));
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[83], 633, 19, "index");
        core.RangeError.checkValidIndex(index, this);
        return E.as(this[_table][$_get]((dart.notNull(this[_head]) + dart.notNull(index) & dart.notNull(this[_table][$length]) - 1) >>> 0));
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[83], 638, 24, "growable");
        let mask = dart.notNull(this[_table][$length]) - 1;
        let length = (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & mask) >>> 0;
        if (length === 0) return ListOfE().empty({growable: growable});
        let list = ListOfE().filled(length, this.first, {growable: growable});
        for (let i = 0; i < length; i = i + 1) {
          list[$_set](i, E.as(this[_table][$_get]((dart.notNull(this[_head]) + i & mask) >>> 0)));
        }
        return list;
      }
      add(value) {
        E.as(value);
        this[_add$](value);
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(I[83], 656, 27, "elements");
        if (ListOfE().is(elements)) {
          let list = elements;
          let addCount = list[$length];
          let length = this.length;
          if (dart.notNull(length) + dart.notNull(addCount) >= dart.notNull(this[_table][$length])) {
            this[_preGrow](dart.notNull(length) + dart.notNull(addCount));
            this[_table][$setRange](length, dart.notNull(length) + dart.notNull(addCount), list, 0);
            this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
          } else {
            let endSpace = dart.notNull(this[_table][$length]) - dart.notNull(this[_tail]);
            if (dart.notNull(addCount) < endSpace) {
              this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + dart.notNull(addCount), list, 0);
              this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
            } else {
              let preSpace = dart.notNull(addCount) - endSpace;
              this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + endSpace, list, 0);
              this[_table][$setRange](0, preSpace, list, endSpace);
              this[_tail] = preSpace;
            }
          }
          this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        } else {
          for (let element of elements)
            this[_add$](element);
        }
      }
      remove(value) {
        for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
          let element = this[_table][$_get](i);
          if (dart.equals(element, value)) {
            this[_remove](i);
            this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
            return true;
          }
        }
        return false;
      }
      [_filterWhere](test, removeMatching) {
        if (test == null) dart.nullFailed(I[83], 697, 26, "test");
        if (removeMatching == null) dart.nullFailed(I[83], 697, 48, "removeMatching");
        let modificationCount = this[_modificationCount];
        let i = this[_head];
        while (i != this[_tail]) {
          let element = E.as(this[_table][$_get](i));
          let remove = removeMatching == test(element);
          this[_checkModification](modificationCount);
          if (remove) {
            i = this[_remove](i);
            modificationCount = this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
          } else {
            i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
          }
        }
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[83], 717, 25, "test");
        this[_filterWhere](test, true);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[83], 725, 25, "test");
        this[_filterWhere](test, false);
      }
      clear() {
        if (this[_head] != this[_tail]) {
          for (let i = this[_head]; i != this[_tail]; i = (dart.notNull(i) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0) {
            this[_table][$_set](i, null);
          }
          this[_head] = this[_tail] = 0;
          this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        }
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
      addLast(value) {
        E.as(value);
        this[_add$](value);
      }
      addFirst(value) {
        E.as(value);
        this[_head] = (dart.notNull(this[_head]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        this[_table][$_set](this[_head], value);
        if (this[_head] == this[_tail]) this[_grow$]();
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
      removeFirst() {
        if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        let result = E.as(this[_table][$_get](this[_head]));
        this[_table][$_set](this[_head], null);
        this[_head] = (dart.notNull(this[_head]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head] == this[_tail]) dart.throw(_internal.IterableElementError.noElement());
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        this[_tail] = (dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        let result = E.as(this[_table][$_get](this[_tail]));
        this[_table][$_set](this[_tail], null);
        return result;
      }
      static _isPowerOf2(number) {
        if (number == null) dart.nullFailed(I[83], 777, 31, "number");
        return (dart.notNull(number) & dart.notNull(number) - 1) === 0;
      }
      static _nextPowerOf2(number) {
        if (number == null) dart.nullFailed(I[83], 784, 32, "number");
        if (!(dart.notNull(number) > 0)) dart.assertFailed(null, I[83], 785, 12, "number > 0");
        number = (dart.notNull(number) << 1 >>> 0) - 1;
        for (;;) {
          let nextNumber = (dart.notNull(number) & dart.notNull(number) - 1) >>> 0;
          if (nextNumber === 0) return number;
          number = nextNumber;
        }
      }
      [_checkModification](expectedModificationCount) {
        if (expectedModificationCount == null) dart.nullFailed(I[83], 795, 31, "expectedModificationCount");
        if (expectedModificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      [_add$](element) {
        this[_table][$_set](this[_tail], element);
        this[_tail] = (dart.notNull(this[_tail]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        if (this[_head] == this[_tail]) this[_grow$]();
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
      [_remove](offset) {
        if (offset == null) dart.nullFailed(I[83], 817, 19, "offset");
        let mask = dart.notNull(this[_table][$length]) - 1;
        let startDistance = (dart.notNull(offset) - dart.notNull(this[_head]) & mask) >>> 0;
        let endDistance = (dart.notNull(this[_tail]) - dart.notNull(offset) & mask) >>> 0;
        if (startDistance < endDistance) {
          let i = offset;
          while (i != this[_head]) {
            let prevOffset = (dart.notNull(i) - 1 & mask) >>> 0;
            this[_table][$_set](i, this[_table][$_get](prevOffset));
            i = prevOffset;
          }
          this[_table][$_set](this[_head], null);
          this[_head] = (dart.notNull(this[_head]) + 1 & mask) >>> 0;
          return (dart.notNull(offset) + 1 & mask) >>> 0;
        } else {
          this[_tail] = (dart.notNull(this[_tail]) - 1 & mask) >>> 0;
          let i = offset;
          while (i != this[_tail]) {
            let nextOffset = (dart.notNull(i) + 1 & mask) >>> 0;
            this[_table][$_set](i, this[_table][$_get](nextOffset));
            i = nextOffset;
          }
          this[_table][$_set](this[_tail], null);
          return offset;
        }
      }
      [_grow$]() {
        let newTable = ListOfEN().filled(dart.notNull(this[_table][$length]) * 2, null);
        let split = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
        newTable[$setRange](0, split, this[_table], this[_head]);
        newTable[$setRange](split, split + dart.notNull(this[_head]), this[_table], 0);
        this[_head] = 0;
        this[_tail] = this[_table][$length];
        this[_table] = newTable;
      }
      [_writeToList](target) {
        if (target == null) dart.nullFailed(I[83], 856, 29, "target");
        if (!(dart.notNull(target[$length]) >= dart.notNull(this.length))) dart.assertFailed(null, I[83], 857, 12, "target.length >= length");
        if (dart.notNull(this[_head]) <= dart.notNull(this[_tail])) {
          let length = dart.notNull(this[_tail]) - dart.notNull(this[_head]);
          target[$setRange](0, length, this[_table], this[_head]);
          return length;
        } else {
          let firstPartSize = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
          target[$setRange](0, firstPartSize, this[_table], this[_head]);
          target[$setRange](firstPartSize, firstPartSize + dart.notNull(this[_tail]), this[_table], 0);
          return dart.notNull(this[_tail]) + firstPartSize;
        }
      }
      [_preGrow](newElementCount) {
        if (newElementCount == null) dart.nullFailed(I[83], 871, 21, "newElementCount");
        if (!(dart.notNull(newElementCount) >= dart.notNull(this.length))) dart.assertFailed(null, I[83], 872, 12, "newElementCount >= length");
        newElementCount = dart.notNull(newElementCount) + newElementCount[$rightShift](1);
        let newCapacity = collection.ListQueue._nextPowerOf2(newElementCount);
        let newTable = ListOfEN().filled(newCapacity, null);
        this[_tail] = this[_writeToList](newTable);
        this[_table] = newTable;
        this[_head] = 0;
      }
    }
    (ListQueue.new = function(initialCapacity = null) {
      this[_modificationCount] = 0;
      this[_head] = 0;
      this[_tail] = 0;
      this[_table] = ListOfEN().filled(collection.ListQueue._calculateCapacity(initialCapacity), null);
      ListQueue.__proto__.new.call(this);
      ;
    }).prototype = ListQueue.prototype;
    dart.addTypeTests(ListQueue);
    ListQueue.prototype[_is_ListQueue_default] = true;
    dart.addTypeCaches(ListQueue);
    ListQueue[dart.implements] = () => [collection.Queue$(E)];
    dart.setMethodSignature(ListQueue, () => ({
      __proto__: dart.getMethods(ListQueue.__proto__),
      cast: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [collection.Queue$(R), []], R => [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [_filterWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E]), core.bool]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      clear: dart.fnType(dart.void, []),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      removeLast: dart.fnType(E, []),
      [_checkModification]: dart.fnType(dart.void, [core.int]),
      [_add$]: dart.fnType(dart.void, [E]),
      [_remove]: dart.fnType(core.int, [core.int]),
      [_grow$]: dart.fnType(dart.void, []),
      [_writeToList]: dart.fnType(core.int, [core.List$(dart.nullable(E))]),
      [_preGrow]: dart.fnType(dart.void, [core.int])
    }));
    dart.setLibraryUri(ListQueue, I[24]);
    dart.setFieldSignature(ListQueue, () => ({
      __proto__: dart.getFields(ListQueue.__proto__),
      [_table]: dart.fieldType(core.List$(dart.nullable(E))),
      [_head]: dart.fieldType(core.int),
      [_tail]: dart.fieldType(core.int),
      [_modificationCount]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(ListQueue, [
      'cast',
      'forEach',
      'elementAt',
      'toList',
      'toString'
    ]);
    dart.defineExtensionAccessors(ListQueue, [
      'iterator',
      'isEmpty',
      'length',
      'first',
      'last',
      'single'
    ]);
    return ListQueue;
  });
  collection.ListQueue = collection.ListQueue$();
  dart.defineLazy(collection.ListQueue, {
    /*collection.ListQueue._INITIAL_CAPACITY*/get _INITIAL_CAPACITY() {
      return 8;
    }
  }, false);
  dart.addTypeTests(collection.ListQueue, _is_ListQueue_default);
  var _end = dart.privateName(collection, "_end");
  var _position = dart.privateName(collection, "_position");
  const _is__ListQueueIterator_default = Symbol('_is__ListQueueIterator_default');
  collection._ListQueueIterator$ = dart.generic(E => {
    class _ListQueueIterator extends core.Object {
      get current() {
        return E.as(this[_current$1]);
      }
      moveNext() {
        this[_queue$][_checkModification](this[_modificationCount]);
        if (this[_position] == this[_end]) {
          this[_current$1] = null;
          return false;
        }
        this[_current$1] = this[_queue$][_table][$_get](this[_position]);
        this[_position] = (dart.notNull(this[_position]) + 1 & dart.notNull(this[_queue$][_table][$length]) - 1) >>> 0;
        return true;
      }
    }
    (_ListQueueIterator.new = function(queue) {
      if (queue == null) dart.nullFailed(I[83], 895, 35, "queue");
      this[_current$1] = null;
      this[_queue$] = queue;
      this[_end] = queue[_tail];
      this[_modificationCount] = queue[_modificationCount];
      this[_position] = queue[_head];
      ;
    }).prototype = _ListQueueIterator.prototype;
    dart.addTypeTests(_ListQueueIterator);
    _ListQueueIterator.prototype[_is__ListQueueIterator_default] = true;
    dart.addTypeCaches(_ListQueueIterator);
    _ListQueueIterator[dart.implements] = () => [core.Iterator$(E)];
    dart.setMethodSignature(_ListQueueIterator, () => ({
      __proto__: dart.getMethods(_ListQueueIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_ListQueueIterator, () => ({
      __proto__: dart.getGetters(_ListQueueIterator.__proto__),
      current: E
    }));
    dart.setLibraryUri(_ListQueueIterator, I[24]);
    dart.setFieldSignature(_ListQueueIterator, () => ({
      __proto__: dart.getFields(_ListQueueIterator.__proto__),
      [_queue$]: dart.finalFieldType(collection.ListQueue$(E)),
      [_end]: dart.finalFieldType(core.int),
      [_modificationCount]: dart.finalFieldType(core.int),
      [_position]: dart.fieldType(core.int),
      [_current$1]: dart.fieldType(dart.nullable(E))
    }));
    return _ListQueueIterator;
  });
  collection._ListQueueIterator = collection._ListQueueIterator$();
  dart.addTypeTests(collection._ListQueueIterator, _is__ListQueueIterator_default);
  const _is_SetBase_default = Symbol('_is_SetBase_default');
  collection.SetBase$ = dart.generic(E => {
    const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
    (Object_SetMixin$36.new = function() {
    }).prototype = Object_SetMixin$36.prototype;
    dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(E));
    class SetBase extends Object_SetMixin$36 {
      static setToString(set) {
        if (set == null) dart.nullFailed(I[75], 306, 33, "set");
        return collection.IterableBase.iterableToFullString(set, "{", "}");
      }
    }
    (SetBase.new = function() {
      ;
    }).prototype = SetBase.prototype;
    dart.addTypeTests(SetBase);
    SetBase.prototype[_is_SetBase_default] = true;
    dart.addTypeCaches(SetBase);
    dart.setLibraryUri(SetBase, I[24]);
    return SetBase;
  });
  collection.SetBase = collection.SetBase$();
  dart.addTypeTests(collection.SetBase, _is_SetBase_default);
  const _is__UnmodifiableSetMixin_default = Symbol('_is__UnmodifiableSetMixin_default');
  collection._UnmodifiableSetMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class _UnmodifiableSetMixin extends core.Object {
      static _throwUnmodifiable() {
        dart.throw(new core.UnsupportedError.new("Cannot change an unmodifiable set"));
      }
      add(value) {
        E.as(value);
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      clear() {
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(I[75], 355, 27, "elements");
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(I[75], 358, 36, "elements");
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(I[75], 361, 36, "elements");
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[75], 364, 25, "test");
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[75], 367, 25, "test");
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      remove(value) {
        collection._UnmodifiableSetMixin._throwUnmodifiable();
        return dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (_UnmodifiableSetMixin.new = function() {
      ;
    }).prototype = _UnmodifiableSetMixin.prototype;
    dart.addTypeTests(_UnmodifiableSetMixin);
    _UnmodifiableSetMixin.prototype[_is__UnmodifiableSetMixin_default] = true;
    dart.addTypeCaches(_UnmodifiableSetMixin);
    _UnmodifiableSetMixin[dart.implements] = () => [core.Set$(E)];
    dart.setMethodSignature(_UnmodifiableSetMixin, () => ({
      __proto__: dart.getMethods(_UnmodifiableSetMixin.__proto__),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_UnmodifiableSetMixin, I[24]);
    return _UnmodifiableSetMixin;
  });
  collection._UnmodifiableSetMixin = collection._UnmodifiableSetMixin$();
  dart.addTypeTests(collection._UnmodifiableSetMixin, _is__UnmodifiableSetMixin_default);
  var _map$9 = dart.privateName(collection, "_UnmodifiableSet._map");
  const _is__UnmodifiableSet_default = Symbol('_is__UnmodifiableSet_default');
  collection._UnmodifiableSet$ = dart.generic(E => {
    var _HashSetOfE = () => (_HashSetOfE = dart.constFn(collection._HashSet$(E)))();
    const _SetBase__UnmodifiableSetMixin$36 = class _SetBase__UnmodifiableSetMixin extends collection._SetBase$(E) {};
    (_SetBase__UnmodifiableSetMixin$36.new = function() {
      _SetBase__UnmodifiableSetMixin$36.__proto__.new.call(this);
    }).prototype = _SetBase__UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(_SetBase__UnmodifiableSetMixin$36, collection._UnmodifiableSetMixin$(E));
    class _UnmodifiableSet extends _SetBase__UnmodifiableSetMixin$36 {
      get [_map$5]() {
        return this[_map$9];
      }
      set [_map$5](value) {
        super[_map$5] = value;
      }
      [_newSet]() {
        return new (_HashSetOfE()).new();
      }
      [_newSimilarSet](R) {
        return new (collection._HashSet$(R)).new();
      }
      contains(element) {
        return this[_map$5][$containsKey](element);
      }
      get iterator() {
        return this[_map$5][$keys][$iterator];
      }
      get length() {
        return this[_map$5][$length];
      }
      lookup(element) {
        for (let key of this[_map$5][$keys]) {
          if (dart.equals(key, element)) return key;
        }
        return null;
      }
    }
    (_UnmodifiableSet.new = function(_map) {
      if (_map == null) dart.nullFailed(I[75], 377, 31, "_map");
      this[_map$9] = _map;
      _UnmodifiableSet.__proto__.new.call(this);
      ;
    }).prototype = _UnmodifiableSet.prototype;
    dart.addTypeTests(_UnmodifiableSet);
    _UnmodifiableSet.prototype[_is__UnmodifiableSet_default] = true;
    dart.addTypeCaches(_UnmodifiableSet);
    dart.setMethodSignature(_UnmodifiableSet, () => ({
      __proto__: dart.getMethods(_UnmodifiableSet.__proto__),
      [_newSet]: dart.fnType(core.Set$(E), []),
      [_newSimilarSet]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_UnmodifiableSet, () => ({
      __proto__: dart.getGetters(_UnmodifiableSet.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(_UnmodifiableSet, I[24]);
    dart.setFieldSignature(_UnmodifiableSet, () => ({
      __proto__: dart.getFields(_UnmodifiableSet.__proto__),
      [_map$5]: dart.finalFieldType(core.Map$(E, core.Null))
    }));
    dart.defineExtensionMethods(_UnmodifiableSet, ['contains']);
    dart.defineExtensionAccessors(_UnmodifiableSet, ['iterator', 'length']);
    return _UnmodifiableSet;
  });
  collection._UnmodifiableSet = collection._UnmodifiableSet$();
  dart.addTypeTests(collection._UnmodifiableSet, _is__UnmodifiableSet_default);
  const _is_UnmodifiableSetView_default = Symbol('_is_UnmodifiableSetView_default');
  collection.UnmodifiableSetView$ = dart.generic(E => {
    const SetBase__UnmodifiableSetMixin$36 = class SetBase__UnmodifiableSetMixin extends collection.SetBase$(E) {};
    (SetBase__UnmodifiableSetMixin$36.new = function() {
    }).prototype = SetBase__UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(SetBase__UnmodifiableSetMixin$36, collection._UnmodifiableSetMixin$(E));
    class UnmodifiableSetView extends SetBase__UnmodifiableSetMixin$36 {
      contains(element) {
        return this[_source].contains(element);
      }
      lookup(element) {
        return this[_source].lookup(element);
      }
      get length() {
        return this[_source][$length];
      }
      get iterator() {
        return this[_source].iterator;
      }
      toSet() {
        return this[_source].toSet();
      }
    }
    (UnmodifiableSetView.new = function(source) {
      if (source == null) dart.nullFailed(I[75], 408, 30, "source");
      this[_source] = source;
      ;
    }).prototype = UnmodifiableSetView.prototype;
    dart.addTypeTests(UnmodifiableSetView);
    UnmodifiableSetView.prototype[_is_UnmodifiableSetView_default] = true;
    dart.addTypeCaches(UnmodifiableSetView);
    dart.setMethodSignature(UnmodifiableSetView, () => ({
      __proto__: dart.getMethods(UnmodifiableSetView.__proto__),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), [])
    }));
    dart.setGetterSignature(UnmodifiableSetView, () => ({
      __proto__: dart.getGetters(UnmodifiableSetView.__proto__),
      length: core.int,
      [$length]: core.int,
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(UnmodifiableSetView, I[24]);
    dart.setFieldSignature(UnmodifiableSetView, () => ({
      __proto__: dart.getFields(UnmodifiableSetView.__proto__),
      [_source]: dart.finalFieldType(core.Set$(E))
    }));
    dart.defineExtensionMethods(UnmodifiableSetView, ['contains', 'toSet']);
    dart.defineExtensionAccessors(UnmodifiableSetView, ['length', 'iterator']);
    return UnmodifiableSetView;
  });
  collection.UnmodifiableSetView = collection.UnmodifiableSetView$();
  dart.addTypeTests(collection.UnmodifiableSetView, _is_UnmodifiableSetView_default);
  var left = dart.privateName(collection, "_SplayTreeNode.left");
  var right = dart.privateName(collection, "_SplayTreeNode.right");
  const _is__SplayTreeNode_default = Symbol('_is__SplayTreeNode_default');
  collection._SplayTreeNode$ = dart.generic((K, Node) => {
    var NodeN = () => (NodeN = dart.constFn(dart.nullable(Node)))();
    class _SplayTreeNode extends core.Object {
      get left() {
        return this[left];
      }
      set left(value) {
        this[left] = NodeN().as(value);
      }
      get right() {
        return this[right];
      }
      set right(value) {
        this[right] = NodeN().as(value);
      }
    }
    (_SplayTreeNode.new = function(key) {
      this[left] = null;
      this[right] = null;
      this.key = key;
      ;
    }).prototype = _SplayTreeNode.prototype;
    dart.addTypeTests(_SplayTreeNode);
    _SplayTreeNode.prototype[_is__SplayTreeNode_default] = true;
    dart.addTypeCaches(_SplayTreeNode);
    dart.setLibraryUri(_SplayTreeNode, I[24]);
    dart.setFieldSignature(_SplayTreeNode, () => ({
      __proto__: dart.getFields(_SplayTreeNode.__proto__),
      key: dart.finalFieldType(K),
      left: dart.fieldType(dart.nullable(Node)),
      right: dart.fieldType(dart.nullable(Node))
    }));
    return _SplayTreeNode;
  });
  collection._SplayTreeNode = collection._SplayTreeNode$();
  dart.addTypeTests(collection._SplayTreeNode, _is__SplayTreeNode_default);
  const _is__SplayTreeSetNode_default = Symbol('_is__SplayTreeSetNode_default');
  collection._SplayTreeSetNode$ = dart.generic(K => {
    class _SplayTreeSetNode extends collection._SplayTreeNode {}
    (_SplayTreeSetNode.new = function(key) {
      _SplayTreeSetNode.__proto__.new.call(this, key);
      ;
    }).prototype = _SplayTreeSetNode.prototype;
    dart.addTypeTests(_SplayTreeSetNode);
    _SplayTreeSetNode.prototype[_is__SplayTreeSetNode_default] = true;
    dart.addTypeCaches(_SplayTreeSetNode);
    dart.setLibraryUri(_SplayTreeSetNode, I[24]);
    return _SplayTreeSetNode;
  }, K => {
    dart.setBaseClass(collection._SplayTreeSetNode$(K), collection._SplayTreeNode$(K, collection._SplayTreeSetNode$(K)));
  });
  collection._SplayTreeSetNode = collection._SplayTreeSetNode$();
  dart.addTypeTests(collection._SplayTreeSetNode, _is__SplayTreeSetNode_default);
  var value$2 = dart.privateName(collection, "_SplayTreeMapNode.value");
  const _is__SplayTreeMapNode_default = Symbol('_is__SplayTreeMapNode_default');
  collection._SplayTreeMapNode$ = dart.generic((K, V) => {
    class _SplayTreeMapNode extends collection._SplayTreeNode {
      get value() {
        return this[value$2];
      }
      set value(value) {
        this[value$2] = V.as(value);
      }
    }
    (_SplayTreeMapNode.new = function(key, value) {
      this[value$2] = value;
      _SplayTreeMapNode.__proto__.new.call(this, key);
      ;
    }).prototype = _SplayTreeMapNode.prototype;
    dart.addTypeTests(_SplayTreeMapNode);
    _SplayTreeMapNode.prototype[_is__SplayTreeMapNode_default] = true;
    dart.addTypeCaches(_SplayTreeMapNode);
    dart.setLibraryUri(_SplayTreeMapNode, I[24]);
    dart.setFieldSignature(_SplayTreeMapNode, () => ({
      __proto__: dart.getFields(_SplayTreeMapNode.__proto__),
      value: dart.fieldType(V)
    }));
    return _SplayTreeMapNode;
  }, (K, V) => {
    dart.setBaseClass(collection._SplayTreeMapNode$(K, V), collection._SplayTreeNode$(K, collection._SplayTreeMapNode$(K, V)));
  });
  collection._SplayTreeMapNode = collection._SplayTreeMapNode$();
  dart.addTypeTests(collection._SplayTreeMapNode, _is__SplayTreeMapNode_default);
  var _count$ = dart.privateName(collection, "_count");
  var _splayCount = dart.privateName(collection, "_splayCount");
  var _root = dart.privateName(collection, "_root");
  var _compare = dart.privateName(collection, "_compare");
  var _splay = dart.privateName(collection, "_splay");
  var _splayMin = dart.privateName(collection, "_splayMin");
  var _splayMax = dart.privateName(collection, "_splayMax");
  var _addNewRoot = dart.privateName(collection, "_addNewRoot");
  var _last$ = dart.privateName(collection, "_last");
  var _clear$ = dart.privateName(collection, "_clear");
  const _is__SplayTree_default = Symbol('_is__SplayTree_default');
  collection._SplayTree$ = dart.generic((K, Node) => {
    class _SplayTree extends core.Object {
      [_splay](key) {
        K.as(key);
        if (this[_root] == null) return -1;
        let right = null;
        let newTreeRight = null;
        let left = null;
        let newTreeLeft = null;
        let current = dart.nullCheck(this[_root]);
        let compare = this[_compare];
        let comp = null;
        while (true) {
          comp = compare(current.key, key);
          if (dart.notNull(comp) > 0) {
            let currentLeft = current.left;
            if (currentLeft == null) break;
            comp = compare(currentLeft.key, key);
            if (dart.notNull(comp) > 0) {
              current.left = currentLeft.right;
              currentLeft.right = current;
              current = currentLeft;
              currentLeft = current.left;
              if (currentLeft == null) break;
            }
            if (right == null) {
              newTreeRight = current;
            } else {
              right.left = current;
            }
            right = current;
            current = currentLeft;
          } else if (dart.notNull(comp) < 0) {
            let currentRight = current.right;
            if (currentRight == null) break;
            comp = compare(currentRight.key, key);
            if (dart.notNull(comp) < 0) {
              current.right = currentRight.left;
              currentRight.left = current;
              current = currentRight;
              currentRight = current.right;
              if (currentRight == null) break;
            }
            if (left == null) {
              newTreeLeft = current;
            } else {
              left.right = current;
            }
            left = current;
            current = currentRight;
          } else {
            break;
          }
        }
        if (left != null) {
          left.right = current.left;
          current.left = newTreeLeft;
        }
        if (right != null) {
          right.left = current.right;
          current.right = newTreeRight;
        }
        this[_root] = current;
        this[_splayCount] = dart.notNull(this[_splayCount]) + 1;
        return comp;
      }
      [_splayMin](node) {
        if (node == null) dart.nullFailed(I[84], 159, 23, "node");
        let current = node;
        let nextLeft = current.left;
        while (nextLeft != null) {
          let left = nextLeft;
          current.left = left.right;
          left.right = current;
          current = left;
          nextLeft = current.left;
        }
        return current;
      }
      [_splayMax](node) {
        if (node == null) dart.nullFailed(I[84], 177, 23, "node");
        let current = node;
        let nextRight = current.right;
        while (nextRight != null) {
          let right = nextRight;
          current.right = right.left;
          right.left = current;
          current = right;
          nextRight = current.right;
        }
        return current;
      }
      [_remove](key) {
        if (this[_root] == null) return null;
        let comp = this[_splay](key);
        if (comp !== 0) return null;
        let root = dart.nullCheck(this[_root]);
        let result = root;
        let left = root.left;
        this[_count$] = dart.notNull(this[_count$]) - 1;
        if (left == null) {
          this[_root] = root.right;
        } else {
          let right = root.right;
          root = this[_splayMax](left);
          root.right = right;
          this[_root] = root;
        }
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        return result;
      }
      [_addNewRoot](node, comp) {
        if (node == null) dart.nullFailed(I[84], 219, 25, "node");
        if (comp == null) dart.nullFailed(I[84], 219, 35, "comp");
        this[_count$] = dart.notNull(this[_count$]) + 1;
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        let root = this[_root];
        if (root == null) {
          this[_root] = node;
          return;
        }
        if (dart.notNull(comp) < 0) {
          node.left = root;
          node.right = root.right;
          root.right = null;
        } else {
          node.right = root;
          node.left = root.left;
          root.left = null;
        }
        this[_root] = node;
      }
      get [_first]() {
        let root = this[_root];
        if (root == null) return null;
        this[_root] = this[_splayMin](root);
        return this[_root];
      }
      get [_last$]() {
        let root = this[_root];
        if (root == null) return null;
        this[_root] = this[_splayMax](root);
        return this[_root];
      }
      [_clear$]() {
        this[_root] = null;
        this[_count$] = 0;
        this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
      }
    }
    (_SplayTree.new = function() {
      this[_count$] = 0;
      this[_modificationCount] = 0;
      this[_splayCount] = 0;
      ;
    }).prototype = _SplayTree.prototype;
    dart.addTypeTests(_SplayTree);
    _SplayTree.prototype[_is__SplayTree_default] = true;
    dart.addTypeCaches(_SplayTree);
    dart.setMethodSignature(_SplayTree, () => ({
      __proto__: dart.getMethods(_SplayTree.__proto__),
      [_splay]: dart.fnType(core.int, [dart.nullable(core.Object)]),
      [_splayMin]: dart.fnType(Node, [Node]),
      [_splayMax]: dart.fnType(Node, [Node]),
      [_remove]: dart.fnType(dart.nullable(Node), [K]),
      [_addNewRoot]: dart.fnType(dart.void, [Node, core.int]),
      [_clear$]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_SplayTree, () => ({
      __proto__: dart.getGetters(_SplayTree.__proto__),
      [_first]: dart.nullable(Node),
      [_last$]: dart.nullable(Node)
    }));
    dart.setLibraryUri(_SplayTree, I[24]);
    dart.setFieldSignature(_SplayTree, () => ({
      __proto__: dart.getFields(_SplayTree.__proto__),
      [_count$]: dart.fieldType(core.int),
      [_modificationCount]: dart.fieldType(core.int),
      [_splayCount]: dart.fieldType(core.int)
    }));
    return _SplayTree;
  });
  collection._SplayTree = collection._SplayTree$();
  dart.addTypeTests(collection._SplayTree, _is__SplayTree_default);
  var _root$ = dart.privateName(collection, "SplayTreeMap._root");
  var _compare$ = dart.privateName(collection, "SplayTreeMap._compare");
  var _validKey = dart.privateName(collection, "SplayTreeMap._validKey");
  const _is_SplayTreeMap_default = Symbol('_is_SplayTreeMap_default');
  collection.SplayTreeMap$ = dart.generic((K, V) => {
    var _SplayTreeMapNodeOfK$V = () => (_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeMapNode$(K, V)))();
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var KAndVTovoid = () => (KAndVTovoid = dart.constFn(dart.fnType(dart.void, [K, V])))();
    var _SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V = () => (_SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeNodeIterator$(K, _SplayTreeMapNodeOfK$V())))();
    var _SplayTreeMapNodeNOfK$V = () => (_SplayTreeMapNodeNOfK$V = dart.constFn(dart.nullable(_SplayTreeMapNodeOfK$V())))();
    var _SplayTreeMapNodeNOfK$VTobool = () => (_SplayTreeMapNodeNOfK$VTobool = dart.constFn(dart.fnType(core.bool, [_SplayTreeMapNodeNOfK$V()])))();
    var _SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V = () => (_SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V = dart.constFn(collection._SplayTreeKeyIterable$(K, _SplayTreeMapNodeOfK$V())))();
    var _SplayTreeValueIterableOfK$V = () => (_SplayTreeValueIterableOfK$V = dart.constFn(collection._SplayTreeValueIterable$(K, V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    const _SplayTree_MapMixin$36 = class _SplayTree_MapMixin extends collection._SplayTree$(K, collection._SplayTreeMapNode$(K, V)) {};
    (_SplayTree_MapMixin$36.new = function() {
      _SplayTree_MapMixin$36.__proto__.new.call(this);
    }).prototype = _SplayTree_MapMixin$36.prototype;
    dart.applyMixin(_SplayTree_MapMixin$36, collection.MapMixin$(K, V));
    class SplayTreeMap extends _SplayTree_MapMixin$36 {
      get [_root]() {
        return this[_root$];
      }
      set [_root](value) {
        this[_root$] = value;
      }
      get [_compare]() {
        return this[_compare$];
      }
      set [_compare](value) {
        this[_compare$] = value;
      }
      get [_validKey$0]() {
        return this[_validKey];
      }
      set [_validKey$0](value) {
        this[_validKey] = value;
      }
      static from(other, compare = null, isValidKey = null) {
        if (other == null) dart.nullFailed(I[84], 312, 51, "other");
        if (core.Map$(K, V).is(other)) {
          return collection.SplayTreeMap$(K, V).of(other, compare, isValidKey);
        }
        let result = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
        other[$forEach](dart.fn((k, v) => {
          result._set(K.as(k), V.as(v));
        }, T$.dynamicAnddynamicTovoid()));
        return result;
      }
      static of(other, compare = null, isValidKey = null) {
        let t172;
        if (other == null) dart.nullFailed(I[84], 326, 37, "other");
        t172 = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
        return (() => {
          t172.addAll(other);
          return t172;
        })();
      }
      static fromIterable(iterable, opts) {
        if (iterable == null) dart.nullFailed(I[84], 342, 46, "iterable");
        let key = opts && 'key' in opts ? opts.key : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let compare = opts && 'compare' in opts ? opts.compare : null;
        let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
        let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
        collection.MapBase._fillMapWithMappedIterable(map, iterable, key, value);
        return map;
      }
      static fromIterables(keys, values, compare = null, isValidKey = null) {
        if (keys == null) dart.nullFailed(I[84], 361, 50, "keys");
        if (values == null) dart.nullFailed(I[84], 361, 68, "values");
        let map = new (collection.SplayTreeMap$(K, V)).new(compare, isValidKey);
        collection.MapBase._fillMapWithIterables(map, keys, values);
        return map;
      }
      _get(key) {
        let t172;
        if (!dart.test((t172 = key, this[_validKey$0](t172)))) return null;
        if (this[_root] != null) {
          let comp = this[_splay](K.as(key));
          if (comp === 0) {
            return dart.nullCheck(this[_root]).value;
          }
        }
        return null;
      }
      remove(key) {
        let t172;
        if (!dart.test((t172 = key, this[_validKey$0](t172)))) return null;
        let mapRoot = this[_remove](K.as(key));
        if (mapRoot != null) return mapRoot.value;
        return null;
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        if (key == null) dart.throw(new core.ArgumentError.new(key));
        let comp = this[_splay](key);
        if (comp === 0) {
          dart.nullCheck(this[_root]).value = value;
          return value$;
        }
        this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[84], 399, 26, "ifAbsent");
        if (key == null) dart.throw(new core.ArgumentError.new(key));
        let comp = this[_splay](key);
        if (comp === 0) {
          return dart.nullCheck(this[_root]).value;
        }
        let modificationCount = this[_modificationCount];
        let splayCount = this[_splayCount];
        let value = ifAbsent();
        if (modificationCount != this[_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (splayCount != this[_splayCount]) {
          comp = this[_splay](key);
          if (!(comp !== 0)) dart.assertFailed(null, I[84], 414, 14, "comp != 0");
        }
        this[_addNewRoot](new (_SplayTreeMapNodeOfK$V()).new(key, value), comp);
        return value;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(I[84], 420, 25, "other");
        other[$forEach](dart.fn((key, value) => {
          this._set(key, value);
        }, KAndVTovoid()));
      }
      get isEmpty() {
        return this[_root] == null;
      }
      get isNotEmpty() {
        return !dart.test(this.isEmpty);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[84], 432, 21, "f");
        let nodes = new (_SplayTreeNodeIteratorOfK$_SplayTreeMapNodeOfK$V()).new(this);
        while (dart.test(nodes.moveNext())) {
          let node = nodes.current;
          f(node.key, node.value);
        }
      }
      get length() {
        return this[_count$];
      }
      clear() {
        this[_clear$]();
      }
      containsKey(key) {
        let t172;
        return dart.test((t172 = key, this[_validKey$0](t172))) && this[_splay](K.as(key)) === 0;
      }
      containsValue(value) {
        let initialSplayCount = this[_splayCount];
        const visit = node => {
          while (node != null) {
            if (dart.equals(node.value, value)) return true;
            if (initialSplayCount != this[_splayCount]) {
              dart.throw(new core.ConcurrentModificationError.new(this));
            }
            if (node.right != null && dart.test(visit(node.right))) {
              return true;
            }
            node = node.left;
          }
          return false;
        };
        dart.fn(visit, _SplayTreeMapNodeNOfK$VTobool());
        return visit(this[_root]);
      }
      get keys() {
        return new (_SplayTreeKeyIterableOfK$_SplayTreeMapNodeOfK$V()).new(this);
      }
      get values() {
        return new (_SplayTreeValueIterableOfK$V()).new(this);
      }
      firstKey() {
        if (this[_root] == null) return null;
        return dart.nullCheck(this[_first]).key;
      }
      lastKey() {
        if (this[_root] == null) return null;
        return dart.nullCheck(this[_last$]).key;
      }
      lastKeyBefore(key) {
        K.as(key);
        if (key == null) dart.throw(new core.ArgumentError.new(key));
        if (this[_root] == null) return null;
        let comp = this[_splay](key);
        if (dart.notNull(comp) < 0) return dart.nullCheck(this[_root]).key;
        let node = dart.nullCheck(this[_root]).left;
        if (node == null) return null;
        let nodeRight = node.right;
        while (nodeRight != null) {
          node = nodeRight;
          nodeRight = node.right;
        }
        return dart.nullCheck(node).key;
      }
      firstKeyAfter(key) {
        K.as(key);
        if (key == null) dart.throw(new core.ArgumentError.new(key));
        if (this[_root] == null) return null;
        let comp = this[_splay](key);
        if (dart.notNull(comp) > 0) return dart.nullCheck(this[_root]).key;
        let node = dart.nullCheck(this[_root]).right;
        if (node == null) return null;
        let nodeLeft = node.left;
        while (nodeLeft != null) {
          node = nodeLeft;
          nodeLeft = node.left;
        }
        return dart.nullCheck(node).key;
      }
    }
    (SplayTreeMap.new = function(compare = null, isValidKey = null) {
      let t172, t172$;
      this[_root$] = null;
      this[_compare$] = (t172 = compare, t172 == null ? collection._defaultCompare(K) : t172);
      this[_validKey] = (t172$ = isValidKey, t172$ == null ? dart.fn(v => K.is(v), T$0.dynamicTobool()) : t172$);
      SplayTreeMap.__proto__.new.call(this);
      ;
    }).prototype = SplayTreeMap.prototype;
    dart.addTypeTests(SplayTreeMap);
    SplayTreeMap.prototype[_is_SplayTreeMap_default] = true;
    dart.addTypeCaches(SplayTreeMap);
    dart.setMethodSignature(SplayTreeMap, () => ({
      __proto__: dart.getMethods(SplayTreeMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      firstKey: dart.fnType(dart.nullable(K), []),
      lastKey: dart.fnType(dart.nullable(K), []),
      lastKeyBefore: dart.fnType(dart.nullable(K), [dart.nullable(core.Object)]),
      firstKeyAfter: dart.fnType(dart.nullable(K), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SplayTreeMap, () => ({
      __proto__: dart.getGetters(SplayTreeMap.__proto__),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(SplayTreeMap, I[24]);
    dart.setFieldSignature(SplayTreeMap, () => ({
      __proto__: dart.getFields(SplayTreeMap.__proto__),
      [_root]: dart.fieldType(dart.nullable(collection._SplayTreeMapNode$(K, V))),
      [_compare]: dart.fieldType(dart.fnType(core.int, [K, K])),
      [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.dynamic]))
    }));
    dart.defineExtensionMethods(SplayTreeMap, [
      '_get',
      'remove',
      '_set',
      'putIfAbsent',
      'addAll',
      'forEach',
      'clear',
      'containsKey',
      'containsValue'
    ]);
    dart.defineExtensionAccessors(SplayTreeMap, [
      'isEmpty',
      'isNotEmpty',
      'length',
      'keys',
      'values'
    ]);
    return SplayTreeMap;
  });
  collection.SplayTreeMap = collection.SplayTreeMap$();
  dart.addTypeTests(collection.SplayTreeMap, _is_SplayTreeMap_default);
  var _workList = dart.privateName(collection, "_workList");
  var _currentNode = dart.privateName(collection, "_currentNode");
  var _tree$ = dart.privateName(collection, "_tree");
  var _findLeftMostDescendent = dart.privateName(collection, "_findLeftMostDescendent");
  var _getValue = dart.privateName(collection, "_getValue");
  var _rebuildWorkList = dart.privateName(collection, "_rebuildWorkList");
  const _is__SplayTreeIterator_default = Symbol('_is__SplayTreeIterator_default');
  collection._SplayTreeIterator$ = dart.generic((K, Node, T) => {
    var JSArrayOfNode = () => (JSArrayOfNode = dart.constFn(_interceptors.JSArray$(Node)))();
    class _SplayTreeIterator extends core.Object {
      get current() {
        let node = this[_currentNode];
        if (node == null) return T.as(null);
        return this[_getValue](node);
      }
      [_findLeftMostDescendent](node) {
        while (node != null) {
          this[_workList][$add](node);
          node = node.left;
        }
      }
      [_rebuildWorkList](currentNode) {
        if (currentNode == null) dart.nullFailed(I[84], 601, 30, "currentNode");
        if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, I[84], 602, 12, "_workList.isNotEmpty");
        this[_workList][$clear]();
        this[_tree$][_splay](currentNode.key);
        this[_findLeftMostDescendent](dart.nullCheck(this[_tree$][_root]).right);
        if (!dart.test(this[_workList][$isNotEmpty])) dart.assertFailed(null, I[84], 606, 12, "_workList.isNotEmpty");
      }
      moveNext() {
        if (this[_modificationCount] != this[_tree$][_modificationCount]) {
          dart.throw(new core.ConcurrentModificationError.new(this[_tree$]));
        }
        if (dart.test(this[_workList][$isEmpty])) {
          this[_currentNode] = null;
          return false;
        }
        if (this[_tree$][_splayCount] != this[_splayCount] && this[_currentNode] != null) {
          this[_rebuildWorkList](dart.nullCheck(this[_currentNode]));
        }
        this[_currentNode] = this[_workList][$removeLast]();
        this[_findLeftMostDescendent](dart.nullCheck(this[_currentNode]).right);
        return true;
      }
    }
    (_SplayTreeIterator.new = function(tree) {
      if (tree == null) dart.nullFailed(I[84], 560, 42, "tree");
      this[_workList] = JSArrayOfNode().of([]);
      this[_currentNode] = null;
      this[_tree$] = tree;
      this[_modificationCount] = tree[_modificationCount];
      this[_splayCount] = tree[_splayCount];
      this[_findLeftMostDescendent](tree[_root]);
    }).prototype = _SplayTreeIterator.prototype;
    (_SplayTreeIterator.startAt = function(tree, startKey) {
      if (tree == null) dart.nullFailed(I[84], 567, 50, "tree");
      this[_workList] = JSArrayOfNode().of([]);
      this[_currentNode] = null;
      this[_tree$] = tree;
      this[_modificationCount] = tree[_modificationCount];
      this[_splayCount] = -1;
      if (tree[_root] == null) return;
      let compare = tree[_splay](startKey);
      this[_splayCount] = tree[_splayCount];
      if (dart.notNull(compare) < 0) {
        this[_findLeftMostDescendent](dart.nullCheck(tree[_root]).right);
      } else {
        this[_workList][$add](dart.nullCheck(tree[_root]));
      }
    }).prototype = _SplayTreeIterator.prototype;
    dart.addTypeTests(_SplayTreeIterator);
    _SplayTreeIterator.prototype[_is__SplayTreeIterator_default] = true;
    dart.addTypeCaches(_SplayTreeIterator);
    _SplayTreeIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(_SplayTreeIterator, () => ({
      __proto__: dart.getMethods(_SplayTreeIterator.__proto__),
      [_findLeftMostDescendent]: dart.fnType(dart.void, [dart.nullable(Node)]),
      [_rebuildWorkList]: dart.fnType(dart.void, [Node]),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_SplayTreeIterator, () => ({
      __proto__: dart.getGetters(_SplayTreeIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(_SplayTreeIterator, I[24]);
    dart.setFieldSignature(_SplayTreeIterator, () => ({
      __proto__: dart.getFields(_SplayTreeIterator.__proto__),
      [_tree$]: dart.finalFieldType(collection._SplayTree$(K, Node)),
      [_workList]: dart.finalFieldType(core.List$(Node)),
      [_modificationCount]: dart.fieldType(core.int),
      [_splayCount]: dart.fieldType(core.int),
      [_currentNode]: dart.fieldType(dart.nullable(Node))
    }));
    return _SplayTreeIterator;
  });
  collection._SplayTreeIterator = collection._SplayTreeIterator$();
  dart.addTypeTests(collection._SplayTreeIterator, _is__SplayTreeIterator_default);
  var _copyNode = dart.privateName(collection, "_copyNode");
  const _is__SplayTreeKeyIterable_default = Symbol('_is__SplayTreeKeyIterable_default');
  collection._SplayTreeKeyIterable$ = dart.generic((K, Node) => {
    var _SplayTreeKeyIteratorOfK$Node = () => (_SplayTreeKeyIteratorOfK$Node = dart.constFn(collection._SplayTreeKeyIterator$(K, Node)))();
    var SplayTreeSetOfK = () => (SplayTreeSetOfK = dart.constFn(collection.SplayTreeSet$(K)))();
    var KAndKToint = () => (KAndKToint = dart.constFn(dart.fnType(core.int, [K, K])))();
    class _SplayTreeKeyIterable extends _internal.EfficientLengthIterable$(K) {
      get length() {
        return this[_tree$][_count$];
      }
      get isEmpty() {
        return this[_tree$][_count$] === 0;
      }
      get iterator() {
        return new (_SplayTreeKeyIteratorOfK$Node()).new(this[_tree$]);
      }
      toSet() {
        let set = new (SplayTreeSetOfK()).new(KAndKToint().as(this[_tree$][_compare]), this[_tree$][_validKey$0]);
        set[_count$] = this[_tree$][_count$];
        set[_root] = set[_copyNode](Node, this[_tree$][_root]);
        return set;
      }
    }
    (_SplayTreeKeyIterable.new = function(_tree) {
      if (_tree == null) dart.nullFailed(I[84], 636, 30, "_tree");
      this[_tree$] = _tree;
      _SplayTreeKeyIterable.__proto__.new.call(this);
      ;
    }).prototype = _SplayTreeKeyIterable.prototype;
    dart.addTypeTests(_SplayTreeKeyIterable);
    _SplayTreeKeyIterable.prototype[_is__SplayTreeKeyIterable_default] = true;
    dart.addTypeCaches(_SplayTreeKeyIterable);
    dart.setGetterSignature(_SplayTreeKeyIterable, () => ({
      __proto__: dart.getGetters(_SplayTreeKeyIterable.__proto__),
      iterator: core.Iterator$(K),
      [$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(_SplayTreeKeyIterable, I[24]);
    dart.setFieldSignature(_SplayTreeKeyIterable, () => ({
      __proto__: dart.getFields(_SplayTreeKeyIterable.__proto__),
      [_tree$]: dart.fieldType(collection._SplayTree$(K, Node))
    }));
    dart.defineExtensionMethods(_SplayTreeKeyIterable, ['toSet']);
    dart.defineExtensionAccessors(_SplayTreeKeyIterable, ['length', 'isEmpty', 'iterator']);
    return _SplayTreeKeyIterable;
  });
  collection._SplayTreeKeyIterable = collection._SplayTreeKeyIterable$();
  dart.addTypeTests(collection._SplayTreeKeyIterable, _is__SplayTreeKeyIterable_default);
  const _is__SplayTreeValueIterable_default = Symbol('_is__SplayTreeValueIterable_default');
  collection._SplayTreeValueIterable$ = dart.generic((K, V) => {
    var _SplayTreeValueIteratorOfK$V = () => (_SplayTreeValueIteratorOfK$V = dart.constFn(collection._SplayTreeValueIterator$(K, V)))();
    class _SplayTreeValueIterable extends _internal.EfficientLengthIterable$(V) {
      get length() {
        return this[_map$5][_count$];
      }
      get isEmpty() {
        return this[_map$5][_count$] === 0;
      }
      get iterator() {
        return new (_SplayTreeValueIteratorOfK$V()).new(this[_map$5]);
      }
    }
    (_SplayTreeValueIterable.new = function(_map) {
      if (_map == null) dart.nullFailed(I[84], 651, 32, "_map");
      this[_map$5] = _map;
      _SplayTreeValueIterable.__proto__.new.call(this);
      ;
    }).prototype = _SplayTreeValueIterable.prototype;
    dart.addTypeTests(_SplayTreeValueIterable);
    _SplayTreeValueIterable.prototype[_is__SplayTreeValueIterable_default] = true;
    dart.addTypeCaches(_SplayTreeValueIterable);
    dart.setGetterSignature(_SplayTreeValueIterable, () => ({
      __proto__: dart.getGetters(_SplayTreeValueIterable.__proto__),
      iterator: core.Iterator$(V),
      [$iterator]: core.Iterator$(V)
    }));
    dart.setLibraryUri(_SplayTreeValueIterable, I[24]);
    dart.setFieldSignature(_SplayTreeValueIterable, () => ({
      __proto__: dart.getFields(_SplayTreeValueIterable.__proto__),
      [_map$5]: dart.fieldType(collection.SplayTreeMap$(K, V))
    }));
    dart.defineExtensionAccessors(_SplayTreeValueIterable, ['length', 'isEmpty', 'iterator']);
    return _SplayTreeValueIterable;
  });
  collection._SplayTreeValueIterable = collection._SplayTreeValueIterable$();
  dart.addTypeTests(collection._SplayTreeValueIterable, _is__SplayTreeValueIterable_default);
  const _is__SplayTreeKeyIterator_default = Symbol('_is__SplayTreeKeyIterator_default');
  collection._SplayTreeKeyIterator$ = dart.generic((K, Node) => {
    class _SplayTreeKeyIterator extends collection._SplayTreeIterator$(K, Node, K) {
      [_getValue](node) {
        if (node == null) dart.nullFailed(I[84], 660, 20, "node");
        return node.key;
      }
    }
    (_SplayTreeKeyIterator.new = function(map) {
      if (map == null) dart.nullFailed(I[84], 659, 45, "map");
      _SplayTreeKeyIterator.__proto__.new.call(this, map);
      ;
    }).prototype = _SplayTreeKeyIterator.prototype;
    dart.addTypeTests(_SplayTreeKeyIterator);
    _SplayTreeKeyIterator.prototype[_is__SplayTreeKeyIterator_default] = true;
    dart.addTypeCaches(_SplayTreeKeyIterator);
    dart.setMethodSignature(_SplayTreeKeyIterator, () => ({
      __proto__: dart.getMethods(_SplayTreeKeyIterator.__proto__),
      [_getValue]: dart.fnType(K, [Node])
    }));
    dart.setLibraryUri(_SplayTreeKeyIterator, I[24]);
    return _SplayTreeKeyIterator;
  });
  collection._SplayTreeKeyIterator = collection._SplayTreeKeyIterator$();
  dart.addTypeTests(collection._SplayTreeKeyIterator, _is__SplayTreeKeyIterator_default);
  const _is__SplayTreeValueIterator_default = Symbol('_is__SplayTreeValueIterator_default');
  collection._SplayTreeValueIterator$ = dart.generic((K, V) => {
    class _SplayTreeValueIterator extends collection._SplayTreeIterator$(K, collection._SplayTreeMapNode$(K, V), V) {
      [_getValue](node) {
        if (node == null) dart.nullFailed(I[84], 666, 39, "node");
        return node.value;
      }
    }
    (_SplayTreeValueIterator.new = function(map) {
      if (map == null) dart.nullFailed(I[84], 665, 46, "map");
      _SplayTreeValueIterator.__proto__.new.call(this, map);
      ;
    }).prototype = _SplayTreeValueIterator.prototype;
    dart.addTypeTests(_SplayTreeValueIterator);
    _SplayTreeValueIterator.prototype[_is__SplayTreeValueIterator_default] = true;
    dart.addTypeCaches(_SplayTreeValueIterator);
    dart.setMethodSignature(_SplayTreeValueIterator, () => ({
      __proto__: dart.getMethods(_SplayTreeValueIterator.__proto__),
      [_getValue]: dart.fnType(V, [collection._SplayTreeMapNode$(K, V)])
    }));
    dart.setLibraryUri(_SplayTreeValueIterator, I[24]);
    return _SplayTreeValueIterator;
  });
  collection._SplayTreeValueIterator = collection._SplayTreeValueIterator$();
  dart.addTypeTests(collection._SplayTreeValueIterator, _is__SplayTreeValueIterator_default);
  const _is__SplayTreeNodeIterator_default = Symbol('_is__SplayTreeNodeIterator_default');
  collection._SplayTreeNodeIterator$ = dart.generic((K, Node) => {
    class _SplayTreeNodeIterator extends collection._SplayTreeIterator$(K, Node, Node) {
      [_getValue](node) {
        if (node == null) dart.nullFailed(I[84], 674, 23, "node");
        return node;
      }
    }
    (_SplayTreeNodeIterator.new = function(tree) {
      if (tree == null) dart.nullFailed(I[84], 671, 46, "tree");
      _SplayTreeNodeIterator.__proto__.new.call(this, tree);
      ;
    }).prototype = _SplayTreeNodeIterator.prototype;
    (_SplayTreeNodeIterator.startAt = function(tree, startKey) {
      if (tree == null) dart.nullFailed(I[84], 672, 54, "tree");
      _SplayTreeNodeIterator.__proto__.startAt.call(this, tree, startKey);
      ;
    }).prototype = _SplayTreeNodeIterator.prototype;
    dart.addTypeTests(_SplayTreeNodeIterator);
    _SplayTreeNodeIterator.prototype[_is__SplayTreeNodeIterator_default] = true;
    dart.addTypeCaches(_SplayTreeNodeIterator);
    dart.setMethodSignature(_SplayTreeNodeIterator, () => ({
      __proto__: dart.getMethods(_SplayTreeNodeIterator.__proto__),
      [_getValue]: dart.fnType(Node, [Node])
    }));
    dart.setLibraryUri(_SplayTreeNodeIterator, I[24]);
    return _SplayTreeNodeIterator;
  });
  collection._SplayTreeNodeIterator = collection._SplayTreeNodeIterator$();
  dart.addTypeTests(collection._SplayTreeNodeIterator, _is__SplayTreeNodeIterator_default);
  var _root$0 = dart.privateName(collection, "SplayTreeSet._root");
  var _compare$0 = dart.privateName(collection, "SplayTreeSet._compare");
  var _validKey$1 = dart.privateName(collection, "SplayTreeSet._validKey");
  var _clone$ = dart.privateName(collection, "_clone");
  const _is_SplayTreeSet_default = Symbol('_is_SplayTreeSet_default');
  collection.SplayTreeSet$ = dart.generic(E => {
    var _SplayTreeSetNodeOfE = () => (_SplayTreeSetNodeOfE = dart.constFn(collection._SplayTreeSetNode$(E)))();
    var _SplayTreeSetNodeNOfE = () => (_SplayTreeSetNodeNOfE = dart.constFn(dart.nullable(_SplayTreeSetNodeOfE())))();
    var _SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE = () => (_SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE = dart.constFn(collection._SplayTreeKeyIterator$(E, _SplayTreeSetNodeOfE())))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var SplayTreeSetOfE = () => (SplayTreeSetOfE = dart.constFn(collection.SplayTreeSet$(E)))();
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    const _SplayTree_IterableMixin$36 = class _SplayTree_IterableMixin extends collection._SplayTree$(E, collection._SplayTreeSetNode$(E)) {};
    (_SplayTree_IterableMixin$36.new = function() {
      _SplayTree_IterableMixin$36.__proto__.new.call(this);
    }).prototype = _SplayTree_IterableMixin$36.prototype;
    dart.applyMixin(_SplayTree_IterableMixin$36, collection.IterableMixin$(E));
    const _SplayTree_SetMixin$36 = class _SplayTree_SetMixin extends _SplayTree_IterableMixin$36 {};
    (_SplayTree_SetMixin$36.new = function() {
      _SplayTree_SetMixin$36.__proto__.new.call(this);
    }).prototype = _SplayTree_SetMixin$36.prototype;
    dart.applyMixin(_SplayTree_SetMixin$36, collection.SetMixin$(E));
    class SplayTreeSet extends _SplayTree_SetMixin$36 {
      get [_root]() {
        return this[_root$0];
      }
      set [_root](value) {
        this[_root$0] = _SplayTreeSetNodeNOfE().as(value);
      }
      get [_compare]() {
        return this[_compare$0];
      }
      set [_compare](value) {
        this[_compare$0] = value;
      }
      get [_validKey$0]() {
        return this[_validKey$1];
      }
      set [_validKey$0](value) {
        this[_validKey$1] = value;
      }
      static from(elements, compare = null, isValidKey = null) {
        if (elements == null) dart.nullFailed(I[84], 739, 38, "elements");
        if (core.Iterable$(E).is(elements)) {
          return collection.SplayTreeSet$(E).of(elements, compare, isValidKey);
        }
        let result = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
        for (let element of elements) {
          result.add(E.as(element));
        }
        return result;
      }
      static of(elements, compare = null, isValidKey = null) {
        let t172;
        if (elements == null) dart.nullFailed(I[84], 757, 39, "elements");
        t172 = new (collection.SplayTreeSet$(E)).new(compare, isValidKey);
        return (() => {
          t172.addAll(elements);
          return t172;
        })();
      }
      [_newSet](T) {
        return new (collection.SplayTreeSet$(T)).new(dart.fn((a, b) => {
          let t173, t172;
          t172 = E.as(a);
          t173 = E.as(b);
          return this[_compare](t172, t173);
        }, dart.fnType(core.int, [T, T])), this[_validKey$0]);
      }
      cast(R) {
        return core.Set.castFrom(E, R, this, {newSet: dart.bind(this, _newSet)});
      }
      get iterator() {
        return new (_SplayTreeKeyIteratorOfE$_SplayTreeSetNodeOfE()).new(this);
      }
      get length() {
        return this[_count$];
      }
      get isEmpty() {
        return this[_root] == null;
      }
      get isNotEmpty() {
        return this[_root] != null;
      }
      get first() {
        if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
        return dart.nullCheck(this[_first]).key;
      }
      get last() {
        if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
        return dart.nullCheck(this[_last$]).key;
      }
      get single() {
        if (this[_count$] === 0) dart.throw(_internal.IterableElementError.noElement());
        if (dart.notNull(this[_count$]) > 1) dart.throw(_internal.IterableElementError.tooMany());
        return dart.nullCheck(this[_root]).key;
      }
      contains(element) {
        let t172;
        return dart.test((t172 = element, this[_validKey$0](t172))) && this[_splay](E.as(element)) === 0;
      }
      add(element) {
        E.as(element);
        let compare = this[_splay](element);
        if (compare === 0) return false;
        this[_addNewRoot](new (_SplayTreeSetNodeOfE()).new(element), compare);
        return true;
      }
      remove(object) {
        let t172;
        if (!dart.test((t172 = object, this[_validKey$0](t172)))) return false;
        return this[_remove](E.as(object)) != null;
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(I[84], 809, 27, "elements");
        for (let element of elements) {
          let compare = this[_splay](element);
          if (compare !== 0) {
            this[_addNewRoot](new (_SplayTreeSetNodeOfE()).new(element), compare);
          }
        }
      }
      removeAll(elements) {
        let t172;
        if (elements == null) dart.nullFailed(I[84], 818, 36, "elements");
        for (let element of elements) {
          if (dart.test((t172 = element, this[_validKey$0](t172)))) this[_remove](E.as(element));
        }
      }
      retainAll(elements) {
        let t172;
        if (elements == null) dart.nullFailed(I[84], 824, 36, "elements");
        let retainSet = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
        let modificationCount = this[_modificationCount];
        for (let object of elements) {
          if (modificationCount != this[_modificationCount]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
          if (dart.test((t172 = object, this[_validKey$0](t172))) && this[_splay](E.as(object)) === 0) {
            retainSet.add(dart.nullCheck(this[_root]).key);
          }
        }
        if (retainSet[_count$] != this[_count$]) {
          this[_root] = retainSet[_root];
          this[_count$] = retainSet[_count$];
          this[_modificationCount] = dart.notNull(this[_modificationCount]) + 1;
        }
      }
      lookup(object) {
        let t172;
        if (!dart.test((t172 = object, this[_validKey$0](t172)))) return null;
        let comp = this[_splay](E.as(object));
        if (comp !== 0) return null;
        return dart.nullCheck(this[_root]).key;
      }
      intersection(other) {
        if (other == null) dart.nullFailed(I[84], 853, 36, "other");
        let result = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
        for (let element of this) {
          if (dart.test(other.contains(element))) result.add(element);
        }
        return result;
      }
      difference(other) {
        if (other == null) dart.nullFailed(I[84], 861, 34, "other");
        let result = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
        for (let element of this) {
          if (!dart.test(other.contains(element))) result.add(element);
        }
        return result;
      }
      union(other) {
        let t172;
        SetOfE().as(other);
        if (other == null) dart.nullFailed(I[84], 869, 23, "other");
        t172 = this[_clone$]();
        return (() => {
          t172.addAll(other);
          return t172;
        })();
      }
      [_clone$]() {
        let set = new (SplayTreeSetOfE()).new(this[_compare], this[_validKey$0]);
        set[_count$] = this[_count$];
        set[_root] = this[_copyNode](_SplayTreeSetNodeOfE(), this[_root]);
        return set;
      }
      [_copyNode](Node, node) {
        dart.checkTypeBound(Node, collection._SplayTreeNode$(E, Node), 'Node');
        if (node == null) return null;
        function copyChildren(node, dest) {
          if (node == null) dart.nullFailed(I[84], 889, 28, "node");
          if (dest == null) dart.nullFailed(I[84], 889, 55, "dest");
          let left = null;
          let right = null;
          do {
            left = node.left;
            right = node.right;
            if (left != null) {
              let newLeft = new (_SplayTreeSetNodeOfE()).new(left.key);
              dest.left = newLeft;
              copyChildren(left, newLeft);
            }
            if (right != null) {
              let newRight = new (_SplayTreeSetNodeOfE()).new(right.key);
              dest.right = newRight;
              node = right;
              dest = newRight;
            }
          } while (right != null);
        }
        dart.fn(copyChildren, dart.fnType(dart.void, [Node, _SplayTreeSetNodeOfE()]));
        let result = new (_SplayTreeSetNodeOfE()).new(node.key);
        copyChildren(node, result);
        return result;
      }
      clear() {
        this[_clear$]();
      }
      toSet() {
        return this[_clone$]();
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
    }
    (SplayTreeSet.new = function(compare = null, isValidKey = null) {
      let t172, t172$;
      this[_root$0] = null;
      this[_compare$0] = (t172 = compare, t172 == null ? collection._defaultCompare(E) : t172);
      this[_validKey$1] = (t172$ = isValidKey, t172$ == null ? dart.fn(v => E.is(v), T$0.dynamicTobool()) : t172$);
      SplayTreeSet.__proto__.new.call(this);
      ;
    }).prototype = SplayTreeSet.prototype;
    dart.addTypeTests(SplayTreeSet);
    SplayTreeSet.prototype[_is_SplayTreeSet_default] = true;
    dart.addTypeCaches(SplayTreeSet);
    dart.setMethodSignature(SplayTreeSet, () => ({
      __proto__: dart.getMethods(SplayTreeSet.__proto__),
      [_newSet]: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      [_clone$]: dart.fnType(collection.SplayTreeSet$(E), []),
      [_copyNode]: dart.gFnType(Node => [dart.nullable(collection._SplayTreeSetNode$(E)), [dart.nullable(Node)]], Node => [collection._SplayTreeNode$(E, Node)])
    }));
    dart.setGetterSignature(SplayTreeSet, () => ({
      __proto__: dart.getGetters(SplayTreeSet.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E)
    }));
    dart.setLibraryUri(SplayTreeSet, I[24]);
    dart.setFieldSignature(SplayTreeSet, () => ({
      __proto__: dart.getFields(SplayTreeSet.__proto__),
      [_root]: dart.fieldType(dart.nullable(collection._SplayTreeSetNode$(E))),
      [_compare]: dart.fieldType(dart.fnType(core.int, [E, E])),
      [_validKey$0]: dart.fieldType(dart.fnType(core.bool, [dart.dynamic]))
    }));
    dart.defineExtensionMethods(SplayTreeSet, ['cast', 'contains', 'toSet', 'toString']);
    dart.defineExtensionAccessors(SplayTreeSet, [
      'iterator',
      'length',
      'isEmpty',
      'isNotEmpty',
      'first',
      'last',
      'single'
    ]);
    return SplayTreeSet;
  });
  collection.SplayTreeSet = collection.SplayTreeSet$();
  dart.addTypeTests(collection.SplayTreeSet, _is_SplayTreeSet_default);
  collection._defaultEquals = function _defaultEquals(a, b) {
    return dart.equals(a, b);
  };
  collection._defaultHashCode = function _defaultHashCode(a) {
    return dart.hashCode(a);
  };
  collection._isToStringVisiting = function _isToStringVisiting(o) {
    if (o == null) dart.nullFailed(I[39], 281, 33, "o");
    for (let i = 0; i < dart.notNull(collection._toStringVisiting[$length]); i = i + 1) {
      if (core.identical(o, collection._toStringVisiting[$_get](i))) return true;
    }
    return false;
  };
  collection._iterablePartsToStrings = function _iterablePartsToStrings(iterable, parts) {
    if (iterable == null) dart.nullFailed(I[39], 289, 48, "iterable");
    if (parts == null) dart.nullFailed(I[39], 289, 71, "parts");
    let length = 0;
    let count = 0;
    let it = iterable[$iterator];
    while (length < 80 || count < 3) {
      if (!dart.test(it.moveNext())) return;
      let next = dart.str(it.current);
      parts[$add](next);
      length = length + (next.length + 2);
      count = count + 1;
    }
    let penultimateString = null;
    let ultimateString = null;
    if (!dart.test(it.moveNext())) {
      if (count <= 3 + 2) return;
      ultimateString = parts[$removeLast]();
      penultimateString = parts[$removeLast]();
    } else {
      let penultimate = it.current;
      count = count + 1;
      if (!dart.test(it.moveNext())) {
        if (count <= 3 + 1) {
          parts[$add](dart.str(penultimate));
          return;
        }
        ultimateString = dart.str(penultimate);
        penultimateString = parts[$removeLast]();
        length = length + (ultimateString.length + 2);
      } else {
        let ultimate = it.current;
        count = count + 1;
        if (!(count < 100)) dart.assertFailed(null, I[39], 349, 14, "count < maxCount");
        while (dart.test(it.moveNext())) {
          penultimate = ultimate;
          ultimate = it.current;
          count = count + 1;
          if (count > 100) {
            while (length > 80 - 3 - 2 && count > 3) {
              length = length - (parts[$removeLast]().length + 2);
              count = count - 1;
            }
            parts[$add]("...");
            return;
          }
        }
        penultimateString = dart.str(penultimate);
        ultimateString = dart.str(ultimate);
        length = length + (ultimateString.length + penultimateString.length + 2 * 2);
      }
    }
    let elision = null;
    if (count > dart.notNull(parts[$length]) + 2) {
      elision = "...";
      length = length + (3 + 2);
    }
    while (length > 80 && dart.notNull(parts[$length]) > 3) {
      length = length - (parts[$removeLast]().length + 2);
      if (elision == null) {
        elision = "...";
        length = length + (3 + 2);
      }
    }
    if (elision != null) {
      parts[$add](elision);
    }
    parts[$add](penultimateString);
    parts[$add](ultimateString);
  };
  collection._dynamicCompare = function _dynamicCompare(a, b) {
    return core.Comparable.compare(core.Comparable.as(a), core.Comparable.as(b));
  };
  collection._defaultCompare = function _defaultCompare(K) {
    let compare = C[78] || CT.C78;
    if (dart.fnType(core.int, [K, K]).is(compare)) {
      return compare;
    }
    return C[79] || CT.C79;
  };
  dart.defineLazy(collection, {
    /*collection._toStringVisiting*/get _toStringVisiting() {
      return T$.JSArrayOfObject().of([]);
    }
  }, false);
  var _processed = dart.privateName(convert, "_processed");
  var _data = dart.privateName(convert, "_data");
  var _original$ = dart.privateName(convert, "_original");
  var _isUpgraded = dart.privateName(convert, "_isUpgraded");
  var _upgradedMap = dart.privateName(convert, "_upgradedMap");
  var _process = dart.privateName(convert, "_process");
  var _computeKeys = dart.privateName(convert, "_computeKeys");
  var _upgrade = dart.privateName(convert, "_upgrade");
  core.String = class String extends core.Object {
    static _stringFromJSArray(list, start, endOrNull) {
      if (start == null) dart.nullFailed(I[7], 598, 11, "start");
      let len = core.int.as(dart.dload(list, 'length'));
      let end = core.RangeError.checkValidRange(start, endOrNull, len);
      if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(len)) {
        list = dart.dsend(list, 'sublist', [start, end]);
      }
      return _js_helper.Primitives.stringFromCharCodes(T$.JSArrayOfint().as(list));
    }
    static _stringFromUint8List(charCodes, start, endOrNull) {
      if (charCodes == null) dart.nullFailed(I[7], 609, 23, "charCodes");
      if (start == null) dart.nullFailed(I[7], 609, 38, "start");
      let len = charCodes[$length];
      let end = core.RangeError.checkValidRange(start, endOrNull, len);
      return _js_helper.Primitives.stringFromNativeUint8List(charCodes, start, end);
    }
    static _stringFromIterable(charCodes, start, end) {
      if (charCodes == null) dart.nullFailed(I[7], 616, 21, "charCodes");
      if (start == null) dart.nullFailed(I[7], 616, 36, "start");
      if (dart.notNull(start) < 0) dart.throw(new core.RangeError.range(start, 0, charCodes[$length]));
      if (end != null && dart.notNull(end) < dart.notNull(start)) {
        dart.throw(new core.RangeError.range(end, start, charCodes[$length]));
      }
      let it = charCodes[$iterator];
      for (let i = 0; i < dart.notNull(start); i = i + 1) {
        if (!dart.test(it.moveNext())) {
          dart.throw(new core.RangeError.range(start, 0, i));
        }
      }
      let list = T$.JSArrayOfint().of(new Array());
      if (end == null) {
        while (dart.test(it.moveNext()))
          list[$add](it.current);
      } else {
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          if (!dart.test(it.moveNext())) {
            dart.throw(new core.RangeError.range(end, start, i));
          }
          list[$add](it.current);
        }
      }
      return _js_helper.Primitives.stringFromCharCodes(list);
    }
    static is(o) {
      return typeof o == "string";
    }
    static as(o) {
      if (typeof o == "string") return o;
      return dart.as(o, core.String);
    }
    static fromCharCodes(charCodes, start = 0, end = null) {
      if (charCodes == null) dart.nullFailed(I[7], 573, 46, "charCodes");
      if (start == null) dart.nullFailed(I[7], 574, 12, "start");
      if (_interceptors.JSArray.is(charCodes)) {
        return core.String._stringFromJSArray(charCodes, start, end);
      }
      if (_native_typed_data.NativeUint8List.is(charCodes)) {
        return core.String._stringFromUint8List(charCodes, start, end);
      }
      return core.String._stringFromIterable(charCodes, start, end);
    }
    static fromCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[7], 585, 35, "charCode");
      return _js_helper.Primitives.stringFromCharCode(charCode);
    }
    static fromEnvironment(name, opts) {
      if (name == null) dart.nullFailed(I[7], 590, 41, "name");
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : "";
      if (defaultValue == null) dart.nullFailed(I[7], 590, 55, "defaultValue");
      dart.throw(new core.UnsupportedError.new("String.fromEnvironment can only be used as a const constructor"));
    }
  };
  (core.String[dart.mixinNew] = function() {
  }).prototype = core.String.prototype;
  dart.addTypeCaches(core.String);
  core.String[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
  dart.setLibraryUri(core.String, I[8]);
  convert._JsonMap = class _JsonMap extends collection.MapBase$(core.String, dart.dynamic) {
    _get(key) {
      if (dart.test(this[_isUpgraded])) {
        return this[_upgradedMap][$_get](key);
      } else if (!(typeof key == 'string')) {
        return null;
      } else {
        let result = convert._JsonMap._getProperty(this[_processed], key);
        if (dart.test(convert._JsonMap._isUnprocessed(result))) result = this[_process](key);
        return result;
      }
    }
    get length() {
      return dart.test(this[_isUpgraded]) ? this[_upgradedMap][$length] : this[_computeKeys]()[$length];
    }
    get isEmpty() {
      return this.length === 0;
    }
    get isNotEmpty() {
      return dart.notNull(this.length) > 0;
    }
    get keys() {
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$keys];
      return new convert._JsonMapKeyIterable.new(this);
    }
    get values() {
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$values];
      return T$0.MappedIterableOfString$dynamic().new(this[_computeKeys](), dart.fn(each => this._get(each), T$0.ObjectNTodynamic()));
    }
    _set(key, value$) {
      let value = value$;
      core.String.as(key);
      if (key == null) dart.nullFailed(I[85], 170, 16, "key");
      if (dart.test(this[_isUpgraded])) {
        this[_upgradedMap][$_set](key, value);
      } else if (dart.test(this.containsKey(key))) {
        let processed = this[_processed];
        convert._JsonMap._setProperty(processed, key, value);
        let original = this[_original$];
        if (!core.identical(original, processed)) {
          convert._JsonMap._setProperty(original, key, null);
        }
      } else {
        this[_upgrade]()[$_set](key, value);
      }
      return value$;
    }
    addAll(other) {
      T$0.MapOfString$dynamic().as(other);
      if (other == null) dart.nullFailed(I[85], 185, 36, "other");
      other[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(I[85], 186, 20, "key");
        this._set(key, value);
      }, T$0.StringAnddynamicTovoid()));
    }
    containsValue(value) {
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsValue](value);
      let keys = this[_computeKeys]();
      for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
        let key = keys[$_get](i);
        if (dart.equals(this._get(key), value)) return true;
      }
      return false;
    }
    containsKey(key) {
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$containsKey](key);
      if (!(typeof key == 'string')) return false;
      return convert._JsonMap._hasProperty(this[_original$], key);
    }
    putIfAbsent(key, ifAbsent) {
      core.String.as(key);
      if (key == null) dart.nullFailed(I[85], 207, 15, "key");
      T$.VoidTodynamic().as(ifAbsent);
      if (ifAbsent == null) dart.nullFailed(I[85], 207, 20, "ifAbsent");
      if (dart.test(this.containsKey(key))) return this._get(key);
      let value = ifAbsent();
      this._set(key, value);
      return value;
    }
    remove(key) {
      if (!dart.test(this[_isUpgraded]) && !dart.test(this.containsKey(key))) return null;
      return this[_upgrade]()[$remove](key);
    }
    clear() {
      if (dart.test(this[_isUpgraded])) {
        this[_upgradedMap][$clear]();
      } else {
        if (this[_data] != null) {
          dart.dsend(this[_data], 'clear', []);
        }
        this[_original$] = this[_processed] = null;
        this[_data] = new _js_helper.LinkedMap.new();
      }
    }
    forEach(f) {
      if (f == null) dart.nullFailed(I[85], 234, 21, "f");
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap][$forEach](f);
      let keys = this[_computeKeys]();
      for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
        let key = keys[$_get](i);
        let value = convert._JsonMap._getProperty(this[_processed], key);
        if (dart.test(convert._JsonMap._isUnprocessed(value))) {
          value = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
          convert._JsonMap._setProperty(this[_processed], key, value);
        }
        f(key, value);
        if (!core.identical(keys, this[_data])) {
          dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
    }
    get [_isUpgraded]() {
      return this[_processed] == null;
    }
    get [_upgradedMap]() {
      if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, I[85], 266, 12, "_isUpgraded");
      return this[_data];
    }
    [_computeKeys]() {
      if (!!dart.test(this[_isUpgraded])) dart.assertFailed(null, I[85], 274, 12, "!_isUpgraded");
      let keys = T$.ListN().as(this[_data]);
      if (keys == null) {
        keys = this[_data] = convert._JsonMap._getPropertyNames(this[_original$]);
      }
      return keys;
    }
    [_upgrade]() {
      if (dart.test(this[_isUpgraded])) return this[_upgradedMap];
      let result = new (T$0.IdentityMapOfString$dynamic()).new();
      let keys = this[_computeKeys]();
      for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
        let key = keys[$_get](i);
        result[$_set](key, this._get(key));
      }
      if (dart.test(keys[$isEmpty])) {
        keys[$add]("");
      } else {
        keys[$clear]();
      }
      this[_original$] = this[_processed] = null;
      this[_data] = result;
      if (!dart.test(this[_isUpgraded])) dart.assertFailed(null, I[85], 307, 12, "_isUpgraded");
      return result;
    }
    [_process](key) {
      if (key == null) dart.nullFailed(I[85], 311, 19, "key");
      if (!dart.test(convert._JsonMap._hasProperty(this[_original$], key))) return null;
      let result = convert._convertJsonToDartLazy(convert._JsonMap._getProperty(this[_original$], key));
      return convert._JsonMap._setProperty(this[_processed], key, result);
    }
    static _hasProperty(object, key) {
      if (key == null) dart.nullFailed(I[85], 321, 43, "key");
      return Object.prototype.hasOwnProperty.call(object, key);
    }
    static _getProperty(object, key) {
      if (key == null) dart.nullFailed(I[85], 323, 38, "key");
      return object[key];
    }
    static _setProperty(object, key, value) {
      if (key == null) dart.nullFailed(I[85], 324, 38, "key");
      return object[key] = value;
    }
    static _getPropertyNames(object) {
      return Object.keys(object);
    }
    static _isUnprocessed(object) {
      return typeof object == "undefined";
    }
    static _newJavaScriptObject() {
      return Object.create(null);
    }
  };
  (convert._JsonMap.new = function(_original) {
    this[_processed] = convert._JsonMap._newJavaScriptObject();
    this[_data] = null;
    this[_original$] = _original;
    ;
  }).prototype = convert._JsonMap.prototype;
  dart.addTypeTests(convert._JsonMap);
  dart.addTypeCaches(convert._JsonMap);
  dart.setMethodSignature(convert._JsonMap, () => ({
    __proto__: dart.getMethods(convert._JsonMap.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    [_computeKeys]: dart.fnType(core.List$(core.String), []),
    [_upgrade]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    [_process]: dart.fnType(dart.dynamic, [core.String])
  }));
  dart.setGetterSignature(convert._JsonMap, () => ({
    __proto__: dart.getGetters(convert._JsonMap.__proto__),
    keys: core.Iterable$(core.String),
    [$keys]: core.Iterable$(core.String),
    [_isUpgraded]: core.bool,
    [_upgradedMap]: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(convert._JsonMap, I[31]);
  dart.setFieldSignature(convert._JsonMap, () => ({
    __proto__: dart.getFields(convert._JsonMap.__proto__),
    [_original$]: dart.fieldType(dart.dynamic),
    [_processed]: dart.fieldType(dart.dynamic),
    [_data]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(convert._JsonMap, [
    '_get',
    '_set',
    'addAll',
    'containsValue',
    'containsKey',
    'putIfAbsent',
    'remove',
    'clear',
    'forEach'
  ]);
  dart.defineExtensionAccessors(convert._JsonMap, [
    'length',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'values'
  ]);
  var _parent$ = dart.privateName(convert, "_parent");
  convert._JsonMapKeyIterable = class _JsonMapKeyIterable extends _internal.ListIterable$(core.String) {
    get length() {
      return this[_parent$].length;
    }
    elementAt(index) {
      if (index == null) dart.nullFailed(I[85], 340, 24, "index");
      return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$elementAt](index) : this[_parent$][_computeKeys]()[$_get](index);
    }
    get iterator() {
      return dart.test(this[_parent$][_isUpgraded]) ? this[_parent$].keys[$iterator] : this[_parent$][_computeKeys]()[$iterator];
    }
    contains(key) {
      return this[_parent$].containsKey(key);
    }
  };
  (convert._JsonMapKeyIterable.new = function(_parent) {
    if (_parent == null) dart.nullFailed(I[85], 336, 28, "_parent");
    this[_parent$] = _parent;
    convert._JsonMapKeyIterable.__proto__.new.call(this);
    ;
  }).prototype = convert._JsonMapKeyIterable.prototype;
  dart.addTypeTests(convert._JsonMapKeyIterable);
  dart.addTypeCaches(convert._JsonMapKeyIterable);
  dart.setLibraryUri(convert._JsonMapKeyIterable, I[31]);
  dart.setFieldSignature(convert._JsonMapKeyIterable, () => ({
    __proto__: dart.getFields(convert._JsonMapKeyIterable.__proto__),
    [_parent$]: dart.finalFieldType(convert._JsonMap)
  }));
  dart.defineExtensionMethods(convert._JsonMapKeyIterable, ['elementAt', 'contains']);
  dart.defineExtensionAccessors(convert._JsonMapKeyIterable, ['length', 'iterator']);
  var _reviver$ = dart.privateName(convert, "_reviver");
  var _sink$0 = dart.privateName(convert, "_sink");
  var _stringSink$ = dart.privateName(convert, "_stringSink");
  convert.StringConversionSinkMixin = class StringConversionSinkMixin extends core.Object {
    add(str) {
      core.String.as(str);
      if (str == null) dart.nullFailed(I[86], 162, 19, "str");
      this.addSlice(str, 0, str.length, false);
    }
    asUtf8Sink(allowMalformed) {
      if (allowMalformed == null) dart.nullFailed(I[86], 166, 38, "allowMalformed");
      return new convert._Utf8ConversionSink.new(this, allowMalformed);
    }
    asStringSink() {
      return new convert._StringConversionSinkAsStringSinkAdapter.new(this);
    }
  };
  (convert.StringConversionSinkMixin.new = function() {
    ;
  }).prototype = convert.StringConversionSinkMixin.prototype;
  dart.addTypeTests(convert.StringConversionSinkMixin);
  dart.addTypeCaches(convert.StringConversionSinkMixin);
  convert.StringConversionSinkMixin[dart.implements] = () => [convert.StringConversionSink];
  dart.setMethodSignature(convert.StringConversionSinkMixin, () => ({
    __proto__: dart.getMethods(convert.StringConversionSinkMixin.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    asUtf8Sink: dart.fnType(convert.ByteConversionSink, [core.bool]),
    asStringSink: dart.fnType(convert.ClosableStringSink, [])
  }));
  dart.setLibraryUri(convert.StringConversionSinkMixin, I[31]);
  convert.StringConversionSinkBase = class StringConversionSinkBase extends convert.StringConversionSinkMixin {};
  (convert.StringConversionSinkBase.new = function() {
    ;
  }).prototype = convert.StringConversionSinkBase.prototype;
  dart.addTypeTests(convert.StringConversionSinkBase);
  dart.addTypeCaches(convert.StringConversionSinkBase);
  dart.setLibraryUri(convert.StringConversionSinkBase, I[31]);
  const _is__StringSinkConversionSink_default = Symbol('_is__StringSinkConversionSink_default');
  convert._StringSinkConversionSink$ = dart.generic(TStringSink => {
    class _StringSinkConversionSink extends convert.StringConversionSinkBase {
      close() {
      }
      addSlice(str, start, end, isLast) {
        if (str == null) dart.nullFailed(I[86], 183, 24, "str");
        if (start == null) dart.nullFailed(I[86], 183, 33, "start");
        if (end == null) dart.nullFailed(I[86], 183, 44, "end");
        if (isLast == null) dart.nullFailed(I[86], 183, 54, "isLast");
        if (start !== 0 || end !== str.length) {
          for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
            this[_stringSink$].writeCharCode(str[$codeUnitAt](i));
          }
        } else {
          this[_stringSink$].write(str);
        }
        if (dart.test(isLast)) this.close();
      }
      add(str) {
        core.String.as(str);
        if (str == null) dart.nullFailed(I[86], 194, 19, "str");
        this[_stringSink$].write(str);
      }
      asUtf8Sink(allowMalformed) {
        if (allowMalformed == null) dart.nullFailed(I[86], 198, 38, "allowMalformed");
        return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
      }
      asStringSink() {
        return new convert._ClosableStringSink.new(this[_stringSink$], dart.bind(this, 'close'));
      }
    }
    (_StringSinkConversionSink.new = function(_stringSink) {
      if (_stringSink == null) dart.nullFailed(I[86], 179, 34, "_stringSink");
      this[_stringSink$] = _stringSink;
      ;
    }).prototype = _StringSinkConversionSink.prototype;
    dart.addTypeTests(_StringSinkConversionSink);
    _StringSinkConversionSink.prototype[_is__StringSinkConversionSink_default] = true;
    dart.addTypeCaches(_StringSinkConversionSink);
    dart.setMethodSignature(_StringSinkConversionSink, () => ({
      __proto__: dart.getMethods(_StringSinkConversionSink.__proto__),
      close: dart.fnType(dart.void, []),
      addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
    }));
    dart.setLibraryUri(_StringSinkConversionSink, I[31]);
    dart.setFieldSignature(_StringSinkConversionSink, () => ({
      __proto__: dart.getFields(_StringSinkConversionSink.__proto__),
      [_stringSink$]: dart.finalFieldType(TStringSink)
    }));
    return _StringSinkConversionSink;
  });
  convert._StringSinkConversionSink = convert._StringSinkConversionSink$();
  dart.addTypeTests(convert._StringSinkConversionSink, _is__StringSinkConversionSink_default);
  var _contents = dart.privateName(core, "_contents");
  var _writeString = dart.privateName(core, "_writeString");
  core.StringBuffer = class StringBuffer extends core.Object {
    [_writeString](str) {
      this[_contents] = this[_contents] + str;
    }
    static _writeAll(string, objects, separator) {
      if (string == null) dart.nullFailed(I[7], 751, 34, "string");
      if (objects == null) dart.nullFailed(I[7], 751, 51, "objects");
      if (separator == null) dart.nullFailed(I[7], 751, 67, "separator");
      let iterator = objects[$iterator];
      if (!dart.test(iterator.moveNext())) return string;
      if (separator[$isEmpty]) {
        do {
          string = core.StringBuffer._writeOne(string, iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        string = core.StringBuffer._writeOne(string, iterator.current);
        while (dart.test(iterator.moveNext())) {
          string = core.StringBuffer._writeOne(string, separator);
          string = core.StringBuffer._writeOne(string, iterator.current);
        }
      }
      return string;
    }
    static _writeOne(string, obj) {
      return string + dart.str(obj);
    }
    get length() {
      return this[_contents].length;
    }
    get isEmpty() {
      return this.length === 0;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    write(obj) {
      this[_writeString](dart.str(obj));
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[7], 725, 26, "charCode");
      this[_writeString](core.String.fromCharCode(charCode));
    }
    writeAll(objects, separator = "") {
      if (objects == null) dart.nullFailed(I[7], 730, 35, "objects");
      if (separator == null) dart.nullFailed(I[7], 730, 52, "separator");
      this[_contents] = core.StringBuffer._writeAll(this[_contents], objects, separator);
    }
    writeln(obj = "") {
      this[_writeString](dart.str(obj) + "\n");
    }
    clear() {
      this[_contents] = "";
    }
    toString() {
      return _js_helper.Primitives.flattenString(this[_contents]);
    }
  };
  (core.StringBuffer.new = function(content = "") {
    if (content == null) dart.nullFailed(I[7], 714, 24, "content");
    this[_contents] = dart.str(content);
    ;
  }).prototype = core.StringBuffer.prototype;
  dart.addTypeTests(core.StringBuffer);
  dart.addTypeCaches(core.StringBuffer);
  core.StringBuffer[dart.implements] = () => [core.StringSink];
  dart.setMethodSignature(core.StringBuffer, () => ({
    __proto__: dart.getMethods(core.StringBuffer.__proto__),
    [_writeString]: dart.fnType(dart.void, [core.String]),
    write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeCharCode: dart.fnType(dart.void, [core.int]),
    writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
    writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(core.StringBuffer, () => ({
    __proto__: dart.getGetters(core.StringBuffer.__proto__),
    length: core.int,
    isEmpty: core.bool,
    isNotEmpty: core.bool
  }));
  dart.setLibraryUri(core.StringBuffer, I[8]);
  dart.setFieldSignature(core.StringBuffer, () => ({
    __proto__: dart.getFields(core.StringBuffer.__proto__),
    [_contents]: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(core.StringBuffer, ['toString']);
  convert._JsonDecoderSink = class _JsonDecoderSink extends convert._StringSinkConversionSink$(core.StringBuffer) {
    close() {
      super.close();
      let accumulated = dart.toString(this[_stringSink$]);
      this[_stringSink$].clear();
      let decoded = convert._parseJson(accumulated, this[_reviver$]);
      this[_sink$0].add(decoded);
      this[_sink$0].close();
    }
  };
  (convert._JsonDecoderSink.new = function(_reviver, _sink) {
    if (_sink == null) dart.nullFailed(I[85], 379, 40, "_sink");
    this[_reviver$] = _reviver;
    this[_sink$0] = _sink;
    convert._JsonDecoderSink.__proto__.new.call(this, new core.StringBuffer.new(""));
    ;
  }).prototype = convert._JsonDecoderSink.prototype;
  dart.addTypeTests(convert._JsonDecoderSink);
  dart.addTypeCaches(convert._JsonDecoderSink);
  dart.setLibraryUri(convert._JsonDecoderSink, I[31]);
  dart.setFieldSignature(convert._JsonDecoderSink, () => ({
    __proto__: dart.getFields(convert._JsonDecoderSink.__proto__),
    [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))),
    [_sink$0]: dart.finalFieldType(core.Sink$(dart.nullable(core.Object)))
  }));
  var _allowInvalid = dart.privateName(convert, "AsciiCodec._allowInvalid");
  var _allowInvalid$ = dart.privateName(convert, "_allowInvalid");
  var _UnicodeSubsetDecoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetDecoder._subsetMask");
  var _UnicodeSubsetDecoder__allowInvalid = dart.privateName(convert, "_UnicodeSubsetDecoder._allowInvalid");
  var _UnicodeSubsetEncoder__subsetMask = dart.privateName(convert, "_UnicodeSubsetEncoder._subsetMask");
  const _is_Codec_default = Symbol('_is_Codec_default');
  convert.Codec$ = dart.generic((S, T) => {
    var _InvertedCodecOfT$S = () => (_InvertedCodecOfT$S = dart.constFn(convert._InvertedCodec$(T, S)))();
    class Codec extends core.Object {
      encode(input) {
        S.as(input);
        return this.encoder.convert(input);
      }
      decode(encoded) {
        T.as(encoded);
        return this.decoder.convert(encoded);
      }
      fuse(R, other) {
        convert.Codec$(T, R).as(other);
        if (other == null) dart.nullFailed(I[89], 64, 35, "other");
        return new (convert._FusedCodec$(S, T, R)).new(this, other);
      }
      get inverted() {
        return new (_InvertedCodecOfT$S()).new(this);
      }
    }
    (Codec.new = function() {
      ;
    }).prototype = Codec.prototype;
    dart.addTypeTests(Codec);
    Codec.prototype[_is_Codec_default] = true;
    dart.addTypeCaches(Codec);
    dart.setMethodSignature(Codec, () => ({
      __proto__: dart.getMethods(Codec.__proto__),
      encode: dart.fnType(T, [dart.nullable(core.Object)]),
      decode: dart.fnType(S, [dart.nullable(core.Object)]),
      fuse: dart.gFnType(R => [convert.Codec$(S, R), [dart.nullable(core.Object)]], R => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Codec, () => ({
      __proto__: dart.getGetters(Codec.__proto__),
      inverted: convert.Codec$(T, S)
    }));
    dart.setLibraryUri(Codec, I[31]);
    return Codec;
  });
  convert.Codec = convert.Codec$();
  dart.addTypeTests(convert.Codec, _is_Codec_default);
  core.List$ = dart.generic(E => {
    class List extends core.Object {
      static new(length = null) {
        let list = null;
        if (length === void 0) {
          list = [];
        } else {
          let _length = length;
          if (length == null || _length < 0) {
            dart.throw(new core.ArgumentError.new("Length must be a non-negative integer: " + dart.str(_length)));
          }
          list = new Array(_length);
          list.fill(null);
          _interceptors.JSArray.markFixedList(list);
        }
        return _interceptors.JSArray$(E).of(list);
      }
      static filled(length, fill, opts) {
        if (length == null) dart.argumentError(length);
        let growable = opts && 'growable' in opts ? opts.growable : false;
        if (growable == null) dart.nullFailed(I[7], 497, 60, "growable");
        let list = _interceptors.JSArray$(E).of(new Array(length));
        list.fill(fill);
        if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
        return list;
      }
      static empty(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        if (growable == null) dart.nullFailed(I[7], 490, 28, "growable");
        let list = _interceptors.JSArray$(E).of(new Array());
        if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
        return list;
      }
      static from(elements, opts) {
        if (elements == null) dart.nullFailed(I[7], 505, 30, "elements");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[7], 505, 46, "growable");
        let list = _interceptors.JSArray$(E).of([]);
        if (core.Iterable$(E).is(elements)) {
          for (let e of elements) {
            list.push(e);
          }
        } else {
          for (let e of elements) {
            list.push(E.as(e));
          }
        }
        if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
        return list;
      }
      static of(elements, opts) {
        if (elements == null) dart.nullFailed(I[7], 527, 31, "elements");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[7], 527, 47, "growable");
        let list = _interceptors.JSArray$(E).of([]);
        for (let e of elements) {
          list.push(e);
        }
        if (!dart.test(growable)) _interceptors.JSArray.markFixedList(list);
        return list;
      }
      static generate(length, generator, opts) {
        if (length == null) dart.nullFailed(I[7], 539, 29, "length");
        if (generator == null) dart.nullFailed(I[7], 539, 39, "generator");
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[7], 540, 13, "growable");
        let result = _interceptors.JSArray$(E).of(new Array(length));
        if (!dart.test(growable)) _interceptors.JSArray.markFixedList(result);
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          result[i] = generator(i);
        }
        return result;
      }
      static unmodifiable(elements) {
        if (elements == null) dart.nullFailed(I[7], 552, 38, "elements");
        let list = core.List$(E).from(elements);
        _interceptors.JSArray.markUnmodifiableList(list);
        return list;
      }
      static castFrom(S, T, source) {
        if (source == null) dart.nullFailed(I[90], 190, 41, "source");
        return new (_internal.CastList$(S, T)).new(source);
      }
      static copyRange(T, target, at, source, start = null, end = null) {
        if (target == null) dart.nullFailed(I[90], 206, 36, "target");
        if (at == null) dart.nullFailed(I[90], 206, 48, "at");
        if (source == null) dart.nullFailed(I[90], 206, 60, "source");
        start == null ? start = 0 : null;
        end = core.RangeError.checkValidRange(start, end, source[$length]);
        if (end == null) {
          dart.throw("unreachable");
        }
        let length = dart.notNull(end) - dart.notNull(start);
        if (dart.notNull(target[$length]) < dart.notNull(at) + length) {
          dart.throw(new core.ArgumentError.value(target, "target", "Not big enough to hold " + dart.str(length) + " elements at position " + dart.str(at)));
        }
        if (source != target || dart.notNull(start) >= dart.notNull(at)) {
          for (let i = 0; i < length; i = i + 1) {
            target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
          }
        } else {
          for (let i = length; (i = i - 1) >= 0;) {
            target[$_set](dart.notNull(at) + i, source[$_get](dart.notNull(start) + i));
          }
        }
      }
      static writeIterable(T, target, at, source) {
        if (target == null) dart.nullFailed(I[90], 241, 40, "target");
        if (at == null) dart.nullFailed(I[90], 241, 52, "at");
        if (source == null) dart.nullFailed(I[90], 241, 68, "source");
        core.RangeError.checkValueInInterval(at, 0, target[$length], "at");
        let index = at;
        let targetLength = target[$length];
        for (let element of source) {
          if (index == targetLength) {
            dart.throw(new core.IndexError.new(targetLength, target));
          }
          target[$_set](index, element);
          index = dart.notNull(index) + 1;
        }
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (List[dart.mixinNew] = function() {
    }).prototype = List.prototype;
    dart.addTypeTests(List);
    List.prototype[dart.isList] = true;
    dart.addTypeCaches(List);
    List[dart.implements] = () => [_internal.EfficientLengthIterable$(E)];
    dart.setLibraryUri(List, I[8]);
    return List;
  });
  core.List = core.List$();
  dart.addTypeTests(core.List, dart.isList);
  convert.Encoding = class Encoding extends convert.Codec$(core.String, core.List$(core.int)) {
    decodeStream(byteStream) {
      if (byteStream == null) dart.nullFailed(I[88], 21, 49, "byteStream");
      return this.decoder.bind(byteStream).fold(core.StringBuffer, new core.StringBuffer.new(), dart.fn((buffer, string) => {
        let t172;
        if (buffer == null) dart.nullFailed(I[88], 25, 27, "buffer");
        if (string == null) dart.nullFailed(I[88], 25, 42, "string");
        t172 = buffer;
        return (() => {
          t172.write(string);
          return t172;
        })();
      }, T$0.StringBufferAndStringToStringBuffer())).then(core.String, dart.fn(buffer => {
        if (buffer == null) dart.nullFailed(I[88], 26, 29, "buffer");
        return dart.toString(buffer);
      }, T$0.StringBufferToString()));
    }
    static getByName(name) {
      if (name == null) return null;
      return convert.Encoding._nameToEncoding[$_get](name[$toLowerCase]());
    }
  };
  (convert.Encoding.new = function() {
    convert.Encoding.__proto__.new.call(this);
    ;
  }).prototype = convert.Encoding.prototype;
  dart.addTypeTests(convert.Encoding);
  dart.addTypeCaches(convert.Encoding);
  dart.setMethodSignature(convert.Encoding, () => ({
    __proto__: dart.getMethods(convert.Encoding.__proto__),
    decodeStream: dart.fnType(async.Future$(core.String), [async.Stream$(core.List$(core.int))])
  }));
  dart.setLibraryUri(convert.Encoding, I[31]);
  dart.defineLazy(convert.Encoding, {
    /*convert.Encoding._nameToEncoding*/get _nameToEncoding() {
      return new (T$0.IdentityMapOfString$Encoding()).from(["iso_8859-1:1987", convert.latin1, "iso-ir-100", convert.latin1, "iso_8859-1", convert.latin1, "iso-8859-1", convert.latin1, "latin1", convert.latin1, "l1", convert.latin1, "ibm819", convert.latin1, "cp819", convert.latin1, "csisolatin1", convert.latin1, "iso-ir-6", convert.ascii, "ansi_x3.4-1968", convert.ascii, "ansi_x3.4-1986", convert.ascii, "iso_646.irv:1991", convert.ascii, "iso646-us", convert.ascii, "us-ascii", convert.ascii, "us", convert.ascii, "ibm367", convert.ascii, "cp367", convert.ascii, "csascii", convert.ascii, "ascii", convert.ascii, "csutf8", convert.utf8, "utf-8", convert.utf8]);
    }
  }, false);
  convert.AsciiCodec = class AsciiCodec extends convert.Encoding {
    get [_allowInvalid$]() {
      return this[_allowInvalid];
    }
    set [_allowInvalid$](value) {
      super[_allowInvalid$] = value;
    }
    get name() {
      return "us-ascii";
    }
    encode(source) {
      core.String.as(source);
      if (source == null) dart.nullFailed(I[87], 41, 27, "source");
      return this.encoder.convert(source);
    }
    decode(bytes, opts) {
      let t172;
      T$0.ListOfint().as(bytes);
      if (bytes == null) dart.nullFailed(I[87], 51, 27, "bytes");
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
      if (dart.test((t172 = allowInvalid, t172 == null ? this[_allowInvalid$] : t172))) {
        return (C[80] || CT.C80).convert(bytes);
      } else {
        return (C[81] || CT.C81).convert(bytes);
      }
    }
    get encoder() {
      return C[82] || CT.C82;
    }
    get decoder() {
      return dart.test(this[_allowInvalid$]) ? C[80] || CT.C80 : C[81] || CT.C81;
    }
  };
  (convert.AsciiCodec.new = function(opts) {
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
    if (allowInvalid == null) dart.nullFailed(I[87], 36, 26, "allowInvalid");
    this[_allowInvalid] = allowInvalid;
    convert.AsciiCodec.__proto__.new.call(this);
    ;
  }).prototype = convert.AsciiCodec.prototype;
  dart.addTypeTests(convert.AsciiCodec);
  dart.addTypeCaches(convert.AsciiCodec);
  dart.setMethodSignature(convert.AsciiCodec, () => ({
    __proto__: dart.getMethods(convert.AsciiCodec.__proto__),
    encode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
    decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowInvalid: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(convert.AsciiCodec, () => ({
    __proto__: dart.getGetters(convert.AsciiCodec.__proto__),
    name: core.String,
    encoder: convert.AsciiEncoder,
    decoder: convert.AsciiDecoder
  }));
  dart.setLibraryUri(convert.AsciiCodec, I[31]);
  dart.setFieldSignature(convert.AsciiCodec, () => ({
    __proto__: dart.getFields(convert.AsciiCodec.__proto__),
    [_allowInvalid$]: dart.finalFieldType(core.bool)
  }));
  var _subsetMask$ = dart.privateName(convert, "_subsetMask");
  const _subsetMask$0 = _UnicodeSubsetEncoder__subsetMask;
  convert._UnicodeSubsetEncoder = class _UnicodeSubsetEncoder extends convert.Converter$(core.String, core.List$(core.int)) {
    get [_subsetMask$]() {
      return this[_subsetMask$0];
    }
    set [_subsetMask$](value) {
      super[_subsetMask$] = value;
    }
    convert(string, start = 0, end = null) {
      core.String.as(string);
      if (string == null) dart.nullFailed(I[87], 77, 28, "string");
      if (start == null) dart.nullFailed(I[87], 77, 41, "start");
      let stringLength = string.length;
      end = core.RangeError.checkValidRange(start, end, stringLength);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      let length = dart.notNull(end) - dart.notNull(start);
      let result = _native_typed_data.NativeUint8List.new(length);
      for (let i = 0; i < length; i = i + 1) {
        let codeUnit = string[$codeUnitAt](dart.notNull(start) + i);
        if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
          dart.throw(new core.ArgumentError.value(string, "string", "Contains invalid characters."));
        }
        result[$_set](i, codeUnit);
      }
      return result;
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[87], 101, 63, "sink");
      return new convert._UnicodeSubsetEncoderSink.new(this[_subsetMask$], convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
    }
    bind(stream) {
      T$0.StreamOfString().as(stream);
      if (stream == null) dart.nullFailed(I[87], 107, 41, "stream");
      return super.bind(stream);
    }
  };
  (convert._UnicodeSubsetEncoder.new = function(_subsetMask) {
    if (_subsetMask == null) dart.nullFailed(I[87], 71, 36, "_subsetMask");
    this[_subsetMask$0] = _subsetMask;
    convert._UnicodeSubsetEncoder.__proto__.new.call(this);
    ;
  }).prototype = convert._UnicodeSubsetEncoder.prototype;
  dart.addTypeTests(convert._UnicodeSubsetEncoder);
  dart.addTypeCaches(convert._UnicodeSubsetEncoder);
  dart.setMethodSignature(convert._UnicodeSubsetEncoder, () => ({
    __proto__: dart.getMethods(convert._UnicodeSubsetEncoder.__proto__),
    convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert._UnicodeSubsetEncoder, I[31]);
  dart.setFieldSignature(convert._UnicodeSubsetEncoder, () => ({
    __proto__: dart.getFields(convert._UnicodeSubsetEncoder.__proto__),
    [_subsetMask$]: dart.finalFieldType(core.int)
  }));
  convert.AsciiEncoder = class AsciiEncoder extends convert._UnicodeSubsetEncoder {};
  (convert.AsciiEncoder.new = function() {
    convert.AsciiEncoder.__proto__.new.call(this, 127);
    ;
  }).prototype = convert.AsciiEncoder.prototype;
  dart.addTypeTests(convert.AsciiEncoder);
  dart.addTypeCaches(convert.AsciiEncoder);
  dart.setLibraryUri(convert.AsciiEncoder, I[31]);
  convert._UnicodeSubsetEncoderSink = class _UnicodeSubsetEncoderSink extends convert.StringConversionSinkBase {
    close() {
      this[_sink$0].close();
    }
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[87], 127, 24, "source");
      if (start == null) dart.nullFailed(I[87], 127, 36, "start");
      if (end == null) dart.nullFailed(I[87], 127, 47, "end");
      if (isLast == null) dart.nullFailed(I[87], 127, 57, "isLast");
      core.RangeError.checkValidRange(start, end, source.length);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let codeUnit = source[$codeUnitAt](i);
        if ((codeUnit & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
          dart.throw(new core.ArgumentError.new("Source contains invalid character with code point: " + dart.str(codeUnit) + "."));
        }
      }
      this[_sink$0].add(source[$codeUnits][$sublist](start, end));
      if (dart.test(isLast)) {
        this.close();
      }
    }
  };
  (convert._UnicodeSubsetEncoderSink.new = function(_subsetMask, _sink) {
    if (_subsetMask == null) dart.nullFailed(I[87], 121, 34, "_subsetMask");
    if (_sink == null) dart.nullFailed(I[87], 121, 52, "_sink");
    this[_subsetMask$] = _subsetMask;
    this[_sink$0] = _sink;
    ;
  }).prototype = convert._UnicodeSubsetEncoderSink.prototype;
  dart.addTypeTests(convert._UnicodeSubsetEncoderSink);
  dart.addTypeCaches(convert._UnicodeSubsetEncoderSink);
  dart.setMethodSignature(convert._UnicodeSubsetEncoderSink, () => ({
    __proto__: dart.getMethods(convert._UnicodeSubsetEncoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._UnicodeSubsetEncoderSink, I[31]);
  dart.setFieldSignature(convert._UnicodeSubsetEncoderSink, () => ({
    __proto__: dart.getFields(convert._UnicodeSubsetEncoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
    [_subsetMask$]: dart.finalFieldType(core.int)
  }));
  var _convertInvalid = dart.privateName(convert, "_convertInvalid");
  const _allowInvalid$0 = _UnicodeSubsetDecoder__allowInvalid;
  const _subsetMask$1 = _UnicodeSubsetDecoder__subsetMask;
  convert._UnicodeSubsetDecoder = class _UnicodeSubsetDecoder extends convert.Converter$(core.List$(core.int), core.String) {
    get [_allowInvalid$]() {
      return this[_allowInvalid$0];
    }
    set [_allowInvalid$](value) {
      super[_allowInvalid$] = value;
    }
    get [_subsetMask$]() {
      return this[_subsetMask$1];
    }
    set [_subsetMask$](value) {
      super[_subsetMask$] = value;
    }
    convert(bytes, start = 0, end = null) {
      T$0.ListOfint().as(bytes);
      if (bytes == null) dart.nullFailed(I[87], 168, 28, "bytes");
      if (start == null) dart.nullFailed(I[87], 168, 40, "start");
      end = core.RangeError.checkValidRange(start, end, bytes[$length]);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let byte = bytes[$_get](i);
        if ((dart.notNull(byte) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) {
          if (!dart.test(this[_allowInvalid$])) {
            dart.throw(new core.FormatException.new("Invalid value in input: " + dart.str(byte)));
          }
          return this[_convertInvalid](bytes, start, end);
        }
      }
      return core.String.fromCharCodes(bytes, start, end);
    }
    [_convertInvalid](bytes, start, end) {
      if (bytes == null) dart.nullFailed(I[87], 186, 36, "bytes");
      if (start == null) dart.nullFailed(I[87], 186, 47, "start");
      if (end == null) dart.nullFailed(I[87], 186, 58, "end");
      let buffer = new core.StringBuffer.new();
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let value = bytes[$_get](i);
        if ((dart.notNull(value) & ~dart.notNull(this[_subsetMask$]) >>> 0) !== 0) value = 65533;
        buffer.writeCharCode(value);
      }
      return buffer.toString();
    }
    bind(stream) {
      T$0.StreamOfListOfint().as(stream);
      if (stream == null) dart.nullFailed(I[87], 203, 41, "stream");
      return super.bind(stream);
    }
  };
  (convert._UnicodeSubsetDecoder.new = function(_allowInvalid, _subsetMask) {
    if (_allowInvalid == null) dart.nullFailed(I[87], 161, 36, "_allowInvalid");
    if (_subsetMask == null) dart.nullFailed(I[87], 161, 56, "_subsetMask");
    this[_allowInvalid$0] = _allowInvalid;
    this[_subsetMask$1] = _subsetMask;
    convert._UnicodeSubsetDecoder.__proto__.new.call(this);
    ;
  }).prototype = convert._UnicodeSubsetDecoder.prototype;
  dart.addTypeTests(convert._UnicodeSubsetDecoder);
  dart.addTypeCaches(convert._UnicodeSubsetDecoder);
  dart.setMethodSignature(convert._UnicodeSubsetDecoder, () => ({
    __proto__: dart.getMethods(convert._UnicodeSubsetDecoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    [_convertInvalid]: dart.fnType(core.String, [core.List$(core.int), core.int, core.int])
  }));
  dart.setLibraryUri(convert._UnicodeSubsetDecoder, I[31]);
  dart.setFieldSignature(convert._UnicodeSubsetDecoder, () => ({
    __proto__: dart.getFields(convert._UnicodeSubsetDecoder.__proto__),
    [_allowInvalid$]: dart.finalFieldType(core.bool),
    [_subsetMask$]: dart.finalFieldType(core.int)
  }));
  convert.AsciiDecoder = class AsciiDecoder extends convert._UnicodeSubsetDecoder {
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[87], 214, 58, "sink");
      let stringSink = null;
      if (convert.StringConversionSink.is(sink)) {
        stringSink = sink;
      } else {
        stringSink = new convert._StringAdapterSink.new(sink);
      }
      if (dart.test(this[_allowInvalid$])) {
        return new convert._ErrorHandlingAsciiDecoderSink.new(stringSink.asUtf8Sink(false));
      } else {
        return new convert._SimpleAsciiDecoderSink.new(stringSink);
      }
    }
  };
  (convert.AsciiDecoder.new = function(opts) {
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
    if (allowInvalid == null) dart.nullFailed(I[87], 207, 28, "allowInvalid");
    convert.AsciiDecoder.__proto__.new.call(this, allowInvalid, 127);
    ;
  }).prototype = convert.AsciiDecoder.prototype;
  dart.addTypeTests(convert.AsciiDecoder);
  dart.addTypeCaches(convert.AsciiDecoder);
  dart.setMethodSignature(convert.AsciiDecoder, () => ({
    __proto__: dart.getMethods(convert.AsciiDecoder.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.AsciiDecoder, I[31]);
  var _utf8Sink$ = dart.privateName(convert, "_utf8Sink");
  const _is_ChunkedConversionSink_default = Symbol('_is_ChunkedConversionSink_default');
  convert.ChunkedConversionSink$ = dart.generic(T => {
    class ChunkedConversionSink extends core.Object {}
    (ChunkedConversionSink.new = function() {
      ;
    }).prototype = ChunkedConversionSink.prototype;
    dart.addTypeTests(ChunkedConversionSink);
    ChunkedConversionSink.prototype[_is_ChunkedConversionSink_default] = true;
    dart.addTypeCaches(ChunkedConversionSink);
    ChunkedConversionSink[dart.implements] = () => [core.Sink$(T)];
    dart.setLibraryUri(ChunkedConversionSink, I[31]);
    return ChunkedConversionSink;
  });
  convert.ChunkedConversionSink = convert.ChunkedConversionSink$();
  dart.addTypeTests(convert.ChunkedConversionSink, _is_ChunkedConversionSink_default);
  convert.ByteConversionSink = class ByteConversionSink extends convert.ChunkedConversionSink$(core.List$(core.int)) {};
  (convert.ByteConversionSink.new = function() {
    convert.ByteConversionSink.__proto__.new.call(this);
    ;
  }).prototype = convert.ByteConversionSink.prototype;
  dart.addTypeTests(convert.ByteConversionSink);
  dart.addTypeCaches(convert.ByteConversionSink);
  dart.setLibraryUri(convert.ByteConversionSink, I[31]);
  convert.ByteConversionSinkBase = class ByteConversionSinkBase extends convert.ByteConversionSink {
    addSlice(chunk, start, end, isLast) {
      if (chunk == null) dart.nullFailed(I[91], 42, 27, "chunk");
      if (start == null) dart.nullFailed(I[91], 42, 38, "start");
      if (end == null) dart.nullFailed(I[91], 42, 49, "end");
      if (isLast == null) dart.nullFailed(I[91], 42, 59, "isLast");
      this.add(chunk[$sublist](start, end));
      if (dart.test(isLast)) this.close();
    }
  };
  (convert.ByteConversionSinkBase.new = function() {
    convert.ByteConversionSinkBase.__proto__.new.call(this);
    ;
  }).prototype = convert.ByteConversionSinkBase.prototype;
  dart.addTypeTests(convert.ByteConversionSinkBase);
  dart.addTypeCaches(convert.ByteConversionSinkBase);
  dart.setMethodSignature(convert.ByteConversionSinkBase, () => ({
    __proto__: dart.getMethods(convert.ByteConversionSinkBase.__proto__),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert.ByteConversionSinkBase, I[31]);
  convert._ErrorHandlingAsciiDecoderSink = class _ErrorHandlingAsciiDecoderSink extends convert.ByteConversionSinkBase {
    close() {
      this[_utf8Sink$].close();
    }
    add(source) {
      T$0.ListOfint().as(source);
      if (source == null) dart.nullFailed(I[87], 241, 22, "source");
      this.addSlice(source, 0, source[$length], false);
    }
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[87], 245, 27, "source");
      if (start == null) dart.nullFailed(I[87], 245, 39, "start");
      if (end == null) dart.nullFailed(I[87], 245, 50, "end");
      if (isLast == null) dart.nullFailed(I[87], 245, 60, "isLast");
      core.RangeError.checkValidRange(start, end, source[$length]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
          if (dart.notNull(i) > dart.notNull(start)) this[_utf8Sink$].addSlice(source, start, i, false);
          this[_utf8Sink$].add(C[83] || CT.C83);
          start = dart.notNull(i) + 1;
        }
      }
      if (dart.notNull(start) < dart.notNull(end)) {
        this[_utf8Sink$].addSlice(source, start, end, isLast);
      } else if (dart.test(isLast)) {
        this.close();
      }
    }
  };
  (convert._ErrorHandlingAsciiDecoderSink.new = function(_utf8Sink) {
    if (_utf8Sink == null) dart.nullFailed(I[87], 235, 39, "_utf8Sink");
    this[_utf8Sink$] = _utf8Sink;
    convert._ErrorHandlingAsciiDecoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._ErrorHandlingAsciiDecoderSink.prototype;
  dart.addTypeTests(convert._ErrorHandlingAsciiDecoderSink);
  dart.addTypeCaches(convert._ErrorHandlingAsciiDecoderSink);
  dart.setMethodSignature(convert._ErrorHandlingAsciiDecoderSink, () => ({
    __proto__: dart.getMethods(convert._ErrorHandlingAsciiDecoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert._ErrorHandlingAsciiDecoderSink, I[31]);
  dart.setFieldSignature(convert._ErrorHandlingAsciiDecoderSink, () => ({
    __proto__: dart.getFields(convert._ErrorHandlingAsciiDecoderSink.__proto__),
    [_utf8Sink$]: dart.fieldType(convert.ByteConversionSink)
  }));
  convert._SimpleAsciiDecoderSink = class _SimpleAsciiDecoderSink extends convert.ByteConversionSinkBase {
    close() {
      this[_sink$0].close();
    }
    add(source) {
      T$0.ListOfint().as(source);
      if (source == null) dart.nullFailed(I[87], 271, 22, "source");
      for (let i = 0; i < dart.notNull(source[$length]); i = i + 1) {
        if ((dart.notNull(source[$_get](i)) & ~127 >>> 0) !== 0) {
          dart.throw(new core.FormatException.new("Source contains non-ASCII bytes."));
        }
      }
      this[_sink$0].add(core.String.fromCharCodes(source));
    }
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[87], 280, 27, "source");
      if (start == null) dart.nullFailed(I[87], 280, 39, "start");
      if (end == null) dart.nullFailed(I[87], 280, 50, "end");
      if (isLast == null) dart.nullFailed(I[87], 280, 60, "isLast");
      let length = source[$length];
      core.RangeError.checkValidRange(start, end, length);
      if (dart.notNull(start) < dart.notNull(end)) {
        if (start !== 0 || end != length) {
          source = source[$sublist](start, end);
        }
        this.add(source);
      }
      if (dart.test(isLast)) this.close();
    }
  };
  (convert._SimpleAsciiDecoderSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[87], 265, 32, "_sink");
    this[_sink$0] = _sink;
    convert._SimpleAsciiDecoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._SimpleAsciiDecoderSink.prototype;
  dart.addTypeTests(convert._SimpleAsciiDecoderSink);
  dart.addTypeCaches(convert._SimpleAsciiDecoderSink);
  dart.setMethodSignature(convert._SimpleAsciiDecoderSink, () => ({
    __proto__: dart.getMethods(convert._SimpleAsciiDecoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert._SimpleAsciiDecoderSink, I[31]);
  dart.setFieldSignature(convert._SimpleAsciiDecoderSink, () => ({
    __proto__: dart.getFields(convert._SimpleAsciiDecoderSink.__proto__),
    [_sink$0]: dart.fieldType(core.Sink)
  }));
  var _encoder = dart.privateName(convert, "Base64Codec._encoder");
  var Base64Encoder__urlSafe = dart.privateName(convert, "Base64Encoder._urlSafe");
  var _encoder$ = dart.privateName(convert, "_encoder");
  convert.Base64Codec = class Base64Codec extends convert.Codec$(core.List$(core.int), core.String) {
    get [_encoder$]() {
      return this[_encoder];
    }
    set [_encoder$](value) {
      super[_encoder$] = value;
    }
    get encoder() {
      return this[_encoder$];
    }
    get decoder() {
      return C[86] || CT.C86;
    }
    decode(encoded) {
      core.String.as(encoded);
      if (encoded == null) dart.nullFailed(I[92], 83, 27, "encoded");
      return this.decoder.convert(encoded);
    }
    normalize(source, start = 0, end = null) {
      let t172, t172$, t172$0, t172$1, t172$2;
      if (source == null) dart.nullFailed(I[92], 97, 27, "source");
      if (start == null) dart.nullFailed(I[92], 97, 40, "start");
      end = core.RangeError.checkValidRange(start, end, source.length);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      let buffer = null;
      let sliceStart = start;
      let alphabet = convert._Base64Encoder._base64Alphabet;
      let inverseAlphabet = convert._Base64Decoder._inverseAlphabet;
      let firstPadding = -1;
      let firstPaddingSourceIndex = -1;
      let paddingCount = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end);) {
        let sliceEnd = i;
        let char = source[$codeUnitAt]((t172 = i, i = dart.notNull(t172) + 1, t172));
        let originalChar = char;
        if (char === 37) {
          if (dart.notNull(i) + 2 <= dart.notNull(end)) {
            char = _internal.parseHexByte(source, i);
            i = dart.notNull(i) + 2;
            if (char === 37) char = -1;
          } else {
            char = -1;
          }
        }
        if (0 <= dart.notNull(char) && dart.notNull(char) <= 127) {
          let value = inverseAlphabet[$_get](char);
          if (dart.notNull(value) >= 0) {
            char = alphabet[$codeUnitAt](value);
            if (char == originalChar) continue;
          } else if (value === -1) {
            if (firstPadding < 0) {
              firstPadding = dart.notNull((t172$0 = (t172$ = buffer, t172$ == null ? null : t172$.length), t172$0 == null ? 0 : t172$0)) + (dart.notNull(sliceEnd) - dart.notNull(sliceStart));
              firstPaddingSourceIndex = sliceEnd;
            }
            paddingCount = paddingCount + 1;
            if (originalChar === 61) continue;
          }
          if (value !== -2) {
            t172$2 = (t172$1 = buffer, t172$1 == null ? buffer = new core.StringBuffer.new() : t172$1);
            (() => {
              t172$2.write(source[$substring](sliceStart, sliceEnd));
              t172$2.writeCharCode(char);
              return t172$2;
            })();
            sliceStart = i;
            continue;
          }
        }
        dart.throw(new core.FormatException.new("Invalid base64 data", source, sliceEnd));
      }
      if (buffer != null) {
        buffer.write(source[$substring](sliceStart, end));
        if (firstPadding >= 0) {
          convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.length);
        } else {
          let endLength = (dart.notNull(buffer.length) - 1)[$modulo](4) + 1;
          if (endLength === 1) {
            dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
          }
          while (endLength < 4) {
            buffer.write("=");
            endLength = endLength + 1;
          }
        }
        return source[$replaceRange](start, end, dart.toString(buffer));
      }
      let length = dart.notNull(end) - dart.notNull(start);
      if (firstPadding >= 0) {
        convert.Base64Codec._checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, length);
      } else {
        let endLength = length[$modulo](4);
        if (endLength === 1) {
          dart.throw(new core.FormatException.new("Invalid base64 encoding length ", source, end));
        }
        if (endLength > 1) {
          source = source[$replaceRange](end, end, endLength === 2 ? "==" : "=");
        }
      }
      return source;
    }
    static _checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, length) {
      if (source == null) dart.nullFailed(I[92], 199, 36, "source");
      if (sourceIndex == null) dart.nullFailed(I[92], 199, 48, "sourceIndex");
      if (sourceEnd == null) dart.nullFailed(I[92], 199, 65, "sourceEnd");
      if (firstPadding == null) dart.nullFailed(I[92], 200, 11, "firstPadding");
      if (paddingCount == null) dart.nullFailed(I[92], 200, 29, "paddingCount");
      if (length == null) dart.nullFailed(I[92], 200, 47, "length");
      if (length[$modulo](4) !== 0) {
        dart.throw(new core.FormatException.new("Invalid base64 padding, padded length must be multiple of four, " + "is " + dart.str(length), source, sourceEnd));
      }
      if (dart.notNull(firstPadding) + dart.notNull(paddingCount) !== length) {
        dart.throw(new core.FormatException.new("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      }
      if (dart.notNull(paddingCount) > 2) {
        dart.throw(new core.FormatException.new("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
      }
    }
  };
  (convert.Base64Codec.new = function() {
    this[_encoder] = C[84] || CT.C84;
    convert.Base64Codec.__proto__.new.call(this);
    ;
  }).prototype = convert.Base64Codec.prototype;
  (convert.Base64Codec.urlSafe = function() {
    this[_encoder] = C[85] || CT.C85;
    convert.Base64Codec.__proto__.new.call(this);
    ;
  }).prototype = convert.Base64Codec.prototype;
  dart.addTypeTests(convert.Base64Codec);
  dart.addTypeCaches(convert.Base64Codec);
  dart.setMethodSignature(convert.Base64Codec, () => ({
    __proto__: dart.getMethods(convert.Base64Codec.__proto__),
    decode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
    normalize: dart.fnType(core.String, [core.String], [core.int, dart.nullable(core.int)])
  }));
  dart.setGetterSignature(convert.Base64Codec, () => ({
    __proto__: dart.getGetters(convert.Base64Codec.__proto__),
    encoder: convert.Base64Encoder,
    decoder: convert.Base64Decoder
  }));
  dart.setLibraryUri(convert.Base64Codec, I[31]);
  dart.setFieldSignature(convert.Base64Codec, () => ({
    __proto__: dart.getFields(convert.Base64Codec.__proto__),
    [_encoder$]: dart.finalFieldType(convert.Base64Encoder)
  }));
  var _urlSafe = dart.privateName(convert, "_urlSafe");
  const _urlSafe$ = Base64Encoder__urlSafe;
  convert.Base64Encoder = class Base64Encoder extends convert.Converter$(core.List$(core.int), core.String) {
    get [_urlSafe]() {
      return this[_urlSafe$];
    }
    set [_urlSafe](value) {
      super[_urlSafe] = value;
    }
    convert(input) {
      T$0.ListOfint().as(input);
      if (input == null) dart.nullFailed(I[92], 236, 28, "input");
      if (dart.test(input[$isEmpty])) return "";
      let encoder = new convert._Base64Encoder.new(this[_urlSafe]);
      let buffer = dart.nullCheck(encoder.encode(input, 0, input[$length], true));
      return core.String.fromCharCodes(buffer);
    }
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[92], 243, 58, "sink");
      if (convert.StringConversionSink.is(sink)) {
        return new convert._Utf8Base64EncoderSink.new(sink.asUtf8Sink(false), this[_urlSafe]);
      }
      return new convert._AsciiBase64EncoderSink.new(sink, this[_urlSafe]);
    }
  };
  (convert.Base64Encoder.new = function() {
    this[_urlSafe$] = false;
    convert.Base64Encoder.__proto__.new.call(this);
    ;
  }).prototype = convert.Base64Encoder.prototype;
  (convert.Base64Encoder.urlSafe = function() {
    this[_urlSafe$] = true;
    convert.Base64Encoder.__proto__.new.call(this);
    ;
  }).prototype = convert.Base64Encoder.prototype;
  dart.addTypeTests(convert.Base64Encoder);
  dart.addTypeCaches(convert.Base64Encoder);
  dart.setMethodSignature(convert.Base64Encoder, () => ({
    __proto__: dart.getMethods(convert.Base64Encoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.Base64Encoder, I[31]);
  dart.setFieldSignature(convert.Base64Encoder, () => ({
    __proto__: dart.getFields(convert.Base64Encoder.__proto__),
    [_urlSafe]: dart.finalFieldType(core.bool)
  }));
  var _state$0 = dart.privateName(convert, "_state");
  var _alphabet = dart.privateName(convert, "_alphabet");
  convert._Base64Encoder = class _Base64Encoder extends core.Object {
    static _encodeState(count, bits) {
      if (count == null) dart.nullFailed(I[92], 283, 31, "count");
      if (bits == null) dart.nullFailed(I[92], 283, 42, "bits");
      if (!(dart.notNull(count) <= 3)) dart.assertFailed(null, I[92], 284, 12, "count <= _countMask");
      return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
    }
    static _stateBits(state) {
      if (state == null) dart.nullFailed(I[92], 289, 29, "state");
      return state[$rightShift](2);
    }
    static _stateCount(state) {
      if (state == null) dart.nullFailed(I[92], 292, 30, "state");
      return (dart.notNull(state) & 3) >>> 0;
    }
    createBuffer(bufferLength) {
      if (bufferLength == null) dart.nullFailed(I[92], 295, 30, "bufferLength");
      return _native_typed_data.NativeUint8List.new(bufferLength);
    }
    encode(bytes, start, end, isLast) {
      if (bytes == null) dart.nullFailed(I[92], 308, 31, "bytes");
      if (start == null) dart.nullFailed(I[92], 308, 42, "start");
      if (end == null) dart.nullFailed(I[92], 308, 53, "end");
      if (isLast == null) dart.nullFailed(I[92], 308, 63, "isLast");
      if (!(0 <= dart.notNull(start))) dart.assertFailed(null, I[92], 309, 12, "0 <= start");
      if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[92], 310, 12, "start <= end");
      if (!(dart.notNull(end) <= dart.notNull(bytes[$length]))) dart.assertFailed(null, I[92], 311, 12, "end <= bytes.length");
      let length = dart.notNull(end) - dart.notNull(start);
      let count = convert._Base64Encoder._stateCount(this[_state$0]);
      let byteCount = dart.notNull(count) + length;
      let fullChunks = (byteCount / 3)[$truncate]();
      let partialChunkLength = byteCount - fullChunks * 3;
      let bufferLength = fullChunks * 4;
      if (dart.test(isLast) && partialChunkLength > 0) {
        bufferLength = bufferLength + 4;
      }
      let output = this.createBuffer(bufferLength);
      this[_state$0] = convert._Base64Encoder.encodeChunk(this[_alphabet], bytes, start, end, isLast, output, 0, this[_state$0]);
      if (bufferLength > 0) return output;
      return null;
    }
    static encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      let t172, t172$, t172$0, t172$1;
      if (alphabet == null) dart.nullFailed(I[92], 331, 33, "alphabet");
      if (bytes == null) dart.nullFailed(I[92], 331, 53, "bytes");
      if (start == null) dart.nullFailed(I[92], 331, 64, "start");
      if (end == null) dart.nullFailed(I[92], 331, 75, "end");
      if (isLast == null) dart.nullFailed(I[92], 332, 12, "isLast");
      if (output == null) dart.nullFailed(I[92], 332, 30, "output");
      if (outputIndex == null) dart.nullFailed(I[92], 332, 42, "outputIndex");
      if (state == null) dart.nullFailed(I[92], 332, 59, "state");
      let bits = convert._Base64Encoder._stateBits(state);
      let expectedChars = 3 - dart.notNull(convert._Base64Encoder._stateCount(state));
      let byteOr = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let byte = bytes[$_get](i);
        byteOr = (byteOr | dart.notNull(byte)) >>> 0;
        bits = (dart.notNull(bits) << 8 | dart.notNull(byte)) & 16777215;
        expectedChars = expectedChars - 1;
        if (expectedChars === 0) {
          output[$_set]((t172 = outputIndex, outputIndex = dart.notNull(t172) + 1, t172), alphabet[$codeUnitAt]((bits[$rightShift](18) & 63) >>> 0));
          output[$_set]((t172$ = outputIndex, outputIndex = dart.notNull(t172$) + 1, t172$), alphabet[$codeUnitAt]((bits[$rightShift](12) & 63) >>> 0));
          output[$_set]((t172$0 = outputIndex, outputIndex = dart.notNull(t172$0) + 1, t172$0), alphabet[$codeUnitAt]((bits[$rightShift](6) & 63) >>> 0));
          output[$_set]((t172$1 = outputIndex, outputIndex = dart.notNull(t172$1) + 1, t172$1), alphabet[$codeUnitAt]((dart.notNull(bits) & 63) >>> 0));
          expectedChars = 3;
          bits = 0;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (dart.test(isLast) && expectedChars < 3) {
          convert._Base64Encoder.writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
          return 0;
        }
        return convert._Base64Encoder._encodeState(3 - expectedChars, bits);
      }
      let i = start;
      while (dart.notNull(i) < dart.notNull(end)) {
        let byte = bytes[$_get](i);
        if (dart.notNull(byte) < 0 || dart.notNull(byte) > 255) break;
        i = dart.notNull(i) + 1;
      }
      dart.throw(new core.ArgumentError.value(bytes, "Not a byte value at index " + dart.str(i) + ": 0x" + bytes[$_get](i)[$toRadixString](16)));
    }
    static writeFinalChunk(alphabet, output, outputIndex, count, bits) {
      let t172, t172$, t172$0, t172$1, t172$2, t172$3, t172$4, t172$5;
      if (alphabet == null) dart.nullFailed(I[92], 379, 14, "alphabet");
      if (output == null) dart.nullFailed(I[92], 379, 34, "output");
      if (outputIndex == null) dart.nullFailed(I[92], 379, 46, "outputIndex");
      if (count == null) dart.nullFailed(I[92], 379, 63, "count");
      if (bits == null) dart.nullFailed(I[92], 379, 74, "bits");
      if (!(dart.notNull(count) > 0)) dart.assertFailed(null, I[92], 380, 12, "count > 0");
      if (count === 1) {
        output[$_set]((t172 = outputIndex, outputIndex = dart.notNull(t172) + 1, t172), alphabet[$codeUnitAt]((bits[$rightShift](2) & 63) >>> 0));
        output[$_set]((t172$ = outputIndex, outputIndex = dart.notNull(t172$) + 1, t172$), alphabet[$codeUnitAt]((dart.notNull(bits) << 4 & 63) >>> 0));
        output[$_set]((t172$0 = outputIndex, outputIndex = dart.notNull(t172$0) + 1, t172$0), 61);
        output[$_set]((t172$1 = outputIndex, outputIndex = dart.notNull(t172$1) + 1, t172$1), 61);
      } else {
        if (!(count === 2)) dart.assertFailed(null, I[92], 387, 14, "count == 2");
        output[$_set]((t172$2 = outputIndex, outputIndex = dart.notNull(t172$2) + 1, t172$2), alphabet[$codeUnitAt]((bits[$rightShift](10) & 63) >>> 0));
        output[$_set]((t172$3 = outputIndex, outputIndex = dart.notNull(t172$3) + 1, t172$3), alphabet[$codeUnitAt]((bits[$rightShift](4) & 63) >>> 0));
        output[$_set]((t172$4 = outputIndex, outputIndex = dart.notNull(t172$4) + 1, t172$4), alphabet[$codeUnitAt]((dart.notNull(bits) << 2 & 63) >>> 0));
        output[$_set]((t172$5 = outputIndex, outputIndex = dart.notNull(t172$5) + 1, t172$5), 61);
      }
    }
  };
  (convert._Base64Encoder.new = function(urlSafe) {
    if (urlSafe == null) dart.nullFailed(I[92], 279, 23, "urlSafe");
    this[_state$0] = 0;
    this[_alphabet] = dart.test(urlSafe) ? convert._Base64Encoder._base64UrlAlphabet : convert._Base64Encoder._base64Alphabet;
    ;
  }).prototype = convert._Base64Encoder.prototype;
  dart.addTypeTests(convert._Base64Encoder);
  dart.addTypeCaches(convert._Base64Encoder);
  dart.setMethodSignature(convert._Base64Encoder, () => ({
    __proto__: dart.getMethods(convert._Base64Encoder.__proto__),
    createBuffer: dart.fnType(typed_data.Uint8List, [core.int]),
    encode: dart.fnType(dart.nullable(typed_data.Uint8List), [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Base64Encoder, I[31]);
  dart.setFieldSignature(convert._Base64Encoder, () => ({
    __proto__: dart.getFields(convert._Base64Encoder.__proto__),
    [_state$0]: dart.fieldType(core.int),
    [_alphabet]: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(convert._Base64Encoder, {
    /*convert._Base64Encoder._base64Alphabet*/get _base64Alphabet() {
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    },
    /*convert._Base64Encoder._base64UrlAlphabet*/get _base64UrlAlphabet() {
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
    },
    /*convert._Base64Encoder._valueShift*/get _valueShift() {
      return 2;
    },
    /*convert._Base64Encoder._countMask*/get _countMask() {
      return 3;
    },
    /*convert._Base64Encoder._sixBitMask*/get _sixBitMask() {
      return 63;
    }
  }, false);
  convert._BufferCachingBase64Encoder = class _BufferCachingBase64Encoder extends convert._Base64Encoder {
    createBuffer(bufferLength) {
      if (bufferLength == null) dart.nullFailed(I[92], 405, 30, "bufferLength");
      let buffer = this.bufferCache;
      if (buffer == null || dart.notNull(buffer[$length]) < dart.notNull(bufferLength)) {
        this.bufferCache = buffer = _native_typed_data.NativeUint8List.new(bufferLength);
      }
      if (buffer == null) {
        dart.throw("unreachable");
      }
      return typed_data.Uint8List.view(buffer[$buffer], buffer[$offsetInBytes], bufferLength);
    }
  };
  (convert._BufferCachingBase64Encoder.new = function(urlSafe) {
    if (urlSafe == null) dart.nullFailed(I[92], 403, 36, "urlSafe");
    this.bufferCache = null;
    convert._BufferCachingBase64Encoder.__proto__.new.call(this, urlSafe);
    ;
  }).prototype = convert._BufferCachingBase64Encoder.prototype;
  dart.addTypeTests(convert._BufferCachingBase64Encoder);
  dart.addTypeCaches(convert._BufferCachingBase64Encoder);
  dart.setLibraryUri(convert._BufferCachingBase64Encoder, I[31]);
  dart.setFieldSignature(convert._BufferCachingBase64Encoder, () => ({
    __proto__: dart.getFields(convert._BufferCachingBase64Encoder.__proto__),
    bufferCache: dart.fieldType(dart.nullable(typed_data.Uint8List))
  }));
  var _add$0 = dart.privateName(convert, "_add");
  convert._Base64EncoderSink = class _Base64EncoderSink extends convert.ByteConversionSinkBase {
    add(source) {
      T$0.ListOfint().as(source);
      if (source == null) dart.nullFailed(I[92], 420, 22, "source");
      this[_add$0](source, 0, source[$length], false);
    }
    close() {
      this[_add$0](C[87] || CT.C87, 0, 0, true);
    }
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[92], 428, 27, "source");
      if (start == null) dart.nullFailed(I[92], 428, 39, "start");
      if (end == null) dart.nullFailed(I[92], 428, 50, "end");
      if (isLast == null) dart.nullFailed(I[92], 428, 60, "isLast");
      if (end == null) dart.throw(new core.ArgumentError.notNull("end"));
      core.RangeError.checkValidRange(start, end, source[$length]);
      this[_add$0](source, start, end, isLast);
    }
  };
  (convert._Base64EncoderSink.new = function() {
    convert._Base64EncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._Base64EncoderSink.prototype;
  dart.addTypeTests(convert._Base64EncoderSink);
  dart.addTypeCaches(convert._Base64EncoderSink);
  dart.setMethodSignature(convert._Base64EncoderSink, () => ({
    __proto__: dart.getMethods(convert._Base64EncoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._Base64EncoderSink, I[31]);
  convert._AsciiBase64EncoderSink = class _AsciiBase64EncoderSink extends convert._Base64EncoderSink {
    [_add$0](source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[92], 444, 23, "source");
      if (start == null) dart.nullFailed(I[92], 444, 35, "start");
      if (end == null) dart.nullFailed(I[92], 444, 46, "end");
      if (isLast == null) dart.nullFailed(I[92], 444, 56, "isLast");
      let buffer = this[_encoder$].encode(source, start, end, isLast);
      if (buffer != null) {
        let string = core.String.fromCharCodes(buffer);
        this[_sink$0].add(string);
      }
      if (dart.test(isLast)) {
        this[_sink$0].close();
      }
    }
  };
  (convert._AsciiBase64EncoderSink.new = function(_sink, urlSafe) {
    if (_sink == null) dart.nullFailed(I[92], 441, 32, "_sink");
    if (urlSafe == null) dart.nullFailed(I[92], 441, 44, "urlSafe");
    this[_sink$0] = _sink;
    this[_encoder$] = new convert._BufferCachingBase64Encoder.new(urlSafe);
    convert._AsciiBase64EncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._AsciiBase64EncoderSink.prototype;
  dart.addTypeTests(convert._AsciiBase64EncoderSink);
  dart.addTypeCaches(convert._AsciiBase64EncoderSink);
  dart.setMethodSignature(convert._AsciiBase64EncoderSink, () => ({
    __proto__: dart.getMethods(convert._AsciiBase64EncoderSink.__proto__),
    [_add$0]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._AsciiBase64EncoderSink, I[31]);
  dart.setFieldSignature(convert._AsciiBase64EncoderSink, () => ({
    __proto__: dart.getFields(convert._AsciiBase64EncoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.String)),
    [_encoder$]: dart.finalFieldType(convert._Base64Encoder)
  }));
  convert._Utf8Base64EncoderSink = class _Utf8Base64EncoderSink extends convert._Base64EncoderSink {
    [_add$0](source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[92], 463, 23, "source");
      if (start == null) dart.nullFailed(I[92], 463, 35, "start");
      if (end == null) dart.nullFailed(I[92], 463, 46, "end");
      if (isLast == null) dart.nullFailed(I[92], 463, 56, "isLast");
      let buffer = this[_encoder$].encode(source, start, end, isLast);
      if (buffer != null) {
        this[_sink$0].addSlice(buffer, 0, buffer[$length], isLast);
      }
    }
  };
  (convert._Utf8Base64EncoderSink.new = function(_sink, urlSafe) {
    if (_sink == null) dart.nullFailed(I[92], 460, 31, "_sink");
    if (urlSafe == null) dart.nullFailed(I[92], 460, 43, "urlSafe");
    this[_sink$0] = _sink;
    this[_encoder$] = new convert._Base64Encoder.new(urlSafe);
    convert._Utf8Base64EncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._Utf8Base64EncoderSink.prototype;
  dart.addTypeTests(convert._Utf8Base64EncoderSink);
  dart.addTypeCaches(convert._Utf8Base64EncoderSink);
  dart.setMethodSignature(convert._Utf8Base64EncoderSink, () => ({
    __proto__: dart.getMethods(convert._Utf8Base64EncoderSink.__proto__),
    [_add$0]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Utf8Base64EncoderSink, I[31]);
  dart.setFieldSignature(convert._Utf8Base64EncoderSink, () => ({
    __proto__: dart.getFields(convert._Utf8Base64EncoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
    [_encoder$]: dart.finalFieldType(convert._Base64Encoder)
  }));
  convert.Base64Decoder = class Base64Decoder extends convert.Converter$(core.String, core.List$(core.int)) {
    convert(input, start = 0, end = null) {
      core.String.as(input);
      if (input == null) dart.nullFailed(I[92], 491, 28, "input");
      if (start == null) dart.nullFailed(I[92], 491, 40, "start");
      end = core.RangeError.checkValidRange(start, end, input.length);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      if (start == end) return _native_typed_data.NativeUint8List.new(0);
      let decoder = new convert._Base64Decoder.new();
      let buffer = dart.nullCheck(decoder.decode(input, start, end));
      decoder.close(input, end);
      return buffer;
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[92], 504, 63, "sink");
      return new convert._Base64DecoderSink.new(sink);
    }
  };
  (convert.Base64Decoder.new = function() {
    convert.Base64Decoder.__proto__.new.call(this);
    ;
  }).prototype = convert.Base64Decoder.prototype;
  dart.addTypeTests(convert.Base64Decoder);
  dart.addTypeCaches(convert.Base64Decoder);
  dart.setMethodSignature(convert.Base64Decoder, () => ({
    __proto__: dart.getMethods(convert.Base64Decoder.__proto__),
    convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.Base64Decoder, I[31]);
  convert._Base64Decoder = class _Base64Decoder extends core.Object {
    static _encodeCharacterState(count, bits) {
      if (count == null) dart.nullFailed(I[92], 572, 40, "count");
      if (bits == null) dart.nullFailed(I[92], 572, 51, "bits");
      if (!(count === (dart.notNull(count) & 3) >>> 0)) dart.assertFailed(null, I[92], 573, 12, "count == (count & _countMask)");
      return (bits[$leftShift](2) | dart.notNull(count)) >>> 0;
    }
    static _stateCount(state) {
      if (state == null) dart.nullFailed(I[92], 578, 30, "state");
      if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, I[92], 579, 12, "state >= 0");
      return (dart.notNull(state) & 3) >>> 0;
    }
    static _stateBits(state) {
      if (state == null) dart.nullFailed(I[92], 584, 29, "state");
      if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, I[92], 585, 12, "state >= 0");
      return state[$rightShift](2);
    }
    static _encodePaddingState(expectedPadding) {
      if (expectedPadding == null) dart.nullFailed(I[92], 590, 38, "expectedPadding");
      if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, I[92], 591, 12, "expectedPadding >= 0");
      if (!(dart.notNull(expectedPadding) <= 5)) dart.assertFailed(null, I[92], 592, 12, "expectedPadding <= 5");
      return -dart.notNull(expectedPadding) - 1;
    }
    static _statePadding(state) {
      if (state == null) dart.nullFailed(I[92], 597, 32, "state");
      if (!(dart.notNull(state) < 0)) dart.assertFailed(null, I[92], 598, 12, "state < 0");
      return -dart.notNull(state) - 1;
    }
    static _hasSeenPadding(state) {
      if (state == null) dart.nullFailed(I[92], 602, 35, "state");
      return dart.notNull(state) < 0;
    }
    decode(input, start, end) {
      if (input == null) dart.nullFailed(I[92], 609, 28, "input");
      if (start == null) dart.nullFailed(I[92], 609, 39, "start");
      if (end == null) dart.nullFailed(I[92], 609, 50, "end");
      if (!(0 <= dart.notNull(start))) dart.assertFailed(null, I[92], 610, 12, "0 <= start");
      if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed(null, I[92], 611, 12, "start <= end");
      if (!(dart.notNull(end) <= input.length)) dart.assertFailed(null, I[92], 612, 12, "end <= input.length");
      if (dart.test(convert._Base64Decoder._hasSeenPadding(this[_state$0]))) {
        this[_state$0] = convert._Base64Decoder._checkPadding(input, start, end, this[_state$0]);
        return null;
      }
      if (start == end) return _native_typed_data.NativeUint8List.new(0);
      let buffer = convert._Base64Decoder._allocateBuffer(input, start, end, this[_state$0]);
      this[_state$0] = convert._Base64Decoder.decodeChunk(input, start, end, buffer, 0, this[_state$0]);
      return buffer;
    }
    close(input, end) {
      if (dart.notNull(this[_state$0]) < dart.notNull(convert._Base64Decoder._encodePaddingState(0))) {
        dart.throw(new core.FormatException.new("Missing padding character", input, end));
      }
      if (dart.notNull(this[_state$0]) > 0) {
        dart.throw(new core.FormatException.new("Invalid length, must be multiple of four", input, end));
      }
      this[_state$0] = convert._Base64Decoder._encodePaddingState(0);
    }
    static decodeChunk(input, start, end, output, outIndex, state) {
      let t172, t172$, t172$0, t172$1, t172$2, t172$3;
      if (input == null) dart.nullFailed(I[92], 640, 33, "input");
      if (start == null) dart.nullFailed(I[92], 640, 44, "start");
      if (end == null) dart.nullFailed(I[92], 640, 55, "end");
      if (output == null) dart.nullFailed(I[92], 640, 70, "output");
      if (outIndex == null) dart.nullFailed(I[92], 641, 11, "outIndex");
      if (state == null) dart.nullFailed(I[92], 641, 25, "state");
      if (!!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, I[92], 642, 12, "!_hasSeenPadding(state)");
      let bits = convert._Base64Decoder._stateBits(state);
      let count = convert._Base64Decoder._stateCount(state);
      let charOr = 0;
      let inverseAlphabet = convert._Base64Decoder._inverseAlphabet;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let char = input[$codeUnitAt](i);
        charOr = (charOr | char) >>> 0;
        let code = inverseAlphabet[$_get]((char & 127) >>> 0);
        if (dart.notNull(code) >= 0) {
          bits = (bits[$leftShift](6) | dart.notNull(code)) & 16777215;
          count = dart.notNull(count) + 1 & 3;
          if (count === 0) {
            if (!(dart.notNull(outIndex) + 3 <= dart.notNull(output[$length]))) dart.assertFailed(null, I[92], 664, 18, "outIndex + 3 <= output.length");
            output[$_set]((t172 = outIndex, outIndex = dart.notNull(t172) + 1, t172), (bits[$rightShift](16) & 255) >>> 0);
            output[$_set]((t172$ = outIndex, outIndex = dart.notNull(t172$) + 1, t172$), (bits[$rightShift](8) & 255) >>> 0);
            output[$_set]((t172$0 = outIndex, outIndex = dart.notNull(t172$0) + 1, t172$0), (dart.notNull(bits) & 255) >>> 0);
            bits = 0;
          }
          continue;
        } else if (code === -1 && dart.notNull(count) > 1) {
          if (charOr < 0 || charOr > 127) break;
          if (count === 3) {
            if ((dart.notNull(bits) & 3) !== 0) {
              dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
            }
            output[$_set]((t172$1 = outIndex, outIndex = dart.notNull(t172$1) + 1, t172$1), bits[$rightShift](10));
            output[$_set]((t172$2 = outIndex, outIndex = dart.notNull(t172$2) + 1, t172$2), bits[$rightShift](2));
          } else {
            if ((dart.notNull(bits) & 15) !== 0) {
              dart.throw(new core.FormatException.new("Invalid encoding before padding", input, i));
            }
            output[$_set]((t172$3 = outIndex, outIndex = dart.notNull(t172$3) + 1, t172$3), bits[$rightShift](4));
          }
          let expectedPadding = (3 - dart.notNull(count)) * 3;
          if (char === 37) expectedPadding = expectedPadding + 2;
          state = convert._Base64Decoder._encodePaddingState(expectedPadding);
          return convert._Base64Decoder._checkPadding(input, dart.notNull(i) + 1, end, state);
        }
        dart.throw(new core.FormatException.new("Invalid character", input, i));
      }
      if (charOr >= 0 && charOr <= 127) {
        return convert._Base64Decoder._encodeCharacterState(count, bits);
      }
      let i = null;
      for (let t172$4 = i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let char = input[$codeUnitAt](i);
        if (char < 0 || char > 127) break;
      }
      dart.throw(new core.FormatException.new("Invalid character", input, i));
    }
    static _allocateBuffer(input, start, end, state) {
      if (input == null) dart.nullFailed(I[92], 715, 14, "input");
      if (start == null) dart.nullFailed(I[92], 715, 25, "start");
      if (end == null) dart.nullFailed(I[92], 715, 36, "end");
      if (state == null) dart.nullFailed(I[92], 715, 45, "state");
      if (!(dart.notNull(state) >= 0)) dart.assertFailed(null, I[92], 716, 12, "state >= 0");
      let paddingStart = convert._Base64Decoder._trimPaddingChars(input, start, end);
      let length = dart.notNull(convert._Base64Decoder._stateCount(state)) + (dart.notNull(paddingStart) - dart.notNull(start));
      let bufferLength = length[$rightShift](2) * 3;
      let remainderLength = length & 3;
      if (remainderLength !== 0 && dart.notNull(paddingStart) < dart.notNull(end)) {
        bufferLength = bufferLength + (remainderLength - 1);
      }
      if (bufferLength > 0) return _native_typed_data.NativeUint8List.new(bufferLength);
      return convert._Base64Decoder._emptyBuffer;
    }
    static _trimPaddingChars(input, start, end) {
      if (input == null) dart.nullFailed(I[92], 744, 39, "input");
      if (start == null) dart.nullFailed(I[92], 744, 50, "start");
      if (end == null) dart.nullFailed(I[92], 744, 61, "end");
      let padding = 0;
      let index = end;
      let newEnd = end;
      while (dart.notNull(index) > dart.notNull(start) && padding < 2) {
        index = dart.notNull(index) - 1;
        let char = input[$codeUnitAt](index);
        if (char === 61) {
          padding = padding + 1;
          newEnd = index;
          continue;
        }
        if ((char | 32) >>> 0 === 100) {
          if (index == start) break;
          index = dart.notNull(index) - 1;
          char = input[$codeUnitAt](index);
        }
        if (char === 51) {
          if (index == start) break;
          index = dart.notNull(index) - 1;
          char = input[$codeUnitAt](index);
        }
        if (char === 37) {
          padding = padding + 1;
          newEnd = index;
          continue;
        }
        break;
      }
      return newEnd;
    }
    static _checkPadding(input, start, end, state) {
      if (input == null) dart.nullFailed(I[92], 796, 35, "input");
      if (start == null) dart.nullFailed(I[92], 796, 46, "start");
      if (end == null) dart.nullFailed(I[92], 796, 57, "end");
      if (state == null) dart.nullFailed(I[92], 796, 66, "state");
      if (!dart.test(convert._Base64Decoder._hasSeenPadding(state))) dart.assertFailed(null, I[92], 797, 12, "_hasSeenPadding(state)");
      if (start == end) return state;
      let expectedPadding = convert._Base64Decoder._statePadding(state);
      if (!(dart.notNull(expectedPadding) >= 0)) dart.assertFailed(null, I[92], 800, 12, "expectedPadding >= 0");
      if (!(dart.notNull(expectedPadding) < 6)) dart.assertFailed(null, I[92], 801, 12, "expectedPadding < 6");
      while (dart.notNull(expectedPadding) > 0) {
        let char = input[$codeUnitAt](start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding = dart.notNull(expectedPadding) - 3;
            start = dart.notNull(start) + 1;
            break;
          }
          if (char === 37) {
            expectedPadding = dart.notNull(expectedPadding) - 1;
            start = dart.notNull(start) + 1;
            if (start == end) break;
            char = input[$codeUnitAt](start);
          } else {
            break;
          }
        }
        let expectedPartialPadding = expectedPadding;
        if (dart.notNull(expectedPartialPadding) > 3) expectedPartialPadding = dart.notNull(expectedPartialPadding) - 3;
        if (expectedPartialPadding === 2) {
          if (char !== 51) break;
          start = dart.notNull(start) + 1;
          expectedPadding = dart.notNull(expectedPadding) - 1;
          if (start == end) break;
          char = input[$codeUnitAt](start);
        }
        if ((char | 32) >>> 0 !== 100) break;
        start = dart.notNull(start) + 1;
        expectedPadding = dart.notNull(expectedPadding) - 1;
        if (start == end) break;
      }
      if (start != end) {
        dart.throw(new core.FormatException.new("Invalid padding character", input, start));
      }
      return convert._Base64Decoder._encodePaddingState(expectedPadding);
    }
  };
  (convert._Base64Decoder.new = function() {
    this[_state$0] = 0;
    ;
  }).prototype = convert._Base64Decoder.prototype;
  dart.addTypeTests(convert._Base64Decoder);
  dart.addTypeCaches(convert._Base64Decoder);
  dart.setMethodSignature(convert._Base64Decoder, () => ({
    __proto__: dart.getMethods(convert._Base64Decoder.__proto__),
    decode: dart.fnType(dart.nullable(typed_data.Uint8List), [core.String, core.int, core.int]),
    close: dart.fnType(dart.void, [dart.nullable(core.String), dart.nullable(core.int)])
  }));
  dart.setLibraryUri(convert._Base64Decoder, I[31]);
  dart.setFieldSignature(convert._Base64Decoder, () => ({
    __proto__: dart.getFields(convert._Base64Decoder.__proto__),
    [_state$0]: dart.fieldType(core.int)
  }));
  dart.defineLazy(convert._Base64Decoder, {
    /*convert._Base64Decoder._valueShift*/get _valueShift() {
      return 2;
    },
    /*convert._Base64Decoder._countMask*/get _countMask() {
      return 3;
    },
    /*convert._Base64Decoder._invalid*/get _invalid() {
      return -2;
    },
    /*convert._Base64Decoder._padding*/get _padding() {
      return -1;
    },
    /*convert._Base64Decoder.___*/get ___() {
      return -2;
    },
    /*convert._Base64Decoder._p*/get _p() {
      return -1;
    },
    /*convert._Base64Decoder._inverseAlphabet*/get _inverseAlphabet() {
      return _native_typed_data.NativeInt8List.fromList(T$.JSArrayOfint().of([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2]));
    },
    /*convert._Base64Decoder._char_percent*/get _char_percent() {
      return 37;
    },
    /*convert._Base64Decoder._char_3*/get _char_3() {
      return 51;
    },
    /*convert._Base64Decoder._char_d*/get _char_d() {
      return 100;
    },
    /*convert._Base64Decoder._emptyBuffer*/get _emptyBuffer() {
      return _native_typed_data.NativeUint8List.new(0);
    },
    set _emptyBuffer(_) {}
  }, false);
  var _decoder = dart.privateName(convert, "_decoder");
  convert._Base64DecoderSink = class _Base64DecoderSink extends convert.StringConversionSinkBase {
    add(string) {
      core.String.as(string);
      if (string == null) dart.nullFailed(I[92], 850, 19, "string");
      if (string[$isEmpty]) return;
      let buffer = this[_decoder].decode(string, 0, string.length);
      if (buffer != null) this[_sink$0].add(buffer);
    }
    close() {
      this[_decoder].close(null, null);
      this[_sink$0].close();
    }
    addSlice(string, start, end, isLast) {
      if (string == null) dart.nullFailed(I[92], 861, 24, "string");
      if (start == null) dart.nullFailed(I[92], 861, 36, "start");
      if (end == null) dart.nullFailed(I[92], 861, 47, "end");
      if (isLast == null) dart.nullFailed(I[92], 861, 57, "isLast");
      core.RangeError.checkValidRange(start, end, string.length);
      if (start == end) return;
      let buffer = this[_decoder].decode(string, start, end);
      if (buffer != null) this[_sink$0].add(buffer);
      if (dart.test(isLast)) {
        this[_decoder].close(string, end);
        this[_sink$0].close();
      }
    }
  };
  (convert._Base64DecoderSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[92], 848, 27, "_sink");
    this[_decoder] = new convert._Base64Decoder.new();
    this[_sink$0] = _sink;
    ;
  }).prototype = convert._Base64DecoderSink.prototype;
  dart.addTypeTests(convert._Base64DecoderSink);
  dart.addTypeCaches(convert._Base64DecoderSink);
  dart.setMethodSignature(convert._Base64DecoderSink, () => ({
    __proto__: dart.getMethods(convert._Base64DecoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Base64DecoderSink, I[31]);
  dart.setFieldSignature(convert._Base64DecoderSink, () => ({
    __proto__: dart.getFields(convert._Base64DecoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int))),
    [_decoder]: dart.finalFieldType(convert._Base64Decoder)
  }));
  convert._ByteAdapterSink = class _ByteAdapterSink extends convert.ByteConversionSinkBase {
    add(chunk) {
      T$0.ListOfint().as(chunk);
      if (chunk == null) dart.nullFailed(I[91], 57, 22, "chunk");
      this[_sink$0].add(chunk);
    }
    close() {
      this[_sink$0].close();
    }
  };
  (convert._ByteAdapterSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[91], 55, 25, "_sink");
    this[_sink$0] = _sink;
    convert._ByteAdapterSink.__proto__.new.call(this);
    ;
  }).prototype = convert._ByteAdapterSink.prototype;
  dart.addTypeTests(convert._ByteAdapterSink);
  dart.addTypeCaches(convert._ByteAdapterSink);
  dart.setMethodSignature(convert._ByteAdapterSink, () => ({
    __proto__: dart.getMethods(convert._ByteAdapterSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._ByteAdapterSink, I[31]);
  dart.setFieldSignature(convert._ByteAdapterSink, () => ({
    __proto__: dart.getFields(convert._ByteAdapterSink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.List$(core.int)))
  }));
  var _buffer$ = dart.privateName(convert, "_buffer");
  var _bufferIndex = dart.privateName(convert, "_bufferIndex");
  var _callback$ = dart.privateName(convert, "_callback");
  convert._ByteCallbackSink = class _ByteCallbackSink extends convert.ByteConversionSinkBase {
    add(chunk) {
      T$.IterableOfint().as(chunk);
      if (chunk == null) dart.nullFailed(I[91], 80, 26, "chunk");
      let freeCount = dart.notNull(this[_buffer$][$length]) - dart.notNull(this[_bufferIndex]);
      if (dart.notNull(chunk[$length]) > freeCount) {
        let oldLength = this[_buffer$][$length];
        let newLength = dart.notNull(convert._ByteCallbackSink._roundToPowerOf2(dart.notNull(chunk[$length]) + dart.notNull(oldLength))) * 2;
        let grown = _native_typed_data.NativeUint8List.new(newLength);
        grown[$setRange](0, this[_buffer$][$length], this[_buffer$]);
        this[_buffer$] = grown;
      }
      this[_buffer$][$setRange](this[_bufferIndex], dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]), chunk);
      this[_bufferIndex] = dart.notNull(this[_bufferIndex]) + dart.notNull(chunk[$length]);
    }
    static _roundToPowerOf2(v) {
      if (v == null) dart.nullFailed(I[91], 94, 35, "v");
      if (!(dart.notNull(v) > 0)) dart.assertFailed(null, I[91], 95, 12, "v > 0");
      v = dart.notNull(v) - 1;
      v = (dart.notNull(v) | v[$rightShift](1)) >>> 0;
      v = (dart.notNull(v) | v[$rightShift](2)) >>> 0;
      v = (dart.notNull(v) | v[$rightShift](4)) >>> 0;
      v = (dart.notNull(v) | v[$rightShift](8)) >>> 0;
      v = (dart.notNull(v) | v[$rightShift](16)) >>> 0;
      v = dart.notNull(v) + 1;
      return v;
    }
    close() {
      let t173;
      t173 = this[_buffer$][$sublist](0, this[_bufferIndex]);
      this[_callback$](t173);
    }
  };
  (convert._ByteCallbackSink.new = function(callback) {
    if (callback == null) dart.nullFailed(I[91], 77, 26, "callback");
    this[_buffer$] = _native_typed_data.NativeUint8List.new(1024);
    this[_bufferIndex] = 0;
    this[_callback$] = callback;
    convert._ByteCallbackSink.__proto__.new.call(this);
    ;
  }).prototype = convert._ByteCallbackSink.prototype;
  dart.addTypeTests(convert._ByteCallbackSink);
  dart.addTypeCaches(convert._ByteCallbackSink);
  dart.setMethodSignature(convert._ByteCallbackSink, () => ({
    __proto__: dart.getMethods(convert._ByteCallbackSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._ByteCallbackSink, I[31]);
  dart.setFieldSignature(convert._ByteCallbackSink, () => ({
    __proto__: dart.getFields(convert._ByteCallbackSink.__proto__),
    [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.List$(core.int)])),
    [_buffer$]: dart.fieldType(core.List$(core.int)),
    [_bufferIndex]: dart.fieldType(core.int)
  }));
  dart.defineLazy(convert._ByteCallbackSink, {
    /*convert._ByteCallbackSink._INITIAL_BUFFER_SIZE*/get _INITIAL_BUFFER_SIZE() {
      return 1024;
    }
  }, false);
  var _accumulated = dart.privateName(convert, "_accumulated");
  const _is__SimpleCallbackSink_default = Symbol('_is__SimpleCallbackSink_default');
  convert._SimpleCallbackSink$ = dart.generic(T => {
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    class _SimpleCallbackSink extends convert.ChunkedConversionSink$(T) {
      add(chunk) {
        T.as(chunk);
        this[_accumulated][$add](chunk);
      }
      close() {
        let t173;
        t173 = this[_accumulated];
        this[_callback$](t173);
      }
    }
    (_SimpleCallbackSink.new = function(_callback) {
      if (_callback == null) dart.nullFailed(I[93], 41, 28, "_callback");
      this[_accumulated] = JSArrayOfT().of([]);
      this[_callback$] = _callback;
      _SimpleCallbackSink.__proto__.new.call(this);
      ;
    }).prototype = _SimpleCallbackSink.prototype;
    dart.addTypeTests(_SimpleCallbackSink);
    _SimpleCallbackSink.prototype[_is__SimpleCallbackSink_default] = true;
    dart.addTypeCaches(_SimpleCallbackSink);
    dart.setMethodSignature(_SimpleCallbackSink, () => ({
      __proto__: dart.getMethods(_SimpleCallbackSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_SimpleCallbackSink, I[31]);
    dart.setFieldSignature(_SimpleCallbackSink, () => ({
      __proto__: dart.getFields(_SimpleCallbackSink.__proto__),
      [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.List$(T)])),
      [_accumulated]: dart.finalFieldType(core.List$(T))
    }));
    return _SimpleCallbackSink;
  });
  convert._SimpleCallbackSink = convert._SimpleCallbackSink$();
  dart.addTypeTests(convert._SimpleCallbackSink, _is__SimpleCallbackSink_default);
  var _eventSink = dart.privateName(convert, "_eventSink");
  var _chunkedSink$ = dart.privateName(convert, "_chunkedSink");
  const _is__ConverterStreamEventSink_default = Symbol('_is__ConverterStreamEventSink_default');
  convert._ConverterStreamEventSink$ = dart.generic((S, T) => {
    class _ConverterStreamEventSink extends core.Object {
      add(o) {
        S.as(o);
        this[_chunkedSink$].add(o);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[93], 75, 24, "error");
        _internal.checkNotNullable(core.Object, error, "error");
        this[_eventSink].addError(error, stackTrace);
      }
      close() {
        this[_chunkedSink$].close();
      }
    }
    (_ConverterStreamEventSink.new = function(converter, sink) {
      if (converter == null) dart.nullFailed(I[93], 67, 45, "converter");
      if (sink == null) dart.nullFailed(I[93], 67, 69, "sink");
      this[_eventSink] = sink;
      this[_chunkedSink$] = converter.startChunkedConversion(sink);
      ;
    }).prototype = _ConverterStreamEventSink.prototype;
    dart.addTypeTests(_ConverterStreamEventSink);
    _ConverterStreamEventSink.prototype[_is__ConverterStreamEventSink_default] = true;
    dart.addTypeCaches(_ConverterStreamEventSink);
    _ConverterStreamEventSink[dart.implements] = () => [async.EventSink$(S)];
    dart.setMethodSignature(_ConverterStreamEventSink, () => ({
      __proto__: dart.getMethods(_ConverterStreamEventSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(_ConverterStreamEventSink, I[31]);
    dart.setFieldSignature(_ConverterStreamEventSink, () => ({
      __proto__: dart.getFields(_ConverterStreamEventSink.__proto__),
      [_eventSink]: dart.finalFieldType(async.EventSink$(T)),
      [_chunkedSink$]: dart.finalFieldType(core.Sink$(S))
    }));
    return _ConverterStreamEventSink;
  });
  convert._ConverterStreamEventSink = convert._ConverterStreamEventSink$();
  dart.addTypeTests(convert._ConverterStreamEventSink, _is__ConverterStreamEventSink_default);
  var _first$0 = dart.privateName(convert, "_first");
  var _second$0 = dart.privateName(convert, "_second");
  const _is__FusedCodec_default = Symbol('_is__FusedCodec_default');
  convert._FusedCodec$ = dart.generic((S, M, T) => {
    class _FusedCodec extends convert.Codec$(S, T) {
      get encoder() {
        return this[_first$0].encoder.fuse(T, this[_second$0].encoder);
      }
      get decoder() {
        return this[_second$0].decoder.fuse(S, this[_first$0].decoder);
      }
    }
    (_FusedCodec.new = function(_first, _second) {
      if (_first == null) dart.nullFailed(I[89], 85, 20, "_first");
      if (_second == null) dart.nullFailed(I[89], 85, 33, "_second");
      this[_first$0] = _first;
      this[_second$0] = _second;
      _FusedCodec.__proto__.new.call(this);
      ;
    }).prototype = _FusedCodec.prototype;
    dart.addTypeTests(_FusedCodec);
    _FusedCodec.prototype[_is__FusedCodec_default] = true;
    dart.addTypeCaches(_FusedCodec);
    dart.setGetterSignature(_FusedCodec, () => ({
      __proto__: dart.getGetters(_FusedCodec.__proto__),
      encoder: convert.Converter$(S, T),
      decoder: convert.Converter$(T, S)
    }));
    dart.setLibraryUri(_FusedCodec, I[31]);
    dart.setFieldSignature(_FusedCodec, () => ({
      __proto__: dart.getFields(_FusedCodec.__proto__),
      [_first$0]: dart.finalFieldType(convert.Codec$(S, M)),
      [_second$0]: dart.finalFieldType(convert.Codec$(M, T))
    }));
    return _FusedCodec;
  });
  convert._FusedCodec = convert._FusedCodec$();
  dart.addTypeTests(convert._FusedCodec, _is__FusedCodec_default);
  var _codec = dart.privateName(convert, "_codec");
  const _is__InvertedCodec_default = Symbol('_is__InvertedCodec_default');
  convert._InvertedCodec$ = dart.generic((T, S) => {
    class _InvertedCodec extends convert.Codec$(T, S) {
      get encoder() {
        return this[_codec].decoder;
      }
      get decoder() {
        return this[_codec].encoder;
      }
      get inverted() {
        return this[_codec];
      }
    }
    (_InvertedCodec.new = function(codec) {
      if (codec == null) dart.nullFailed(I[89], 91, 30, "codec");
      this[_codec] = codec;
      _InvertedCodec.__proto__.new.call(this);
      ;
    }).prototype = _InvertedCodec.prototype;
    dart.addTypeTests(_InvertedCodec);
    _InvertedCodec.prototype[_is__InvertedCodec_default] = true;
    dart.addTypeCaches(_InvertedCodec);
    dart.setGetterSignature(_InvertedCodec, () => ({
      __proto__: dart.getGetters(_InvertedCodec.__proto__),
      encoder: convert.Converter$(T, S),
      decoder: convert.Converter$(S, T)
    }));
    dart.setLibraryUri(_InvertedCodec, I[31]);
    dart.setFieldSignature(_InvertedCodec, () => ({
      __proto__: dart.getFields(_InvertedCodec.__proto__),
      [_codec]: dart.finalFieldType(convert.Codec$(S, T))
    }));
    return _InvertedCodec;
  });
  convert._InvertedCodec = convert._InvertedCodec$();
  dart.addTypeTests(convert._InvertedCodec, _is__InvertedCodec_default);
  const _is__FusedConverter_default = Symbol('_is__FusedConverter_default');
  convert._FusedConverter$ = dart.generic((S, M, T) => {
    var SinkOfT = () => (SinkOfT = dart.constFn(core.Sink$(T)))();
    class _FusedConverter extends convert.Converter$(S, T) {
      convert(input) {
        S.as(input);
        return this[_second$0].convert(this[_first$0].convert(input));
      }
      startChunkedConversion(sink) {
        SinkOfT().as(sink);
        if (sink == null) dart.nullFailed(I[30], 69, 42, "sink");
        return this[_first$0].startChunkedConversion(this[_second$0].startChunkedConversion(sink));
      }
    }
    (_FusedConverter.new = function(_first, _second) {
      if (_first == null) dart.nullFailed(I[30], 65, 24, "_first");
      if (_second == null) dart.nullFailed(I[30], 65, 37, "_second");
      this[_first$0] = _first;
      this[_second$0] = _second;
      _FusedConverter.__proto__.new.call(this);
      ;
    }).prototype = _FusedConverter.prototype;
    dart.addTypeTests(_FusedConverter);
    _FusedConverter.prototype[_is__FusedConverter_default] = true;
    dart.addTypeCaches(_FusedConverter);
    dart.setMethodSignature(_FusedConverter, () => ({
      __proto__: dart.getMethods(_FusedConverter.__proto__),
      convert: dart.fnType(T, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_FusedConverter, I[31]);
    dart.setFieldSignature(_FusedConverter, () => ({
      __proto__: dart.getFields(_FusedConverter.__proto__),
      [_first$0]: dart.finalFieldType(convert.Converter$(S, M)),
      [_second$0]: dart.finalFieldType(convert.Converter$(M, T))
    }));
    return _FusedConverter;
  });
  convert._FusedConverter = convert._FusedConverter$();
  dart.addTypeTests(convert._FusedConverter, _is__FusedConverter_default);
  var _name$2 = dart.privateName(convert, "HtmlEscapeMode._name");
  var escapeLtGt$ = dart.privateName(convert, "HtmlEscapeMode.escapeLtGt");
  var escapeQuot$ = dart.privateName(convert, "HtmlEscapeMode.escapeQuot");
  var escapeApos$ = dart.privateName(convert, "HtmlEscapeMode.escapeApos");
  var escapeSlash$ = dart.privateName(convert, "HtmlEscapeMode.escapeSlash");
  var _name$3 = dart.privateName(convert, "_name");
  convert.HtmlEscapeMode = class HtmlEscapeMode extends core.Object {
    get [_name$3]() {
      return this[_name$2];
    }
    set [_name$3](value) {
      super[_name$3] = value;
    }
    get escapeLtGt() {
      return this[escapeLtGt$];
    }
    set escapeLtGt(value) {
      super.escapeLtGt = value;
    }
    get escapeQuot() {
      return this[escapeQuot$];
    }
    set escapeQuot(value) {
      super.escapeQuot = value;
    }
    get escapeApos() {
      return this[escapeApos$];
    }
    set escapeApos(value) {
      super.escapeApos = value;
    }
    get escapeSlash() {
      return this[escapeSlash$];
    }
    set escapeSlash(value) {
      super.escapeSlash = value;
    }
    toString() {
      return this[_name$3];
    }
  };
  (convert.HtmlEscapeMode.__ = function(_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
    if (_name == null) dart.nullFailed(I[94], 102, 31, "_name");
    if (escapeLtGt == null) dart.nullFailed(I[94], 102, 43, "escapeLtGt");
    if (escapeQuot == null) dart.nullFailed(I[94], 102, 60, "escapeQuot");
    if (escapeApos == null) dart.nullFailed(I[94], 103, 12, "escapeApos");
    if (escapeSlash == null) dart.nullFailed(I[94], 103, 29, "escapeSlash");
    this[_name$2] = _name;
    this[escapeLtGt$] = escapeLtGt;
    this[escapeQuot$] = escapeQuot;
    this[escapeApos$] = escapeApos;
    this[escapeSlash$] = escapeSlash;
    ;
  }).prototype = convert.HtmlEscapeMode.prototype;
  (convert.HtmlEscapeMode.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : "custom";
    if (name == null) dart.nullFailed(I[94], 111, 15, "name");
    let escapeLtGt = opts && 'escapeLtGt' in opts ? opts.escapeLtGt : false;
    if (escapeLtGt == null) dart.nullFailed(I[94], 112, 12, "escapeLtGt");
    let escapeQuot = opts && 'escapeQuot' in opts ? opts.escapeQuot : false;
    if (escapeQuot == null) dart.nullFailed(I[94], 113, 12, "escapeQuot");
    let escapeApos = opts && 'escapeApos' in opts ? opts.escapeApos : false;
    if (escapeApos == null) dart.nullFailed(I[94], 114, 12, "escapeApos");
    let escapeSlash = opts && 'escapeSlash' in opts ? opts.escapeSlash : false;
    if (escapeSlash == null) dart.nullFailed(I[94], 115, 12, "escapeSlash");
    this[escapeLtGt$] = escapeLtGt;
    this[escapeQuot$] = escapeQuot;
    this[escapeApos$] = escapeApos;
    this[escapeSlash$] = escapeSlash;
    this[_name$2] = name;
    ;
  }).prototype = convert.HtmlEscapeMode.prototype;
  dart.addTypeTests(convert.HtmlEscapeMode);
  dart.addTypeCaches(convert.HtmlEscapeMode);
  dart.setLibraryUri(convert.HtmlEscapeMode, I[31]);
  dart.setFieldSignature(convert.HtmlEscapeMode, () => ({
    __proto__: dart.getFields(convert.HtmlEscapeMode.__proto__),
    [_name$3]: dart.finalFieldType(core.String),
    escapeLtGt: dart.finalFieldType(core.bool),
    escapeQuot: dart.finalFieldType(core.bool),
    escapeApos: dart.finalFieldType(core.bool),
    escapeSlash: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(convert.HtmlEscapeMode, ['toString']);
  dart.defineLazy(convert.HtmlEscapeMode, {
    /*convert.HtmlEscapeMode.unknown*/get unknown() {
      return C[88] || CT.C88;
    },
    /*convert.HtmlEscapeMode.attribute*/get attribute() {
      return C[89] || CT.C89;
    },
    /*convert.HtmlEscapeMode.sqAttribute*/get sqAttribute() {
      return C[90] || CT.C90;
    },
    /*convert.HtmlEscapeMode.element*/get element() {
      return C[91] || CT.C91;
    }
  }, false);
  var mode$ = dart.privateName(convert, "HtmlEscape.mode");
  var _convert = dart.privateName(convert, "_convert");
  convert.HtmlEscape = class HtmlEscape extends convert.Converter$(core.String, core.String) {
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    convert(text) {
      core.String.as(text);
      if (text == null) dart.nullFailed(I[94], 152, 25, "text");
      let val = this[_convert](text, 0, text.length);
      return val == null ? text : val;
    }
    [_convert](text, start, end) {
      if (text == null) dart.nullFailed(I[94], 161, 27, "text");
      if (start == null) dart.nullFailed(I[94], 161, 37, "start");
      if (end == null) dart.nullFailed(I[94], 161, 48, "end");
      let result = null;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let ch = text[$_get](i);
        let replacement = null;
        switch (ch) {
          case "&":
          {
            replacement = "&amp;";
            break;
          }
          case "\"":
          {
            if (dart.test(this.mode.escapeQuot)) replacement = "&quot;";
            break;
          }
          case "'":
          {
            if (dart.test(this.mode.escapeApos)) replacement = "&#39;";
            break;
          }
          case "<":
          {
            if (dart.test(this.mode.escapeLtGt)) replacement = "&lt;";
            break;
          }
          case ">":
          {
            if (dart.test(this.mode.escapeLtGt)) replacement = "&gt;";
            break;
          }
          case "/":
          {
            if (dart.test(this.mode.escapeSlash)) replacement = "&#47;";
            break;
          }
        }
        if (replacement != null) {
          result == null ? result = new core.StringBuffer.new() : null;
          if (result == null) {
            dart.throw("unreachable");
          }
          if (dart.notNull(i) > dart.notNull(start)) result.write(text[$substring](start, i));
          result.write(replacement);
          start = dart.notNull(i) + 1;
        }
      }
      if (result == null) return null;
      if (dart.notNull(end) > dart.notNull(start)) result.write(text[$substring](start, end));
      return dart.toString(result);
    }
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[94], 203, 60, "sink");
      return new convert._HtmlEscapeSink.new(this, convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
    }
  };
  (convert.HtmlEscape.new = function(mode = C[88] || CT.C88) {
    if (mode == null) dart.nullFailed(I[94], 150, 26, "mode");
    this[mode$] = mode;
    convert.HtmlEscape.__proto__.new.call(this);
    ;
  }).prototype = convert.HtmlEscape.prototype;
  dart.addTypeTests(convert.HtmlEscape);
  dart.addTypeCaches(convert.HtmlEscape);
  dart.setMethodSignature(convert.HtmlEscape, () => ({
    __proto__: dart.getMethods(convert.HtmlEscape.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
    [_convert]: dart.fnType(dart.nullable(core.String), [core.String, core.int, core.int]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.HtmlEscape, I[31]);
  dart.setFieldSignature(convert.HtmlEscape, () => ({
    __proto__: dart.getFields(convert.HtmlEscape.__proto__),
    mode: dart.finalFieldType(convert.HtmlEscapeMode)
  }));
  var _escape$ = dart.privateName(convert, "_escape");
  convert._HtmlEscapeSink = class _HtmlEscapeSink extends convert.StringConversionSinkBase {
    addSlice(chunk, start, end, isLast) {
      if (chunk == null) dart.nullFailed(I[94], 215, 24, "chunk");
      if (start == null) dart.nullFailed(I[94], 215, 35, "start");
      if (end == null) dart.nullFailed(I[94], 215, 46, "end");
      if (isLast == null) dart.nullFailed(I[94], 215, 56, "isLast");
      let val = this[_escape$][_convert](chunk, start, end);
      if (val == null) {
        this[_sink$0].addSlice(chunk, start, end, isLast);
      } else {
        this[_sink$0].add(val);
        if (dart.test(isLast)) this[_sink$0].close();
      }
    }
    close() {
      this[_sink$0].close();
    }
  };
  (convert._HtmlEscapeSink.new = function(_escape, _sink) {
    if (_escape == null) dart.nullFailed(I[94], 213, 24, "_escape");
    if (_sink == null) dart.nullFailed(I[94], 213, 38, "_sink");
    this[_escape$] = _escape;
    this[_sink$0] = _sink;
    ;
  }).prototype = convert._HtmlEscapeSink.prototype;
  dart.addTypeTests(convert._HtmlEscapeSink);
  dart.addTypeCaches(convert._HtmlEscapeSink);
  dart.setMethodSignature(convert._HtmlEscapeSink, () => ({
    __proto__: dart.getMethods(convert._HtmlEscapeSink.__proto__),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._HtmlEscapeSink, I[31]);
  dart.setFieldSignature(convert._HtmlEscapeSink, () => ({
    __proto__: dart.getFields(convert._HtmlEscapeSink.__proto__),
    [_escape$]: dart.finalFieldType(convert.HtmlEscape),
    [_sink$0]: dart.finalFieldType(convert.StringConversionSink)
  }));
  var unsupportedObject$ = dart.privateName(convert, "JsonUnsupportedObjectError.unsupportedObject");
  var cause$ = dart.privateName(convert, "JsonUnsupportedObjectError.cause");
  var partialResult$ = dart.privateName(convert, "JsonUnsupportedObjectError.partialResult");
  convert.JsonUnsupportedObjectError = class JsonUnsupportedObjectError extends core.Error {
    get unsupportedObject() {
      return this[unsupportedObject$];
    }
    set unsupportedObject(value) {
      super.unsupportedObject = value;
    }
    get cause() {
      return this[cause$];
    }
    set cause(value) {
      super.cause = value;
    }
    get partialResult() {
      return this[partialResult$];
    }
    set partialResult(value) {
      super.partialResult = value;
    }
    toString() {
      let safeString = core.Error.safeToString(this.unsupportedObject);
      let prefix = null;
      if (this.cause != null) {
        prefix = "Converting object to an encodable object failed:";
      } else {
        prefix = "Converting object did not return an encodable object:";
      }
      return dart.str(prefix) + " " + dart.str(safeString);
    }
  };
  (convert.JsonUnsupportedObjectError.new = function(unsupportedObject, opts) {
    let cause = opts && 'cause' in opts ? opts.cause : null;
    let partialResult = opts && 'partialResult' in opts ? opts.partialResult : null;
    this[unsupportedObject$] = unsupportedObject;
    this[cause$] = cause;
    this[partialResult$] = partialResult;
    convert.JsonUnsupportedObjectError.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonUnsupportedObjectError.prototype;
  dart.addTypeTests(convert.JsonUnsupportedObjectError);
  dart.addTypeCaches(convert.JsonUnsupportedObjectError);
  dart.setLibraryUri(convert.JsonUnsupportedObjectError, I[31]);
  dart.setFieldSignature(convert.JsonUnsupportedObjectError, () => ({
    __proto__: dart.getFields(convert.JsonUnsupportedObjectError.__proto__),
    unsupportedObject: dart.finalFieldType(dart.nullable(core.Object)),
    cause: dart.finalFieldType(dart.nullable(core.Object)),
    partialResult: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(convert.JsonUnsupportedObjectError, ['toString']);
  convert.JsonCyclicError = class JsonCyclicError extends convert.JsonUnsupportedObjectError {
    toString() {
      return "Cyclic error in JSON stringify";
    }
  };
  (convert.JsonCyclicError.new = function(object) {
    convert.JsonCyclicError.__proto__.new.call(this, object);
    ;
  }).prototype = convert.JsonCyclicError.prototype;
  dart.addTypeTests(convert.JsonCyclicError);
  dart.addTypeCaches(convert.JsonCyclicError);
  dart.setLibraryUri(convert.JsonCyclicError, I[31]);
  dart.defineExtensionMethods(convert.JsonCyclicError, ['toString']);
  var _reviver = dart.privateName(convert, "JsonCodec._reviver");
  var _toEncodable = dart.privateName(convert, "JsonCodec._toEncodable");
  var _toEncodable$ = dart.privateName(convert, "_toEncodable");
  var JsonEncoder__toEncodable = dart.privateName(convert, "JsonEncoder._toEncodable");
  var JsonEncoder_indent = dart.privateName(convert, "JsonEncoder.indent");
  var JsonDecoder__reviver = dart.privateName(convert, "JsonDecoder._reviver");
  convert.JsonCodec = class JsonCodec extends convert.Codec$(dart.nullable(core.Object), core.String) {
    get [_reviver$]() {
      return this[_reviver];
    }
    set [_reviver$](value) {
      super[_reviver$] = value;
    }
    get [_toEncodable$]() {
      return this[_toEncodable];
    }
    set [_toEncodable$](value) {
      super[_toEncodable$] = value;
    }
    decode(source, opts) {
      core.String.as(source);
      if (source == null) dart.nullFailed(I[95], 154, 25, "source");
      let reviver = opts && 'reviver' in opts ? opts.reviver : null;
      reviver == null ? reviver = this[_reviver$] : null;
      if (reviver == null) return this.decoder.convert(source);
      return new convert.JsonDecoder.new(reviver).convert(source);
    }
    encode(value, opts) {
      let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
      toEncodable == null ? toEncodable = this[_toEncodable$] : null;
      if (toEncodable == null) return this.encoder.convert(value);
      return new convert.JsonEncoder.new(toEncodable).convert(value);
    }
    get encoder() {
      if (this[_toEncodable$] == null) return C[92] || CT.C92;
      return new convert.JsonEncoder.new(this[_toEncodable$]);
    }
    get decoder() {
      if (this[_reviver$] == null) return C[93] || CT.C93;
      return new convert.JsonDecoder.new(this[_reviver$]);
    }
  };
  (convert.JsonCodec.new = function(opts) {
    let reviver = opts && 'reviver' in opts ? opts.reviver : null;
    let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
    this[_reviver] = reviver;
    this[_toEncodable] = toEncodable;
    convert.JsonCodec.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonCodec.prototype;
  (convert.JsonCodec.withReviver = function(reviver) {
    if (reviver == null) dart.nullFailed(I[95], 143, 33, "reviver");
    convert.JsonCodec.new.call(this, {reviver: reviver});
  }).prototype = convert.JsonCodec.prototype;
  dart.addTypeTests(convert.JsonCodec);
  dart.addTypeCaches(convert.JsonCodec);
  dart.setMethodSignature(convert.JsonCodec, () => ({
    __proto__: dart.getMethods(convert.JsonCodec.__proto__),
    decode: dart.fnType(dart.dynamic, [dart.nullable(core.Object)], {reviver: dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))}, {}),
    encode: dart.fnType(core.String, [dart.nullable(core.Object)], {toEncodable: dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))}, {})
  }));
  dart.setGetterSignature(convert.JsonCodec, () => ({
    __proto__: dart.getGetters(convert.JsonCodec.__proto__),
    encoder: convert.JsonEncoder,
    decoder: convert.JsonDecoder
  }));
  dart.setLibraryUri(convert.JsonCodec, I[31]);
  dart.setFieldSignature(convert.JsonCodec, () => ({
    __proto__: dart.getFields(convert.JsonCodec.__proto__),
    [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]))),
    [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic])))
  }));
  const indent$ = JsonEncoder_indent;
  const _toEncodable$0 = JsonEncoder__toEncodable;
  convert.JsonEncoder = class JsonEncoder extends convert.Converter$(dart.nullable(core.Object), core.String) {
    get indent() {
      return this[indent$];
    }
    set indent(value) {
      super.indent = value;
    }
    get [_toEncodable$]() {
      return this[_toEncodable$0];
    }
    set [_toEncodable$](value) {
      super[_toEncodable$] = value;
    }
    convert(object) {
      return convert._JsonStringStringifier.stringify(object, this[_toEncodable$], this.indent);
    }
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[95], 271, 70, "sink");
      if (convert._Utf8EncoderSink.is(sink)) {
        return new convert._JsonUtf8EncoderSink.new(sink[_sink$0], this[_toEncodable$], convert.JsonUtf8Encoder._utf8Encode(this.indent), 256);
      }
      return new convert._JsonEncoderSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink), this[_toEncodable$], this.indent);
    }
    bind(stream) {
      T$0.StreamOfObjectN().as(stream);
      if (stream == null) dart.nullFailed(I[95], 286, 39, "stream");
      return super.bind(stream);
    }
    fuse(T, other) {
      convert.Converter$(core.String, T).as(other);
      if (other == null) dart.nullFailed(I[95], 288, 54, "other");
      if (convert.Utf8Encoder.is(other)) {
        return convert.Converter$(T$.ObjectN(), T).as(new convert.JsonUtf8Encoder.new(this.indent, this[_toEncodable$]));
      }
      return super.fuse(T, other);
    }
  };
  (convert.JsonEncoder.new = function(toEncodable = null) {
    this[indent$] = null;
    this[_toEncodable$0] = toEncodable;
    convert.JsonEncoder.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonEncoder.prototype;
  (convert.JsonEncoder.withIndent = function(indent, toEncodable = null) {
    this[indent$] = indent;
    this[_toEncodable$0] = toEncodable;
    convert.JsonEncoder.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonEncoder.prototype;
  dart.addTypeTests(convert.JsonEncoder);
  dart.addTypeCaches(convert.JsonEncoder);
  dart.setMethodSignature(convert.JsonEncoder, () => ({
    __proto__: dart.getMethods(convert.JsonEncoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(dart.nullable(core.Object)), [dart.nullable(core.Object)]),
    fuse: dart.gFnType(T => [convert.Converter$(dart.nullable(core.Object), T), [dart.nullable(core.Object)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.JsonEncoder, I[31]);
  dart.setFieldSignature(convert.JsonEncoder, () => ({
    __proto__: dart.getFields(convert.JsonEncoder.__proto__),
    indent: dart.finalFieldType(dart.nullable(core.String)),
    [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic])))
  }));
  var _indent$ = dart.privateName(convert, "_indent");
  var _bufferSize$ = dart.privateName(convert, "_bufferSize");
  convert.JsonUtf8Encoder = class JsonUtf8Encoder extends convert.Converter$(dart.nullable(core.Object), core.List$(core.int)) {
    static _utf8Encode(string) {
      if (string == null) return null;
      if (string[$isEmpty]) return _native_typed_data.NativeUint8List.new(0);
      L0: {
        for (let i = 0; i < string.length; i = i + 1) {
          if (string[$codeUnitAt](i) >= 128) break L0;
        }
        return string[$codeUnits];
      }
      return convert.utf8.encode(string);
    }
    convert(object) {
      let bytes = T$0.JSArrayOfListOfint().of([]);
      function addChunk(chunk, start, end) {
        if (chunk == null) dart.nullFailed(I[95], 365, 29, "chunk");
        if (start == null) dart.nullFailed(I[95], 365, 40, "start");
        if (end == null) dart.nullFailed(I[95], 365, 51, "end");
        if (dart.notNull(start) > 0 || dart.notNull(end) < dart.notNull(chunk[$length])) {
          let length = dart.notNull(end) - dart.notNull(start);
          chunk = typed_data.Uint8List.view(chunk[$buffer], dart.notNull(chunk[$offsetInBytes]) + dart.notNull(start), length);
        }
        bytes[$add](chunk);
      }
      dart.fn(addChunk, T$0.Uint8ListAndintAndintTovoid());
      convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], addChunk);
      if (bytes[$length] === 1) return bytes[$_get](0);
      let length = 0;
      for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
        length = length + dart.notNull(bytes[$_get](i)[$length]);
      }
      let result = _native_typed_data.NativeUint8List.new(length);
      for (let i = 0, offset = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
        let byteList = bytes[$_get](i);
        let end = offset + dart.notNull(byteList[$length]);
        result[$setRange](offset, end, byteList);
        offset = end;
      }
      return result;
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[95], 397, 73, "sink");
      let byteSink = null;
      if (convert.ByteConversionSink.is(sink)) {
        byteSink = sink;
      } else {
        byteSink = new convert._ByteAdapterSink.new(sink);
      }
      return new convert._JsonUtf8EncoderSink.new(byteSink, this[_toEncodable$], this[_indent$], this[_bufferSize$]);
    }
    bind(stream) {
      T$0.StreamOfObjectN().as(stream);
      if (stream == null) dart.nullFailed(I[95], 408, 42, "stream");
      return super.bind(stream);
    }
  };
  (convert.JsonUtf8Encoder.new = function(indent = null, toEncodable = null, bufferSize = null) {
    let t173;
    this[_indent$] = convert.JsonUtf8Encoder._utf8Encode(indent);
    this[_toEncodable$] = toEncodable;
    this[_bufferSize$] = (t173 = bufferSize, t173 == null ? 256 : t173);
    convert.JsonUtf8Encoder.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonUtf8Encoder.prototype;
  dart.addTypeTests(convert.JsonUtf8Encoder);
  dart.addTypeCaches(convert.JsonUtf8Encoder);
  dart.setMethodSignature(convert.JsonUtf8Encoder, () => ({
    __proto__: dart.getMethods(convert.JsonUtf8Encoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(dart.nullable(core.Object)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.JsonUtf8Encoder, I[31]);
  dart.setFieldSignature(convert.JsonUtf8Encoder, () => ({
    __proto__: dart.getFields(convert.JsonUtf8Encoder.__proto__),
    [_indent$]: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
    [_bufferSize$]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(convert.JsonUtf8Encoder, {
    /*convert.JsonUtf8Encoder._defaultBufferSize*/get _defaultBufferSize() {
      return 256;
    },
    /*convert.JsonUtf8Encoder.DEFAULT_BUFFER_SIZE*/get DEFAULT_BUFFER_SIZE() {
      return 256;
    }
  }, false);
  var _isDone = dart.privateName(convert, "_isDone");
  convert._JsonEncoderSink = class _JsonEncoderSink extends convert.ChunkedConversionSink$(dart.nullable(core.Object)) {
    add(o) {
      if (dart.test(this[_isDone])) {
        dart.throw(new core.StateError.new("Only one call to add allowed"));
      }
      this[_isDone] = true;
      let stringSink = this[_sink$0].asStringSink();
      convert._JsonStringStringifier.printOn(o, stringSink, this[_toEncodable$], this[_indent$]);
      stringSink.close();
    }
    close() {
    }
  };
  (convert._JsonEncoderSink.new = function(_sink, _toEncodable, _indent) {
    if (_sink == null) dart.nullFailed(I[95], 422, 25, "_sink");
    this[_isDone] = false;
    this[_sink$0] = _sink;
    this[_toEncodable$] = _toEncodable;
    this[_indent$] = _indent;
    convert._JsonEncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._JsonEncoderSink.prototype;
  dart.addTypeTests(convert._JsonEncoderSink);
  dart.addTypeCaches(convert._JsonEncoderSink);
  dart.setMethodSignature(convert._JsonEncoderSink, () => ({
    __proto__: dart.getMethods(convert._JsonEncoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._JsonEncoderSink, I[31]);
  dart.setFieldSignature(convert._JsonEncoderSink, () => ({
    __proto__: dart.getFields(convert._JsonEncoderSink.__proto__),
    [_indent$]: dart.finalFieldType(dart.nullable(core.String)),
    [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
    [_sink$0]: dart.finalFieldType(convert.StringConversionSink),
    [_isDone]: dart.fieldType(core.bool)
  }));
  var _addChunk = dart.privateName(convert, "_addChunk");
  convert._JsonUtf8EncoderSink = class _JsonUtf8EncoderSink extends convert.ChunkedConversionSink$(dart.nullable(core.Object)) {
    [_addChunk](chunk, start, end) {
      if (chunk == null) dart.nullFailed(I[95], 454, 28, "chunk");
      if (start == null) dart.nullFailed(I[95], 454, 39, "start");
      if (end == null) dart.nullFailed(I[95], 454, 50, "end");
      this[_sink$0].addSlice(chunk, start, end, false);
    }
    add(object) {
      if (dart.test(this[_isDone])) {
        dart.throw(new core.StateError.new("Only one call to add allowed"));
      }
      this[_isDone] = true;
      convert._JsonUtf8Stringifier.stringify(object, this[_indent$], this[_toEncodable$], this[_bufferSize$], dart.bind(this, _addChunk));
      this[_sink$0].close();
    }
    close() {
      if (!dart.test(this[_isDone])) {
        this[_isDone] = true;
        this[_sink$0].close();
      }
    }
  };
  (convert._JsonUtf8EncoderSink.new = function(_sink, _toEncodable, _indent, _bufferSize) {
    if (_sink == null) dart.nullFailed(I[95], 451, 12, "_sink");
    if (_bufferSize == null) dart.nullFailed(I[95], 451, 57, "_bufferSize");
    this[_isDone] = false;
    this[_sink$0] = _sink;
    this[_toEncodable$] = _toEncodable;
    this[_indent$] = _indent;
    this[_bufferSize$] = _bufferSize;
    convert._JsonUtf8EncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._JsonUtf8EncoderSink.prototype;
  dart.addTypeTests(convert._JsonUtf8EncoderSink);
  dart.addTypeCaches(convert._JsonUtf8EncoderSink);
  dart.setMethodSignature(convert._JsonUtf8EncoderSink, () => ({
    __proto__: dart.getMethods(convert._JsonUtf8EncoderSink.__proto__),
    [_addChunk]: dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._JsonUtf8EncoderSink, I[31]);
  dart.setFieldSignature(convert._JsonUtf8EncoderSink, () => ({
    __proto__: dart.getFields(convert._JsonUtf8EncoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(convert.ByteConversionSink),
    [_indent$]: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    [_toEncodable$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.dynamic]))),
    [_bufferSize$]: dart.finalFieldType(core.int),
    [_isDone]: dart.fieldType(core.bool)
  }));
  const _reviver$0 = JsonDecoder__reviver;
  convert.JsonDecoder = class JsonDecoder extends convert.Converter$(core.String, dart.nullable(core.Object)) {
    get [_reviver$]() {
      return this[_reviver$0];
    }
    set [_reviver$](value) {
      super[_reviver$] = value;
    }
    convert(input) {
      core.String.as(input);
      if (input == null) dart.nullFailed(I[95], 506, 26, "input");
      return convert._parseJson(input, this[_reviver$]);
    }
    startChunkedConversion(sink) {
      if (sink == null) dart.nullFailed(I[85], 363, 61, "sink");
      return new convert._JsonDecoderSink.new(this[_reviver$], sink);
    }
    bind(stream) {
      T$0.StreamOfString().as(stream);
      if (stream == null) dart.nullFailed(I[95], 514, 39, "stream");
      return super.bind(stream);
    }
  };
  (convert.JsonDecoder.new = function(reviver = null) {
    this[_reviver$0] = reviver;
    convert.JsonDecoder.__proto__.new.call(this);
    ;
  }).prototype = convert.JsonDecoder.prototype;
  dart.addTypeTests(convert.JsonDecoder);
  dart.addTypeCaches(convert.JsonDecoder);
  dart.setMethodSignature(convert.JsonDecoder, () => ({
    __proto__: dart.getMethods(convert.JsonDecoder.__proto__),
    convert: dart.fnType(dart.dynamic, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [core.Sink$(dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(convert.JsonDecoder, I[31]);
  dart.setFieldSignature(convert.JsonDecoder, () => ({
    __proto__: dart.getFields(convert.JsonDecoder.__proto__),
    [_reviver$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)])))
  }));
  var _seen = dart.privateName(convert, "_seen");
  var _checkCycle = dart.privateName(convert, "_checkCycle");
  var _removeSeen = dart.privateName(convert, "_removeSeen");
  var _partialResult = dart.privateName(convert, "_partialResult");
  convert._JsonStringifier = class _JsonStringifier extends core.Object {
    static hexDigit(x) {
      if (x == null) dart.nullFailed(I[95], 574, 27, "x");
      return dart.notNull(x) < 10 ? 48 + dart.notNull(x) : 87 + dart.notNull(x);
    }
    writeStringContent(s) {
      if (s == null) dart.nullFailed(I[95], 577, 34, "s");
      let offset = 0;
      let length = s.length;
      for (let i = 0; i < length; i = i + 1) {
        let charCode = s[$codeUnitAt](i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            if ((charCode & 64512) >>> 0 === 55296 && !(i + 1 < length && (s[$codeUnitAt](i + 1) & 64512) >>> 0 === 56320) || (charCode & 64512) >>> 0 === 56320 && !(i - 1 >= 0 && (s[$codeUnitAt](i - 1) & 64512) >>> 0 === 55296)) {
              if (i > offset) this.writeStringSlice(s, offset, i);
              offset = i + 1;
              this.writeCharCode(92);
              this.writeCharCode(117);
              this.writeCharCode(100);
              this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 8 & 15));
              this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 4 & 15));
              this.writeCharCode(convert._JsonStringifier.hexDigit(charCode & 15));
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset) this.writeStringSlice(s, offset, i);
          offset = i + 1;
          this.writeCharCode(92);
          switch (charCode) {
            case 8:
            {
              this.writeCharCode(98);
              break;
            }
            case 9:
            {
              this.writeCharCode(116);
              break;
            }
            case 10:
            {
              this.writeCharCode(110);
              break;
            }
            case 12:
            {
              this.writeCharCode(102);
              break;
            }
            case 13:
            {
              this.writeCharCode(114);
              break;
            }
            default:
            {
              this.writeCharCode(117);
              this.writeCharCode(48);
              this.writeCharCode(48);
              this.writeCharCode(convert._JsonStringifier.hexDigit(charCode >> 4 & 15));
              this.writeCharCode(convert._JsonStringifier.hexDigit(charCode & 15));
              break;
            }
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset) this.writeStringSlice(s, offset, i);
          offset = i + 1;
          this.writeCharCode(92);
          this.writeCharCode(charCode);
        }
      }
      if (offset === 0) {
        this.writeString(s);
      } else if (offset < length) {
        this.writeStringSlice(s, offset, length);
      }
    }
    [_checkCycle](object) {
      for (let i = 0; i < dart.notNull(this[_seen][$length]); i = i + 1) {
        if (core.identical(object, this[_seen][$_get](i))) {
          dart.throw(new convert.JsonCyclicError.new(object));
        }
      }
      this[_seen][$add](object);
    }
    [_removeSeen](object) {
      if (!dart.test(this[_seen][$isNotEmpty])) dart.assertFailed(null, I[95], 666, 12, "_seen.isNotEmpty");
      if (!core.identical(this[_seen][$last], object)) dart.assertFailed(null, I[95], 667, 12, "identical(_seen.last, object)");
      this[_seen][$removeLast]();
    }
    writeObject(object) {
      let t173;
      if (dart.test(this.writeJsonValue(object))) return;
      this[_checkCycle](object);
      try {
        let customJson = (t173 = object, this[_toEncodable$](t173));
        if (!dart.test(this.writeJsonValue(customJson))) {
          dart.throw(new convert.JsonUnsupportedObjectError.new(object, {partialResult: this[_partialResult]}));
        }
        this[_removeSeen](object);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          dart.throw(new convert.JsonUnsupportedObjectError.new(object, {cause: e, partialResult: this[_partialResult]}));
        } else
          throw e$;
      }
    }
    writeJsonValue(object) {
      if (typeof object == 'number') {
        if (!object[$isFinite]) return false;
        this.writeNumber(object);
        return true;
      } else if (object === true) {
        this.writeString("true");
        return true;
      } else if (object === false) {
        this.writeString("false");
        return true;
      } else if (object == null) {
        this.writeString("null");
        return true;
      } else if (typeof object == 'string') {
        this.writeString("\"");
        this.writeStringContent(object);
        this.writeString("\"");
        return true;
      } else if (core.List.is(object)) {
        this[_checkCycle](object);
        this.writeList(object);
        this[_removeSeen](object);
        return true;
      } else if (core.Map.is(object)) {
        this[_checkCycle](object);
        let success = this.writeMap(object);
        this[_removeSeen](object);
        return success;
      } else {
        return false;
      }
    }
    writeList(list) {
      if (list == null) dart.nullFailed(I[95], 733, 32, "list");
      this.writeString("[");
      if (dart.test(list[$isNotEmpty])) {
        this.writeObject(list[$_get](0));
        for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
          this.writeString(",");
          this.writeObject(list[$_get](i));
        }
      }
      this.writeString("]");
    }
    writeMap(map) {
      if (map == null) dart.nullFailed(I[95], 746, 39, "map");
      if (dart.test(map[$isEmpty])) {
        this.writeString("{}");
        return true;
      }
      let keyValueList = T$.ListOfObjectN().filled(dart.notNull(map[$length]) * 2, null);
      let i = 0;
      let allStringKeys = true;
      map[$forEach](dart.fn((key, value) => {
        let t174, t174$;
        if (!(typeof key == 'string')) {
          allStringKeys = false;
        }
        keyValueList[$_set]((t174 = i, i = t174 + 1, t174), key);
        keyValueList[$_set]((t174$ = i, i = t174$ + 1, t174$), value);
      }, T$.ObjectNAndObjectNTovoid()));
      if (!allStringKeys) return false;
      this.writeString("{");
      let separator = "\"";
      for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
        this.writeString(separator);
        separator = ",\"";
        this.writeStringContent(core.String.as(keyValueList[$_get](i)));
        this.writeString("\":");
        this.writeObject(keyValueList[$_get](i + 1));
      }
      this.writeString("}");
      return true;
    }
  };
  (convert._JsonStringifier.new = function(toEncodable) {
    let t173;
    this[_seen] = [];
    this[_toEncodable$] = (t173 = toEncodable, t173 == null ? C[94] || CT.C94 : t173);
    ;
  }).prototype = convert._JsonStringifier.prototype;
  dart.addTypeTests(convert._JsonStringifier);
  dart.addTypeCaches(convert._JsonStringifier);
  dart.setMethodSignature(convert._JsonStringifier, () => ({
    __proto__: dart.getMethods(convert._JsonStringifier.__proto__),
    writeStringContent: dart.fnType(dart.void, [core.String]),
    [_checkCycle]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_removeSeen]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeObject: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeJsonValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    writeList: dart.fnType(dart.void, [core.List$(dart.nullable(core.Object))]),
    writeMap: dart.fnType(core.bool, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(convert._JsonStringifier, I[31]);
  dart.setFieldSignature(convert._JsonStringifier, () => ({
    __proto__: dart.getFields(convert._JsonStringifier.__proto__),
    [_seen]: dart.finalFieldType(core.List),
    [_toEncodable$]: dart.finalFieldType(dart.fnType(dart.dynamic, [dart.dynamic]))
  }));
  dart.defineLazy(convert._JsonStringifier, {
    /*convert._JsonStringifier.backspace*/get backspace() {
      return 8;
    },
    /*convert._JsonStringifier.tab*/get tab() {
      return 9;
    },
    /*convert._JsonStringifier.newline*/get newline() {
      return 10;
    },
    /*convert._JsonStringifier.carriageReturn*/get carriageReturn() {
      return 13;
    },
    /*convert._JsonStringifier.formFeed*/get formFeed() {
      return 12;
    },
    /*convert._JsonStringifier.quote*/get quote() {
      return 34;
    },
    /*convert._JsonStringifier.char_0*/get char_0() {
      return 48;
    },
    /*convert._JsonStringifier.backslash*/get backslash() {
      return 92;
    },
    /*convert._JsonStringifier.char_b*/get char_b() {
      return 98;
    },
    /*convert._JsonStringifier.char_d*/get char_d() {
      return 100;
    },
    /*convert._JsonStringifier.char_f*/get char_f() {
      return 102;
    },
    /*convert._JsonStringifier.char_n*/get char_n() {
      return 110;
    },
    /*convert._JsonStringifier.char_r*/get char_r() {
      return 114;
    },
    /*convert._JsonStringifier.char_t*/get char_t() {
      return 116;
    },
    /*convert._JsonStringifier.char_u*/get char_u() {
      return 117;
    },
    /*convert._JsonStringifier.surrogateMin*/get surrogateMin() {
      return 55296;
    },
    /*convert._JsonStringifier.surrogateMask*/get surrogateMask() {
      return 64512;
    },
    /*convert._JsonStringifier.surrogateLead*/get surrogateLead() {
      return 55296;
    },
    /*convert._JsonStringifier.surrogateTrail*/get surrogateTrail() {
      return 56320;
    }
  }, false);
  var _indentLevel = dart.privateName(convert, "_JsonPrettyPrintMixin._indentLevel");
  var _indentLevel$ = dart.privateName(convert, "_indentLevel");
  convert._JsonPrettyPrintMixin = class _JsonPrettyPrintMixin extends core.Object {
    get [_indentLevel$]() {
      return this[_indentLevel];
    }
    set [_indentLevel$](value) {
      this[_indentLevel] = value;
    }
    writeList(list) {
      if (list == null) dart.nullFailed(I[95], 786, 32, "list");
      if (dart.test(list[$isEmpty])) {
        this.writeString("[]");
      } else {
        this.writeString("[\n");
        this[_indentLevel$] = dart.notNull(this[_indentLevel$]) + 1;
        this.writeIndentation(this[_indentLevel$]);
        this.writeObject(list[$_get](0));
        for (let i = 1; i < dart.notNull(list[$length]); i = i + 1) {
          this.writeString(",\n");
          this.writeIndentation(this[_indentLevel$]);
          this.writeObject(list[$_get](i));
        }
        this.writeString("\n");
        this[_indentLevel$] = dart.notNull(this[_indentLevel$]) - 1;
        this.writeIndentation(this[_indentLevel$]);
        this.writeString("]");
      }
    }
    writeMap(map) {
      if (map == null) dart.nullFailed(I[95], 806, 39, "map");
      if (dart.test(map[$isEmpty])) {
        this.writeString("{}");
        return true;
      }
      let keyValueList = T$.ListOfObjectN().filled(dart.notNull(map[$length]) * 2, null);
      let i = 0;
      let allStringKeys = true;
      map[$forEach](dart.fn((key, value) => {
        let t174, t174$;
        if (!(typeof key == 'string')) {
          allStringKeys = false;
        }
        keyValueList[$_set]((t174 = i, i = t174 + 1, t174), key);
        keyValueList[$_set]((t174$ = i, i = t174$ + 1, t174$), value);
      }, T$.ObjectNAndObjectNTovoid()));
      if (!allStringKeys) return false;
      this.writeString("{\n");
      this[_indentLevel$] = dart.notNull(this[_indentLevel$]) + 1;
      let separator = "";
      for (let i = 0; i < dart.notNull(keyValueList[$length]); i = i + 2) {
        this.writeString(separator);
        separator = ",\n";
        this.writeIndentation(this[_indentLevel$]);
        this.writeString("\"");
        this.writeStringContent(core.String.as(keyValueList[$_get](i)));
        this.writeString("\": ");
        this.writeObject(keyValueList[$_get](i + 1));
      }
      this.writeString("\n");
      this[_indentLevel$] = dart.notNull(this[_indentLevel$]) - 1;
      this.writeIndentation(this[_indentLevel$]);
      this.writeString("}");
      return true;
    }
  };
  (convert._JsonPrettyPrintMixin.new = function() {
    this[_indentLevel] = 0;
    ;
  }).prototype = convert._JsonPrettyPrintMixin.prototype;
  dart.addTypeTests(convert._JsonPrettyPrintMixin);
  dart.addTypeCaches(convert._JsonPrettyPrintMixin);
  convert._JsonPrettyPrintMixin[dart.implements] = () => [convert._JsonStringifier];
  dart.setMethodSignature(convert._JsonPrettyPrintMixin, () => ({
    __proto__: dart.getMethods(convert._JsonPrettyPrintMixin.__proto__),
    writeList: dart.fnType(dart.void, [core.List$(dart.nullable(core.Object))]),
    writeMap: dart.fnType(core.bool, [core.Map$(dart.nullable(core.Object), dart.nullable(core.Object))])
  }));
  dart.setLibraryUri(convert._JsonPrettyPrintMixin, I[31]);
  dart.setFieldSignature(convert._JsonPrettyPrintMixin, () => ({
    __proto__: dart.getFields(convert._JsonPrettyPrintMixin.__proto__),
    [_indentLevel$]: dart.fieldType(core.int)
  }));
  convert._JsonStringStringifier = class _JsonStringStringifier extends convert._JsonStringifier {
    static stringify(object, toEncodable, indent) {
      let output = new core.StringBuffer.new();
      convert._JsonStringStringifier.printOn(object, output, toEncodable, indent);
      return output.toString();
    }
    static printOn(object, output, toEncodable, indent) {
      if (output == null) dart.nullFailed(I[95], 869, 50, "output");
      let stringifier = null;
      if (indent == null) {
        stringifier = new convert._JsonStringStringifier.new(output, toEncodable);
      } else {
        stringifier = new convert._JsonStringStringifierPretty.new(output, toEncodable, indent);
      }
      stringifier.writeObject(object);
    }
    get [_partialResult]() {
      return core.StringBuffer.is(this[_sink$0]) ? dart.toString(this[_sink$0]) : null;
    }
    writeNumber(number) {
      if (number == null) dart.nullFailed(I[95], 882, 24, "number");
      this[_sink$0].write(dart.toString(number));
    }
    writeString(string) {
      if (string == null) dart.nullFailed(I[95], 886, 27, "string");
      this[_sink$0].write(string);
    }
    writeStringSlice(string, start, end) {
      if (string == null) dart.nullFailed(I[95], 890, 32, "string");
      if (start == null) dart.nullFailed(I[95], 890, 44, "start");
      if (end == null) dart.nullFailed(I[95], 890, 55, "end");
      this[_sink$0].write(string[$substring](start, end));
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[95], 894, 26, "charCode");
      this[_sink$0].writeCharCode(charCode);
    }
  };
  (convert._JsonStringStringifier.new = function(_sink, _toEncodable) {
    if (_sink == null) dart.nullFailed(I[95], 847, 12, "_sink");
    this[_sink$0] = _sink;
    convert._JsonStringStringifier.__proto__.new.call(this, _toEncodable);
    ;
  }).prototype = convert._JsonStringStringifier.prototype;
  dart.addTypeTests(convert._JsonStringStringifier);
  dart.addTypeCaches(convert._JsonStringStringifier);
  dart.setMethodSignature(convert._JsonStringStringifier, () => ({
    __proto__: dart.getMethods(convert._JsonStringStringifier.__proto__),
    writeNumber: dart.fnType(dart.void, [core.num]),
    writeString: dart.fnType(dart.void, [core.String]),
    writeStringSlice: dart.fnType(dart.void, [core.String, core.int, core.int]),
    writeCharCode: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(convert._JsonStringStringifier, () => ({
    __proto__: dart.getGetters(convert._JsonStringStringifier.__proto__),
    [_partialResult]: dart.nullable(core.String)
  }));
  dart.setLibraryUri(convert._JsonStringStringifier, I[31]);
  dart.setFieldSignature(convert._JsonStringStringifier, () => ({
    __proto__: dart.getFields(convert._JsonStringStringifier.__proto__),
    [_sink$0]: dart.finalFieldType(core.StringSink)
  }));
  const _JsonStringStringifier__JsonPrettyPrintMixin$36 = class _JsonStringStringifier__JsonPrettyPrintMixin extends convert._JsonStringStringifier {};
  (_JsonStringStringifier__JsonPrettyPrintMixin$36.new = function(_sink, _toEncodable) {
    convert._JsonPrettyPrintMixin.new.call(this);
    _JsonStringStringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, _sink, _toEncodable);
  }).prototype = _JsonStringStringifier__JsonPrettyPrintMixin$36.prototype;
  dart.applyMixin(_JsonStringStringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
  convert._JsonStringStringifierPretty = class _JsonStringStringifierPretty extends _JsonStringStringifier__JsonPrettyPrintMixin$36 {
    writeIndentation(count) {
      if (count == null) dart.nullFailed(I[95], 907, 29, "count");
      for (let i = 0; i < dart.notNull(count); i = i + 1)
        this.writeString(this[_indent$]);
    }
  };
  (convert._JsonStringStringifierPretty.new = function(sink, toEncodable, _indent) {
    if (sink == null) dart.nullFailed(I[95], 904, 18, "sink");
    if (_indent == null) dart.nullFailed(I[95], 904, 62, "_indent");
    this[_indent$] = _indent;
    convert._JsonStringStringifierPretty.__proto__.new.call(this, sink, toEncodable);
    ;
  }).prototype = convert._JsonStringStringifierPretty.prototype;
  dart.addTypeTests(convert._JsonStringStringifierPretty);
  dart.addTypeCaches(convert._JsonStringStringifierPretty);
  dart.setMethodSignature(convert._JsonStringStringifierPretty, () => ({
    __proto__: dart.getMethods(convert._JsonStringStringifierPretty.__proto__),
    writeIndentation: dart.fnType(dart.void, [core.int])
  }));
  dart.setLibraryUri(convert._JsonStringStringifierPretty, I[31]);
  dart.setFieldSignature(convert._JsonStringStringifierPretty, () => ({
    __proto__: dart.getFields(convert._JsonStringStringifierPretty.__proto__),
    [_indent$]: dart.finalFieldType(core.String)
  }));
  convert._JsonUtf8Stringifier = class _JsonUtf8Stringifier extends convert._JsonStringifier {
    static stringify(object, indent, toEncodable, bufferSize, addChunk) {
      if (bufferSize == null) dart.nullFailed(I[95], 940, 11, "bufferSize");
      if (addChunk == null) dart.nullFailed(I[95], 941, 12, "addChunk");
      let stringifier = null;
      if (indent != null) {
        stringifier = new convert._JsonUtf8StringifierPretty.new(toEncodable, indent, bufferSize, addChunk);
      } else {
        stringifier = new convert._JsonUtf8Stringifier.new(toEncodable, bufferSize, addChunk);
      }
      stringifier.writeObject(object);
      stringifier.flush();
    }
    flush() {
      let t176, t175, t174;
      if (dart.notNull(this.index) > 0) {
        t174 = this.buffer;
        t175 = 0;
        t176 = this.index;
        this.addChunk(t174, t175, t176);
      }
      this.buffer = _native_typed_data.NativeUint8List.new(0);
      this.index = 0;
    }
    get [_partialResult]() {
      return null;
    }
    writeNumber(number) {
      if (number == null) dart.nullFailed(I[95], 965, 24, "number");
      this.writeAsciiString(dart.toString(number));
    }
    writeAsciiString(string) {
      if (string == null) dart.nullFailed(I[95], 970, 32, "string");
      for (let i = 0; i < string.length; i = i + 1) {
        let char = string[$codeUnitAt](i);
        if (!(char <= 127)) dart.assertFailed(null, I[95], 975, 14, "char <= 0x7f");
        this.writeByte(char);
      }
    }
    writeString(string) {
      if (string == null) dart.nullFailed(I[95], 980, 27, "string");
      this.writeStringSlice(string, 0, string.length);
    }
    writeStringSlice(string, start, end) {
      if (string == null) dart.nullFailed(I[95], 984, 32, "string");
      if (start == null) dart.nullFailed(I[95], 984, 44, "start");
      if (end == null) dart.nullFailed(I[95], 984, 55, "end");
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let char = string[$codeUnitAt](i);
        if (char <= 127) {
          this.writeByte(char);
        } else {
          if ((char & 63488) === 55296) {
            if (char < 56320 && dart.notNull(i) + 1 < dart.notNull(end)) {
              let nextChar = string[$codeUnitAt](dart.notNull(i) + 1);
              if ((nextChar & 64512) === 56320) {
                char = 65536 + ((char & 1023) << 10) + (nextChar & 1023);
                this.writeFourByteCharCode(char);
                i = dart.notNull(i) + 1;
                continue;
              }
            }
            this.writeMultiByteCharCode(65533);
            continue;
          }
          this.writeMultiByteCharCode(char);
        }
      }
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[95], 1015, 26, "charCode");
      if (dart.notNull(charCode) <= 127) {
        this.writeByte(charCode);
        return;
      }
      this.writeMultiByteCharCode(charCode);
    }
    writeMultiByteCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[95], 1023, 35, "charCode");
      if (dart.notNull(charCode) <= 2047) {
        this.writeByte((192 | charCode[$rightShift](6)) >>> 0);
        this.writeByte(128 | dart.notNull(charCode) & 63);
        return;
      }
      if (dart.notNull(charCode) <= 65535) {
        this.writeByte((224 | charCode[$rightShift](12)) >>> 0);
        this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
        this.writeByte(128 | dart.notNull(charCode) & 63);
        return;
      }
      this.writeFourByteCharCode(charCode);
    }
    writeFourByteCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[95], 1038, 34, "charCode");
      if (!(dart.notNull(charCode) <= 1114111)) dart.assertFailed(null, I[95], 1039, 12, "charCode <= 0x10ffff");
      this.writeByte((240 | charCode[$rightShift](18)) >>> 0);
      this.writeByte(128 | dart.notNull(charCode) >> 12 & 63);
      this.writeByte(128 | dart.notNull(charCode) >> 6 & 63);
      this.writeByte(128 | dart.notNull(charCode) & 63);
    }
    writeByte(byte) {
      let t176, t175, t174, t174$;
      if (byte == null) dart.nullFailed(I[95], 1046, 22, "byte");
      if (!(dart.notNull(byte) <= 255)) dart.assertFailed(null, I[95], 1047, 12, "byte <= 0xff");
      if (this.index == this.buffer[$length]) {
        t174 = this.buffer;
        t175 = 0;
        t176 = this.index;
        this.addChunk(t174, t175, t176);
        this.buffer = _native_typed_data.NativeUint8List.new(this.bufferSize);
        this.index = 0;
      }
      this.buffer[$_set]((t174$ = this.index, this.index = dart.notNull(t174$) + 1, t174$), byte);
    }
  };
  (convert._JsonUtf8Stringifier.new = function(toEncodable, bufferSize, addChunk) {
    if (bufferSize == null) dart.nullFailed(I[95], 923, 45, "bufferSize");
    if (addChunk == null) dart.nullFailed(I[95], 923, 62, "addChunk");
    this.index = 0;
    this.bufferSize = bufferSize;
    this.addChunk = addChunk;
    this.buffer = _native_typed_data.NativeUint8List.new(bufferSize);
    convert._JsonUtf8Stringifier.__proto__.new.call(this, toEncodable);
    ;
  }).prototype = convert._JsonUtf8Stringifier.prototype;
  dart.addTypeTests(convert._JsonUtf8Stringifier);
  dart.addTypeCaches(convert._JsonUtf8Stringifier);
  dart.setMethodSignature(convert._JsonUtf8Stringifier, () => ({
    __proto__: dart.getMethods(convert._JsonUtf8Stringifier.__proto__),
    flush: dart.fnType(dart.void, []),
    writeNumber: dart.fnType(dart.void, [core.num]),
    writeAsciiString: dart.fnType(dart.void, [core.String]),
    writeString: dart.fnType(dart.void, [core.String]),
    writeStringSlice: dart.fnType(dart.void, [core.String, core.int, core.int]),
    writeCharCode: dart.fnType(dart.void, [core.int]),
    writeMultiByteCharCode: dart.fnType(dart.void, [core.int]),
    writeFourByteCharCode: dart.fnType(dart.void, [core.int]),
    writeByte: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(convert._JsonUtf8Stringifier, () => ({
    __proto__: dart.getGetters(convert._JsonUtf8Stringifier.__proto__),
    [_partialResult]: dart.nullable(core.String)
  }));
  dart.setLibraryUri(convert._JsonUtf8Stringifier, I[31]);
  dart.setFieldSignature(convert._JsonUtf8Stringifier, () => ({
    __proto__: dart.getFields(convert._JsonUtf8Stringifier.__proto__),
    bufferSize: dart.finalFieldType(core.int),
    addChunk: dart.finalFieldType(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])),
    buffer: dart.fieldType(typed_data.Uint8List),
    index: dart.fieldType(core.int)
  }));
  const _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 = class _JsonUtf8Stringifier__JsonPrettyPrintMixin extends convert._JsonUtf8Stringifier {};
  (_JsonUtf8Stringifier__JsonPrettyPrintMixin$36.new = function(toEncodable, bufferSize, addChunk) {
    convert._JsonPrettyPrintMixin.new.call(this);
    _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
  }).prototype = _JsonUtf8Stringifier__JsonPrettyPrintMixin$36.prototype;
  dart.applyMixin(_JsonUtf8Stringifier__JsonPrettyPrintMixin$36, convert._JsonPrettyPrintMixin);
  convert._JsonUtf8StringifierPretty = class _JsonUtf8StringifierPretty extends _JsonUtf8Stringifier__JsonPrettyPrintMixin$36 {
    writeIndentation(count) {
      if (count == null) dart.nullFailed(I[95], 1065, 29, "count");
      let indent = this.indent;
      let indentLength = indent[$length];
      if (indentLength === 1) {
        let char = indent[$_get](0);
        while (dart.notNull(count) > 0) {
          this.writeByte(char);
          count = dart.notNull(count) - 1;
        }
        return;
      }
      while (dart.notNull(count) > 0) {
        count = dart.notNull(count) - 1;
        let end = dart.notNull(this.index) + dart.notNull(indentLength);
        if (end <= dart.notNull(this.buffer[$length])) {
          this.buffer[$setRange](this.index, end, indent);
          this.index = end;
        } else {
          for (let i = 0; i < dart.notNull(indentLength); i = i + 1) {
            this.writeByte(indent[$_get](i));
          }
        }
      }
    }
  };
  (convert._JsonUtf8StringifierPretty.new = function(toEncodable, indent, bufferSize, addChunk) {
    if (indent == null) dart.nullFailed(I[95], 1061, 68, "indent");
    if (bufferSize == null) dart.nullFailed(I[95], 1062, 11, "bufferSize");
    if (addChunk == null) dart.nullFailed(I[95], 1062, 28, "addChunk");
    this.indent = indent;
    convert._JsonUtf8StringifierPretty.__proto__.new.call(this, toEncodable, bufferSize, addChunk);
    ;
  }).prototype = convert._JsonUtf8StringifierPretty.prototype;
  dart.addTypeTests(convert._JsonUtf8StringifierPretty);
  dart.addTypeCaches(convert._JsonUtf8StringifierPretty);
  dart.setMethodSignature(convert._JsonUtf8StringifierPretty, () => ({
    __proto__: dart.getMethods(convert._JsonUtf8StringifierPretty.__proto__),
    writeIndentation: dart.fnType(dart.void, [core.int])
  }));
  dart.setLibraryUri(convert._JsonUtf8StringifierPretty, I[31]);
  dart.setFieldSignature(convert._JsonUtf8StringifierPretty, () => ({
    __proto__: dart.getFields(convert._JsonUtf8StringifierPretty.__proto__),
    indent: dart.finalFieldType(core.List$(core.int))
  }));
  var _allowInvalid$1 = dart.privateName(convert, "Latin1Codec._allowInvalid");
  convert.Latin1Codec = class Latin1Codec extends convert.Encoding {
    get [_allowInvalid$]() {
      return this[_allowInvalid$1];
    }
    set [_allowInvalid$](value) {
      super[_allowInvalid$] = value;
    }
    get name() {
      return "iso-8859-1";
    }
    encode(source) {
      core.String.as(source);
      if (source == null) dart.nullFailed(I[96], 40, 27, "source");
      return this.encoder.convert(source);
    }
    decode(bytes, opts) {
      let t174;
      T$0.ListOfint().as(bytes);
      if (bytes == null) dart.nullFailed(I[96], 50, 27, "bytes");
      let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : null;
      if (dart.test((t174 = allowInvalid, t174 == null ? this[_allowInvalid$] : t174))) {
        return (C[95] || CT.C95).convert(bytes);
      } else {
        return (C[96] || CT.C96).convert(bytes);
      }
    }
    get encoder() {
      return C[97] || CT.C97;
    }
    get decoder() {
      return dart.test(this[_allowInvalid$]) ? C[95] || CT.C95 : C[96] || CT.C96;
    }
  };
  (convert.Latin1Codec.new = function(opts) {
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
    if (allowInvalid == null) dart.nullFailed(I[96], 35, 27, "allowInvalid");
    this[_allowInvalid$1] = allowInvalid;
    convert.Latin1Codec.__proto__.new.call(this);
    ;
  }).prototype = convert.Latin1Codec.prototype;
  dart.addTypeTests(convert.Latin1Codec);
  dart.addTypeCaches(convert.Latin1Codec);
  dart.setMethodSignature(convert.Latin1Codec, () => ({
    __proto__: dart.getMethods(convert.Latin1Codec.__proto__),
    encode: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)]),
    decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowInvalid: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(convert.Latin1Codec, () => ({
    __proto__: dart.getGetters(convert.Latin1Codec.__proto__),
    name: core.String,
    encoder: convert.Latin1Encoder,
    decoder: convert.Latin1Decoder
  }));
  dart.setLibraryUri(convert.Latin1Codec, I[31]);
  dart.setFieldSignature(convert.Latin1Codec, () => ({
    __proto__: dart.getFields(convert.Latin1Codec.__proto__),
    [_allowInvalid$]: dart.finalFieldType(core.bool)
  }));
  convert.Latin1Encoder = class Latin1Encoder extends convert._UnicodeSubsetEncoder {};
  (convert.Latin1Encoder.new = function() {
    convert.Latin1Encoder.__proto__.new.call(this, 255);
    ;
  }).prototype = convert.Latin1Encoder.prototype;
  dart.addTypeTests(convert.Latin1Encoder);
  dart.addTypeCaches(convert.Latin1Encoder);
  dart.setLibraryUri(convert.Latin1Encoder, I[31]);
  convert.Latin1Decoder = class Latin1Decoder extends convert._UnicodeSubsetDecoder {
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[96], 88, 58, "sink");
      let stringSink = null;
      if (convert.StringConversionSink.is(sink)) {
        stringSink = sink;
      } else {
        stringSink = new convert._StringAdapterSink.new(sink);
      }
      if (!dart.test(this[_allowInvalid$])) return new convert._Latin1DecoderSink.new(stringSink);
      return new convert._Latin1AllowInvalidDecoderSink.new(stringSink);
    }
  };
  (convert.Latin1Decoder.new = function(opts) {
    let allowInvalid = opts && 'allowInvalid' in opts ? opts.allowInvalid : false;
    if (allowInvalid == null) dart.nullFailed(I[96], 81, 29, "allowInvalid");
    convert.Latin1Decoder.__proto__.new.call(this, allowInvalid, 255);
    ;
  }).prototype = convert.Latin1Decoder.prototype;
  dart.addTypeTests(convert.Latin1Decoder);
  dart.addTypeCaches(convert.Latin1Decoder);
  dart.setMethodSignature(convert.Latin1Decoder, () => ({
    __proto__: dart.getMethods(convert.Latin1Decoder.__proto__),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.Latin1Decoder, I[31]);
  var _addSliceToSink = dart.privateName(convert, "_addSliceToSink");
  convert._Latin1DecoderSink = class _Latin1DecoderSink extends convert.ByteConversionSinkBase {
    close() {
      dart.nullCheck(this[_sink$0]).close();
      this[_sink$0] = null;
    }
    add(source) {
      T$0.ListOfint().as(source);
      if (source == null) dart.nullFailed(I[96], 110, 22, "source");
      this.addSlice(source, 0, source[$length], false);
    }
    [_addSliceToSink](source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[96], 114, 34, "source");
      if (start == null) dart.nullFailed(I[96], 114, 46, "start");
      if (end == null) dart.nullFailed(I[96], 114, 57, "end");
      if (isLast == null) dart.nullFailed(I[96], 114, 67, "isLast");
      dart.nullCheck(this[_sink$0]).add(core.String.fromCharCodes(source, start, end));
      if (dart.test(isLast)) this.close();
    }
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[96], 123, 27, "source");
      if (start == null) dart.nullFailed(I[96], 123, 39, "start");
      if (end == null) dart.nullFailed(I[96], 123, 50, "end");
      if (isLast == null) dart.nullFailed(I[96], 123, 60, "isLast");
      core.RangeError.checkValidRange(start, end, source[$length]);
      if (start == end) return;
      if (!typed_data.Uint8List.is(source)) {
        convert._Latin1DecoderSink._checkValidLatin1(source, start, end);
      }
      this[_addSliceToSink](source, start, end, isLast);
    }
    static _checkValidLatin1(source, start, end) {
      if (source == null) dart.nullFailed(I[96], 135, 43, "source");
      if (start == null) dart.nullFailed(I[96], 135, 55, "start");
      if (end == null) dart.nullFailed(I[96], 135, 66, "end");
      let mask = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        mask = (mask | dart.notNull(source[$_get](i))) >>> 0;
      }
      if (mask >= 0 && mask <= 255) {
        return;
      }
      convert._Latin1DecoderSink._reportInvalidLatin1(source, start, end);
    }
    static _reportInvalidLatin1(source, start, end) {
      if (source == null) dart.nullFailed(I[96], 146, 46, "source");
      if (start == null) dart.nullFailed(I[96], 146, 58, "start");
      if (end == null) dart.nullFailed(I[96], 146, 69, "end");
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let char = source[$_get](i);
        if (dart.notNull(char) < 0 || dart.notNull(char) > 255) {
          dart.throw(new core.FormatException.new("Source contains non-Latin-1 characters.", source, i));
        }
      }
      if (!false) dart.assertFailed(null, I[96], 156, 12, "false");
    }
  };
  (convert._Latin1DecoderSink.new = function(_sink) {
    this[_sink$0] = _sink;
    convert._Latin1DecoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._Latin1DecoderSink.prototype;
  dart.addTypeTests(convert._Latin1DecoderSink);
  dart.addTypeCaches(convert._Latin1DecoderSink);
  dart.setMethodSignature(convert._Latin1DecoderSink, () => ({
    __proto__: dart.getMethods(convert._Latin1DecoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_addSliceToSink]: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Latin1DecoderSink, I[31]);
  dart.setFieldSignature(convert._Latin1DecoderSink, () => ({
    __proto__: dart.getFields(convert._Latin1DecoderSink.__proto__),
    [_sink$0]: dart.fieldType(dart.nullable(convert.StringConversionSink))
  }));
  convert._Latin1AllowInvalidDecoderSink = class _Latin1AllowInvalidDecoderSink extends convert._Latin1DecoderSink {
    addSlice(source, start, end, isLast) {
      if (source == null) dart.nullFailed(I[96], 163, 27, "source");
      if (start == null) dart.nullFailed(I[96], 163, 39, "start");
      if (end == null) dart.nullFailed(I[96], 163, 50, "end");
      if (isLast == null) dart.nullFailed(I[96], 163, 60, "isLast");
      core.RangeError.checkValidRange(start, end, source[$length]);
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let char = source[$_get](i);
        if (dart.notNull(char) > 255 || dart.notNull(char) < 0) {
          if (dart.notNull(i) > dart.notNull(start)) this[_addSliceToSink](source, start, i, false);
          this[_addSliceToSink](C[98] || CT.C98, 0, 1, false);
          start = dart.notNull(i) + 1;
        }
      }
      if (dart.notNull(start) < dart.notNull(end)) {
        this[_addSliceToSink](source, start, end, isLast);
      }
      if (dart.test(isLast)) {
        this.close();
      }
    }
  };
  (convert._Latin1AllowInvalidDecoderSink.new = function(sink) {
    if (sink == null) dart.nullFailed(I[96], 161, 55, "sink");
    convert._Latin1AllowInvalidDecoderSink.__proto__.new.call(this, sink);
    ;
  }).prototype = convert._Latin1AllowInvalidDecoderSink.prototype;
  dart.addTypeTests(convert._Latin1AllowInvalidDecoderSink);
  dart.addTypeCaches(convert._Latin1AllowInvalidDecoderSink);
  dart.setLibraryUri(convert._Latin1AllowInvalidDecoderSink, I[31]);
  convert.LineSplitter = class LineSplitter extends async.StreamTransformerBase$(core.String, core.String) {
    static split(lines, start = 0, end = null) {
      if (lines == null) dart.nullFailed(I[97], 28, 40, "lines");
      if (start == null) dart.nullFailed(I[97], 28, 52, "start");
      return new (T$0.SyncIterableOfString()).new(() => (function* split(end) {
        end = core.RangeError.checkValidRange(start, end, lines.length);
        if (end == null) {
          dart.throw(new core.RangeError.new("Invalid range"));
        }
        let sliceStart = start;
        let char = 0;
        for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
          let previousChar = char;
          char = lines[$codeUnitAt](i);
          if (char !== 13) {
            if (char !== 10) continue;
            if (previousChar === 13) {
              sliceStart = dart.notNull(i) + 1;
              continue;
            }
          }
          yield lines[$substring](sliceStart, i);
          sliceStart = dart.notNull(i) + 1;
        }
        if (dart.notNull(sliceStart) < dart.notNull(end)) {
          yield lines[$substring](sliceStart, end);
        }
      })(end));
    }
    convert(data) {
      if (data == null) dart.nullFailed(I[97], 54, 31, "data");
      let lines = T$.JSArrayOfString().of([]);
      let end = data.length;
      let sliceStart = 0;
      let char = 0;
      for (let i = 0; i < end; i = i + 1) {
        let previousChar = char;
        char = data[$codeUnitAt](i);
        if (char !== 13) {
          if (char !== 10) continue;
          if (previousChar === 13) {
            sliceStart = i + 1;
            continue;
          }
        }
        lines[$add](data[$substring](sliceStart, i));
        sliceStart = i + 1;
      }
      if (sliceStart < end) {
        lines[$add](data[$substring](sliceStart, end));
      }
      return lines;
    }
    startChunkedConversion(sink) {
      if (sink == null) dart.nullFailed(I[97], 78, 60, "sink");
      return new convert._LineSplitterSink.new(convert.StringConversionSink.is(sink) ? sink : new convert._StringAdapterSink.new(sink));
    }
    bind(stream) {
      T$0.StreamOfString().as(stream);
      if (stream == null) dart.nullFailed(I[97], 83, 38, "stream");
      return T$0.StreamOfString().eventTransformed(stream, dart.fn(sink => {
        if (sink == null) dart.nullFailed(I[97], 85, 36, "sink");
        return new convert._LineSplitterEventSink.new(sink);
      }, T$0.EventSinkOfStringTo_LineSplitterEventSink()));
    }
  };
  (convert.LineSplitter.new = function() {
    convert.LineSplitter.__proto__.new.call(this);
    ;
  }).prototype = convert.LineSplitter.prototype;
  dart.addTypeTests(convert.LineSplitter);
  dart.addTypeCaches(convert.LineSplitter);
  dart.setMethodSignature(convert.LineSplitter, () => ({
    __proto__: dart.getMethods(convert.LineSplitter.__proto__),
    convert: dart.fnType(core.List$(core.String), [core.String]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [core.Sink$(core.String)]),
    bind: dart.fnType(async.Stream$(core.String), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.LineSplitter, I[31]);
  var _carry = dart.privateName(convert, "_carry");
  var _skipLeadingLF = dart.privateName(convert, "_skipLeadingLF");
  var _addLines = dart.privateName(convert, "_addLines");
  convert._LineSplitterSink = class _LineSplitterSink extends convert.StringConversionSinkBase {
    addSlice(chunk, start, end, isLast) {
      if (chunk == null) dart.nullFailed(I[97], 109, 24, "chunk");
      if (start == null) dart.nullFailed(I[97], 109, 35, "start");
      if (end == null) dart.nullFailed(I[97], 109, 46, "end");
      if (isLast == null) dart.nullFailed(I[97], 109, 56, "isLast");
      end = core.RangeError.checkValidRange(start, end, chunk.length);
      if (dart.notNull(start) >= dart.notNull(end)) {
        if (dart.test(isLast)) this.close();
        return;
      }
      let carry = this[_carry];
      if (carry != null) {
        if (!!dart.test(this[_skipLeadingLF])) dart.assertFailed(null, I[97], 119, 14, "!_skipLeadingLF");
        chunk = dart.notNull(carry) + chunk[$substring](start, end);
        start = 0;
        end = chunk.length;
        this[_carry] = null;
      } else if (dart.test(this[_skipLeadingLF])) {
        if (chunk[$codeUnitAt](start) === 10) {
          start = dart.notNull(start) + 1;
        }
        this[_skipLeadingLF] = false;
      }
      this[_addLines](chunk, start, end);
      if (dart.test(isLast)) this.close();
    }
    close() {
      if (this[_carry] != null) {
        this[_sink$0].add(dart.nullCheck(this[_carry]));
        this[_carry] = null;
      }
      this[_sink$0].close();
    }
    [_addLines](lines, start, end) {
      if (lines == null) dart.nullFailed(I[97], 142, 25, "lines");
      if (start == null) dart.nullFailed(I[97], 142, 36, "start");
      if (end == null) dart.nullFailed(I[97], 142, 47, "end");
      let sliceStart = start;
      let char = 0;
      for (let i = start; dart.notNull(i) < dart.notNull(end); i = dart.notNull(i) + 1) {
        let previousChar = char;
        char = lines[$codeUnitAt](i);
        if (char !== 13) {
          if (char !== 10) continue;
          if (previousChar === 13) {
            sliceStart = dart.notNull(i) + 1;
            continue;
          }
        }
        this[_sink$0].add(lines[$substring](sliceStart, i));
        sliceStart = dart.notNull(i) + 1;
      }
      if (dart.notNull(sliceStart) < dart.notNull(end)) {
        this[_carry] = lines[$substring](sliceStart, end);
      } else {
        this[_skipLeadingLF] = char === 13;
      }
    }
  };
  (convert._LineSplitterSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[97], 107, 26, "_sink");
    this[_carry] = null;
    this[_skipLeadingLF] = false;
    this[_sink$0] = _sink;
    ;
  }).prototype = convert._LineSplitterSink.prototype;
  dart.addTypeTests(convert._LineSplitterSink);
  dart.addTypeCaches(convert._LineSplitterSink);
  dart.setMethodSignature(convert._LineSplitterSink, () => ({
    __proto__: dart.getMethods(convert._LineSplitterSink.__proto__),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, []),
    [_addLines]: dart.fnType(dart.void, [core.String, core.int, core.int])
  }));
  dart.setLibraryUri(convert._LineSplitterSink, I[31]);
  dart.setFieldSignature(convert._LineSplitterSink, () => ({
    __proto__: dart.getFields(convert._LineSplitterSink.__proto__),
    [_sink$0]: dart.finalFieldType(convert.StringConversionSink),
    [_carry]: dart.fieldType(dart.nullable(core.String)),
    [_skipLeadingLF]: dart.fieldType(core.bool)
  }));
  convert._LineSplitterEventSink = class _LineSplitterEventSink extends convert._LineSplitterSink {
    addError(o, stackTrace = null) {
      if (o == null) dart.nullFailed(I[97], 174, 24, "o");
      this[_eventSink].addError(o, stackTrace);
    }
  };
  (convert._LineSplitterEventSink.new = function(eventSink) {
    if (eventSink == null) dart.nullFailed(I[97], 170, 44, "eventSink");
    this[_eventSink] = eventSink;
    convert._LineSplitterEventSink.__proto__.new.call(this, new convert._StringAdapterSink.new(eventSink));
    ;
  }).prototype = convert._LineSplitterEventSink.prototype;
  dart.addTypeTests(convert._LineSplitterEventSink);
  dart.addTypeCaches(convert._LineSplitterEventSink);
  convert._LineSplitterEventSink[dart.implements] = () => [async.EventSink$(core.String)];
  dart.setMethodSignature(convert._LineSplitterEventSink, () => ({
    __proto__: dart.getMethods(convert._LineSplitterEventSink.__proto__),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
  }));
  dart.setLibraryUri(convert._LineSplitterEventSink, I[31]);
  dart.setFieldSignature(convert._LineSplitterEventSink, () => ({
    __proto__: dart.getFields(convert._LineSplitterEventSink.__proto__),
    [_eventSink]: dart.finalFieldType(async.EventSink$(core.String))
  }));
  convert.StringConversionSink = class StringConversionSink extends convert.ChunkedConversionSink$(core.String) {};
  (convert.StringConversionSink.new = function() {
    convert.StringConversionSink.__proto__.new.call(this);
    ;
  }).prototype = convert.StringConversionSink.prototype;
  dart.addTypeTests(convert.StringConversionSink);
  dart.addTypeCaches(convert.StringConversionSink);
  dart.setLibraryUri(convert.StringConversionSink, I[31]);
  core.StringSink = class StringSink extends core.Object {};
  (core.StringSink.new = function() {
    ;
  }).prototype = core.StringSink.prototype;
  dart.addTypeTests(core.StringSink);
  dart.addTypeCaches(core.StringSink);
  dart.setLibraryUri(core.StringSink, I[8]);
  convert.ClosableStringSink = class ClosableStringSink extends core.StringSink {};
  dart.addTypeTests(convert.ClosableStringSink);
  dart.addTypeCaches(convert.ClosableStringSink);
  dart.setLibraryUri(convert.ClosableStringSink, I[31]);
  convert._ClosableStringSink = class _ClosableStringSink extends core.Object {
    close() {
      this[_callback$]();
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[86], 78, 26, "charCode");
      this[_sink$0].writeCharCode(charCode);
    }
    write(o) {
      this[_sink$0].write(o);
    }
    writeln(o = "") {
      this[_sink$0].writeln(o);
    }
    writeAll(objects, separator = "") {
      if (objects == null) dart.nullFailed(I[86], 90, 26, "objects");
      if (separator == null) dart.nullFailed(I[86], 90, 43, "separator");
      this[_sink$0].writeAll(objects, separator);
    }
  };
  (convert._ClosableStringSink.new = function(_sink, _callback) {
    if (_sink == null) dart.nullFailed(I[86], 72, 28, "_sink");
    if (_callback == null) dart.nullFailed(I[86], 72, 40, "_callback");
    this[_sink$0] = _sink;
    this[_callback$] = _callback;
    ;
  }).prototype = convert._ClosableStringSink.prototype;
  dart.addTypeTests(convert._ClosableStringSink);
  dart.addTypeCaches(convert._ClosableStringSink);
  convert._ClosableStringSink[dart.implements] = () => [convert.ClosableStringSink];
  dart.setMethodSignature(convert._ClosableStringSink, () => ({
    __proto__: dart.getMethods(convert._ClosableStringSink.__proto__),
    close: dart.fnType(dart.void, []),
    writeCharCode: dart.fnType(dart.void, [core.int]),
    write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    writeAll: dart.fnType(dart.void, [core.Iterable], [core.String])
  }));
  dart.setLibraryUri(convert._ClosableStringSink, I[31]);
  dart.setFieldSignature(convert._ClosableStringSink, () => ({
    __proto__: dart.getFields(convert._ClosableStringSink.__proto__),
    [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [])),
    [_sink$0]: dart.finalFieldType(core.StringSink)
  }));
  var _flush = dart.privateName(convert, "_flush");
  convert._StringConversionSinkAsStringSinkAdapter = class _StringConversionSinkAsStringSinkAdapter extends core.Object {
    close() {
      if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
      this[_chunkedSink$].close();
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[86], 113, 26, "charCode");
      this[_buffer$].writeCharCode(charCode);
      if (dart.notNull(this[_buffer$].length) > 16) this[_flush]();
    }
    write(o) {
      if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
      this[_chunkedSink$].add(dart.toString(o));
    }
    writeln(o = "") {
      this[_buffer$].writeln(o);
      if (dart.notNull(this[_buffer$].length) > 16) this[_flush]();
    }
    writeAll(objects, separator = "") {
      if (objects == null) dart.nullFailed(I[86], 128, 26, "objects");
      if (separator == null) dart.nullFailed(I[86], 128, 43, "separator");
      if (dart.test(this[_buffer$].isNotEmpty)) this[_flush]();
      let iterator = objects[$iterator];
      if (!dart.test(iterator.moveNext())) return;
      if (separator[$isEmpty]) {
        do {
          this[_chunkedSink$].add(dart.toString(iterator.current));
        } while (dart.test(iterator.moveNext()));
      } else {
        this[_chunkedSink$].add(dart.toString(iterator.current));
        while (dart.test(iterator.moveNext())) {
          this.write(separator);
          this[_chunkedSink$].add(dart.toString(iterator.current));
        }
      }
    }
    [_flush]() {
      let accumulated = dart.toString(this[_buffer$]);
      this[_buffer$].clear();
      this[_chunkedSink$].add(accumulated);
    }
  };
  (convert._StringConversionSinkAsStringSinkAdapter.new = function(_chunkedSink) {
    if (_chunkedSink == null) dart.nullFailed(I[86], 105, 49, "_chunkedSink");
    this[_chunkedSink$] = _chunkedSink;
    this[_buffer$] = new core.StringBuffer.new();
    ;
  }).prototype = convert._StringConversionSinkAsStringSinkAdapter.prototype;
  dart.addTypeTests(convert._StringConversionSinkAsStringSinkAdapter);
  dart.addTypeCaches(convert._StringConversionSinkAsStringSinkAdapter);
  convert._StringConversionSinkAsStringSinkAdapter[dart.implements] = () => [convert.ClosableStringSink];
  dart.setMethodSignature(convert._StringConversionSinkAsStringSinkAdapter, () => ({
    __proto__: dart.getMethods(convert._StringConversionSinkAsStringSinkAdapter.__proto__),
    close: dart.fnType(dart.void, []),
    writeCharCode: dart.fnType(dart.void, [core.int]),
    write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
    [_flush]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._StringConversionSinkAsStringSinkAdapter, I[31]);
  dart.setFieldSignature(convert._StringConversionSinkAsStringSinkAdapter, () => ({
    __proto__: dart.getFields(convert._StringConversionSinkAsStringSinkAdapter.__proto__),
    [_buffer$]: dart.finalFieldType(core.StringBuffer),
    [_chunkedSink$]: dart.finalFieldType(convert.StringConversionSink)
  }));
  dart.defineLazy(convert._StringConversionSinkAsStringSinkAdapter, {
    /*convert._StringConversionSinkAsStringSinkAdapter._MIN_STRING_SIZE*/get _MIN_STRING_SIZE() {
      return 16;
    }
  }, false);
  convert._StringCallbackSink = class _StringCallbackSink extends convert._StringSinkConversionSink$(core.StringBuffer) {
    close() {
      let t174;
      let accumulated = dart.toString(this[_stringSink$]);
      this[_stringSink$].clear();
      t174 = accumulated;
      this[_callback$](t174);
    }
    asUtf8Sink(allowMalformed) {
      if (allowMalformed == null) dart.nullFailed(I[86], 222, 38, "allowMalformed");
      return new convert._Utf8StringSinkAdapter.new(this, this[_stringSink$], allowMalformed);
    }
  };
  (convert._StringCallbackSink.new = function(_callback) {
    if (_callback == null) dart.nullFailed(I[86], 214, 28, "_callback");
    this[_callback$] = _callback;
    convert._StringCallbackSink.__proto__.new.call(this, new core.StringBuffer.new());
    ;
  }).prototype = convert._StringCallbackSink.prototype;
  dart.addTypeTests(convert._StringCallbackSink);
  dart.addTypeCaches(convert._StringCallbackSink);
  dart.setLibraryUri(convert._StringCallbackSink, I[31]);
  dart.setFieldSignature(convert._StringCallbackSink, () => ({
    __proto__: dart.getFields(convert._StringCallbackSink.__proto__),
    [_callback$]: dart.finalFieldType(dart.fnType(dart.void, [core.String]))
  }));
  convert._StringAdapterSink = class _StringAdapterSink extends convert.StringConversionSinkBase {
    add(str) {
      core.String.as(str);
      if (str == null) dart.nullFailed(I[86], 237, 19, "str");
      this[_sink$0].add(str);
    }
    addSlice(str, start, end, isLast) {
      if (str == null) dart.nullFailed(I[86], 241, 24, "str");
      if (start == null) dart.nullFailed(I[86], 241, 33, "start");
      if (end == null) dart.nullFailed(I[86], 241, 44, "end");
      if (isLast == null) dart.nullFailed(I[86], 241, 54, "isLast");
      if (start === 0 && end === str.length) {
        this.add(str);
      } else {
        this.add(str[$substring](start, end));
      }
      if (dart.test(isLast)) this.close();
    }
    close() {
      this[_sink$0].close();
    }
  };
  (convert._StringAdapterSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[86], 235, 27, "_sink");
    this[_sink$0] = _sink;
    ;
  }).prototype = convert._StringAdapterSink.prototype;
  dart.addTypeTests(convert._StringAdapterSink);
  dart.addTypeCaches(convert._StringAdapterSink);
  dart.setMethodSignature(convert._StringAdapterSink, () => ({
    __proto__: dart.getMethods(convert._StringAdapterSink.__proto__),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(convert._StringAdapterSink, I[31]);
  dart.setFieldSignature(convert._StringAdapterSink, () => ({
    __proto__: dart.getFields(convert._StringAdapterSink.__proto__),
    [_sink$0]: dart.finalFieldType(core.Sink$(core.String))
  }));
  convert._Utf8StringSinkAdapter = class _Utf8StringSinkAdapter extends convert.ByteConversionSink {
    close() {
      this[_decoder].flush(this[_stringSink$]);
      this[_sink$0].close();
    }
    add(chunk) {
      T$0.ListOfint().as(chunk);
      if (chunk == null) dart.nullFailed(I[86], 271, 22, "chunk");
      this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(codeUnits, startIndex, endIndex, isLast) {
      if (codeUnits == null) dart.nullFailed(I[86], 276, 17, "codeUnits");
      if (startIndex == null) dart.nullFailed(I[86], 276, 32, "startIndex");
      if (endIndex == null) dart.nullFailed(I[86], 276, 48, "endIndex");
      if (isLast == null) dart.nullFailed(I[86], 276, 63, "isLast");
      this[_stringSink$].write(this[_decoder].convertChunked(codeUnits, startIndex, endIndex));
      if (dart.test(isLast)) this.close();
    }
  };
  (convert._Utf8StringSinkAdapter.new = function(_sink, _stringSink, allowMalformed) {
    if (_sink == null) dart.nullFailed(I[86], 263, 31, "_sink");
    if (_stringSink == null) dart.nullFailed(I[86], 263, 43, "_stringSink");
    if (allowMalformed == null) dart.nullFailed(I[86], 263, 61, "allowMalformed");
    this[_sink$0] = _sink;
    this[_stringSink$] = _stringSink;
    this[_decoder] = new convert._Utf8Decoder.new(allowMalformed);
    convert._Utf8StringSinkAdapter.__proto__.new.call(this);
    ;
  }).prototype = convert._Utf8StringSinkAdapter.prototype;
  dart.addTypeTests(convert._Utf8StringSinkAdapter);
  dart.addTypeCaches(convert._Utf8StringSinkAdapter);
  dart.setMethodSignature(convert._Utf8StringSinkAdapter, () => ({
    __proto__: dart.getMethods(convert._Utf8StringSinkAdapter.__proto__),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Utf8StringSinkAdapter, I[31]);
  dart.setFieldSignature(convert._Utf8StringSinkAdapter, () => ({
    __proto__: dart.getFields(convert._Utf8StringSinkAdapter.__proto__),
    [_decoder]: dart.finalFieldType(convert._Utf8Decoder),
    [_sink$0]: dart.finalFieldType(core.Sink$(dart.nullable(core.Object))),
    [_stringSink$]: dart.finalFieldType(core.StringSink)
  }));
  convert._Utf8ConversionSink = class _Utf8ConversionSink extends convert.ByteConversionSink {
    close() {
      this[_decoder].flush(this[_buffer$]);
      if (dart.test(this[_buffer$].isNotEmpty)) {
        let accumulated = dart.toString(this[_buffer$]);
        this[_buffer$].clear();
        this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, true);
      } else {
        this[_chunkedSink$].close();
      }
    }
    add(chunk) {
      T$0.ListOfint().as(chunk);
      if (chunk == null) dart.nullFailed(I[86], 309, 22, "chunk");
      this.addSlice(chunk, 0, chunk[$length], false);
    }
    addSlice(chunk, startIndex, endIndex, isLast) {
      if (chunk == null) dart.nullFailed(I[86], 313, 27, "chunk");
      if (startIndex == null) dart.nullFailed(I[86], 313, 38, "startIndex");
      if (endIndex == null) dart.nullFailed(I[86], 313, 54, "endIndex");
      if (isLast == null) dart.nullFailed(I[86], 313, 69, "isLast");
      this[_buffer$].write(this[_decoder].convertChunked(chunk, startIndex, endIndex));
      if (dart.test(this[_buffer$].isNotEmpty)) {
        let accumulated = dart.toString(this[_buffer$]);
        this[_chunkedSink$].addSlice(accumulated, 0, accumulated.length, isLast);
        this[_buffer$].clear();
        return;
      }
      if (dart.test(isLast)) this.close();
    }
  };
  (convert._Utf8ConversionSink.new = function(sink, allowMalformed) {
    if (sink == null) dart.nullFailed(I[86], 290, 44, "sink");
    if (allowMalformed == null) dart.nullFailed(I[86], 290, 55, "allowMalformed");
    convert._Utf8ConversionSink.__.call(this, sink, new core.StringBuffer.new(), allowMalformed);
  }).prototype = convert._Utf8ConversionSink.prototype;
  (convert._Utf8ConversionSink.__ = function(_chunkedSink, stringBuffer, allowMalformed) {
    if (_chunkedSink == null) dart.nullFailed(I[86], 294, 12, "_chunkedSink");
    if (stringBuffer == null) dart.nullFailed(I[86], 294, 39, "stringBuffer");
    if (allowMalformed == null) dart.nullFailed(I[86], 294, 58, "allowMalformed");
    this[_chunkedSink$] = _chunkedSink;
    this[_decoder] = new convert._Utf8Decoder.new(allowMalformed);
    this[_buffer$] = stringBuffer;
    convert._Utf8ConversionSink.__proto__.new.call(this);
    ;
  }).prototype = convert._Utf8ConversionSink.prototype;
  dart.addTypeTests(convert._Utf8ConversionSink);
  dart.addTypeCaches(convert._Utf8ConversionSink);
  dart.setMethodSignature(convert._Utf8ConversionSink, () => ({
    __proto__: dart.getMethods(convert._Utf8ConversionSink.__proto__),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Utf8ConversionSink, I[31]);
  dart.setFieldSignature(convert._Utf8ConversionSink, () => ({
    __proto__: dart.getFields(convert._Utf8ConversionSink.__proto__),
    [_decoder]: dart.finalFieldType(convert._Utf8Decoder),
    [_chunkedSink$]: dart.finalFieldType(convert.StringConversionSink),
    [_buffer$]: dart.finalFieldType(core.StringBuffer)
  }));
  var _allowMalformed = dart.privateName(convert, "Utf8Codec._allowMalformed");
  var _allowMalformed$ = dart.privateName(convert, "_allowMalformed");
  var Utf8Decoder__allowMalformed = dart.privateName(convert, "Utf8Decoder._allowMalformed");
  convert.Utf8Codec = class Utf8Codec extends convert.Encoding {
    get [_allowMalformed$]() {
      return this[_allowMalformed];
    }
    set [_allowMalformed$](value) {
      super[_allowMalformed$] = value;
    }
    get name() {
      return "utf-8";
    }
    decode(codeUnits, opts) {
      let t174;
      T$0.ListOfint().as(codeUnits);
      if (codeUnits == null) dart.nullFailed(I[98], 58, 27, "codeUnits");
      let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : null;
      let decoder = dart.test((t174 = allowMalformed, t174 == null ? this[_allowMalformed$] : t174)) ? C[99] || CT.C99 : C[100] || CT.C100;
      return decoder.convert(codeUnits);
    }
    get encoder() {
      return C[101] || CT.C101;
    }
    get decoder() {
      return dart.test(this[_allowMalformed$]) ? C[99] || CT.C99 : C[100] || CT.C100;
    }
  };
  (convert.Utf8Codec.new = function(opts) {
    let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
    if (allowMalformed == null) dart.nullFailed(I[98], 40, 25, "allowMalformed");
    this[_allowMalformed] = allowMalformed;
    convert.Utf8Codec.__proto__.new.call(this);
    ;
  }).prototype = convert.Utf8Codec.prototype;
  dart.addTypeTests(convert.Utf8Codec);
  dart.addTypeCaches(convert.Utf8Codec);
  dart.setMethodSignature(convert.Utf8Codec, () => ({
    __proto__: dart.getMethods(convert.Utf8Codec.__proto__),
    decode: dart.fnType(core.String, [dart.nullable(core.Object)], {allowMalformed: dart.nullable(core.bool)}, {})
  }));
  dart.setGetterSignature(convert.Utf8Codec, () => ({
    __proto__: dart.getGetters(convert.Utf8Codec.__proto__),
    name: core.String,
    encoder: convert.Utf8Encoder,
    decoder: convert.Utf8Decoder
  }));
  dart.setLibraryUri(convert.Utf8Codec, I[31]);
  dart.setFieldSignature(convert.Utf8Codec, () => ({
    __proto__: dart.getFields(convert.Utf8Codec.__proto__),
    [_allowMalformed$]: dart.finalFieldType(core.bool)
  }));
  var _fillBuffer = dart.privateName(convert, "_fillBuffer");
  var _writeReplacementCharacter = dart.privateName(convert, "_writeReplacementCharacter");
  convert.Utf8Encoder = class Utf8Encoder extends convert.Converter$(core.String, core.List$(core.int)) {
    convert(string, start = 0, end = null) {
      core.String.as(string);
      if (string == null) dart.nullFailed(I[98], 88, 28, "string");
      if (start == null) dart.nullFailed(I[98], 88, 41, "start");
      let stringLength = string.length;
      end = core.RangeError.checkValidRange(start, end, stringLength);
      if (end == null) {
        dart.throw(new core.RangeError.new("Invalid range"));
      }
      let length = dart.notNull(end) - dart.notNull(start);
      if (length === 0) return _native_typed_data.NativeUint8List.new(0);
      let encoder = new convert._Utf8Encoder.withBufferSize(length * 3);
      let endPosition = encoder[_fillBuffer](string, start, end);
      if (!(dart.notNull(endPosition) >= dart.notNull(end) - 1)) dart.assertFailed(null, I[98], 101, 12, "endPosition >= end - 1");
      if (endPosition != end) {
        let lastCodeUnit = string[$codeUnitAt](dart.notNull(end) - 1);
        if (!dart.test(convert._isLeadSurrogate(lastCodeUnit))) dart.assertFailed(null, I[98], 107, 14, "_isLeadSurrogate(lastCodeUnit)");
        encoder[_writeReplacementCharacter]();
      }
      return encoder[_buffer$][$sublist](0, encoder[_bufferIndex]);
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[98], 118, 63, "sink");
      return new convert._Utf8EncoderSink.new(convert.ByteConversionSink.is(sink) ? sink : new convert._ByteAdapterSink.new(sink));
    }
    bind(stream) {
      T$0.StreamOfString().as(stream);
      if (stream == null) dart.nullFailed(I[98], 124, 41, "stream");
      return super.bind(stream);
    }
  };
  (convert.Utf8Encoder.new = function() {
    convert.Utf8Encoder.__proto__.new.call(this);
    ;
  }).prototype = convert.Utf8Encoder.prototype;
  dart.addTypeTests(convert.Utf8Encoder);
  dart.addTypeCaches(convert.Utf8Encoder);
  dart.setMethodSignature(convert.Utf8Encoder, () => ({
    __proto__: dart.getMethods(convert.Utf8Encoder.__proto__),
    convert: dart.fnType(typed_data.Uint8List, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    startChunkedConversion: dart.fnType(convert.StringConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.Utf8Encoder, I[31]);
  var _writeSurrogate = dart.privateName(convert, "_writeSurrogate");
  convert._Utf8Encoder = class _Utf8Encoder extends core.Object {
    static _createBuffer(size) {
      if (size == null) dart.nullFailed(I[98], 142, 38, "size");
      return _native_typed_data.NativeUint8List.new(size);
    }
    [_writeReplacementCharacter]() {
      let t174, t174$, t174$0;
      this[_buffer$][$_set]((t174 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174) + 1, t174), 239);
      this[_buffer$][$_set]((t174$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174$) + 1, t174$), 191);
      this[_buffer$][$_set]((t174$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174$0) + 1, t174$0), 189);
    }
    [_writeSurrogate](leadingSurrogate, nextCodeUnit) {
      let t174, t174$, t174$0, t174$1;
      if (leadingSurrogate == null) dart.nullFailed(I[98], 160, 28, "leadingSurrogate");
      if (nextCodeUnit == null) dart.nullFailed(I[98], 160, 50, "nextCodeUnit");
      if (dart.test(convert._isTailSurrogate(nextCodeUnit))) {
        let rune = convert._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
        if (!(dart.notNull(rune) > 65535)) dart.assertFailed(null, I[98], 165, 14, "rune > _THREE_BYTE_LIMIT");
        if (!(dart.notNull(rune) <= 1114111)) dart.assertFailed(null, I[98], 166, 14, "rune <= _FOUR_BYTE_LIMIT");
        this[_buffer$][$_set]((t174 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174) + 1, t174), (240 | rune[$rightShift](18)) >>> 0);
        this[_buffer$][$_set]((t174$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174$) + 1, t174$), 128 | dart.notNull(rune) >> 12 & 63);
        this[_buffer$][$_set]((t174$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174$0) + 1, t174$0), 128 | dart.notNull(rune) >> 6 & 63);
        this[_buffer$][$_set]((t174$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t174$1) + 1, t174$1), 128 | dart.notNull(rune) & 63);
        return true;
      } else {
        this[_writeReplacementCharacter]();
        return false;
      }
    }
    [_fillBuffer](str, start, end) {
      let t175, t175$, t175$0, t175$1, t175$2, t175$3;
      if (str == null) dart.nullFailed(I[98], 186, 26, "str");
      if (start == null) dart.nullFailed(I[98], 186, 35, "start");
      if (end == null) dart.nullFailed(I[98], 186, 46, "end");
      if (start != end && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](dart.notNull(end) - 1)))) {
        end = dart.notNull(end) - 1;
      }
      let stringIndex = null;
      for (let t174 = stringIndex = start; dart.notNull(stringIndex) < dart.notNull(end); stringIndex = dart.notNull(stringIndex) + 1) {
        let codeUnit = str[$codeUnitAt](stringIndex);
        if (codeUnit <= 127) {
          if (dart.notNull(this[_bufferIndex]) >= dart.notNull(this[_buffer$][$length])) break;
          this[_buffer$][$_set]((t175 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175) + 1, t175), codeUnit);
        } else if (dart.test(convert._isLeadSurrogate(codeUnit))) {
          if (dart.notNull(this[_bufferIndex]) + 4 > dart.notNull(this[_buffer$][$length])) break;
          let nextCodeUnit = str[$codeUnitAt](dart.notNull(stringIndex) + 1);
          let wasCombined = this[_writeSurrogate](codeUnit, nextCodeUnit);
          if (dart.test(wasCombined)) stringIndex = dart.notNull(stringIndex) + 1;
        } else if (dart.test(convert._isTailSurrogate(codeUnit))) {
          if (dart.notNull(this[_bufferIndex]) + 3 > dart.notNull(this[_buffer$][$length])) break;
          this[_writeReplacementCharacter]();
        } else {
          let rune = codeUnit;
          if (rune <= 2047) {
            if (dart.notNull(this[_bufferIndex]) + 1 >= dart.notNull(this[_buffer$][$length])) break;
            this[_buffer$][$_set]((t175$ = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175$) + 1, t175$), (192 | rune[$rightShift](6)) >>> 0);
            this[_buffer$][$_set]((t175$0 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175$0) + 1, t175$0), 128 | rune & 63);
          } else {
            if (!(rune <= 65535)) dart.assertFailed(null, I[98], 217, 18, "rune <= _THREE_BYTE_LIMIT");
            if (dart.notNull(this[_bufferIndex]) + 2 >= dart.notNull(this[_buffer$][$length])) break;
            this[_buffer$][$_set]((t175$1 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175$1) + 1, t175$1), (224 | rune[$rightShift](12)) >>> 0);
            this[_buffer$][$_set]((t175$2 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175$2) + 1, t175$2), 128 | rune >> 6 & 63);
            this[_buffer$][$_set]((t175$3 = this[_bufferIndex], this[_bufferIndex] = dart.notNull(t175$3) + 1, t175$3), 128 | rune & 63);
          }
        }
      }
      return stringIndex;
    }
  };
  (convert._Utf8Encoder.new = function() {
    convert._Utf8Encoder.withBufferSize.call(this, 1024);
  }).prototype = convert._Utf8Encoder.prototype;
  (convert._Utf8Encoder.withBufferSize = function(bufferSize) {
    if (bufferSize == null) dart.nullFailed(I[98], 138, 35, "bufferSize");
    this[_carry] = 0;
    this[_bufferIndex] = 0;
    this[_buffer$] = convert._Utf8Encoder._createBuffer(bufferSize);
    ;
  }).prototype = convert._Utf8Encoder.prototype;
  dart.addTypeTests(convert._Utf8Encoder);
  dart.addTypeCaches(convert._Utf8Encoder);
  dart.setMethodSignature(convert._Utf8Encoder, () => ({
    __proto__: dart.getMethods(convert._Utf8Encoder.__proto__),
    [_writeReplacementCharacter]: dart.fnType(dart.void, []),
    [_writeSurrogate]: dart.fnType(core.bool, [core.int, core.int]),
    [_fillBuffer]: dart.fnType(core.int, [core.String, core.int, core.int])
  }));
  dart.setLibraryUri(convert._Utf8Encoder, I[31]);
  dart.setFieldSignature(convert._Utf8Encoder, () => ({
    __proto__: dart.getFields(convert._Utf8Encoder.__proto__),
    [_carry]: dart.fieldType(core.int),
    [_bufferIndex]: dart.fieldType(core.int),
    [_buffer$]: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineLazy(convert._Utf8Encoder, {
    /*convert._Utf8Encoder._DEFAULT_BYTE_BUFFER_SIZE*/get _DEFAULT_BYTE_BUFFER_SIZE() {
      return 1024;
    }
  }, false);
  const _Utf8Encoder_StringConversionSinkMixin$36 = class _Utf8Encoder_StringConversionSinkMixin extends convert._Utf8Encoder {};
  (_Utf8Encoder_StringConversionSinkMixin$36.new = function() {
    _Utf8Encoder_StringConversionSinkMixin$36.__proto__.new.call(this);
  }).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
  (_Utf8Encoder_StringConversionSinkMixin$36.withBufferSize = function(bufferSize) {
    _Utf8Encoder_StringConversionSinkMixin$36.__proto__.withBufferSize.call(this, bufferSize);
  }).prototype = _Utf8Encoder_StringConversionSinkMixin$36.prototype;
  dart.applyMixin(_Utf8Encoder_StringConversionSinkMixin$36, convert.StringConversionSinkMixin);
  convert._Utf8EncoderSink = class _Utf8EncoderSink extends _Utf8Encoder_StringConversionSinkMixin$36 {
    close() {
      if (this[_carry] !== 0) {
        this.addSlice("", 0, 0, true);
        return;
      }
      this[_sink$0].close();
    }
    addSlice(str, start, end, isLast) {
      if (str == null) dart.nullFailed(I[98], 245, 24, "str");
      if (start == null) dart.nullFailed(I[98], 245, 33, "start");
      if (end == null) dart.nullFailed(I[98], 245, 44, "end");
      if (isLast == null) dart.nullFailed(I[98], 245, 54, "isLast");
      this[_bufferIndex] = 0;
      if (start == end && !dart.test(isLast)) {
        return;
      }
      if (this[_carry] !== 0) {
        let nextCodeUnit = 0;
        if (start != end) {
          nextCodeUnit = str[$codeUnitAt](start);
        } else {
          if (!dart.test(isLast)) dart.assertFailed(null, I[98], 257, 16, "isLast");
        }
        let wasCombined = this[_writeSurrogate](this[_carry], nextCodeUnit);
        if (!(!dart.test(wasCombined) || start != end)) dart.assertFailed(null, I[98], 261, 14, "!wasCombined || start != end");
        if (dart.test(wasCombined)) start = dart.notNull(start) + 1;
        this[_carry] = 0;
      }
      do {
        start = this[_fillBuffer](str, start, end);
        let isLastSlice = dart.test(isLast) && start == end;
        if (start === dart.notNull(end) - 1 && dart.test(convert._isLeadSurrogate(str[$codeUnitAt](start)))) {
          if (dart.test(isLast) && dart.notNull(this[_bufferIndex]) < dart.notNull(this[_buffer$][$length]) - 3) {
            this[_writeReplacementCharacter]();
          } else {
            this[_carry] = str[$codeUnitAt](start);
          }
          start = dart.notNull(start) + 1;
        }
        this[_sink$0].addSlice(this[_buffer$], 0, this[_bufferIndex], isLastSlice);
        this[_bufferIndex] = 0;
      } while (dart.notNull(start) < dart.notNull(end));
      if (dart.test(isLast)) this.close();
    }
  };
  (convert._Utf8EncoderSink.new = function(_sink) {
    if (_sink == null) dart.nullFailed(I[98], 234, 25, "_sink");
    this[_sink$0] = _sink;
    convert._Utf8EncoderSink.__proto__.new.call(this);
    ;
  }).prototype = convert._Utf8EncoderSink.prototype;
  dart.addTypeTests(convert._Utf8EncoderSink);
  dart.addTypeCaches(convert._Utf8EncoderSink);
  dart.setMethodSignature(convert._Utf8EncoderSink, () => ({
    __proto__: dart.getMethods(convert._Utf8EncoderSink.__proto__),
    close: dart.fnType(dart.void, []),
    addSlice: dart.fnType(dart.void, [core.String, core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Utf8EncoderSink, I[31]);
  dart.setFieldSignature(convert._Utf8EncoderSink, () => ({
    __proto__: dart.getFields(convert._Utf8EncoderSink.__proto__),
    [_sink$0]: dart.finalFieldType(convert.ByteConversionSink)
  }));
  const _allowMalformed$0 = Utf8Decoder__allowMalformed;
  convert.Utf8Decoder = class Utf8Decoder extends convert.Converter$(core.List$(core.int), core.String) {
    get [_allowMalformed$]() {
      return this[_allowMalformed$0];
    }
    set [_allowMalformed$](value) {
      super[_allowMalformed$] = value;
    }
    static _convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      if (allowMalformed == null) dart.nullFailed(I[85], 433, 12, "allowMalformed");
      if (codeUnits == null) dart.nullFailed(I[85], 433, 44, "codeUnits");
      if (start == null) dart.nullFailed(I[85], 433, 59, "start");
      if (end == null) dart.nullFailed(I[85], 433, 70, "end");
      let decoder = dart.test(allowMalformed) ? convert.Utf8Decoder._decoderNonfatal : convert.Utf8Decoder._decoder;
      if (decoder == null) return null;
      if (0 === start && end == codeUnits[$length]) {
        return convert.Utf8Decoder._useTextDecoder(decoder, codeUnits);
      }
      let length = codeUnits[$length];
      end = core.RangeError.checkValidRange(start, end, length);
      return convert.Utf8Decoder._useTextDecoder(decoder, codeUnits.subarray(start, end));
    }
    static _useTextDecoder(decoder, codeUnits) {
      if (codeUnits == null) dart.nullFailed(I[85], 447, 59, "codeUnits");
      try {
        return decoder.decode(codeUnits);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return null;
    }
    convert(codeUnits, start = 0, end = null) {
      T$0.ListOfint().as(codeUnits);
      if (codeUnits == null) dart.nullFailed(I[98], 314, 28, "codeUnits");
      if (start == null) dart.nullFailed(I[98], 314, 44, "start");
      let result = convert.Utf8Decoder._convertIntercepted(this[_allowMalformed$], codeUnits, start, end);
      if (result != null) {
        return result;
      }
      return new convert._Utf8Decoder.new(this[_allowMalformed$]).convertSingle(codeUnits, start, end);
    }
    startChunkedConversion(sink) {
      T$0.SinkOfString().as(sink);
      if (sink == null) dart.nullFailed(I[98], 329, 58, "sink");
      let stringSink = null;
      if (convert.StringConversionSink.is(sink)) {
        stringSink = sink;
      } else {
        stringSink = new convert._StringAdapterSink.new(sink);
      }
      return stringSink.asUtf8Sink(this[_allowMalformed$]);
    }
    bind(stream) {
      T$0.StreamOfListOfint().as(stream);
      if (stream == null) dart.nullFailed(I[98], 340, 41, "stream");
      return super.bind(stream);
    }
    fuse(T, next) {
      if (next == null) dart.nullFailed(I[85], 398, 56, "next");
      return super.fuse(T, next);
    }
    static _convertIntercepted(allowMalformed, codeUnits, start, end) {
      if (allowMalformed == null) dart.nullFailed(I[85], 405, 12, "allowMalformed");
      if (codeUnits == null) dart.nullFailed(I[85], 405, 38, "codeUnits");
      if (start == null) dart.nullFailed(I[85], 405, 53, "start");
      if (codeUnits instanceof Uint8Array) {
        let casted = codeUnits;
        end == null ? end = casted[$length] : null;
        if (dart.notNull(end) - dart.notNull(start) < 15) {
          return null;
        }
        let result = convert.Utf8Decoder._convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && dart.test(allowMalformed)) {
          if (result.indexOf("�") >= 0) {
            return null;
          }
        }
        return result;
      }
      return null;
    }
  };
  (convert.Utf8Decoder.new = function(opts) {
    let allowMalformed = opts && 'allowMalformed' in opts ? opts.allowMalformed : false;
    if (allowMalformed == null) dart.nullFailed(I[98], 303, 27, "allowMalformed");
    this[_allowMalformed$0] = allowMalformed;
    convert.Utf8Decoder.__proto__.new.call(this);
    ;
  }).prototype = convert.Utf8Decoder.prototype;
  dart.addTypeTests(convert.Utf8Decoder);
  dart.addTypeCaches(convert.Utf8Decoder);
  dart.setMethodSignature(convert.Utf8Decoder, () => ({
    __proto__: dart.getMethods(convert.Utf8Decoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)], [core.int, dart.nullable(core.int)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)]),
    fuse: dart.gFnType(T => [convert.Converter$(core.List$(core.int), T), [convert.Converter$(core.String, T)]], T => [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(convert.Utf8Decoder, I[31]);
  dart.setFieldSignature(convert.Utf8Decoder, () => ({
    __proto__: dart.getFields(convert.Utf8Decoder.__proto__),
    [_allowMalformed$]: dart.finalFieldType(core.bool)
  }));
  dart.defineLazy(convert.Utf8Decoder, {
    /*convert.Utf8Decoder._shortInputThreshold*/get _shortInputThreshold() {
      return 15;
    },
    /*convert.Utf8Decoder._decoder*/get _decoder() {
      return dart.fn(() => {
        try {
          return new TextDecoder("utf-8", {fatal: true});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return null;
      }, T$0.VoidToObjectN())();
    },
    /*convert.Utf8Decoder._decoderNonfatal*/get _decoderNonfatal() {
      return dart.fn(() => {
        try {
          return new TextDecoder("utf-8", {fatal: false});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
          } else
            throw e$;
        }
        return null;
      }, T$0.VoidToObjectN())();
    }
  }, false);
  var _charOrIndex = dart.privateName(convert, "_charOrIndex");
  var _convertRecursive = dart.privateName(convert, "_convertRecursive");
  convert._Utf8Decoder = class _Utf8Decoder extends core.Object {
    static isErrorState(state) {
      if (state == null) dart.nullFailed(I[98], 499, 32, "state");
      return (dart.notNull(state) & 1) !== 0;
    }
    static errorDescription(state) {
      if (state == null) dart.nullFailed(I[98], 501, 38, "state");
      switch (state) {
        case 65:
        {
          return "Missing extension byte";
        }
        case 67:
        {
          return "Unexpected extension byte";
        }
        case 69:
        {
          return "Invalid UTF-8 byte";
        }
        case 71:
        {
          return "Overlong encoding";
        }
        case 73:
        {
          return "Out of unicode range";
        }
        case 75:
        {
          return "Encoded surrogate";
        }
        case 77:
        {
          return "Unfinished UTF-8 octet sequence";
        }
        default:
        {
          return "";
        }
      }
    }
    convertSingle(codeUnits, start, maybeEnd) {
      if (codeUnits == null) dart.nullFailed(I[85], 479, 34, "codeUnits");
      if (start == null) dart.nullFailed(I[85], 479, 49, "start");
      return this.convertGeneral(codeUnits, start, maybeEnd, true);
    }
    convertChunked(codeUnits, start, maybeEnd) {
      if (codeUnits == null) dart.nullFailed(I[85], 484, 35, "codeUnits");
      if (start == null) dart.nullFailed(I[85], 484, 50, "start");
      return this.convertGeneral(codeUnits, start, maybeEnd, false);
    }
    convertGeneral(codeUnits, start, maybeEnd, single) {
      if (codeUnits == null) dart.nullFailed(I[98], 529, 17, "codeUnits");
      if (start == null) dart.nullFailed(I[98], 529, 32, "start");
      if (single == null) dart.nullFailed(I[98], 529, 59, "single");
      let end = core.RangeError.checkValidRange(start, maybeEnd, codeUnits[$length]);
      if (start == end) return "";
      let bytes = null;
      let errorOffset = null;
      if (typed_data.Uint8List.is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = convert._Utf8Decoder._makeUint8List(codeUnits, start, end);
        errorOffset = start;
        end = dart.notNull(end) - dart.notNull(start);
        start = 0;
      }
      let result = this[_convertRecursive](bytes, start, end, single);
      if (dart.test(convert._Utf8Decoder.isErrorState(this[_state$0]))) {
        let message = convert._Utf8Decoder.errorDescription(this[_state$0]);
        this[_state$0] = 0;
        dart.throw(new core.FormatException.new(message, codeUnits, dart.notNull(errorOffset) + dart.notNull(this[_charOrIndex])));
      }
      return result;
    }
    [_convertRecursive](bytes, start, end, single) {
      if (bytes == null) dart.nullFailed(I[98], 556, 38, "bytes");
      if (start == null) dart.nullFailed(I[98], 556, 49, "start");
      if (end == null) dart.nullFailed(I[98], 556, 60, "end");
      if (single == null) dart.nullFailed(I[98], 556, 70, "single");
      if (dart.notNull(end) - dart.notNull(start) > 1000) {
        let mid = ((dart.notNull(start) + dart.notNull(end)) / 2)[$truncate]();
        let s1 = this[_convertRecursive](bytes, start, mid, false);
        if (dart.test(convert._Utf8Decoder.isErrorState(this[_state$0]))) return s1;
        let s2 = this[_convertRecursive](bytes, mid, end, single);
        return dart.notNull(s1) + dart.notNull(s2);
      }
      return this.decodeGeneral(bytes, start, end, single);
    }
    flush(sink) {
      if (sink == null) dart.nullFailed(I[98], 573, 25, "sink");
      let state = this[_state$0];
      this[_state$0] = 0;
      if (dart.notNull(state) <= 32) {
        return;
      }
      if (dart.test(this.allowMalformed)) {
        sink.writeCharCode(65533);
      } else {
        dart.throw(new core.FormatException.new(convert._Utf8Decoder.errorDescription(77), null, null));
      }
    }
    decodeGeneral(bytes, start, end, single) {
      let t178, t178$, t178$0, t178$1;
      if (bytes == null) dart.nullFailed(I[98], 587, 34, "bytes");
      if (start == null) dart.nullFailed(I[98], 587, 45, "start");
      if (end == null) dart.nullFailed(I[98], 587, 56, "end");
      if (single == null) dart.nullFailed(I[98], 587, 66, "single");
      let typeTable = convert._Utf8Decoder.typeTable;
      let transitionTable = convert._Utf8Decoder.transitionTable;
      let state = this[_state$0];
      let char = this[_charOrIndex];
      let buffer = new core.StringBuffer.new();
      let i = start;
      let byte = bytes[$_get]((t178 = i, i = dart.notNull(t178) + 1, t178));
      L1:
        while (true) {
          while (true) {
            let type = (typeTable[$codeUnitAt](byte) & 31) >>> 0;
            char = dart.notNull(state) <= 32 ? (dart.notNull(byte) & (61694)[$rightShift](type)) >>> 0 : (dart.notNull(byte) & 63 | dart.notNull(char) << 6 >>> 0) >>> 0;
            state = transitionTable[$codeUnitAt](dart.notNull(state) + type);
            if (state === 0) {
              buffer.writeCharCode(char);
              if (i == end) break L1;
              break;
            } else if (dart.test(convert._Utf8Decoder.isErrorState(state))) {
              if (dart.test(this.allowMalformed)) {
                switch (state) {
                  case 69:
                  case 67:
                  {
                    buffer.writeCharCode(65533);
                    break;
                  }
                  case 65:
                  {
                    buffer.writeCharCode(65533);
                    i = dart.notNull(i) - 1;
                    break;
                  }
                  default:
                  {
                    buffer.writeCharCode(65533);
                    buffer.writeCharCode(65533);
                    break;
                  }
                }
                state = 0;
              } else {
                this[_state$0] = state;
                this[_charOrIndex] = dart.notNull(i) - 1;
                return "";
              }
            }
            if (i == end) break L1;
            byte = bytes[$_get]((t178$ = i, i = dart.notNull(t178$) + 1, t178$));
          }
          let markStart = i;
          byte = bytes[$_get]((t178$0 = i, i = dart.notNull(t178$0) + 1, t178$0));
          if (dart.notNull(byte) < 128) {
            let markEnd = end;
            while (dart.notNull(i) < dart.notNull(end)) {
              byte = bytes[$_get]((t178$1 = i, i = dart.notNull(t178$1) + 1, t178$1));
              if (dart.notNull(byte) >= 128) {
                markEnd = dart.notNull(i) - 1;
                break;
              }
            }
            if (!(dart.notNull(markStart) < dart.notNull(markEnd))) dart.assertFailed(null, I[98], 652, 16, "markStart < markEnd");
            if (dart.notNull(markEnd) - dart.notNull(markStart) < 20) {
              for (let m = markStart; dart.notNull(m) < dart.notNull(markEnd); m = dart.notNull(m) + 1) {
                buffer.writeCharCode(bytes[$_get](m));
              }
            } else {
              buffer.write(core.String.fromCharCodes(bytes, markStart, markEnd));
            }
            if (markEnd == end) break;
          }
        }
      if (dart.test(single) && dart.notNull(state) > 32) {
        if (dart.test(this.allowMalformed)) {
          buffer.writeCharCode(65533);
        } else {
          this[_state$0] = 77;
          this[_charOrIndex] = end;
          return "";
        }
      }
      this[_state$0] = state;
      this[_charOrIndex] = char;
      return buffer.toString();
    }
    static _makeUint8List(codeUnits, start, end) {
      if (codeUnits == null) dart.nullFailed(I[98], 679, 45, "codeUnits");
      if (start == null) dart.nullFailed(I[98], 679, 60, "start");
      if (end == null) dart.nullFailed(I[98], 679, 71, "end");
      let length = dart.notNull(end) - dart.notNull(start);
      let bytes = _native_typed_data.NativeUint8List.new(length);
      for (let i = 0; i < length; i = i + 1) {
        let b = codeUnits[$_get](dart.notNull(start) + i);
        if ((dart.notNull(b) & ~255 >>> 0) !== 0) {
          b = 255;
        }
        bytes[$_set](i, b);
      }
      return bytes;
    }
  };
  (convert._Utf8Decoder.new = function(allowMalformed) {
    if (allowMalformed == null) dart.nullFailed(I[85], 476, 21, "allowMalformed");
    this[_charOrIndex] = 0;
    this.allowMalformed = allowMalformed;
    this[_state$0] = 16;
    ;
  }).prototype = convert._Utf8Decoder.prototype;
  dart.addTypeTests(convert._Utf8Decoder);
  dart.addTypeCaches(convert._Utf8Decoder);
  dart.setMethodSignature(convert._Utf8Decoder, () => ({
    __proto__: dart.getMethods(convert._Utf8Decoder.__proto__),
    convertSingle: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int)]),
    convertChunked: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int)]),
    convertGeneral: dart.fnType(core.String, [core.List$(core.int), core.int, dart.nullable(core.int), core.bool]),
    [_convertRecursive]: dart.fnType(core.String, [typed_data.Uint8List, core.int, core.int, core.bool]),
    flush: dart.fnType(dart.void, [core.StringSink]),
    decodeGeneral: dart.fnType(core.String, [typed_data.Uint8List, core.int, core.int, core.bool])
  }));
  dart.setLibraryUri(convert._Utf8Decoder, I[31]);
  dart.setFieldSignature(convert._Utf8Decoder, () => ({
    __proto__: dart.getFields(convert._Utf8Decoder.__proto__),
    allowMalformed: dart.finalFieldType(core.bool),
    [_state$0]: dart.fieldType(core.int),
    [_charOrIndex]: dart.fieldType(core.int)
  }));
  dart.defineLazy(convert._Utf8Decoder, {
    /*convert._Utf8Decoder.typeMask*/get typeMask() {
      return 31;
    },
    /*convert._Utf8Decoder.shiftedByteMask*/get shiftedByteMask() {
      return 61694;
    },
    /*convert._Utf8Decoder.typeTable*/get typeTable() {
      return "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE";
    },
    /*convert._Utf8Decoder.IA*/get IA() {
      return 0;
    },
    /*convert._Utf8Decoder.BB*/get BB() {
      return 16;
    },
    /*convert._Utf8Decoder.AB*/get AB() {
      return 32;
    },
    /*convert._Utf8Decoder.X1*/get X1() {
      return 48;
    },
    /*convert._Utf8Decoder.X2*/get X2() {
      return 58;
    },
    /*convert._Utf8Decoder.X3*/get X3() {
      return 68;
    },
    /*convert._Utf8Decoder.TO*/get TO() {
      return 78;
    },
    /*convert._Utf8Decoder.TS*/get TS() {
      return 88;
    },
    /*convert._Utf8Decoder.QO*/get QO() {
      return 98;
    },
    /*convert._Utf8Decoder.QR*/get QR() {
      return 108;
    },
    /*convert._Utf8Decoder.B1*/get B1() {
      return 118;
    },
    /*convert._Utf8Decoder.B2*/get B2() {
      return 128;
    },
    /*convert._Utf8Decoder.E1*/get E1() {
      return 65;
    },
    /*convert._Utf8Decoder.E2*/get E2() {
      return 67;
    },
    /*convert._Utf8Decoder.E3*/get E3() {
      return 69;
    },
    /*convert._Utf8Decoder.E4*/get E4() {
      return 71;
    },
    /*convert._Utf8Decoder.E5*/get E5() {
      return 73;
    },
    /*convert._Utf8Decoder.E6*/get E6() {
      return 75;
    },
    /*convert._Utf8Decoder.E7*/get E7() {
      return 77;
    },
    /*convert._Utf8Decoder._IA*/get _IA() {
      return " ";
    },
    /*convert._Utf8Decoder._BB*/get _BB() {
      return "";
    },
    /*convert._Utf8Decoder._AB*/get _AB() {
      return " ";
    },
    /*convert._Utf8Decoder._X1*/get _X1() {
      return "0";
    },
    /*convert._Utf8Decoder._X2*/get _X2() {
      return ":";
    },
    /*convert._Utf8Decoder._X3*/get _X3() {
      return "D";
    },
    /*convert._Utf8Decoder._TO*/get _TO() {
      return "N";
    },
    /*convert._Utf8Decoder._TS*/get _TS() {
      return "X";
    },
    /*convert._Utf8Decoder._QO*/get _QO() {
      return "b";
    },
    /*convert._Utf8Decoder._QR*/get _QR() {
      return "l";
    },
    /*convert._Utf8Decoder._B1*/get _B1() {
      return "v";
    },
    /*convert._Utf8Decoder._B2*/get _B2() {
      return "";
    },
    /*convert._Utf8Decoder._E1*/get _E1() {
      return "A";
    },
    /*convert._Utf8Decoder._E2*/get _E2() {
      return "C";
    },
    /*convert._Utf8Decoder._E3*/get _E3() {
      return "E";
    },
    /*convert._Utf8Decoder._E4*/get _E4() {
      return "G";
    },
    /*convert._Utf8Decoder._E5*/get _E5() {
      return "I";
    },
    /*convert._Utf8Decoder._E6*/get _E6() {
      return "K";
    },
    /*convert._Utf8Decoder._E7*/get _E7() {
      return "M";
    },
    /*convert._Utf8Decoder.transitionTable*/get transitionTable() {
      return "  0:XECCCCCN:lDb  0:XECCCCCNvlDb  0:XECCCCCN:lDb AAAAA     AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA0000AAAAA     AAAAA";
    },
    /*convert._Utf8Decoder.initial*/get initial() {
      return 0;
    },
    /*convert._Utf8Decoder.accept*/get accept() {
      return 0;
    },
    /*convert._Utf8Decoder.beforeBom*/get beforeBom() {
      return 16;
    },
    /*convert._Utf8Decoder.afterBom*/get afterBom() {
      return 32;
    },
    /*convert._Utf8Decoder.errorMissingExtension*/get errorMissingExtension() {
      return 65;
    },
    /*convert._Utf8Decoder.errorUnexpectedExtension*/get errorUnexpectedExtension() {
      return 67;
    },
    /*convert._Utf8Decoder.errorInvalid*/get errorInvalid() {
      return 69;
    },
    /*convert._Utf8Decoder.errorOverlong*/get errorOverlong() {
      return 71;
    },
    /*convert._Utf8Decoder.errorOutOfRange*/get errorOutOfRange() {
      return 73;
    },
    /*convert._Utf8Decoder.errorSurrogate*/get errorSurrogate() {
      return 75;
    },
    /*convert._Utf8Decoder.errorUnfinished*/get errorUnfinished() {
      return 77;
    }
  }, false);
  convert._convertJsonToDart = function _convertJsonToDart(json, reviver) {
    if (reviver == null) dart.nullFailed(I[85], 54, 26, "reviver");
    function walk(e) {
      if (e == null || typeof e != "object") {
        return e;
      }
      if (Object.getPrototypeOf(e) === Array.prototype) {
        for (let i = 0; i < e.length; i = i + 1) {
          let item = e[i];
          e[i] = reviver(i, walk(item));
        }
        return e;
      }
      let map = new convert._JsonMap.new(e);
      let processed = map[_processed];
      let keys = map[_computeKeys]();
      for (let i = 0; i < dart.notNull(keys[$length]); i = i + 1) {
        let key = keys[$_get](i);
        let revived = reviver(key, walk(e[key]));
        processed[key] = revived;
      }
      map[_original$] = processed;
      return map;
    }
    dart.fn(walk, T$.dynamicTodynamic());
    return reviver(null, walk(json));
  };
  convert._convertJsonToDartLazy = function _convertJsonToDartLazy(object) {
    if (object == null) return null;
    if (typeof object != "object") {
      return object;
    }
    if (Object.getPrototypeOf(object) !== Array.prototype) {
      return new convert._JsonMap.new(object);
    }
    for (let i = 0; i < object.length; i = i + 1) {
      let item = object[i];
      object[i] = convert._convertJsonToDartLazy(item);
    }
    return object;
  };
  convert.base64Encode = function base64Encode(bytes) {
    if (bytes == null) dart.nullFailed(I[92], 41, 31, "bytes");
    return convert.base64.encode(bytes);
  };
  convert.base64UrlEncode = function base64UrlEncode(bytes) {
    if (bytes == null) dart.nullFailed(I[92], 46, 34, "bytes");
    return convert.base64Url.encode(bytes);
  };
  convert.base64Decode = function base64Decode(source) {
    if (source == null) dart.nullFailed(I[92], 52, 31, "source");
    return convert.base64.decode(source);
  };
  convert.jsonEncode = function jsonEncode(object, opts) {
    let toEncodable = opts && 'toEncodable' in opts ? opts.toEncodable : null;
    return convert.json.encode(object, {toEncodable: toEncodable});
  };
  convert.jsonDecode = function jsonDecode(source, opts) {
    if (source == null) dart.nullFailed(I[95], 94, 27, "source");
    let reviver = opts && 'reviver' in opts ? opts.reviver : null;
    return convert.json.decode(source, {reviver: reviver});
  };
  convert._parseJson = function _parseJson(source, reviver) {
    if (source == null) dart.nullFailed(I[85], 31, 19, "source");
    if (!(typeof source == 'string')) dart.throw(_js_helper.argumentErrorValue(source));
    let parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        dart.throw(new core.FormatException.new(String(e)));
      } else
        throw e$;
    }
    if (reviver == null) {
      return convert._convertJsonToDartLazy(parsed);
    } else {
      return convert._convertJsonToDart(parsed, reviver);
    }
  };
  convert._defaultToEncodable = function _defaultToEncodable(object) {
    return dart.dsend(object, 'toJson', []);
  };
  convert._isLeadSurrogate = function _isLeadSurrogate(codeUnit) {
    if (codeUnit == null) dart.nullFailed(I[98], 360, 27, "codeUnit");
    return (dart.notNull(codeUnit) & 64512) >>> 0 === 55296;
  };
  convert._isTailSurrogate = function _isTailSurrogate(codeUnit) {
    if (codeUnit == null) dart.nullFailed(I[98], 362, 27, "codeUnit");
    return (dart.notNull(codeUnit) & 64512) >>> 0 === 56320;
  };
  convert._combineSurrogatePair = function _combineSurrogatePair(lead, tail) {
    if (lead == null) dart.nullFailed(I[98], 364, 31, "lead");
    if (tail == null) dart.nullFailed(I[98], 364, 41, "tail");
    return (65536 + ((dart.notNull(lead) & 1023) >>> 0 << 10 >>> 0) | (dart.notNull(tail) & 1023) >>> 0) >>> 0;
  };
  dart.defineLazy(convert, {
    /*convert.ascii*/get ascii() {
      return C[102] || CT.C102;
    },
    /*convert._asciiMask*/get _asciiMask() {
      return 127;
    },
    /*convert.base64*/get base64() {
      return C[103] || CT.C103;
    },
    /*convert.base64Url*/get base64Url() {
      return C[104] || CT.C104;
    },
    /*convert._paddingChar*/get _paddingChar() {
      return 61;
    },
    /*convert.htmlEscape*/get htmlEscape() {
      return C[105] || CT.C105;
    },
    /*convert.json*/get json() {
      return C[106] || CT.C106;
    },
    /*convert.latin1*/get latin1() {
      return C[107] || CT.C107;
    },
    /*convert._latin1Mask*/get _latin1Mask() {
      return 255;
    },
    /*convert._LF*/get _LF() {
      return 10;
    },
    /*convert._CR*/get _CR() {
      return 13;
    },
    /*convert.unicodeReplacementCharacterRune*/get unicodeReplacementCharacterRune() {
      return 65533;
    },
    /*convert.unicodeBomCharacterRune*/get unicodeBomCharacterRune() {
      return 65279;
    },
    /*convert.utf8*/get utf8() {
      return C[108] || CT.C108;
    },
    /*convert._ONE_BYTE_LIMIT*/get _ONE_BYTE_LIMIT() {
      return 127;
    },
    /*convert._TWO_BYTE_LIMIT*/get _TWO_BYTE_LIMIT() {
      return 2047;
    },
    /*convert._THREE_BYTE_LIMIT*/get _THREE_BYTE_LIMIT() {
      return 65535;
    },
    /*convert._FOUR_BYTE_LIMIT*/get _FOUR_BYTE_LIMIT() {
      return 1114111;
    },
    /*convert._SURROGATE_TAG_MASK*/get _SURROGATE_TAG_MASK() {
      return 64512;
    },
    /*convert._SURROGATE_VALUE_MASK*/get _SURROGATE_VALUE_MASK() {
      return 1023;
    },
    /*convert._LEAD_SURROGATE_MIN*/get _LEAD_SURROGATE_MIN() {
      return 55296;
    },
    /*convert._TAIL_SURROGATE_MIN*/get _TAIL_SURROGATE_MIN() {
      return 56320;
    }
  }, false);
  developer._FakeUserTag = class _FakeUserTag extends core.Object {
    static new(label) {
      let t181, t180, t179;
      if (label == null) dart.nullFailed(I[99], 173, 31, "label");
      let existingTag = developer._FakeUserTag._instances[$_get](label);
      if (existingTag != null) {
        return existingTag;
      }
      if (developer._FakeUserTag._instances[$length] === 64) {
        dart.throw(new core.UnsupportedError.new("UserTag instance limit (" + dart.str(64) + ") reached."));
      }
      t179 = developer._FakeUserTag._instances;
      t180 = label;
      t181 = new developer._FakeUserTag.real(label);
      t179[$_set](t180, t181);
      return t181;
    }
    makeCurrent() {
      let old = developer._currentTag;
      developer._currentTag = this;
      return old;
    }
  };
  (developer._FakeUserTag.real = function(label) {
    if (label == null) dart.nullFailed(I[99], 171, 26, "label");
    this.label = label;
    ;
  }).prototype = developer._FakeUserTag.prototype;
  dart.addTypeTests(developer._FakeUserTag);
  dart.addTypeCaches(developer._FakeUserTag);
  developer._FakeUserTag[dart.implements] = () => [developer.UserTag];
  dart.setMethodSignature(developer._FakeUserTag, () => ({
    __proto__: dart.getMethods(developer._FakeUserTag.__proto__),
    makeCurrent: dart.fnType(developer.UserTag, [])
  }));
  dart.setLibraryUri(developer._FakeUserTag, I[100]);
  dart.setFieldSignature(developer._FakeUserTag, () => ({
    __proto__: dart.getFields(developer._FakeUserTag.__proto__),
    label: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(developer._FakeUserTag, {
    /*developer._FakeUserTag._instances*/get _instances() {
      return new (T$0.IdentityMapOfString$_FakeUserTag()).new();
    },
    /*developer._FakeUserTag._defaultTag*/get _defaultTag() {
      return developer._FakeUserTag.new("Default");
    }
  }, false);
  var result$ = dart.privateName(developer, "ServiceExtensionResponse.result");
  var errorCode$ = dart.privateName(developer, "ServiceExtensionResponse.errorCode");
  var errorDetail$ = dart.privateName(developer, "ServiceExtensionResponse.errorDetail");
  var _toString$ = dart.privateName(developer, "_toString");
  developer.ServiceExtensionResponse = class ServiceExtensionResponse extends core.Object {
    get result() {
      return this[result$];
    }
    set result(value) {
      super.result = value;
    }
    get errorCode() {
      return this[errorCode$];
    }
    set errorCode(value) {
      super.errorCode = value;
    }
    get errorDetail() {
      return this[errorDetail$];
    }
    set errorDetail(value) {
      super.errorDetail = value;
    }
    static _errorCodeMessage(errorCode) {
      if (errorCode == null) dart.nullFailed(I[101], 76, 39, "errorCode");
      developer.ServiceExtensionResponse._validateErrorCode(errorCode);
      if (errorCode === -32602) {
        return "Invalid params";
      }
      return "Server error";
    }
    static _validateErrorCode(errorCode) {
      if (errorCode == null) dart.nullFailed(I[101], 84, 33, "errorCode");
      core.ArgumentError.checkNotNull(core.int, errorCode, "errorCode");
      if (errorCode === -32602) return;
      if (dart.notNull(errorCode) >= -32016 && dart.notNull(errorCode) <= -32000) {
        return;
      }
      dart.throw(new core.ArgumentError.value(errorCode, "errorCode", "Out of range"));
    }
    isError() {
      return this.errorCode != null && this.errorDetail != null;
    }
    [_toString$]() {
      let t179;
      t179 = this.result;
      return t179 == null ? convert.json.encode(new (T$.IdentityMapOfString$Object()).from(["code", dart.nullCheck(this.errorCode), "message", developer.ServiceExtensionResponse._errorCodeMessage(dart.nullCheck(this.errorCode)), "data", new (T$.IdentityMapOfString$String()).from(["details", dart.nullCheck(this.errorDetail)])])) : t179;
    }
  };
  (developer.ServiceExtensionResponse.result = function(result) {
    if (result == null) dart.nullFailed(I[101], 25, 42, "result");
    this[result$] = result;
    this[errorCode$] = null;
    this[errorDetail$] = null;
    core.ArgumentError.checkNotNull(core.String, result, "result");
  }).prototype = developer.ServiceExtensionResponse.prototype;
  (developer.ServiceExtensionResponse.error = function(errorCode, errorDetail) {
    if (errorCode == null) dart.nullFailed(I[101], 39, 38, "errorCode");
    if (errorDetail == null) dart.nullFailed(I[101], 39, 56, "errorDetail");
    this[result$] = null;
    this[errorCode$] = errorCode;
    this[errorDetail$] = errorDetail;
    developer.ServiceExtensionResponse._validateErrorCode(errorCode);
    core.ArgumentError.checkNotNull(core.String, errorDetail, "errorDetail");
  }).prototype = developer.ServiceExtensionResponse.prototype;
  dart.addTypeTests(developer.ServiceExtensionResponse);
  dart.addTypeCaches(developer.ServiceExtensionResponse);
  dart.setMethodSignature(developer.ServiceExtensionResponse, () => ({
    __proto__: dart.getMethods(developer.ServiceExtensionResponse.__proto__),
    isError: dart.fnType(core.bool, []),
    [_toString$]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(developer.ServiceExtensionResponse, I[100]);
  dart.setFieldSignature(developer.ServiceExtensionResponse, () => ({
    __proto__: dart.getFields(developer.ServiceExtensionResponse.__proto__),
    result: dart.finalFieldType(dart.nullable(core.String)),
    errorCode: dart.finalFieldType(dart.nullable(core.int)),
    errorDetail: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(developer.ServiceExtensionResponse, {
    /*developer.ServiceExtensionResponse.kInvalidParams*/get kInvalidParams() {
      return -32602;
    },
    /*developer.ServiceExtensionResponse.kExtensionError*/get kExtensionError() {
      return -32000;
    },
    /*developer.ServiceExtensionResponse.kExtensionErrorMax*/get kExtensionErrorMax() {
      return -32000;
    },
    /*developer.ServiceExtensionResponse.kExtensionErrorMin*/get kExtensionErrorMin() {
      return -32016;
    },
    /*developer.ServiceExtensionResponse.invalidParams*/get invalidParams() {
      return -32602;
    },
    /*developer.ServiceExtensionResponse.extensionError*/get extensionError() {
      return -32000;
    },
    /*developer.ServiceExtensionResponse.extensionErrorMax*/get extensionErrorMax() {
      return -32000;
    },
    /*developer.ServiceExtensionResponse.extensionErrorMin*/get extensionErrorMin() {
      return -32016;
    }
  }, false);
  developer.UserTag = class UserTag extends core.Object {
    static get defaultTag() {
      return developer._FakeUserTag._defaultTag;
    }
  };
  (developer.UserTag[dart.mixinNew] = function() {
  }).prototype = developer.UserTag.prototype;
  dart.addTypeTests(developer.UserTag);
  dart.addTypeCaches(developer.UserTag);
  dart.setLibraryUri(developer.UserTag, I[100]);
  dart.defineLazy(developer.UserTag, {
    /*developer.UserTag.MAX_USER_TAGS*/get MAX_USER_TAGS() {
      return 64;
    }
  }, false);
  var name$10 = dart.privateName(developer, "Metric.name");
  var description$ = dart.privateName(developer, "Metric.description");
  developer.Metric = class Metric extends core.Object {
    get name() {
      return this[name$10];
    }
    set name(value) {
      super.name = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
  };
  (developer.Metric.new = function(name, description) {
    if (name == null) dart.nullFailed(I[102], 39, 15, "name");
    if (description == null) dart.nullFailed(I[102], 39, 26, "description");
    this[name$10] = name;
    this[description$] = description;
    if (this.name === "vm" || this.name[$contains]("/")) {
      dart.throw(new core.ArgumentError.new("Invalid Metric name."));
    }
  }).prototype = developer.Metric.prototype;
  dart.addTypeTests(developer.Metric);
  dart.addTypeCaches(developer.Metric);
  dart.setLibraryUri(developer.Metric, I[100]);
  dart.setFieldSignature(developer.Metric, () => ({
    __proto__: dart.getFields(developer.Metric.__proto__),
    name: dart.finalFieldType(core.String),
    description: dart.finalFieldType(core.String)
  }));
  var min$ = dart.privateName(developer, "Gauge.min");
  var max$ = dart.privateName(developer, "Gauge.max");
  var _value = dart.privateName(developer, "_value");
  var _toJSON = dart.privateName(developer, "_toJSON");
  developer.Gauge = class Gauge extends developer.Metric {
    get min() {
      return this[min$];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      super.max = value;
    }
    get value() {
      return this[_value];
    }
    set value(v) {
      if (v == null) dart.nullFailed(I[102], 56, 20, "v");
      if (dart.notNull(v) < dart.notNull(this.min)) {
        v = this.min;
      } else if (dart.notNull(v) > dart.notNull(this.max)) {
        v = this.max;
      }
      this[_value] = v;
    }
    [_toJSON]() {
      let map = new (T$.IdentityMapOfString$Object()).from(["type", "Gauge", "id", "metrics/" + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value, "min", this.min, "max", this.max]);
      return map;
    }
  };
  (developer.Gauge.new = function(name, description, min, max) {
    if (name == null) dart.nullFailed(I[102], 65, 16, "name");
    if (description == null) dart.nullFailed(I[102], 65, 29, "description");
    if (min == null) dart.nullFailed(I[102], 65, 47, "min");
    if (max == null) dart.nullFailed(I[102], 65, 57, "max");
    this[min$] = min;
    this[max$] = max;
    this[_value] = min;
    developer.Gauge.__proto__.new.call(this, name, description);
    core.ArgumentError.checkNotNull(core.double, this.min, "min");
    core.ArgumentError.checkNotNull(core.double, this.max, "max");
    if (!(dart.notNull(this.min) < dart.notNull(this.max))) dart.throw(new core.ArgumentError.new("min must be less than max"));
  }).prototype = developer.Gauge.prototype;
  dart.addTypeTests(developer.Gauge);
  dart.addTypeCaches(developer.Gauge);
  dart.setMethodSignature(developer.Gauge, () => ({
    __proto__: dart.getMethods(developer.Gauge.__proto__),
    [_toJSON]: dart.fnType(core.Map, [])
  }));
  dart.setGetterSignature(developer.Gauge, () => ({
    __proto__: dart.getGetters(developer.Gauge.__proto__),
    value: core.double
  }));
  dart.setSetterSignature(developer.Gauge, () => ({
    __proto__: dart.getSetters(developer.Gauge.__proto__),
    value: core.double
  }));
  dart.setLibraryUri(developer.Gauge, I[100]);
  dart.setFieldSignature(developer.Gauge, () => ({
    __proto__: dart.getFields(developer.Gauge.__proto__),
    min: dart.finalFieldType(core.double),
    max: dart.finalFieldType(core.double),
    [_value]: dart.fieldType(core.double)
  }));
  developer.Counter = class Counter extends developer.Metric {
    get value() {
      return this[_value];
    }
    set value(v) {
      if (v == null) dart.nullFailed(I[102], 94, 20, "v");
      this[_value] = v;
    }
    [_toJSON]() {
      let map = new (T$.IdentityMapOfString$Object()).from(["type", "Counter", "id", "metrics/" + dart.str(this.name), "name", this.name, "description", this.description, "value", this.value]);
      return map;
    }
  };
  (developer.Counter.new = function(name, description) {
    if (name == null) dart.nullFailed(I[102], 90, 18, "name");
    if (description == null) dart.nullFailed(I[102], 90, 31, "description");
    this[_value] = 0.0;
    developer.Counter.__proto__.new.call(this, name, description);
    ;
  }).prototype = developer.Counter.prototype;
  dart.addTypeTests(developer.Counter);
  dart.addTypeCaches(developer.Counter);
  dart.setMethodSignature(developer.Counter, () => ({
    __proto__: dart.getMethods(developer.Counter.__proto__),
    [_toJSON]: dart.fnType(core.Map, [])
  }));
  dart.setGetterSignature(developer.Counter, () => ({
    __proto__: dart.getGetters(developer.Counter.__proto__),
    value: core.double
  }));
  dart.setSetterSignature(developer.Counter, () => ({
    __proto__: dart.getSetters(developer.Counter.__proto__),
    value: core.double
  }));
  dart.setLibraryUri(developer.Counter, I[100]);
  dart.setFieldSignature(developer.Counter, () => ({
    __proto__: dart.getFields(developer.Counter.__proto__),
    [_value]: dart.fieldType(core.double)
  }));
  developer.Metrics = class Metrics extends core.Object {
    static register(metric) {
      if (metric == null) dart.nullFailed(I[102], 114, 31, "metric");
      core.ArgumentError.checkNotNull(developer.Metric, metric, "metric");
      if (developer.Metrics._metrics[$_get](metric.name) != null) {
        dart.throw(new core.ArgumentError.new("Registered metrics have unique names"));
      }
      developer.Metrics._metrics[$_set](metric.name, metric);
    }
    static deregister(metric) {
      if (metric == null) dart.nullFailed(I[102], 124, 33, "metric");
      core.ArgumentError.checkNotNull(developer.Metric, metric, "metric");
      developer.Metrics._metrics[$remove](metric.name);
    }
    static _printMetric(id) {
      if (id == null) dart.nullFailed(I[102], 132, 38, "id");
      let metric = developer.Metrics._metrics[$_get](id);
      if (metric == null) {
        return null;
      }
      return convert.json.encode(metric[_toJSON]());
    }
    static _printMetrics() {
      let metrics = [];
      for (let metric of developer.Metrics._metrics[$values]) {
        metrics[$add](metric[_toJSON]());
      }
      let map = new (T$.IdentityMapOfString$Object()).from(["type", "MetricList", "metrics", metrics]);
      return convert.json.encode(map);
    }
  };
  (developer.Metrics.new = function() {
    ;
  }).prototype = developer.Metrics.prototype;
  dart.addTypeTests(developer.Metrics);
  dart.addTypeCaches(developer.Metrics);
  dart.setLibraryUri(developer.Metrics, I[100]);
  dart.defineLazy(developer.Metrics, {
    /*developer.Metrics._metrics*/get _metrics() {
      return new (T$0.LinkedMapOfString$Metric()).new();
    }
  }, false);
  var majorVersion = dart.privateName(developer, "ServiceProtocolInfo.majorVersion");
  var minorVersion = dart.privateName(developer, "ServiceProtocolInfo.minorVersion");
  var serverUri$ = dart.privateName(developer, "ServiceProtocolInfo.serverUri");
  developer.ServiceProtocolInfo = class ServiceProtocolInfo extends core.Object {
    get majorVersion() {
      return this[majorVersion];
    }
    set majorVersion(value) {
      super.majorVersion = value;
    }
    get minorVersion() {
      return this[minorVersion];
    }
    set minorVersion(value) {
      super.minorVersion = value;
    }
    get serverUri() {
      return this[serverUri$];
    }
    set serverUri(value) {
      super.serverUri = value;
    }
    toString() {
      if (this.serverUri != null) {
        return "Dart VM Service Protocol v" + dart.str(this.majorVersion) + "." + dart.str(this.minorVersion) + " " + "listening on " + dart.str(this.serverUri);
      } else {
        return "Dart VM Service Protocol v" + dart.str(this.majorVersion) + "." + dart.str(this.minorVersion);
      }
    }
  };
  (developer.ServiceProtocolInfo.new = function(serverUri) {
    this[majorVersion] = developer._getServiceMajorVersion();
    this[minorVersion] = developer._getServiceMinorVersion();
    this[serverUri$] = serverUri;
    ;
  }).prototype = developer.ServiceProtocolInfo.prototype;
  dart.addTypeTests(developer.ServiceProtocolInfo);
  dart.addTypeCaches(developer.ServiceProtocolInfo);
  dart.setLibraryUri(developer.ServiceProtocolInfo, I[100]);
  dart.setFieldSignature(developer.ServiceProtocolInfo, () => ({
    __proto__: dart.getFields(developer.ServiceProtocolInfo.__proto__),
    majorVersion: dart.finalFieldType(core.int),
    minorVersion: dart.finalFieldType(core.int),
    serverUri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(developer.ServiceProtocolInfo, ['toString']);
  developer.Service = class Service extends core.Object {
    static getInfo() {
      return async.async(developer.ServiceProtocolInfo, function* getInfo() {
        let receivePort = isolate$.RawReceivePort.new(null, "Service.getInfo");
        let uriCompleter = T$0.CompleterOfUriN().new();
        receivePort.handler = dart.fn(uri => uriCompleter.complete(uri), T$0.UriNTovoid());
        developer._getServerInfo(receivePort.sendPort);
        let uri = (yield uriCompleter.future);
        receivePort.close();
        return new developer.ServiceProtocolInfo.new(uri);
      });
    }
    static controlWebServer(opts) {
      let enable = opts && 'enable' in opts ? opts.enable : false;
      if (enable == null) dart.nullFailed(I[103], 62, 13, "enable");
      let silenceOutput = opts && 'silenceOutput' in opts ? opts.silenceOutput : null;
      return async.async(developer.ServiceProtocolInfo, function* controlWebServer() {
        core.ArgumentError.checkNotNull(core.bool, enable, "enable");
        let receivePort = isolate$.RawReceivePort.new(null, "Service.controlWebServer");
        let uriCompleter = T$0.CompleterOfUri().new();
        receivePort.handler = dart.fn(uri => {
          if (uri == null) dart.nullFailed(I[103], 69, 32, "uri");
          return uriCompleter.complete(uri);
        }, T$0.UriTovoid());
        developer._webServerControl(receivePort.sendPort, enable, silenceOutput);
        let uri = (yield uriCompleter.future);
        receivePort.close();
        return new developer.ServiceProtocolInfo.new(uri);
      });
    }
    static getIsolateID(isolate) {
      if (isolate == null) dart.nullFailed(I[103], 83, 39, "isolate");
      core.ArgumentError.checkNotNull(isolate$.Isolate, isolate, "isolate");
      return developer._getIsolateIDFromSendPort(isolate.controlPort);
    }
  };
  (developer.Service.new = function() {
    ;
  }).prototype = developer.Service.prototype;
  dart.addTypeTests(developer.Service);
  dart.addTypeCaches(developer.Service);
  dart.setLibraryUri(developer.Service, I[100]);
  var id$ = dart.privateName(developer, "Flow.id");
  var _type$0 = dart.privateName(developer, "_type");
  developer.Flow = class Flow extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    static begin(opts) {
      let t179;
      let id = opts && 'id' in opts ? opts.id : null;
      return new developer.Flow.__(9, (t179 = id, t179 == null ? developer._getNextAsyncId() : t179));
    }
    static step(id) {
      if (id == null) dart.nullFailed(I[104], 68, 24, "id");
      return new developer.Flow.__(10, id);
    }
    static end(id) {
      if (id == null) dart.nullFailed(I[104], 75, 23, "id");
      return new developer.Flow.__(11, id);
    }
  };
  (developer.Flow.__ = function(_type, id) {
    if (_type == null) dart.nullFailed(I[104], 52, 15, "_type");
    if (id == null) dart.nullFailed(I[104], 52, 27, "id");
    this[_type$0] = _type;
    this[id$] = id;
    ;
  }).prototype = developer.Flow.prototype;
  dart.addTypeTests(developer.Flow);
  dart.addTypeCaches(developer.Flow);
  dart.setLibraryUri(developer.Flow, I[100]);
  dart.setFieldSignature(developer.Flow, () => ({
    __proto__: dart.getFields(developer.Flow.__proto__),
    [_type$0]: dart.finalFieldType(core.int),
    id: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(developer.Flow, {
    /*developer.Flow._begin*/get _begin() {
      return 9;
    },
    /*developer.Flow._step*/get _step() {
      return 10;
    },
    /*developer.Flow._end*/get _end() {
      return 11;
    }
  }, false);
  var _arguments$1 = dart.privateName(developer, "_arguments");
  var _startSync = dart.privateName(developer, "_startSync");
  developer.Timeline = class Timeline extends core.Object {
    static startSync(name, opts) {
      if (name == null) dart.nullFailed(I[104], 103, 32, "name");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      if (!true) return;
      core.ArgumentError.checkNotNull(core.String, name, "name");
      if (!dart.test(developer._isDartStreamEnabled())) {
        developer.Timeline._stack[$add](null);
        return;
      }
      let block = new developer._SyncBlock.__(name);
      if ($arguments != null) {
        block[_arguments$1] = $arguments;
      }
      if (flow != null) {
        block.flow = flow;
      }
      developer.Timeline._stack[$add](block);
      block[_startSync]();
    }
    static finishSync() {
      if (!true) {
        return;
      }
      if (developer.Timeline._stack[$length] === 0) {
        dart.throw(new core.StateError.new("Uneven calls to startSync and finishSync"));
      }
      let block = developer.Timeline._stack[$removeLast]();
      if (block == null) {
        return;
      }
      block.finish();
    }
    static instantSync(name, opts) {
      if (name == null) dart.nullFailed(I[104], 142, 34, "name");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!true) return;
      core.ArgumentError.checkNotNull(core.String, name, "name");
      if (!dart.test(developer._isDartStreamEnabled())) {
        return;
      }
      let instantArguments = null;
      if ($arguments != null) {
        instantArguments = collection.LinkedHashMap.from($arguments);
      }
      developer._reportInstantEvent("Dart", name, developer._argumentsAsJson(instantArguments));
    }
    static timeSync(T, name, $function, opts) {
      if (name == null) dart.nullFailed(I[104], 159, 31, "name");
      if ($function == null) dart.nullFailed(I[104], 159, 61, "function");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let flow = opts && 'flow' in opts ? opts.flow : null;
      developer.Timeline.startSync(name, {arguments: $arguments, flow: flow});
      try {
        return $function();
      } finally {
        developer.Timeline.finishSync();
      }
    }
    static get now() {
      return developer._getTraceClock();
    }
  };
  (developer.Timeline.new = function() {
    ;
  }).prototype = developer.Timeline.prototype;
  dart.addTypeTests(developer.Timeline);
  dart.addTypeCaches(developer.Timeline);
  dart.setLibraryUri(developer.Timeline, I[100]);
  dart.defineLazy(developer.Timeline, {
    /*developer.Timeline._stack*/get _stack() {
      return T$0.JSArrayOf_SyncBlockN().of([]);
    }
  }, false);
  var _stack = dart.privateName(developer, "_stack");
  var _parent = dart.privateName(developer, "_parent");
  var _filterKey = dart.privateName(developer, "_filterKey");
  var _taskId$ = dart.privateName(developer, "_taskId");
  var _start = dart.privateName(developer, "_start");
  var _finish = dart.privateName(developer, "_finish");
  developer.TimelineTask = class TimelineTask extends core.Object {
    start(name, opts) {
      if (name == null) dart.nullFailed(I[104], 218, 21, "name");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!true) return;
      core.ArgumentError.checkNotNull(core.String, name, "name");
      let block = new developer._AsyncBlock.__(name, this[_taskId$]);
      this[_stack][$add](block);
      let map = new (T$0.LinkedMapOfObjectN$ObjectN()).new();
      if ($arguments != null) {
        for (let key of $arguments[$keys]) {
          map[$_set](key, $arguments[$_get](key));
        }
      }
      if (this[_parent] != null) map[$_set]("parentId", dart.nullCheck(this[_parent])[_taskId$][$toRadixString](16));
      if (this[_filterKey] != null) map[$_set]("filterKey", this[_filterKey]);
      block[_start](map);
    }
    instant(name, opts) {
      if (name == null) dart.nullFailed(I[104], 241, 23, "name");
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!true) return;
      core.ArgumentError.checkNotNull(core.String, name, "name");
      let instantArguments = null;
      if ($arguments != null) {
        instantArguments = collection.LinkedHashMap.from($arguments);
      }
      if (this[_filterKey] != null) {
        instantArguments == null ? instantArguments = new _js_helper.LinkedMap.new() : null;
        instantArguments[$_set]("filterKey", this[_filterKey]);
      }
      developer._reportTaskEvent(this[_taskId$], "n", "Dart", name, developer._argumentsAsJson(instantArguments));
    }
    finish(opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      if (!true) {
        return;
      }
      if (this[_stack][$length] === 0) {
        dart.throw(new core.StateError.new("Uneven calls to start and finish"));
      }
      if (this[_filterKey] != null) {
        $arguments == null ? $arguments = new _js_helper.LinkedMap.new() : null;
        $arguments[$_set]("filterKey", this[_filterKey]);
      }
      let block = this[_stack][$removeLast]();
      block[_finish]($arguments);
    }
    pass() {
      if (dart.notNull(this[_stack][$length]) > 0) {
        dart.throw(new core.StateError.new("You cannot pass a TimelineTask without finishing all started " + "operations"));
      }
      let r = this[_taskId$];
      return r;
    }
  };
  (developer.TimelineTask.new = function(opts) {
    let parent = opts && 'parent' in opts ? opts.parent : null;
    let filterKey = opts && 'filterKey' in opts ? opts.filterKey : null;
    this[_stack] = T$0.JSArrayOf_AsyncBlock().of([]);
    this[_parent] = parent;
    this[_filterKey] = filterKey;
    this[_taskId$] = developer._getNextAsyncId();
  }).prototype = developer.TimelineTask.prototype;
  (developer.TimelineTask.withTaskId = function(taskId, opts) {
    if (taskId == null) dart.nullFailed(I[104], 208, 31, "taskId");
    let filterKey = opts && 'filterKey' in opts ? opts.filterKey : null;
    this[_stack] = T$0.JSArrayOf_AsyncBlock().of([]);
    this[_parent] = null;
    this[_filterKey] = filterKey;
    this[_taskId$] = taskId;
    core.ArgumentError.checkNotNull(core.int, taskId, "taskId");
  }).prototype = developer.TimelineTask.prototype;
  dart.addTypeTests(developer.TimelineTask);
  dart.addTypeCaches(developer.TimelineTask);
  dart.setMethodSignature(developer.TimelineTask, () => ({
    __proto__: dart.getMethods(developer.TimelineTask.__proto__),
    start: dart.fnType(dart.void, [core.String], {arguments: dart.nullable(core.Map)}, {}),
    instant: dart.fnType(dart.void, [core.String], {arguments: dart.nullable(core.Map)}, {}),
    finish: dart.fnType(dart.void, [], {arguments: dart.nullable(core.Map)}, {}),
    pass: dart.fnType(core.int, [])
  }));
  dart.setLibraryUri(developer.TimelineTask, I[100]);
  dart.setFieldSignature(developer.TimelineTask, () => ({
    __proto__: dart.getFields(developer.TimelineTask.__proto__),
    [_parent]: dart.finalFieldType(dart.nullable(developer.TimelineTask)),
    [_filterKey]: dart.finalFieldType(dart.nullable(core.String)),
    [_taskId$]: dart.finalFieldType(core.int),
    [_stack]: dart.finalFieldType(core.List$(developer._AsyncBlock))
  }));
  dart.defineLazy(developer.TimelineTask, {
    /*developer.TimelineTask._kFilterKey*/get _kFilterKey() {
      return "filterKey";
    }
  }, false);
  developer._AsyncBlock = class _AsyncBlock extends core.Object {
    [_start]($arguments) {
      if ($arguments == null) dart.nullFailed(I[104], 309, 19, "arguments");
      developer._reportTaskEvent(this[_taskId$], "b", this.category, this.name, developer._argumentsAsJson($arguments));
    }
    [_finish]($arguments) {
      developer._reportTaskEvent(this[_taskId$], "e", this.category, this.name, developer._argumentsAsJson($arguments));
    }
  };
  (developer._AsyncBlock.__ = function(name, _taskId) {
    if (name == null) dart.nullFailed(I[104], 306, 22, "name");
    if (_taskId == null) dart.nullFailed(I[104], 306, 33, "_taskId");
    this.category = "Dart";
    this.name = name;
    this[_taskId$] = _taskId;
    ;
  }).prototype = developer._AsyncBlock.prototype;
  dart.addTypeTests(developer._AsyncBlock);
  dart.addTypeCaches(developer._AsyncBlock);
  dart.setMethodSignature(developer._AsyncBlock, () => ({
    __proto__: dart.getMethods(developer._AsyncBlock.__proto__),
    [_start]: dart.fnType(dart.void, [core.Map]),
    [_finish]: dart.fnType(dart.void, [dart.nullable(core.Map)])
  }));
  dart.setLibraryUri(developer._AsyncBlock, I[100]);
  dart.setFieldSignature(developer._AsyncBlock, () => ({
    __proto__: dart.getFields(developer._AsyncBlock.__proto__),
    category: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    [_taskId$]: dart.finalFieldType(core.int)
  }));
  var _flow = dart.privateName(developer, "_flow");
  developer._SyncBlock = class _SyncBlock extends core.Object {
    [_startSync]() {
      developer._reportTaskEvent(0, "B", this.category, this.name, developer._argumentsAsJson(this[_arguments$1]));
    }
    finish() {
      developer._reportTaskEvent(0, "E", this.category, this.name, developer._argumentsAsJson(this[_arguments$1]));
      if (this[_flow] != null) {
        developer._reportFlowEvent(this.category, dart.str(dart.nullCheck(this[_flow]).id), dart.nullCheck(this[_flow])[_type$0], dart.nullCheck(this[_flow]).id, developer._argumentsAsJson(null));
      }
    }
    set flow(f) {
      if (f == null) dart.nullFailed(I[104], 353, 22, "f");
      this[_flow] = f;
    }
  };
  (developer._SyncBlock.__ = function(name) {
    if (name == null) dart.nullFailed(I[104], 335, 21, "name");
    this.category = "Dart";
    this[_arguments$1] = null;
    this[_flow] = null;
    this.name = name;
    ;
  }).prototype = developer._SyncBlock.prototype;
  dart.addTypeTests(developer._SyncBlock);
  dart.addTypeCaches(developer._SyncBlock);
  dart.setMethodSignature(developer._SyncBlock, () => ({
    __proto__: dart.getMethods(developer._SyncBlock.__proto__),
    [_startSync]: dart.fnType(dart.void, []),
    finish: dart.fnType(dart.void, [])
  }));
  dart.setSetterSignature(developer._SyncBlock, () => ({
    __proto__: dart.getSetters(developer._SyncBlock.__proto__),
    flow: developer.Flow
  }));
  dart.setLibraryUri(developer._SyncBlock, I[100]);
  dart.setFieldSignature(developer._SyncBlock, () => ({
    __proto__: dart.getFields(developer._SyncBlock.__proto__),
    category: dart.finalFieldType(core.String),
    name: dart.finalFieldType(core.String),
    [_arguments$1]: dart.fieldType(dart.nullable(core.Map)),
    [_flow]: dart.fieldType(dart.nullable(developer.Flow))
  }));
  developer.invokeExtension = function _invokeExtension(methodName, encodedJson) {
    if (methodName == null) dart.nullFailed(I[99], 77, 25, "methodName");
    if (encodedJson == null) dart.nullFailed(I[99], 77, 44, "encodedJson");
    return new dart.global.Promise((resolve, reject) => {
      if (resolve == null) dart.nullFailed(I[99], 80, 25, "resolve");
      if (reject == null) dart.nullFailed(I[99], 80, 51, "reject");
      return async.async(core.Null, function*() {
        try {
          let method = dart.nullCheck(developer._lookupExtension(methodName));
          let parameters = core.Map.as(convert.json.decode(encodedJson))[$cast](core.String, core.String);
          let result = (yield method(methodName, parameters));
          resolve(result[_toString$]());
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            reject(dart.str(e));
          } else
            throw e$;
        }
      });
    });
  };
  developer.debugger = function $debugger(opts) {
    let when = opts && 'when' in opts ? opts.when : true;
    if (when == null) dart.nullFailed(I[99], 16, 21, "when");
    let message = opts && 'message' in opts ? opts.message : null;
    if (dart.test(when)) {
      debugger;
    }
    return when;
  };
  developer.inspect = function inspect(object) {
    console.debug("dart.developer.inspect", object);
    return object;
  };
  developer.log = function log(message, opts) {
    if (message == null) dart.nullFailed(I[99], 32, 17, "message");
    let time = opts && 'time' in opts ? opts.time : null;
    let sequenceNumber = opts && 'sequenceNumber' in opts ? opts.sequenceNumber : null;
    let level = opts && 'level' in opts ? opts.level : 0;
    if (level == null) dart.nullFailed(I[99], 35, 9, "level");
    let name = opts && 'name' in opts ? opts.name : "";
    if (name == null) dart.nullFailed(I[99], 36, 12, "name");
    let zone = opts && 'zone' in opts ? opts.zone : null;
    let error = opts && 'error' in opts ? opts.error : null;
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    let items = {message: message, name: name, level: level};
    if (time != null) items.time = time;
    if (sequenceNumber != null) {
      items.sequenceNumber = sequenceNumber;
    }
    if (zone != null) items.zone = zone;
    if (error != null) items.error = error;
    if (stackTrace != null) items.stackTrace = stackTrace;
    console.debug("dart.developer.log", items);
  };
  developer.registerExtension = function registerExtension$(method, handler) {
    if (method == null) dart.nullFailed(I[101], 130, 31, "method");
    if (handler == null) dart.nullFailed(I[101], 130, 63, "handler");
    core.ArgumentError.checkNotNull(core.String, method, "method");
    if (!method[$startsWith]("ext.")) {
      dart.throw(new core.ArgumentError.value(method, "method", "Must begin with ext."));
    }
    if (developer._lookupExtension(method) != null) {
      dart.throw(new core.ArgumentError.new("Extension already registered: " + dart.str(method)));
    }
    core.ArgumentError.checkNotNull(T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse(), handler, "handler");
    developer._registerExtension(method, handler);
  };
  developer.postEvent = function postEvent(eventKind, eventData) {
    if (eventKind == null) dart.nullFailed(I[101], 146, 23, "eventKind");
    if (eventData == null) dart.nullFailed(I[101], 146, 38, "eventData");
    core.ArgumentError.checkNotNull(core.String, eventKind, "eventKind");
    core.ArgumentError.checkNotNull(core.Map, eventData, "eventData");
    let eventDataAsString = convert.json.encode(eventData);
    developer._postEvent(eventKind, eventDataAsString);
  };
  developer._postEvent = function _postEvent(eventKind, eventData) {
    if (eventKind == null) dart.nullFailed(I[99], 94, 24, "eventKind");
    if (eventData == null) dart.nullFailed(I[99], 94, 42, "eventData");
    console.debug("dart.developer.postEvent", eventKind, eventData);
  };
  developer._lookupExtension = function _lookupExtension(method) {
    if (method == null) dart.nullFailed(I[99], 56, 50, "method");
    return developer._extensions[$_get](method);
  };
  developer._registerExtension = function _registerExtension(method, handler) {
    if (method == null) dart.nullFailed(I[99], 61, 27, "method");
    if (handler == null) dart.nullFailed(I[99], 61, 59, "handler");
    developer._extensions[$_set](method, handler);
    console.debug("dart.developer.registerExtension", method);
  };
  developer.getCurrentTag = function getCurrentTag() {
    return developer._currentTag;
  };
  developer._getServerInfo = function _getServerInfo(sendPort) {
    if (sendPort == null) dart.nullFailed(I[99], 145, 30, "sendPort");
    sendPort.send(null);
  };
  developer._webServerControl = function _webServerControl(sendPort, enable, silenceOutput) {
    if (sendPort == null) dart.nullFailed(I[99], 150, 33, "sendPort");
    if (enable == null) dart.nullFailed(I[99], 150, 48, "enable");
    sendPort.send(null);
  };
  developer._getServiceMajorVersion = function _getServiceMajorVersion() {
    return 0;
  };
  developer._getServiceMinorVersion = function _getServiceMinorVersion() {
    return 0;
  };
  developer._getIsolateIDFromSendPort = function _getIsolateIDFromSendPort(sendPort) {
    if (sendPort == null) dart.nullFailed(I[99], 155, 44, "sendPort");
    return null;
  };
  developer._argumentsAsJson = function _argumentsAsJson($arguments) {
    if ($arguments == null || $arguments[$length] === 0) {
      return "{}";
    }
    return convert.json.encode($arguments);
  };
  developer._isDartStreamEnabled = function _isDartStreamEnabled() {
    return false;
  };
  developer._getNextAsyncId = function _getNextAsyncId() {
    return 0;
  };
  developer._getTraceClock = function _getTraceClock() {
    let t180;
    t180 = developer._clockValue;
    developer._clockValue = dart.notNull(t180) + 1;
    return t180;
  };
  developer._reportTaskEvent = function _reportTaskEvent(taskId, phase, category, name, argumentsAsJson) {
    if (taskId == null) dart.nullFailed(I[99], 129, 27, "taskId");
    if (phase == null) dart.nullFailed(I[99], 129, 42, "phase");
    if (category == null) dart.nullFailed(I[99], 129, 56, "category");
    if (name == null) dart.nullFailed(I[99], 129, 73, "name");
    if (argumentsAsJson == null) dart.nullFailed(I[99], 130, 12, "argumentsAsJson");
  };
  developer._reportFlowEvent = function _reportFlowEvent(category, name, type, id, argumentsAsJson) {
    if (category == null) dart.nullFailed(I[99], 114, 12, "category");
    if (name == null) dart.nullFailed(I[99], 114, 29, "name");
    if (type == null) dart.nullFailed(I[99], 114, 39, "type");
    if (id == null) dart.nullFailed(I[99], 114, 49, "id");
    if (argumentsAsJson == null) dart.nullFailed(I[99], 114, 60, "argumentsAsJson");
  };
  developer._reportInstantEvent = function _reportInstantEvent(category, name, argumentsAsJson) {
    if (category == null) dart.nullFailed(I[99], 119, 33, "category");
    if (name == null) dart.nullFailed(I[99], 119, 50, "name");
    if (argumentsAsJson == null) dart.nullFailed(I[99], 119, 63, "argumentsAsJson");
  };
  dart.defineLazy(developer, {
    /*developer._extensions*/get _extensions() {
      return new (T$0.IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse()).new();
    },
    /*developer._clockValue*/get _clockValue() {
      return 0;
    },
    set _clockValue(_) {},
    /*developer._currentTag*/get _currentTag() {
      return developer._FakeUserTag._defaultTag;
    },
    set _currentTag(_) {},
    /*developer._hasTimeline*/get _hasTimeline() {
      return true;
    }
  }, false);
  io.IOException = class IOException extends core.Object {
    toString() {
      return "IOException";
    }
  };
  (io.IOException.new = function() {
    ;
  }).prototype = io.IOException.prototype;
  dart.addTypeTests(io.IOException);
  dart.addTypeCaches(io.IOException);
  io.IOException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(io.IOException, I[105]);
  dart.defineExtensionMethods(io.IOException, ['toString']);
  var message$2 = dart.privateName(io, "OSError.message");
  var errorCode$0 = dart.privateName(io, "OSError.errorCode");
  io.OSError = class OSError extends core.Object {
    get message() {
      return this[message$2];
    }
    set message(value) {
      super.message = value;
    }
    get errorCode() {
      return this[errorCode$0];
    }
    set errorCode(value) {
      super.errorCode = value;
    }
    toString() {
      let t180, t180$, t180$0;
      let sb = new core.StringBuffer.new();
      sb.write("OS Error");
      if (this.message[$isNotEmpty]) {
        t180 = sb;
        (() => {
          t180.write(": ");
          t180.write(this.message);
          return t180;
        })();
        if (this.errorCode !== -1) {
          t180$ = sb;
          (() => {
            t180$.write(", errno = ");
            t180$.write(dart.toString(this.errorCode));
            return t180$;
          })();
        }
      } else if (this.errorCode !== -1) {
        t180$0 = sb;
        (() => {
          t180$0.write(": errno = ");
          t180$0.write(dart.toString(this.errorCode));
          return t180$0;
        })();
      }
      return sb.toString();
    }
  };
  (io.OSError.new = function(message = "", errorCode = -1) {
    if (message == null) dart.nullFailed(I[106], 63, 23, "message");
    if (errorCode == null) dart.nullFailed(I[106], 63, 42, "errorCode");
    this[message$2] = message;
    this[errorCode$0] = errorCode;
    ;
  }).prototype = io.OSError.prototype;
  dart.addTypeTests(io.OSError);
  dart.addTypeCaches(io.OSError);
  io.OSError[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(io.OSError, I[105]);
  dart.setFieldSignature(io.OSError, () => ({
    __proto__: dart.getFields(io.OSError.__proto__),
    message: dart.finalFieldType(core.String),
    errorCode: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.OSError, ['toString']);
  dart.defineLazy(io.OSError, {
    /*io.OSError.noErrorCode*/get noErrorCode() {
      return -1;
    }
  }, false);
  io._BufferAndStart = class _BufferAndStart extends core.Object {};
  (io._BufferAndStart.new = function(buffer, start) {
    if (buffer == null) dart.nullFailed(I[106], 85, 24, "buffer");
    if (start == null) dart.nullFailed(I[106], 85, 37, "start");
    this.buffer = buffer;
    this.start = start;
    ;
  }).prototype = io._BufferAndStart.prototype;
  dart.addTypeTests(io._BufferAndStart);
  dart.addTypeCaches(io._BufferAndStart);
  dart.setLibraryUri(io._BufferAndStart, I[105]);
  dart.setFieldSignature(io._BufferAndStart, () => ({
    __proto__: dart.getFields(io._BufferAndStart.__proto__),
    buffer: dart.fieldType(core.List$(core.int)),
    start: dart.fieldType(core.int)
  }));
  io._IOCrypto = class _IOCrypto extends core.Object {
    static getRandomBytes(count) {
      if (count == null) dart.nullFailed(I[107], 225, 39, "count");
      dart.throw(new core.UnsupportedError.new("_IOCrypto.getRandomBytes"));
    }
  };
  (io._IOCrypto.new = function() {
    ;
  }).prototype = io._IOCrypto.prototype;
  dart.addTypeTests(io._IOCrypto);
  dart.addTypeCaches(io._IOCrypto);
  dart.setLibraryUri(io._IOCrypto, I[105]);
  io.ZLibOption = class ZLibOption extends core.Object {};
  (io.ZLibOption.new = function() {
    ;
  }).prototype = io.ZLibOption.prototype;
  dart.addTypeTests(io.ZLibOption);
  dart.addTypeCaches(io.ZLibOption);
  dart.setLibraryUri(io.ZLibOption, I[105]);
  dart.defineLazy(io.ZLibOption, {
    /*io.ZLibOption.minWindowBits*/get minWindowBits() {
      return 8;
    },
    /*io.ZLibOption.MIN_WINDOW_BITS*/get MIN_WINDOW_BITS() {
      return 8;
    },
    /*io.ZLibOption.maxWindowBits*/get maxWindowBits() {
      return 15;
    },
    /*io.ZLibOption.MAX_WINDOW_BITS*/get MAX_WINDOW_BITS() {
      return 15;
    },
    /*io.ZLibOption.defaultWindowBits*/get defaultWindowBits() {
      return 15;
    },
    /*io.ZLibOption.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
      return 15;
    },
    /*io.ZLibOption.minLevel*/get minLevel() {
      return -1;
    },
    /*io.ZLibOption.MIN_LEVEL*/get MIN_LEVEL() {
      return -1;
    },
    /*io.ZLibOption.maxLevel*/get maxLevel() {
      return 9;
    },
    /*io.ZLibOption.MAX_LEVEL*/get MAX_LEVEL() {
      return 9;
    },
    /*io.ZLibOption.defaultLevel*/get defaultLevel() {
      return 6;
    },
    /*io.ZLibOption.DEFAULT_LEVEL*/get DEFAULT_LEVEL() {
      return 6;
    },
    /*io.ZLibOption.minMemLevel*/get minMemLevel() {
      return 1;
    },
    /*io.ZLibOption.MIN_MEM_LEVEL*/get MIN_MEM_LEVEL() {
      return 1;
    },
    /*io.ZLibOption.maxMemLevel*/get maxMemLevel() {
      return 9;
    },
    /*io.ZLibOption.MAX_MEM_LEVEL*/get MAX_MEM_LEVEL() {
      return 9;
    },
    /*io.ZLibOption.defaultMemLevel*/get defaultMemLevel() {
      return 8;
    },
    /*io.ZLibOption.DEFAULT_MEM_LEVEL*/get DEFAULT_MEM_LEVEL() {
      return 8;
    },
    /*io.ZLibOption.strategyFiltered*/get strategyFiltered() {
      return 1;
    },
    /*io.ZLibOption.STRATEGY_FILTERED*/get STRATEGY_FILTERED() {
      return 1;
    },
    /*io.ZLibOption.strategyHuffmanOnly*/get strategyHuffmanOnly() {
      return 2;
    },
    /*io.ZLibOption.STRATEGY_HUFFMAN_ONLY*/get STRATEGY_HUFFMAN_ONLY() {
      return 2;
    },
    /*io.ZLibOption.strategyRle*/get strategyRle() {
      return 3;
    },
    /*io.ZLibOption.STRATEGY_RLE*/get STRATEGY_RLE() {
      return 3;
    },
    /*io.ZLibOption.strategyFixed*/get strategyFixed() {
      return 4;
    },
    /*io.ZLibOption.STRATEGY_FIXED*/get STRATEGY_FIXED() {
      return 4;
    },
    /*io.ZLibOption.strategyDefault*/get strategyDefault() {
      return 0;
    },
    /*io.ZLibOption.STRATEGY_DEFAULT*/get STRATEGY_DEFAULT() {
      return 0;
    }
  }, false);
  var gzip$ = dart.privateName(io, "ZLibCodec.gzip");
  var level$ = dart.privateName(io, "ZLibCodec.level");
  var memLevel$ = dart.privateName(io, "ZLibCodec.memLevel");
  var strategy$ = dart.privateName(io, "ZLibCodec.strategy");
  var windowBits$ = dart.privateName(io, "ZLibCodec.windowBits");
  var raw$ = dart.privateName(io, "ZLibCodec.raw");
  var dictionary$ = dart.privateName(io, "ZLibCodec.dictionary");
  io.ZLibCodec = class ZLibCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get gzip() {
      return this[gzip$];
    }
    set gzip(value) {
      super.gzip = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get memLevel() {
      return this[memLevel$];
    }
    set memLevel(value) {
      super.memLevel = value;
    }
    get strategy() {
      return this[strategy$];
    }
    set strategy(value) {
      super.strategy = value;
    }
    get windowBits() {
      return this[windowBits$];
    }
    set windowBits(value) {
      super.windowBits = value;
    }
    get raw() {
      return this[raw$];
    }
    set raw(value) {
      super.raw = value;
    }
    get dictionary() {
      return this[dictionary$];
    }
    set dictionary(value) {
      super.dictionary = value;
    }
    get encoder() {
      return new io.ZLibEncoder.new({gzip: false, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
    }
    get decoder() {
      return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
    }
  };
  (io.ZLibCodec.new = function(opts) {
    let level = opts && 'level' in opts ? opts.level : 6;
    if (level == null) dart.nullFailed(I[108], 140, 13, "level");
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(I[108], 141, 12, "windowBits");
    let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
    if (memLevel == null) dart.nullFailed(I[108], 142, 12, "memLevel");
    let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
    if (strategy == null) dart.nullFailed(I[108], 143, 12, "strategy");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(I[108], 145, 12, "raw");
    let gzip = opts && 'gzip' in opts ? opts.gzip : false;
    if (gzip == null) dart.nullFailed(I[108], 146, 12, "gzip");
    this[level$] = level;
    this[windowBits$] = windowBits;
    this[memLevel$] = memLevel;
    this[strategy$] = strategy;
    this[dictionary$] = dictionary;
    this[raw$] = raw;
    this[gzip$] = gzip;
    io.ZLibCodec.__proto__.new.call(this);
    io._validateZLibeLevel(this.level);
    io._validateZLibMemLevel(this.memLevel);
    io._validateZLibStrategy(this.strategy);
    io._validateZLibWindowBits(this.windowBits);
  }).prototype = io.ZLibCodec.prototype;
  (io.ZLibCodec._default = function() {
    this[level$] = 6;
    this[windowBits$] = 15;
    this[memLevel$] = 8;
    this[strategy$] = 0;
    this[raw$] = false;
    this[gzip$] = false;
    this[dictionary$] = null;
    io.ZLibCodec.__proto__.new.call(this);
    ;
  }).prototype = io.ZLibCodec.prototype;
  dart.addTypeTests(io.ZLibCodec);
  dart.addTypeCaches(io.ZLibCodec);
  dart.setGetterSignature(io.ZLibCodec, () => ({
    __proto__: dart.getGetters(io.ZLibCodec.__proto__),
    encoder: io.ZLibEncoder,
    decoder: io.ZLibDecoder
  }));
  dart.setLibraryUri(io.ZLibCodec, I[105]);
  dart.setFieldSignature(io.ZLibCodec, () => ({
    __proto__: dart.getFields(io.ZLibCodec.__proto__),
    gzip: dart.finalFieldType(core.bool),
    level: dart.finalFieldType(core.int),
    memLevel: dart.finalFieldType(core.int),
    strategy: dart.finalFieldType(core.int),
    windowBits: dart.finalFieldType(core.int),
    raw: dart.finalFieldType(core.bool),
    dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  var gzip$0 = dart.privateName(io, "GZipCodec.gzip");
  var level$0 = dart.privateName(io, "GZipCodec.level");
  var memLevel$0 = dart.privateName(io, "GZipCodec.memLevel");
  var strategy$0 = dart.privateName(io, "GZipCodec.strategy");
  var windowBits$0 = dart.privateName(io, "GZipCodec.windowBits");
  var dictionary$0 = dart.privateName(io, "GZipCodec.dictionary");
  var raw$0 = dart.privateName(io, "GZipCodec.raw");
  io.GZipCodec = class GZipCodec extends convert.Codec$(core.List$(core.int), core.List$(core.int)) {
    get gzip() {
      return this[gzip$0];
    }
    set gzip(value) {
      super.gzip = value;
    }
    get level() {
      return this[level$0];
    }
    set level(value) {
      super.level = value;
    }
    get memLevel() {
      return this[memLevel$0];
    }
    set memLevel(value) {
      super.memLevel = value;
    }
    get strategy() {
      return this[strategy$0];
    }
    set strategy(value) {
      super.strategy = value;
    }
    get windowBits() {
      return this[windowBits$0];
    }
    set windowBits(value) {
      super.windowBits = value;
    }
    get dictionary() {
      return this[dictionary$0];
    }
    set dictionary(value) {
      super.dictionary = value;
    }
    get raw() {
      return this[raw$0];
    }
    set raw(value) {
      super.raw = value;
    }
    get encoder() {
      return new io.ZLibEncoder.new({gzip: true, level: this.level, windowBits: this.windowBits, memLevel: this.memLevel, strategy: this.strategy, dictionary: this.dictionary, raw: this.raw});
    }
    get decoder() {
      return new io.ZLibDecoder.new({windowBits: this.windowBits, dictionary: this.dictionary, raw: this.raw});
    }
  };
  (io.GZipCodec.new = function(opts) {
    let level = opts && 'level' in opts ? opts.level : 6;
    if (level == null) dart.nullFailed(I[108], 236, 13, "level");
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(I[108], 237, 12, "windowBits");
    let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
    if (memLevel == null) dart.nullFailed(I[108], 238, 12, "memLevel");
    let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
    if (strategy == null) dart.nullFailed(I[108], 239, 12, "strategy");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(I[108], 241, 12, "raw");
    let gzip = opts && 'gzip' in opts ? opts.gzip : true;
    if (gzip == null) dart.nullFailed(I[108], 242, 12, "gzip");
    this[level$0] = level;
    this[windowBits$0] = windowBits;
    this[memLevel$0] = memLevel;
    this[strategy$0] = strategy;
    this[dictionary$0] = dictionary;
    this[raw$0] = raw;
    this[gzip$0] = gzip;
    io.GZipCodec.__proto__.new.call(this);
    io._validateZLibeLevel(this.level);
    io._validateZLibMemLevel(this.memLevel);
    io._validateZLibStrategy(this.strategy);
    io._validateZLibWindowBits(this.windowBits);
  }).prototype = io.GZipCodec.prototype;
  (io.GZipCodec._default = function() {
    this[level$0] = 6;
    this[windowBits$0] = 15;
    this[memLevel$0] = 8;
    this[strategy$0] = 0;
    this[raw$0] = false;
    this[gzip$0] = true;
    this[dictionary$0] = null;
    io.GZipCodec.__proto__.new.call(this);
    ;
  }).prototype = io.GZipCodec.prototype;
  dart.addTypeTests(io.GZipCodec);
  dart.addTypeCaches(io.GZipCodec);
  dart.setGetterSignature(io.GZipCodec, () => ({
    __proto__: dart.getGetters(io.GZipCodec.__proto__),
    encoder: io.ZLibEncoder,
    decoder: io.ZLibDecoder
  }));
  dart.setLibraryUri(io.GZipCodec, I[105]);
  dart.setFieldSignature(io.GZipCodec, () => ({
    __proto__: dart.getFields(io.GZipCodec.__proto__),
    gzip: dart.finalFieldType(core.bool),
    level: dart.finalFieldType(core.int),
    memLevel: dart.finalFieldType(core.int),
    strategy: dart.finalFieldType(core.int),
    windowBits: dart.finalFieldType(core.int),
    dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    raw: dart.finalFieldType(core.bool)
  }));
  var gzip$1 = dart.privateName(io, "ZLibEncoder.gzip");
  var level$1 = dart.privateName(io, "ZLibEncoder.level");
  var memLevel$1 = dart.privateName(io, "ZLibEncoder.memLevel");
  var strategy$1 = dart.privateName(io, "ZLibEncoder.strategy");
  var windowBits$1 = dart.privateName(io, "ZLibEncoder.windowBits");
  var dictionary$1 = dart.privateName(io, "ZLibEncoder.dictionary");
  var raw$1 = dart.privateName(io, "ZLibEncoder.raw");
  io.ZLibEncoder = class ZLibEncoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    get gzip() {
      return this[gzip$1];
    }
    set gzip(value) {
      super.gzip = value;
    }
    get level() {
      return this[level$1];
    }
    set level(value) {
      super.level = value;
    }
    get memLevel() {
      return this[memLevel$1];
    }
    set memLevel(value) {
      super.memLevel = value;
    }
    get strategy() {
      return this[strategy$1];
    }
    set strategy(value) {
      super.strategy = value;
    }
    get windowBits() {
      return this[windowBits$1];
    }
    set windowBits(value) {
      super.windowBits = value;
    }
    get dictionary() {
      return this[dictionary$1];
    }
    set dictionary(value) {
      super.dictionary = value;
    }
    get raw() {
      return this[raw$1];
    }
    set raw(value) {
      super.raw = value;
    }
    convert(bytes) {
      let t180;
      T$0.ListOfint().as(bytes);
      if (bytes == null) dart.nullFailed(I[108], 339, 31, "bytes");
      let sink = new io._BufferSink.new();
      t180 = this.startChunkedConversion(sink);
      (() => {
        t180.add(bytes);
        t180.close();
        return t180;
      })();
      return sink.builder.takeBytes();
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[108], 353, 61, "sink");
      if (!convert.ByteConversionSink.is(sink)) {
        sink = new convert._ByteAdapterSink.new(sink);
      }
      return new io._ZLibEncoderSink.__(sink, this.gzip, this.level, this.windowBits, this.memLevel, this.strategy, this.dictionary, this.raw);
    }
  };
  (io.ZLibEncoder.new = function(opts) {
    let gzip = opts && 'gzip' in opts ? opts.gzip : false;
    if (gzip == null) dart.nullFailed(I[108], 324, 13, "gzip");
    let level = opts && 'level' in opts ? opts.level : 6;
    if (level == null) dart.nullFailed(I[108], 325, 12, "level");
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(I[108], 326, 12, "windowBits");
    let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
    if (memLevel == null) dart.nullFailed(I[108], 327, 12, "memLevel");
    let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
    if (strategy == null) dart.nullFailed(I[108], 328, 12, "strategy");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(I[108], 330, 12, "raw");
    this[gzip$1] = gzip;
    this[level$1] = level;
    this[windowBits$1] = windowBits;
    this[memLevel$1] = memLevel;
    this[strategy$1] = strategy;
    this[dictionary$1] = dictionary;
    this[raw$1] = raw;
    io.ZLibEncoder.__proto__.new.call(this);
    io._validateZLibeLevel(this.level);
    io._validateZLibMemLevel(this.memLevel);
    io._validateZLibStrategy(this.strategy);
    io._validateZLibWindowBits(this.windowBits);
  }).prototype = io.ZLibEncoder.prototype;
  dart.addTypeTests(io.ZLibEncoder);
  dart.addTypeCaches(io.ZLibEncoder);
  dart.setMethodSignature(io.ZLibEncoder, () => ({
    __proto__: dart.getMethods(io.ZLibEncoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(io.ZLibEncoder, I[105]);
  dart.setFieldSignature(io.ZLibEncoder, () => ({
    __proto__: dart.getFields(io.ZLibEncoder.__proto__),
    gzip: dart.finalFieldType(core.bool),
    level: dart.finalFieldType(core.int),
    memLevel: dart.finalFieldType(core.int),
    strategy: dart.finalFieldType(core.int),
    windowBits: dart.finalFieldType(core.int),
    dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    raw: dart.finalFieldType(core.bool)
  }));
  var windowBits$2 = dart.privateName(io, "ZLibDecoder.windowBits");
  var dictionary$2 = dart.privateName(io, "ZLibDecoder.dictionary");
  var raw$2 = dart.privateName(io, "ZLibDecoder.raw");
  io.ZLibDecoder = class ZLibDecoder extends convert.Converter$(core.List$(core.int), core.List$(core.int)) {
    get windowBits() {
      return this[windowBits$2];
    }
    set windowBits(value) {
      super.windowBits = value;
    }
    get dictionary() {
      return this[dictionary$2];
    }
    set dictionary(value) {
      super.dictionary = value;
    }
    get raw() {
      return this[raw$2];
    }
    set raw(value) {
      super.raw = value;
    }
    convert(bytes) {
      let t180;
      T$0.ListOfint().as(bytes);
      if (bytes == null) dart.nullFailed(I[108], 392, 31, "bytes");
      let sink = new io._BufferSink.new();
      t180 = this.startChunkedConversion(sink);
      (() => {
        t180.add(bytes);
        t180.close();
        return t180;
      })();
      return sink.builder.takeBytes();
    }
    startChunkedConversion(sink) {
      T$0.SinkOfListOfint().as(sink);
      if (sink == null) dart.nullFailed(I[108], 405, 61, "sink");
      if (!convert.ByteConversionSink.is(sink)) {
        sink = new convert._ByteAdapterSink.new(sink);
      }
      return new io._ZLibDecoderSink.__(sink, this.windowBits, this.dictionary, this.raw);
    }
  };
  (io.ZLibDecoder.new = function(opts) {
    let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
    if (windowBits == null) dart.nullFailed(I[108], 384, 13, "windowBits");
    let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
    let raw = opts && 'raw' in opts ? opts.raw : false;
    if (raw == null) dart.nullFailed(I[108], 386, 12, "raw");
    this[windowBits$2] = windowBits;
    this[dictionary$2] = dictionary;
    this[raw$2] = raw;
    io.ZLibDecoder.__proto__.new.call(this);
    io._validateZLibWindowBits(this.windowBits);
  }).prototype = io.ZLibDecoder.prototype;
  dart.addTypeTests(io.ZLibDecoder);
  dart.addTypeCaches(io.ZLibDecoder);
  dart.setMethodSignature(io.ZLibDecoder, () => ({
    __proto__: dart.getMethods(io.ZLibDecoder.__proto__),
    convert: dart.fnType(core.List$(core.int), [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ByteConversionSink, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(io.ZLibDecoder, I[105]);
  dart.setFieldSignature(io.ZLibDecoder, () => ({
    __proto__: dart.getFields(io.ZLibDecoder.__proto__),
    windowBits: dart.finalFieldType(core.int),
    dictionary: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    raw: dart.finalFieldType(core.bool)
  }));
  io.RawZLibFilter = class RawZLibFilter extends core.Object {
    static deflateFilter(opts) {
      let gzip = opts && 'gzip' in opts ? opts.gzip : false;
      if (gzip == null) dart.nullFailed(I[108], 418, 10, "gzip");
      let level = opts && 'level' in opts ? opts.level : 6;
      if (level == null) dart.nullFailed(I[108], 419, 9, "level");
      let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
      if (windowBits == null) dart.nullFailed(I[108], 420, 9, "windowBits");
      let memLevel = opts && 'memLevel' in opts ? opts.memLevel : 8;
      if (memLevel == null) dart.nullFailed(I[108], 421, 9, "memLevel");
      let strategy = opts && 'strategy' in opts ? opts.strategy : 0;
      if (strategy == null) dart.nullFailed(I[108], 422, 9, "strategy");
      let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
      let raw = opts && 'raw' in opts ? opts.raw : false;
      if (raw == null) dart.nullFailed(I[108], 424, 10, "raw");
      return io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw);
    }
    static inflateFilter(opts) {
      let windowBits = opts && 'windowBits' in opts ? opts.windowBits : 15;
      if (windowBits == null) dart.nullFailed(I[108], 433, 9, "windowBits");
      let dictionary = opts && 'dictionary' in opts ? opts.dictionary : null;
      let raw = opts && 'raw' in opts ? opts.raw : false;
      if (raw == null) dart.nullFailed(I[108], 435, 10, "raw");
      return io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw);
    }
    static _makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
      if (gzip == null) dart.nullFailed(I[107], 614, 12, "gzip");
      if (level == null) dart.nullFailed(I[107], 615, 11, "level");
      if (windowBits == null) dart.nullFailed(I[107], 616, 11, "windowBits");
      if (memLevel == null) dart.nullFailed(I[107], 617, 11, "memLevel");
      if (strategy == null) dart.nullFailed(I[107], 618, 11, "strategy");
      if (raw == null) dart.nullFailed(I[107], 620, 12, "raw");
      dart.throw(new core.UnsupportedError.new("_newZLibDeflateFilter"));
    }
    static _makeZLibInflateFilter(windowBits, dictionary, raw) {
      if (windowBits == null) dart.nullFailed(I[107], 626, 11, "windowBits");
      if (raw == null) dart.nullFailed(I[107], 626, 51, "raw");
      dart.throw(new core.UnsupportedError.new("_newZLibInflateFilter"));
    }
  };
  (io.RawZLibFilter[dart.mixinNew] = function() {
  }).prototype = io.RawZLibFilter.prototype;
  dart.addTypeTests(io.RawZLibFilter);
  dart.addTypeCaches(io.RawZLibFilter);
  dart.setLibraryUri(io.RawZLibFilter, I[105]);
  io._BufferSink = class _BufferSink extends convert.ByteConversionSink {
    add(chunk) {
      T$0.ListOfint().as(chunk);
      if (chunk == null) dart.nullFailed(I[108], 472, 22, "chunk");
      this.builder.add(chunk);
    }
    addSlice(chunk, start, end, isLast) {
      if (chunk == null) dart.nullFailed(I[108], 476, 27, "chunk");
      if (start == null) dart.nullFailed(I[108], 476, 38, "start");
      if (end == null) dart.nullFailed(I[108], 476, 49, "end");
      if (isLast == null) dart.nullFailed(I[108], 476, 59, "isLast");
      if (typed_data.Uint8List.is(chunk)) {
        let list = chunk;
        this.builder.add(typed_data.Uint8List.view(list[$buffer], dart.notNull(list[$offsetInBytes]) + dart.notNull(start), dart.notNull(end) - dart.notNull(start)));
      } else {
        this.builder.add(chunk[$sublist](start, end));
      }
    }
    close() {
    }
  };
  (io._BufferSink.new = function() {
    this.builder = _internal.BytesBuilder.new({copy: false});
    io._BufferSink.__proto__.new.call(this);
    ;
  }).prototype = io._BufferSink.prototype;
  dart.addTypeTests(io._BufferSink);
  dart.addTypeCaches(io._BufferSink);
  dart.setMethodSignature(io._BufferSink, () => ({
    __proto__: dart.getMethods(io._BufferSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(io._BufferSink, I[105]);
  dart.setFieldSignature(io._BufferSink, () => ({
    __proto__: dart.getFields(io._BufferSink.__proto__),
    builder: dart.finalFieldType(_internal.BytesBuilder)
  }));
  var _closed = dart.privateName(io, "_closed");
  var _empty = dart.privateName(io, "_empty");
  var _sink$1 = dart.privateName(io, "_sink");
  var _filter$ = dart.privateName(io, "_filter");
  io._FilterSink = class _FilterSink extends convert.ByteConversionSink {
    add(data) {
      T$0.ListOfint().as(data);
      if (data == null) dart.nullFailed(I[108], 520, 22, "data");
      this.addSlice(data, 0, data[$length], false);
    }
    addSlice(data, start, end, isLast) {
      if (data == null) dart.nullFailed(I[108], 524, 27, "data");
      if (start == null) dart.nullFailed(I[108], 524, 37, "start");
      if (end == null) dart.nullFailed(I[108], 524, 48, "end");
      if (isLast == null) dart.nullFailed(I[108], 524, 58, "isLast");
      core.ArgumentError.checkNotNull(core.int, end, "end");
      if (dart.test(this[_closed])) return;
      core.RangeError.checkValidRange(start, end, data[$length]);
      try {
        this[_empty] = false;
        let bufferAndStart = io._ensureFastAndSerializableByteData(data, start, end);
        this[_filter$].process(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
        let out = null;
        while (true) {
          let out = this[_filter$].processed({flush: false});
          if (out == null) break;
          this[_sink$1].add(out);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          this[_closed] = true;
          dart.rethrow(e$);
        } else
          throw e$;
      }
      if (dart.test(isLast)) this.close();
    }
    close() {
      if (dart.test(this[_closed])) return;
      if (dart.test(this[_empty])) this[_filter$].process(C[87] || CT.C87, 0, 0);
      try {
        while (true) {
          let out = this[_filter$].processed({end: true});
          if (out == null) break;
          this[_sink$1].add(out);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          this[_closed] = true;
          dart.throw(e);
        } else
          throw e$;
      }
      this[_closed] = true;
      this[_sink$1].close();
    }
  };
  (io._FilterSink.new = function(_sink, _filter) {
    if (_sink == null) dart.nullFailed(I[108], 518, 20, "_sink");
    if (_filter == null) dart.nullFailed(I[108], 518, 32, "_filter");
    this[_closed] = false;
    this[_empty] = true;
    this[_sink$1] = _sink;
    this[_filter$] = _filter;
    io._FilterSink.__proto__.new.call(this);
    ;
  }).prototype = io._FilterSink.prototype;
  dart.addTypeTests(io._FilterSink);
  dart.addTypeCaches(io._FilterSink);
  dart.setMethodSignature(io._FilterSink, () => ({
    __proto__: dart.getMethods(io._FilterSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addSlice: dart.fnType(dart.void, [core.List$(core.int), core.int, core.int, core.bool]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(io._FilterSink, I[105]);
  dart.setFieldSignature(io._FilterSink, () => ({
    __proto__: dart.getFields(io._FilterSink.__proto__),
    [_filter$]: dart.finalFieldType(io.RawZLibFilter),
    [_sink$1]: dart.finalFieldType(convert.ByteConversionSink),
    [_closed]: dart.fieldType(core.bool),
    [_empty]: dart.fieldType(core.bool)
  }));
  io._ZLibEncoderSink = class _ZLibEncoderSink extends io._FilterSink {};
  (io._ZLibEncoderSink.__ = function(sink, gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
    if (sink == null) dart.nullFailed(I[108], 491, 26, "sink");
    if (gzip == null) dart.nullFailed(I[108], 492, 12, "gzip");
    if (level == null) dart.nullFailed(I[108], 493, 11, "level");
    if (windowBits == null) dart.nullFailed(I[108], 494, 11, "windowBits");
    if (memLevel == null) dart.nullFailed(I[108], 495, 11, "memLevel");
    if (strategy == null) dart.nullFailed(I[108], 496, 11, "strategy");
    if (raw == null) dart.nullFailed(I[108], 498, 12, "raw");
    io._ZLibEncoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibDeflateFilter(gzip, level, windowBits, memLevel, strategy, dictionary, raw));
    ;
  }).prototype = io._ZLibEncoderSink.prototype;
  dart.addTypeTests(io._ZLibEncoderSink);
  dart.addTypeCaches(io._ZLibEncoderSink);
  dart.setLibraryUri(io._ZLibEncoderSink, I[105]);
  io._ZLibDecoderSink = class _ZLibDecoderSink extends io._FilterSink {};
  (io._ZLibDecoderSink.__ = function(sink, windowBits, dictionary, raw) {
    if (sink == null) dart.nullFailed(I[108], 507, 26, "sink");
    if (windowBits == null) dart.nullFailed(I[108], 507, 36, "windowBits");
    if (raw == null) dart.nullFailed(I[108], 507, 76, "raw");
    io._ZLibDecoderSink.__proto__.new.call(this, sink, io.RawZLibFilter._makeZLibInflateFilter(windowBits, dictionary, raw));
    ;
  }).prototype = io._ZLibDecoderSink.prototype;
  dart.addTypeTests(io._ZLibDecoderSink);
  dart.addTypeCaches(io._ZLibDecoderSink);
  dart.setLibraryUri(io._ZLibDecoderSink, I[105]);
  io.Directory = class Directory extends core.Object {
    static new(path) {
      if (path == null) dart.nullFailed(I[109], 112, 28, "path");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return new io._Directory.new(path);
      }
      return overrides.createDirectory(path);
    }
    static fromRawPath(path) {
      if (path == null) dart.nullFailed(I[109], 121, 43, "path");
      return new io._Directory.fromRawPath(path);
    }
    static fromUri(uri) {
      if (uri == null) dart.nullFailed(I[109], 129, 33, "uri");
      return io.Directory.new(uri.toFilePath());
    }
    static get current() {
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io._Directory.current;
      }
      return overrides.getCurrentDirectory();
    }
    static set current(path) {
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        io._Directory.current = path;
        return;
      }
      overrides.setCurrentDirectory(core.String.as(path));
    }
    static get systemTemp() {
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io._Directory.systemTemp;
      }
      return overrides.getSystemTempDirectory();
    }
  };
  (io.Directory[dart.mixinNew] = function() {
  }).prototype = io.Directory.prototype;
  dart.addTypeTests(io.Directory);
  dart.addTypeCaches(io.Directory);
  io.Directory[dart.implements] = () => [io.FileSystemEntity];
  dart.setLibraryUri(io.Directory, I[105]);
  var _path = dart.privateName(io, "_Directory._path");
  var _rawPath = dart.privateName(io, "_Directory._rawPath");
  var _path$ = dart.privateName(io, "_path");
  var _rawPath$ = dart.privateName(io, "_rawPath");
  var _isErrorResponse = dart.privateName(io, "_isErrorResponse");
  var _exceptionOrErrorFromResponse = dart.privateName(io, "_exceptionOrErrorFromResponse");
  var _absolutePath = dart.privateName(io, "_absolutePath");
  var _delete = dart.privateName(io, "_delete");
  var _deleteSync = dart.privateName(io, "_deleteSync");
  io.FileSystemEntity = class FileSystemEntity extends core.Object {
    get uri() {
      return core._Uri.file(this.path);
    }
    resolveSymbolicLinks() {
      return io._File._dispatchWithNamespace(6, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot resolve symbolic links", this.path));
        }
        return T$0.FutureOrOfString().as(response);
      }, T$0.dynamicToFutureOrOfString()));
    }
    resolveSymbolicLinksSync() {
      let result = io.FileSystemEntity._resolveSymbolicLinks(io._Namespace._namespace, this[_rawPath$]);
      io.FileSystemEntity._throwIfError(core.Object.as(result), "Cannot resolve symbolic links", this.path);
      return core.String.as(result);
    }
    stat() {
      return io.FileStat.stat(this.path);
    }
    statSync() {
      return io.FileStat.statSync(this.path);
    }
    delete(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[111], 390, 41, "recursive");
      return this[_delete]({recursive: recursive});
    }
    deleteSync(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[111], 407, 25, "recursive");
      return this[_deleteSync]({recursive: recursive});
    }
    watch(opts) {
      let events = opts && 'events' in opts ? opts.events : 15;
      if (events == null) dart.nullFailed(I[111], 442, 12, "events");
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[111], 442, 47, "recursive");
      let trimmedPath = io.FileSystemEntity._trimTrailingPathSeparators(this.path);
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io._FileSystemWatcher._watch(trimmedPath, events, recursive);
      }
      return overrides.fsWatch(trimmedPath, events, recursive);
    }
    static _identical(path1, path2) {
      if (path1 == null) dart.nullFailed(I[111], 455, 41, "path1");
      if (path2 == null) dart.nullFailed(I[111], 455, 55, "path2");
      return io._File._dispatchWithNamespace(28, [null, path1, path2]).then(core.bool, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Error in FileSystemEntity.identical(" + dart.str(path1) + ", " + dart.str(path2) + ")", ""));
        }
        return T$.FutureOrOfbool().as(response);
      }, T$0.dynamicToFutureOrOfbool()));
    }
    static identical(path1, path2) {
      if (path1 == null) dart.nullFailed(I[111], 478, 40, "path1");
      if (path2 == null) dart.nullFailed(I[111], 478, 54, "path2");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileSystemEntity._identical(path1, path2);
      }
      return overrides.fseIdentical(path1, path2);
    }
    get isAbsolute() {
      return io.FileSystemEntity._isAbsolute(this.path);
    }
    static _isAbsolute(path) {
      if (path == null) dart.nullFailed(I[111], 509, 34, "path");
      if (dart.test(io.Platform.isWindows)) {
        return path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern);
      } else {
        return path[$startsWith]("/");
      }
    }
    get [_absolutePath]() {
      if (dart.test(this.isAbsolute)) return this.path;
      if (dart.test(io.Platform.isWindows)) return io.FileSystemEntity._absoluteWindowsPath(this.path);
      let current = io.Directory.current.path;
      if (current[$endsWith]("/")) {
        return dart.str(current) + dart.str(this.path);
      } else {
        return dart.str(current) + dart.str(io.Platform.pathSeparator) + dart.str(this.path);
      }
    }
    static _windowsDriveLetter(path) {
      if (path == null) dart.nullFailed(I[111], 544, 41, "path");
      if (path[$isEmpty] || !path[$startsWith](":", 1)) return -1;
      let first = (path[$codeUnitAt](0) & ~32 >>> 0) >>> 0;
      if (first >= 65 && first <= 91) return first;
      return -1;
    }
    static _absoluteWindowsPath(path) {
      if (path == null) dart.nullFailed(I[111], 552, 45, "path");
      if (!dart.test(io.Platform.isWindows)) dart.assertFailed(null, I[111], 553, 12, "Platform.isWindows");
      if (!!dart.test(io.FileSystemEntity._isAbsolute(path))) dart.assertFailed(null, I[111], 554, 12, "!_isAbsolute(path)");
      let current = io.Directory.current.path;
      if (path[$startsWith]("\\")) {
        if (!!path[$startsWith]("\\", 1)) dart.assertFailed(null, I[111], 559, 14, "!path.startsWith(r'\\', 1)");
        let currentDrive = io.FileSystemEntity._windowsDriveLetter(current);
        if (dart.notNull(currentDrive) >= 0) {
          return current[$_get](0) + ":" + dart.str(path);
        }
        if (current[$startsWith]("\\\\")) {
          let serverEnd = current[$indexOf]("\\", 2);
          if (serverEnd >= 0) {
            let shareEnd = current[$indexOf]("\\", serverEnd + 1);
            if (shareEnd < 0) shareEnd = current.length;
            return current[$substring](0, shareEnd) + dart.str(path);
          }
        }
        return path;
      }
      let entityDrive = io.FileSystemEntity._windowsDriveLetter(path);
      if (dart.notNull(entityDrive) >= 0) {
        if (entityDrive != io.FileSystemEntity._windowsDriveLetter(current)) {
          return path[$_get](0) + ":\\" + dart.str(path);
        }
        path = path[$substring](2);
        if (!!path[$startsWith]("\\\\")) dart.assertFailed(null, I[111], 596, 14, "!path.startsWith(r'\\\\')");
      }
      if (current[$endsWith]("\\") || current[$endsWith]("/")) {
        return dart.str(current) + dart.str(path);
      }
      return dart.str(current) + "\\" + dart.str(path);
    }
    static _identicalSync(path1, path2) {
      if (path1 == null) dart.nullFailed(I[111], 604, 37, "path1");
      if (path2 == null) dart.nullFailed(I[111], 604, 51, "path2");
      let result = io.FileSystemEntity._identicalNative(io._Namespace._namespace, path1, path2);
      io.FileSystemEntity._throwIfError(core.Object.as(result), "Error in FileSystemEntity.identicalSync");
      return core.bool.as(result);
    }
    static identicalSync(path1, path2) {
      if (path1 == null) dart.nullFailed(I[111], 620, 36, "path1");
      if (path2 == null) dart.nullFailed(I[111], 620, 50, "path2");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileSystemEntity._identicalSync(path1, path2);
      }
      return overrides.fseIdenticalSync(path1, path2);
    }
    static get isWatchSupported() {
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io._FileSystemWatcher.isSupported;
      }
      return overrides.fsWatchIsSupported();
    }
    static _toUtf8Array(s) {
      if (s == null) dart.nullFailed(I[111], 641, 40, "s");
      return io.FileSystemEntity._toNullTerminatedUtf8Array(convert.utf8.encoder.convert(s));
    }
    static _toNullTerminatedUtf8Array(l) {
      if (l == null) dart.nullFailed(I[111], 644, 57, "l");
      if (dart.test(l[$isNotEmpty]) && l[$last] !== 0) {
        let tmp = _native_typed_data.NativeUint8List.new(dart.notNull(l[$length]) + 1);
        tmp[$setRange](0, l[$length], l);
        return tmp;
      } else {
        return l;
      }
    }
    static _toStringFromUtf8Array(l) {
      if (l == null) dart.nullFailed(I[111], 654, 50, "l");
      let nonNullTerminated = l;
      if (l[$last] === 0) {
        nonNullTerminated = typed_data.Uint8List.view(l[$buffer], l[$offsetInBytes], dart.notNull(l[$length]) - 1);
      }
      return convert.utf8.decode(nonNullTerminated, {allowMalformed: true});
    }
    static type(path, opts) {
      if (path == null) dart.nullFailed(I[111], 667, 51, "path");
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      if (followLinks == null) dart.nullFailed(I[111], 668, 13, "followLinks");
      return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), followLinks);
    }
    static typeSync(path, opts) {
      if (path == null) dart.nullFailed(I[111], 679, 47, "path");
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      if (followLinks == null) dart.nullFailed(I[111], 679, 59, "followLinks");
      return io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), followLinks);
    }
    static isLink(path) {
      if (path == null) dart.nullFailed(I[111], 687, 37, "path");
      return io.FileSystemEntity._isLinkRaw(io.FileSystemEntity._toUtf8Array(path));
    }
    static _isLinkRaw(rawPath) {
      if (rawPath == null) dart.nullFailed(I[111], 689, 44, "rawPath");
      return io.FileSystemEntity._getType(rawPath, false).then(core.bool, dart.fn(type => {
        if (type == null) dart.nullFailed(I[111], 690, 14, "type");
        return dart.equals(type, io.FileSystemEntityType.link);
      }, T$0.FileSystemEntityTypeTobool()));
    }
    static isFile(path) {
      if (path == null) dart.nullFailed(I[111], 695, 37, "path");
      return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => {
        if (type == null) dart.nullFailed(I[111], 696, 14, "type");
        return dart.equals(type, io.FileSystemEntityType.file);
      }, T$0.FileSystemEntityTypeTobool()));
    }
    static isDirectory(path) {
      if (path == null) dart.nullFailed(I[111], 701, 42, "path");
      return io.FileSystemEntity._getType(io.FileSystemEntity._toUtf8Array(path), true).then(core.bool, dart.fn(type => {
        if (type == null) dart.nullFailed(I[111], 703, 18, "type");
        return dart.equals(type, io.FileSystemEntityType.directory);
      }, T$0.FileSystemEntityTypeTobool()));
    }
    static isLinkSync(path) {
      if (path == null) dart.nullFailed(I[111], 709, 33, "path");
      return io.FileSystemEntity._isLinkRawSync(io.FileSystemEntity._toUtf8Array(path));
    }
    static _isLinkRawSync(rawPath) {
      return dart.equals(io.FileSystemEntity._getTypeSync(typed_data.Uint8List.as(rawPath), false), io.FileSystemEntityType.link);
    }
    static isFileSync(path) {
      if (path == null) dart.nullFailed(I[111], 718, 33, "path");
      return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.file);
    }
    static isDirectorySync(path) {
      if (path == null) dart.nullFailed(I[111], 725, 38, "path");
      return dart.equals(io.FileSystemEntity._getTypeSync(io.FileSystemEntity._toUtf8Array(path), true), io.FileSystemEntityType.directory);
    }
    static _getTypeNative(namespace, rawPath, followLinks) {
      if (namespace == null) dart.nullFailed(I[107], 93, 18, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 93, 39, "rawPath");
      if (followLinks == null) dart.nullFailed(I[107], 93, 53, "followLinks");
      dart.throw(new core.UnsupportedError.new("FileSystemEntity._getType"));
    }
    static _identicalNative(namespace, path1, path2) {
      if (namespace == null) dart.nullFailed(I[107], 98, 38, "namespace");
      if (path1 == null) dart.nullFailed(I[107], 98, 56, "path1");
      if (path2 == null) dart.nullFailed(I[107], 98, 70, "path2");
      dart.throw(new core.UnsupportedError.new("FileSystemEntity._identical"));
    }
    static _resolveSymbolicLinks(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 103, 43, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 103, 64, "rawPath");
      dart.throw(new core.UnsupportedError.new("FileSystemEntity._resolveSymbolicLinks"));
    }
    static parentOf(path) {
      if (path == null) dart.nullFailed(I[111], 749, 33, "path");
      let rootEnd = -1;
      if (dart.test(io.Platform.isWindows)) {
        if (path[$startsWith](io.FileSystemEntity._absoluteWindowsPathPattern)) {
          rootEnd = path[$indexOf](core.RegExp.new("[/\\\\]"), 2);
          if (rootEnd === -1) return path;
        } else if (path[$startsWith]("\\") || path[$startsWith]("/")) {
          rootEnd = 0;
        }
      } else if (path[$startsWith]("/")) {
        rootEnd = 0;
      }
      let pos = path[$lastIndexOf](io.FileSystemEntity._parentRegExp);
      if (pos > rootEnd) {
        return path[$substring](0, pos + 1);
      } else if (rootEnd > -1) {
        return path[$substring](0, rootEnd + 1);
      } else {
        return ".";
      }
    }
    get parent() {
      return io.Directory.new(io.FileSystemEntity.parentOf(this.path));
    }
    static _getTypeSyncHelper(rawPath, followLinks) {
      if (rawPath == null) dart.nullFailed(I[111], 778, 17, "rawPath");
      if (followLinks == null) dart.nullFailed(I[111], 778, 31, "followLinks");
      let result = io.FileSystemEntity._getTypeNative(io._Namespace._namespace, rawPath, followLinks);
      io.FileSystemEntity._throwIfError(core.Object.as(result), "Error getting type of FileSystemEntity");
      return io.FileSystemEntityType._lookup(core.int.as(result));
    }
    static _getTypeSync(rawPath, followLinks) {
      if (rawPath == null) dart.nullFailed(I[111], 785, 17, "rawPath");
      if (followLinks == null) dart.nullFailed(I[111], 785, 31, "followLinks");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileSystemEntity._getTypeSyncHelper(rawPath, followLinks);
      }
      return overrides.fseGetTypeSync(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
    }
    static _getTypeRequest(rawPath, followLinks) {
      if (rawPath == null) dart.nullFailed(I[111], 795, 17, "rawPath");
      if (followLinks == null) dart.nullFailed(I[111], 795, 31, "followLinks");
      return io._File._dispatchWithNamespace(27, [null, rawPath, followLinks]).then(io.FileSystemEntityType, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Error getting type", convert.utf8.decode(rawPath, {allowMalformed: true})));
        }
        return io.FileSystemEntityType._lookup(core.int.as(response));
      }, T$0.dynamicToFileSystemEntityType()));
    }
    static _getType(rawPath, followLinks) {
      if (rawPath == null) dart.nullFailed(I[111], 807, 17, "rawPath");
      if (followLinks == null) dart.nullFailed(I[111], 807, 31, "followLinks");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileSystemEntity._getTypeRequest(rawPath, followLinks);
      }
      return overrides.fseGetType(convert.utf8.decode(rawPath, {allowMalformed: true}), followLinks);
    }
    static _throwIfError(result, msg, path = null) {
      if (result == null) dart.nullFailed(I[111], 816, 31, "result");
      if (msg == null) dart.nullFailed(I[111], 816, 46, "msg");
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new(msg, path, result));
      } else if (core.ArgumentError.is(result)) {
        dart.throw(result);
      }
    }
    static _trimTrailingPathSeparators(path) {
      if (path == null) dart.nullFailed(I[111], 825, 52, "path");
      core.ArgumentError.checkNotNull(core.String, path, "path");
      if (dart.test(io.Platform.isWindows)) {
        while (path.length > 1 && (path[$endsWith](io.Platform.pathSeparator) || path[$endsWith]("/"))) {
          path = path[$substring](0, path.length - 1);
        }
      } else {
        while (path.length > 1 && path[$endsWith](io.Platform.pathSeparator)) {
          path = path[$substring](0, path.length - 1);
        }
      }
      return path;
    }
    static _ensureTrailingPathSeparators(path) {
      if (path == null) dart.nullFailed(I[111], 842, 54, "path");
      if (path[$isEmpty]) path = ".";
      if (dart.test(io.Platform.isWindows)) {
        while (!path[$endsWith](io.Platform.pathSeparator) && !path[$endsWith]("/")) {
          path = dart.str(path) + dart.str(io.Platform.pathSeparator);
        }
      } else {
        while (!path[$endsWith](io.Platform.pathSeparator)) {
          path = dart.str(path) + dart.str(io.Platform.pathSeparator);
        }
      }
      return path;
    }
  };
  (io.FileSystemEntity.new = function() {
    ;
  }).prototype = io.FileSystemEntity.prototype;
  dart.addTypeTests(io.FileSystemEntity);
  dart.addTypeCaches(io.FileSystemEntity);
  dart.setMethodSignature(io.FileSystemEntity, () => ({
    __proto__: dart.getMethods(io.FileSystemEntity.__proto__),
    resolveSymbolicLinks: dart.fnType(async.Future$(core.String), []),
    resolveSymbolicLinksSync: dart.fnType(core.String, []),
    stat: dart.fnType(async.Future$(io.FileStat), []),
    statSync: dart.fnType(io.FileStat, []),
    delete: dart.fnType(async.Future$(io.FileSystemEntity), [], {recursive: core.bool}, {}),
    deleteSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    watch: dart.fnType(async.Stream$(io.FileSystemEvent), [], {events: core.int, recursive: core.bool}, {})
  }));
  dart.setGetterSignature(io.FileSystemEntity, () => ({
    __proto__: dart.getGetters(io.FileSystemEntity.__proto__),
    uri: core.Uri,
    isAbsolute: core.bool,
    [_absolutePath]: core.String,
    parent: io.Directory
  }));
  dart.setLibraryUri(io.FileSystemEntity, I[105]);
  dart.defineLazy(io.FileSystemEntity, {
    /*io.FileSystemEntity._backslashChar*/get _backslashChar() {
      return 92;
    },
    /*io.FileSystemEntity._slashChar*/get _slashChar() {
      return 47;
    },
    /*io.FileSystemEntity._colonChar*/get _colonChar() {
      return 58;
    },
    /*io.FileSystemEntity._absoluteWindowsPathPattern*/get _absoluteWindowsPathPattern() {
      return core.RegExp.new("^(?:\\\\\\\\|[a-zA-Z]:[/\\\\])");
    },
    /*io.FileSystemEntity._parentRegExp*/get _parentRegExp() {
      return dart.test(io.Platform.isWindows) ? core.RegExp.new("[^/\\\\][/\\\\]+[^/\\\\]") : core.RegExp.new("[^/]/+[^/]");
    }
  }, false);
  io._Directory = class _Directory extends io.FileSystemEntity {
    get [_path$]() {
      return this[_path];
    }
    set [_path$](value) {
      super[_path$] = value;
    }
    get [_rawPath$]() {
      return this[_rawPath];
    }
    set [_rawPath$](value) {
      super[_rawPath$] = value;
    }
    get path() {
      return this[_path$];
    }
    static _current(namespace) {
      if (namespace == null) dart.nullFailed(I[107], 14, 30, "namespace");
      dart.throw(new core.UnsupportedError.new("Directory._current"));
    }
    static _setCurrent(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 19, 33, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 19, 54, "rawPath");
      dart.throw(new core.UnsupportedError.new("Directory_SetCurrent"));
    }
    static _createTemp(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 24, 33, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 24, 54, "rawPath");
      dart.throw(new core.UnsupportedError.new("Directory._createTemp"));
    }
    static _systemTemp(namespace) {
      if (namespace == null) dart.nullFailed(I[107], 29, 40, "namespace");
      dart.throw(new core.UnsupportedError.new("Directory._systemTemp"));
    }
    static _exists(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 34, 29, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 34, 50, "rawPath");
      dart.throw(new core.UnsupportedError.new("Directory._exists"));
    }
    static _create(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 39, 29, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 39, 50, "rawPath");
      dart.throw(new core.UnsupportedError.new("Directory._create"));
    }
    static _deleteNative(namespace, rawPath, recursive) {
      if (namespace == null) dart.nullFailed(I[107], 45, 18, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 45, 39, "rawPath");
      if (recursive == null) dart.nullFailed(I[107], 45, 53, "recursive");
      dart.throw(new core.UnsupportedError.new("Directory._deleteNative"));
    }
    static _rename(namespace, rawPath, newPath) {
      if (namespace == null) dart.nullFailed(I[107], 50, 29, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 50, 50, "rawPath");
      if (newPath == null) dart.nullFailed(I[107], 50, 66, "newPath");
      dart.throw(new core.UnsupportedError.new("Directory._rename"));
    }
    static _fillWithDirectoryListing(namespace, list, rawPath, recursive, followLinks) {
      if (namespace == null) dart.nullFailed(I[107], 56, 18, "namespace");
      if (list == null) dart.nullFailed(I[107], 57, 30, "list");
      if (rawPath == null) dart.nullFailed(I[107], 58, 17, "rawPath");
      if (recursive == null) dart.nullFailed(I[107], 59, 12, "recursive");
      if (followLinks == null) dart.nullFailed(I[107], 60, 12, "followLinks");
      dart.throw(new core.UnsupportedError.new("Directory._fillWithDirectoryListing"));
    }
    static get current() {
      let result = io._Directory._current(io._Namespace._namespace);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Getting current working directory failed", "", result));
      }
      return new io._Directory.new(core.String.as(result));
    }
    static set current(path) {
      let _rawPath = null;
      let _rawPath$35isSet = false;
      function _rawPath$35get() {
        return _rawPath$35isSet ? _rawPath : dart.throw(new _internal.LateError.localNI("_rawPath"));
      }
      dart.fn(_rawPath$35get, T$0.VoidToUint8List());
      function _rawPath$35set(t185) {
        if (t185 == null) dart.nullFailed(I[110], 49, 20, "null");
        _rawPath$35isSet = true;
        return _rawPath = t185;
      }
      dart.fn(_rawPath$35set, T$0.Uint8ListTodynamic());
      if (io._Directory.is(path)) {
        _rawPath$35set(path[_rawPath$]);
      } else if (io.Directory.is(path)) {
        _rawPath$35set(io.FileSystemEntity._toUtf8Array(path.path));
      } else if (typeof path == 'string') {
        _rawPath$35set(io.FileSystemEntity._toUtf8Array(path));
      } else {
        dart.throw(new core.ArgumentError.new(dart.str(core.Error.safeToString(path)) + " is not a String or" + " Directory"));
      }
      if (!dart.test(io._EmbedderConfig._mayChdir)) {
        dart.throw(new core.UnsupportedError.new("This embedder disallows setting Directory.current"));
      }
      let result = io._Directory._setCurrent(io._Namespace._namespace, _rawPath$35get());
      if (core.ArgumentError.is(result)) dart.throw(result);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Setting current working directory failed", dart.toString(path), result));
      }
    }
    get uri() {
      return core._Uri.directory(this.path);
    }
    exists() {
      return io._File._dispatchWithNamespace(36, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Exists failed"));
        }
        return dart.equals(response, 1);
      }, T$0.dynamicTobool()));
    }
    existsSync() {
      let result = io._Directory._exists(io._Namespace._namespace, this[_rawPath$]);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Exists failed", this.path, result));
      }
      return dart.equals(result, 1);
    }
    get absolute() {
      return io.Directory.new(this[_absolutePath]);
    }
    create(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 101, 34, "recursive");
      if (dart.test(recursive)) {
        return this.exists().then(io.Directory, dart.fn(exists => {
          if (exists == null) dart.nullFailed(I[110], 103, 29, "exists");
          if (dart.test(exists)) return this;
          if (this.path != this.parent.path) {
            return this.parent.create({recursive: true}).then(io.Directory, dart.fn(_ => {
              if (_ == null) dart.nullFailed(I[110], 106, 55, "_");
              return this.create();
            }, T$0.DirectoryToFutureOfDirectory()));
          } else {
            return this.create();
          }
        }, T$0.boolToFutureOrOfDirectory()));
      } else {
        return io._File._dispatchWithNamespace(34, [null, this[_rawPath$]]).then(io.Directory, dart.fn(response => {
          if (dart.test(this[_isErrorResponse](response))) {
            dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation failed"));
          }
          return this;
        }, T$0.dynamicTo_Directory()));
      }
    }
    createSync(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 124, 25, "recursive");
      if (dart.test(recursive)) {
        if (dart.test(this.existsSync())) return;
        if (this.path != this.parent.path) {
          this.parent.createSync({recursive: true});
        }
      }
      let result = io._Directory._create(io._Namespace._namespace, this[_rawPath$]);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Creation failed", this.path, result));
      }
    }
    static get systemTemp() {
      return io.Directory.new(io._Directory._systemTemp(io._Namespace._namespace));
    }
    createTemp(prefix = null) {
      prefix == null ? prefix = "" : null;
      if (this.path === "") {
        dart.throw(new core.ArgumentError.new("Directory.createTemp called with an empty path. " + "To use the system temp directory, use Directory.systemTemp"));
      }
      let fullPrefix = null;
      if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
        fullPrefix = dart.str(this.path) + dart.str(prefix);
      } else {
        fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
      }
      return io._File._dispatchWithNamespace(37, [null, io.FileSystemEntity._toUtf8Array(fullPrefix)]).then(io.Directory, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Creation of temporary directory failed"));
        }
        return io.Directory.new(core.String.as(response));
      }, T$0.dynamicToDirectory()));
    }
    createTempSync(prefix = null) {
      prefix == null ? prefix = "" : null;
      if (this.path === "") {
        dart.throw(new core.ArgumentError.new("Directory.createTemp called with an empty path. " + "To use the system temp directory, use Directory.systemTemp"));
      }
      let fullPrefix = null;
      if (this.path[$endsWith]("/") || dart.test(io.Platform.isWindows) && this.path[$endsWith]("\\")) {
        fullPrefix = dart.str(this.path) + dart.str(prefix);
      } else {
        fullPrefix = dart.str(this.path) + dart.str(io.Platform.pathSeparator) + dart.str(prefix);
      }
      let result = io._Directory._createTemp(io._Namespace._namespace, io.FileSystemEntity._toUtf8Array(fullPrefix));
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Creation of temporary directory failed", fullPrefix, result));
      }
      return io.Directory.new(core.String.as(result));
    }
    [_delete](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 187, 35, "recursive");
      return io._File._dispatchWithNamespace(35, [null, this[_rawPath$], recursive]).then(io.Directory, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Deletion failed"));
        }
        return this;
      }, T$0.dynamicTo_Directory()));
    }
    [_deleteSync](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 198, 26, "recursive");
      let result = io._Directory._deleteNative(io._Namespace._namespace, this[_rawPath$], recursive);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Deletion failed", this.path, result));
      }
    }
    rename(newPath) {
      if (newPath == null) dart.nullFailed(I[110], 205, 35, "newPath");
      return io._File._dispatchWithNamespace(41, [null, this[_rawPath$], newPath]).then(io.Directory, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionOrErrorFromResponse](response, "Rename failed"));
        }
        return io.Directory.new(newPath);
      }, T$0.dynamicToDirectory()));
    }
    renameSync(newPath) {
      if (newPath == null) dart.nullFailed(I[110], 215, 31, "newPath");
      core.ArgumentError.checkNotNull(core.String, newPath, "newPath");
      let result = io._Directory._rename(io._Namespace._namespace, this[_rawPath$], newPath);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Rename failed", this.path, result));
      }
      return io.Directory.new(newPath);
    }
    list(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 226, 13, "recursive");
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      if (followLinks == null) dart.nullFailed(I[110], 226, 37, "followLinks");
      return new io._AsyncDirectoryLister.new(io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks).stream;
    }
    listSync(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[110], 238, 13, "recursive");
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      if (followLinks == null) dart.nullFailed(I[110], 238, 37, "followLinks");
      core.ArgumentError.checkNotNull(core.bool, recursive, "recursive");
      core.ArgumentError.checkNotNull(core.bool, followLinks, "followLinks");
      let result = T$0.JSArrayOfFileSystemEntity().of([]);
      io._Directory._fillWithDirectoryListing(io._Namespace._namespace, result, io.FileSystemEntity._toUtf8Array(io.FileSystemEntity._ensureTrailingPathSeparators(this.path)), recursive, followLinks);
      return result;
    }
    toString() {
      return "Directory: '" + dart.str(this.path) + "'";
    }
    [_isErrorResponse](response) {
      return core.List.is(response) && !dart.equals(response[$_get](0), 0);
    }
    [_exceptionOrErrorFromResponse](response, message) {
      if (message == null) dart.nullFailed(I[110], 260, 50, "message");
      if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, I[110], 261, 12, "_isErrorResponse(response)");
      switch (dart.dsend(response, '_get', [0])) {
        case 1:
        {
          return new core.ArgumentError.new();
        }
        case 2:
        {
          let err = new io.OSError.new(core.String.as(dart.dsend(response, '_get', [2])), core.int.as(dart.dsend(response, '_get', [1])));
          return new io.FileSystemException.new(message, this.path, err);
        }
        default:
        {
          return core.Exception.new("Unknown error");
        }
      }
    }
    static _checkNotNull(T, t, name) {
      if (name == null) dart.nullFailed(I[110], 275, 41, "name");
      core.ArgumentError.checkNotNull(T, t, name);
      return t;
    }
  };
  (io._Directory.new = function(path) {
    if (path == null) dart.nullFailed(I[110], 11, 21, "path");
    this[_path] = io._Directory._checkNotNull(core.String, path, "path");
    this[_rawPath] = io.FileSystemEntity._toUtf8Array(path);
    ;
  }).prototype = io._Directory.prototype;
  (io._Directory.fromRawPath = function(rawPath) {
    if (rawPath == null) dart.nullFailed(I[110], 15, 36, "rawPath");
    this[_rawPath] = io.FileSystemEntity._toNullTerminatedUtf8Array(io._Directory._checkNotNull(typed_data.Uint8List, rawPath, "rawPath"));
    this[_path] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
    ;
  }).prototype = io._Directory.prototype;
  dart.addTypeTests(io._Directory);
  dart.addTypeCaches(io._Directory);
  io._Directory[dart.implements] = () => [io.Directory];
  dart.setMethodSignature(io._Directory, () => ({
    __proto__: dart.getMethods(io._Directory.__proto__),
    exists: dart.fnType(async.Future$(core.bool), []),
    existsSync: dart.fnType(core.bool, []),
    create: dart.fnType(async.Future$(io.Directory), [], {recursive: core.bool}, {}),
    createSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    createTemp: dart.fnType(async.Future$(io.Directory), [], [dart.nullable(core.String)]),
    createTempSync: dart.fnType(io.Directory, [], [dart.nullable(core.String)]),
    [_delete]: dart.fnType(async.Future$(io.Directory), [], {recursive: core.bool}, {}),
    [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    rename: dart.fnType(async.Future$(io.Directory), [core.String]),
    renameSync: dart.fnType(io.Directory, [core.String]),
    list: dart.fnType(async.Stream$(io.FileSystemEntity), [], {followLinks: core.bool, recursive: core.bool}, {}),
    listSync: dart.fnType(core.List$(io.FileSystemEntity), [], {followLinks: core.bool, recursive: core.bool}, {}),
    [_isErrorResponse]: dart.fnType(core.bool, [dart.dynamic]),
    [_exceptionOrErrorFromResponse]: dart.fnType(dart.dynamic, [dart.dynamic, core.String])
  }));
  dart.setGetterSignature(io._Directory, () => ({
    __proto__: dart.getGetters(io._Directory.__proto__),
    path: core.String,
    absolute: io.Directory
  }));
  dart.setLibraryUri(io._Directory, I[105]);
  dart.setFieldSignature(io._Directory, () => ({
    __proto__: dart.getFields(io._Directory.__proto__),
    [_path$]: dart.finalFieldType(core.String),
    [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineExtensionMethods(io._Directory, ['toString']);
  io._AsyncDirectoryListerOps = class _AsyncDirectoryListerOps extends core.Object {
    static new(pointer) {
      if (pointer == null) dart.nullFailed(I[107], 68, 40, "pointer");
      dart.throw(new core.UnsupportedError.new("Directory._list"));
    }
  };
  (io._AsyncDirectoryListerOps[dart.mixinNew] = function() {
  }).prototype = io._AsyncDirectoryListerOps.prototype;
  dart.addTypeTests(io._AsyncDirectoryListerOps);
  dart.addTypeCaches(io._AsyncDirectoryListerOps);
  dart.setLibraryUri(io._AsyncDirectoryListerOps, I[105]);
  var _ops = dart.privateName(io, "_ops");
  var _pointer = dart.privateName(io, "_pointer");
  var _cleanup = dart.privateName(io, "_cleanup");
  io._AsyncDirectoryLister = class _AsyncDirectoryLister extends core.Object {
    [_pointer]() {
      let t187;
      t187 = this[_ops];
      return t187 == null ? null : t187.getPointer();
    }
    get stream() {
      return this.controller.stream;
    }
    onListen() {
      io._File._dispatchWithNamespace(38, [null, this.rawPath, this.recursive, this.followLinks]).then(core.Null, dart.fn(response => {
        if (core.int.is(response)) {
          this[_ops] = io._AsyncDirectoryListerOps.new(response);
          this.next();
        } else if (core.Error.is(response)) {
          this.controller.addError(response, response[$stackTrace]);
          this.close();
        } else {
          this.error(response);
          this.close();
        }
      }, T$.dynamicToNull()));
    }
    onResume() {
      if (!dart.test(this.nextRunning)) {
        this.next();
      }
    }
    onCancel() {
      this.canceled = true;
      if (!dart.test(this.nextRunning)) {
        this.close();
      }
      return this.closeCompleter.future;
    }
    next() {
      if (dart.test(this.canceled)) {
        this.close();
        return;
      }
      if (dart.test(this.controller.isPaused) || dart.test(this.nextRunning)) {
        return;
      }
      let pointer = this[_pointer]();
      if (pointer == null) {
        return;
      }
      this.nextRunning = true;
      io._IOService._dispatch(39, [pointer]).then(core.Null, dart.fn(result => {
        let t187;
        this.nextRunning = false;
        if (core.List.is(result)) {
          this.next();
          if (!(result[$length][$modulo](2) === 0)) dart.assertFailed(null, I[110], 378, 16, "result.length % 2 == 0");
          for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
            if (!(i[$modulo](2) === 0)) dart.assertFailed(null, I[110], 380, 18, "i % 2 == 0");
            switch (result[$_get]((t187 = i, i = t187 + 1, t187))) {
              case 0:
              {
                this.controller.add(io.File.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
                break;
              }
              case 1:
              {
                this.controller.add(io.Directory.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
                break;
              }
              case 2:
              {
                this.controller.add(io.Link.fromRawPath(typed_data.Uint8List.as(result[$_get](i))));
                break;
              }
              case 3:
              {
                this.error(result[$_get](i));
                break;
              }
              case 4:
              {
                this.canceled = true;
                return;
              }
            }
          }
        } else {
          this.controller.addError(new io.FileSystemException.new("Internal error"));
        }
      }, T$.dynamicToNull()));
    }
    [_cleanup]() {
      this.controller.close();
      this.closeCompleter.complete();
      this[_ops] = null;
    }
    close() {
      if (dart.test(this.closed)) {
        return;
      }
      if (dart.test(this.nextRunning)) {
        return;
      }
      this.closed = true;
      let pointer = this[_pointer]();
      if (pointer == null) {
        this[_cleanup]();
      } else {
        io._IOService._dispatch(40, [pointer]).whenComplete(dart.bind(this, _cleanup));
      }
    }
    error(message) {
      let errorType = dart.dsend(dart.dsend(message, '_get', [2]), '_get', [0]);
      if (dart.equals(errorType, 1)) {
        this.controller.addError(new core.ArgumentError.new());
      } else if (dart.equals(errorType, 2)) {
        let responseErrorInfo = dart.dsend(message, '_get', [2]);
        let err = new io.OSError.new(core.String.as(dart.dsend(responseErrorInfo, '_get', [2])), core.int.as(dart.dsend(responseErrorInfo, '_get', [1])));
        let errorPath = dart.dsend(message, '_get', [1]);
        if (errorPath == null) {
          errorPath = convert.utf8.decode(this.rawPath, {allowMalformed: true});
        } else if (typed_data.Uint8List.is(errorPath)) {
          errorPath = convert.utf8.decode(T$0.ListOfint().as(dart.dsend(message, '_get', [1])), {allowMalformed: true});
        }
        this.controller.addError(new io.FileSystemException.new("Directory listing failed", T$.StringN().as(errorPath), err));
      } else {
        this.controller.addError(new io.FileSystemException.new("Internal error"));
      }
    }
  };
  (io._AsyncDirectoryLister.new = function(rawPath, recursive, followLinks) {
    let t187;
    if (rawPath == null) dart.nullFailed(I[110], 310, 30, "rawPath");
    if (recursive == null) dart.nullFailed(I[110], 310, 44, "recursive");
    if (followLinks == null) dart.nullFailed(I[110], 310, 60, "followLinks");
    this.controller = T$0.StreamControllerOfFileSystemEntity().new({sync: true});
    this.canceled = false;
    this.nextRunning = false;
    this.closed = false;
    this[_ops] = null;
    this.closeCompleter = async.Completer.new();
    this.rawPath = rawPath;
    this.recursive = recursive;
    this.followLinks = followLinks;
    t187 = this.controller;
    (() => {
      t187.onListen = dart.bind(this, 'onListen');
      t187.onResume = dart.bind(this, 'onResume');
      t187.onCancel = dart.bind(this, 'onCancel');
      return t187;
    })();
  }).prototype = io._AsyncDirectoryLister.prototype;
  dart.addTypeTests(io._AsyncDirectoryLister);
  dart.addTypeCaches(io._AsyncDirectoryLister);
  dart.setMethodSignature(io._AsyncDirectoryLister, () => ({
    __proto__: dart.getMethods(io._AsyncDirectoryLister.__proto__),
    [_pointer]: dart.fnType(dart.nullable(core.int), []),
    onListen: dart.fnType(dart.void, []),
    onResume: dart.fnType(dart.void, []),
    onCancel: dart.fnType(async.Future, []),
    next: dart.fnType(dart.void, []),
    [_cleanup]: dart.fnType(dart.void, []),
    close: dart.fnType(dart.void, []),
    error: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setGetterSignature(io._AsyncDirectoryLister, () => ({
    __proto__: dart.getGetters(io._AsyncDirectoryLister.__proto__),
    stream: async.Stream$(io.FileSystemEntity)
  }));
  dart.setLibraryUri(io._AsyncDirectoryLister, I[105]);
  dart.setFieldSignature(io._AsyncDirectoryLister, () => ({
    __proto__: dart.getFields(io._AsyncDirectoryLister.__proto__),
    rawPath: dart.finalFieldType(typed_data.Uint8List),
    recursive: dart.finalFieldType(core.bool),
    followLinks: dart.finalFieldType(core.bool),
    controller: dart.finalFieldType(async.StreamController$(io.FileSystemEntity)),
    canceled: dart.fieldType(core.bool),
    nextRunning: dart.fieldType(core.bool),
    closed: dart.fieldType(core.bool),
    [_ops]: dart.fieldType(dart.nullable(io._AsyncDirectoryListerOps)),
    closeCompleter: dart.fieldType(async.Completer)
  }));
  dart.defineLazy(io._AsyncDirectoryLister, {
    /*io._AsyncDirectoryLister.listFile*/get listFile() {
      return 0;
    },
    /*io._AsyncDirectoryLister.listDirectory*/get listDirectory() {
      return 1;
    },
    /*io._AsyncDirectoryLister.listLink*/get listLink() {
      return 2;
    },
    /*io._AsyncDirectoryLister.listError*/get listError() {
      return 3;
    },
    /*io._AsyncDirectoryLister.listDone*/get listDone() {
      return 4;
    },
    /*io._AsyncDirectoryLister.responseType*/get responseType() {
      return 0;
    },
    /*io._AsyncDirectoryLister.responsePath*/get responsePath() {
      return 1;
    },
    /*io._AsyncDirectoryLister.responseComplete*/get responseComplete() {
      return 1;
    },
    /*io._AsyncDirectoryLister.responseError*/get responseError() {
      return 2;
    }
  }, false);
  io._EmbedderConfig = class _EmbedderConfig extends core.Object {
    static _setDomainPolicies(domainNetworkPolicyJson) {
      if (domainNetworkPolicyJson == null) dart.nullFailed(I[112], 44, 41, "domainNetworkPolicyJson");
      io._domainPolicies = io._constructDomainPolicies(domainNetworkPolicyJson);
    }
  };
  (io._EmbedderConfig.new = function() {
    ;
  }).prototype = io._EmbedderConfig.prototype;
  dart.addTypeTests(io._EmbedderConfig);
  dart.addTypeCaches(io._EmbedderConfig);
  dart.setLibraryUri(io._EmbedderConfig, I[105]);
  dart.defineLazy(io._EmbedderConfig, {
    /*io._EmbedderConfig._mayChdir*/get _mayChdir() {
      return true;
    },
    set _mayChdir(_) {},
    /*io._EmbedderConfig._mayExit*/get _mayExit() {
      return true;
    },
    set _mayExit(_) {},
    /*io._EmbedderConfig._maySetEchoMode*/get _maySetEchoMode() {
      return true;
    },
    set _maySetEchoMode(_) {},
    /*io._EmbedderConfig._maySetLineMode*/get _maySetLineMode() {
      return true;
    },
    set _maySetLineMode(_) {},
    /*io._EmbedderConfig._maySleep*/get _maySleep() {
      return true;
    },
    set _maySleep(_) {},
    /*io._EmbedderConfig._mayInsecurelyConnectToAllDomains*/get _mayInsecurelyConnectToAllDomains() {
      return true;
    },
    set _mayInsecurelyConnectToAllDomains(_) {}
  }, false);
  io._EventHandler = class _EventHandler extends core.Object {
    static _sendData(sender, sendPort, data) {
      if (sendPort == null) dart.nullFailed(I[107], 76, 50, "sendPort");
      if (data == null) dart.nullFailed(I[107], 76, 64, "data");
      dart.throw(new core.UnsupportedError.new("EventHandler._sendData"));
    }
  };
  (io._EventHandler.new = function() {
    ;
  }).prototype = io._EventHandler.prototype;
  dart.addTypeTests(io._EventHandler);
  dart.addTypeCaches(io._EventHandler);
  dart.setLibraryUri(io._EventHandler, I[105]);
  var _mode$ = dart.privateName(io, "FileMode._mode");
  var _mode = dart.privateName(io, "_mode");
  io.FileMode = class FileMode extends core.Object {
    get [_mode]() {
      return this[_mode$];
    }
    set [_mode](value) {
      super[_mode] = value;
    }
  };
  (io.FileMode._internal = function(_mode) {
    if (_mode == null) dart.nullFailed(I[113], 42, 33, "_mode");
    this[_mode$] = _mode;
    ;
  }).prototype = io.FileMode.prototype;
  dart.addTypeTests(io.FileMode);
  dart.addTypeCaches(io.FileMode);
  dart.setLibraryUri(io.FileMode, I[105]);
  dart.setFieldSignature(io.FileMode, () => ({
    __proto__: dart.getFields(io.FileMode.__proto__),
    [_mode]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(io.FileMode, {
    /*io.FileMode.read*/get read() {
      return C[109] || CT.C109;
    },
    /*io.FileMode.READ*/get READ() {
      return C[109] || CT.C109;
    },
    /*io.FileMode.write*/get write() {
      return C[110] || CT.C110;
    },
    /*io.FileMode.WRITE*/get WRITE() {
      return C[110] || CT.C110;
    },
    /*io.FileMode.append*/get append() {
      return C[111] || CT.C111;
    },
    /*io.FileMode.APPEND*/get APPEND() {
      return C[111] || CT.C111;
    },
    /*io.FileMode.writeOnly*/get writeOnly() {
      return C[112] || CT.C112;
    },
    /*io.FileMode.WRITE_ONLY*/get WRITE_ONLY() {
      return C[112] || CT.C112;
    },
    /*io.FileMode.writeOnlyAppend*/get writeOnlyAppend() {
      return C[113] || CT.C113;
    },
    /*io.FileMode.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
      return C[113] || CT.C113;
    }
  }, false);
  var _type$1 = dart.privateName(io, "FileLock._type");
  var _type = dart.privateName(io, "_type");
  io.FileLock = class FileLock extends core.Object {
    get [_type]() {
      return this[_type$1];
    }
    set [_type](value) {
      super[_type] = value;
    }
  };
  (io.FileLock._internal = function(_type) {
    if (_type == null) dart.nullFailed(I[113], 95, 33, "_type");
    this[_type$1] = _type;
    ;
  }).prototype = io.FileLock.prototype;
  dart.addTypeTests(io.FileLock);
  dart.addTypeCaches(io.FileLock);
  dart.setLibraryUri(io.FileLock, I[105]);
  dart.setFieldSignature(io.FileLock, () => ({
    __proto__: dart.getFields(io.FileLock.__proto__),
    [_type]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(io.FileLock, {
    /*io.FileLock.shared*/get shared() {
      return C[114] || CT.C114;
    },
    /*io.FileLock.SHARED*/get SHARED() {
      return C[114] || CT.C114;
    },
    /*io.FileLock.exclusive*/get exclusive() {
      return C[115] || CT.C115;
    },
    /*io.FileLock.EXCLUSIVE*/get EXCLUSIVE() {
      return C[115] || CT.C115;
    },
    /*io.FileLock.blockingShared*/get blockingShared() {
      return C[116] || CT.C116;
    },
    /*io.FileLock.BLOCKING_SHARED*/get BLOCKING_SHARED() {
      return C[116] || CT.C116;
    },
    /*io.FileLock.blockingExclusive*/get blockingExclusive() {
      return C[117] || CT.C117;
    },
    /*io.FileLock.BLOCKING_EXCLUSIVE*/get BLOCKING_EXCLUSIVE() {
      return C[117] || CT.C117;
    }
  }, false);
  io.File = class File extends core.Object {
    static new(path) {
      if (path == null) dart.nullFailed(I[113], 237, 23, "path");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return new io._File.new(path);
      }
      return overrides.createFile(path);
    }
    static fromUri(uri) {
      if (uri == null) dart.nullFailed(I[113], 248, 28, "uri");
      return io.File.new(uri.toFilePath());
    }
    static fromRawPath(rawPath) {
      if (rawPath == null) dart.nullFailed(I[113], 254, 38, "rawPath");
      return new io._File.fromRawPath(rawPath);
    }
  };
  (io.File[dart.mixinNew] = function() {
  }).prototype = io.File.prototype;
  dart.addTypeTests(io.File);
  dart.addTypeCaches(io.File);
  io.File[dart.implements] = () => [io.FileSystemEntity];
  dart.setLibraryUri(io.File, I[105]);
  io.RandomAccessFile = class RandomAccessFile extends core.Object {};
  (io.RandomAccessFile.new = function() {
    ;
  }).prototype = io.RandomAccessFile.prototype;
  dart.addTypeTests(io.RandomAccessFile);
  dart.addTypeCaches(io.RandomAccessFile);
  dart.setLibraryUri(io.RandomAccessFile, I[105]);
  var message$3 = dart.privateName(io, "FileSystemException.message");
  var path$ = dart.privateName(io, "FileSystemException.path");
  var osError$ = dart.privateName(io, "FileSystemException.osError");
  io.FileSystemException = class FileSystemException extends core.Object {
    get message() {
      return this[message$3];
    }
    set message(value) {
      super.message = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get osError() {
      return this[osError$];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write("FileSystemException");
      if (this.message[$isNotEmpty]) {
        sb.write(": " + dart.str(this.message));
        if (this.path != null) {
          sb.write(", path = '" + dart.str(this.path) + "'");
        }
        if (this.osError != null) {
          sb.write(" (" + dart.str(this.osError) + ")");
        }
      } else if (this.osError != null) {
        sb.write(": " + dart.str(this.osError));
        if (this.path != null) {
          sb.write(", path = '" + dart.str(this.path) + "'");
        }
      } else if (this.path != null) {
        sb.write(": " + dart.str(this.path));
      }
      return sb.toString();
    }
  };
  (io.FileSystemException.new = function(message = "", path = "", osError = null) {
    if (message == null) dart.nullFailed(I[113], 926, 35, "message");
    this[message$3] = message;
    this[path$] = path;
    this[osError$] = osError;
    ;
  }).prototype = io.FileSystemException.prototype;
  dart.addTypeTests(io.FileSystemException);
  dart.addTypeCaches(io.FileSystemException);
  io.FileSystemException[dart.implements] = () => [io.IOException];
  dart.setLibraryUri(io.FileSystemException, I[105]);
  dart.setFieldSignature(io.FileSystemException, () => ({
    __proto__: dart.getFields(io.FileSystemException.__proto__),
    message: dart.finalFieldType(core.String),
    path: dart.finalFieldType(dart.nullable(core.String)),
    osError: dart.finalFieldType(dart.nullable(io.OSError))
  }));
  dart.defineExtensionMethods(io.FileSystemException, ['toString']);
  var ___FileStream__controller = dart.privateName(io, "_#_FileStream#_controller");
  var ___FileStream__controller_isSet = dart.privateName(io, "_#_FileStream#_controller#isSet");
  var ___FileStream__openedFile = dart.privateName(io, "_#_FileStream#_openedFile");
  var ___FileStream__openedFile_isSet = dart.privateName(io, "_#_FileStream#_openedFile#isSet");
  var _closeCompleter = dart.privateName(io, "_closeCompleter");
  var _unsubscribed = dart.privateName(io, "_unsubscribed");
  var _readInProgress = dart.privateName(io, "_readInProgress");
  var _atEnd = dart.privateName(io, "_atEnd");
  var _end$ = dart.privateName(io, "_end");
  var _position$ = dart.privateName(io, "_position");
  var _controller = dart.privateName(io, "_controller");
  var _openedFile = dart.privateName(io, "_openedFile");
  var _start$1 = dart.privateName(io, "_start");
  var _readBlock = dart.privateName(io, "_readBlock");
  var _closeFile = dart.privateName(io, "_closeFile");
  io._FileStream = class _FileStream extends async.Stream$(core.List$(core.int)) {
    get [_controller]() {
      let t187;
      return dart.test(this[___FileStream__controller_isSet]) ? (t187 = this[___FileStream__controller], t187) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [_controller](t187) {
      if (t187 == null) dart.nullFailed(I[114], 12, 36, "null");
      this[___FileStream__controller_isSet] = true;
      this[___FileStream__controller] = t187;
    }
    get [_openedFile]() {
      let t188;
      return dart.test(this[___FileStream__openedFile_isSet]) ? (t188 = this[___FileStream__openedFile], t188) : dart.throw(new _internal.LateError.fieldNI("_openedFile"));
    }
    set [_openedFile](t188) {
      if (t188 == null) dart.nullFailed(I[114], 16, 25, "null");
      this[___FileStream__openedFile_isSet] = true;
      this[___FileStream__openedFile] = t188;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      this[_controller] = T$0.StreamControllerOfUint8List().new({sync: true, onListen: dart.bind(this, _start$1), onResume: dart.bind(this, _readBlock), onCancel: dart.fn(() => {
          this[_unsubscribed] = true;
          return this[_closeFile]();
        }, T$0.VoidToFuture())});
      return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    [_closeFile]() {
      if (dart.test(this[_readInProgress]) || dart.test(this[_closed])) {
        return this[_closeCompleter].future;
      }
      this[_closed] = true;
      const done = () => {
        this[_closeCompleter].complete();
        this[_controller].close();
      };
      dart.fn(done, T$.VoidTovoid());
      this[_openedFile].close().catchError(dart.bind(this[_controller], 'addError')).whenComplete(done);
      return this[_closeCompleter].future;
    }
    [_readBlock]() {
      if (dart.test(this[_readInProgress])) return;
      if (dart.test(this[_atEnd])) {
        this[_closeFile]();
        return;
      }
      this[_readInProgress] = true;
      let readBytes = 65536;
      let end = this[_end$];
      if (end != null) {
        readBytes = math.min(core.int, readBytes, dart.notNull(end) - dart.notNull(this[_position$]));
        if (readBytes < 0) {
          this[_readInProgress] = false;
          if (!dart.test(this[_unsubscribed])) {
            this[_controller].addError(new core.RangeError.new("Bad end position: " + dart.str(end)));
            this[_closeFile]();
            this[_unsubscribed] = true;
          }
          return;
        }
      }
      this[_openedFile].read(readBytes).then(core.Null, dart.fn(block => {
        if (block == null) dart.nullFailed(I[114], 85, 39, "block");
        this[_readInProgress] = false;
        if (dart.test(this[_unsubscribed])) {
          this[_closeFile]();
          return;
        }
        this[_position$] = dart.notNull(this[_position$]) + dart.notNull(block[$length]);
        if (dart.notNull(block[$length]) < readBytes || this[_end$] != null && this[_position$] == this[_end$]) {
          this[_atEnd] = true;
        }
        if (!dart.test(this[_atEnd]) && !dart.test(this[_controller].isPaused)) {
          this[_readBlock]();
        }
        this[_controller].add(block);
        if (dart.test(this[_atEnd])) {
          this[_closeFile]();
        }
      }, T$0.Uint8ListToNull())).catchError(dart.fn((e, s) => {
        if (!dart.test(this[_unsubscribed])) {
          this[_controller].addError(core.Object.as(e), T$.StackTraceN().as(s));
          this[_closeFile]();
          this[_unsubscribed] = true;
        }
      }, T$.dynamicAnddynamicToNull()));
    }
    [_start$1]() {
      if (dart.notNull(this[_position$]) < 0) {
        this[_controller].addError(new core.RangeError.new("Bad start position: " + dart.str(this[_position$])));
        this[_controller].close();
        this[_closeCompleter].complete();
        return;
      }
      const onReady = file => {
        if (file == null) dart.nullFailed(I[114], 119, 35, "file");
        this[_openedFile] = file;
        this[_readInProgress] = false;
        this[_readBlock]();
      };
      dart.fn(onReady, T$0.RandomAccessFileTovoid());
      const onOpenFile = file => {
        if (file == null) dart.nullFailed(I[114], 125, 38, "file");
        if (dart.notNull(this[_position$]) > 0) {
          file.setPosition(this[_position$]).then(dart.void, onReady, {onError: dart.fn((e, s) => {
              this[_controller].addError(core.Object.as(e), T$.StackTraceN().as(s));
              this[_readInProgress] = false;
              this[_closeFile]();
            }, T$.dynamicAnddynamicToNull())});
        } else {
          onReady(file);
        }
      };
      dart.fn(onOpenFile, T$0.RandomAccessFileTovoid());
      const openFailed = (error, stackTrace) => {
        this[_controller].addError(core.Object.as(error), T$.StackTraceN().as(stackTrace));
        this[_controller].close();
        this[_closeCompleter].complete();
      };
      dart.fn(openFailed, T$.dynamicAnddynamicTovoid());
      let path = this[_path$];
      if (path != null) {
        io.File.new(path).open({mode: io.FileMode.read}).then(dart.void, onOpenFile, {onError: openFailed});
      } else {
        try {
          onOpenFile(io._File._openStdioSync(0));
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            openFailed(e, s);
          } else
            throw e$;
        }
      }
    }
  };
  (io._FileStream.new = function(_path, position, _end) {
    let t187;
    this[___FileStream__controller] = null;
    this[___FileStream__controller_isSet] = false;
    this[___FileStream__openedFile] = null;
    this[___FileStream__openedFile_isSet] = false;
    this[_closeCompleter] = async.Completer.new();
    this[_unsubscribed] = false;
    this[_readInProgress] = true;
    this[_closed] = false;
    this[_atEnd] = false;
    this[_path$] = _path;
    this[_end$] = _end;
    this[_position$] = (t187 = position, t187 == null ? 0 : t187);
    io._FileStream.__proto__.new.call(this);
    ;
  }).prototype = io._FileStream.prototype;
  (io._FileStream.forStdin = function() {
    this[___FileStream__controller] = null;
    this[___FileStream__controller_isSet] = false;
    this[___FileStream__openedFile] = null;
    this[___FileStream__openedFile_isSet] = false;
    this[_closeCompleter] = async.Completer.new();
    this[_unsubscribed] = false;
    this[_readInProgress] = true;
    this[_closed] = false;
    this[_atEnd] = false;
    this[_end$] = null;
    this[_path$] = null;
    this[_position$] = 0;
    io._FileStream.__proto__.new.call(this);
    ;
  }).prototype = io._FileStream.prototype;
  dart.addTypeTests(io._FileStream);
  dart.addTypeCaches(io._FileStream);
  dart.setMethodSignature(io._FileStream, () => ({
    __proto__: dart.getMethods(io._FileStream.__proto__),
    listen: dart.fnType(async.StreamSubscription$(typed_data.Uint8List), [dart.nullable(dart.fnType(dart.void, [typed_data.Uint8List]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    [_closeFile]: dart.fnType(async.Future, []),
    [_readBlock]: dart.fnType(dart.void, []),
    [_start$1]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(io._FileStream, () => ({
    __proto__: dart.getGetters(io._FileStream.__proto__),
    [_controller]: async.StreamController$(typed_data.Uint8List),
    [_openedFile]: io.RandomAccessFile
  }));
  dart.setSetterSignature(io._FileStream, () => ({
    __proto__: dart.getSetters(io._FileStream.__proto__),
    [_controller]: async.StreamController$(typed_data.Uint8List),
    [_openedFile]: io.RandomAccessFile
  }));
  dart.setLibraryUri(io._FileStream, I[105]);
  dart.setFieldSignature(io._FileStream, () => ({
    __proto__: dart.getFields(io._FileStream.__proto__),
    [___FileStream__controller]: dart.fieldType(dart.nullable(async.StreamController$(typed_data.Uint8List))),
    [___FileStream__controller_isSet]: dart.fieldType(core.bool),
    [_path$]: dart.fieldType(dart.nullable(core.String)),
    [___FileStream__openedFile]: dart.fieldType(dart.nullable(io.RandomAccessFile)),
    [___FileStream__openedFile_isSet]: dart.fieldType(core.bool),
    [_position$]: dart.fieldType(core.int),
    [_end$]: dart.fieldType(dart.nullable(core.int)),
    [_closeCompleter]: dart.finalFieldType(async.Completer),
    [_unsubscribed]: dart.fieldType(core.bool),
    [_readInProgress]: dart.fieldType(core.bool),
    [_closed]: dart.fieldType(core.bool),
    [_atEnd]: dart.fieldType(core.bool)
  }));
  var _file = dart.privateName(io, "_file");
  var _openFuture = dart.privateName(io, "_openFuture");
  io._FileStreamConsumer = class _FileStreamConsumer extends async.StreamConsumer$(core.List$(core.int)) {
    addStream(stream) {
      T$0.StreamOfListOfint().as(stream);
      if (stream == null) dart.nullFailed(I[114], 169, 45, "stream");
      let completer = T$0.CompleterOfFileN().sync();
      this[_openFuture].then(core.Null, dart.fn(openedFile => {
        if (openedFile == null) dart.nullFailed(I[114], 171, 23, "openedFile");
        let _subscription = null;
        let _subscription$35isSet = false;
        function _subscription$35get() {
          return _subscription$35isSet ? _subscription : dart.throw(new _internal.LateError.localNI("_subscription"));
        }
        dart.fn(_subscription$35get, T$0.VoidToStreamSubscriptionOfListOfint());
        function _subscription$35set(t193) {
          if (t193 == null) dart.nullFailed(I[114], 172, 42, "null");
          _subscription$35isSet = true;
          return _subscription = t193;
        }
        dart.fn(_subscription$35set, T$0.StreamSubscriptionOfListOfintTodynamic());
        function error(e, stackTrace) {
          if (stackTrace == null) dart.nullFailed(I[114], 173, 32, "stackTrace");
          _subscription$35get().cancel();
          openedFile.close();
          completer.completeError(core.Object.as(e), stackTrace);
        }
        dart.fn(error, T$0.dynamicAndStackTraceTovoid());
        _subscription$35set(stream.listen(dart.fn(d => {
          if (d == null) dart.nullFailed(I[114], 179, 38, "d");
          _subscription$35get().pause();
          try {
            openedFile.writeFrom(d, 0, d[$length]).then(dart.void, dart.fn(_ => {
              if (_ == null) dart.nullFailed(I[114], 184, 22, "_");
              return _subscription$35get().resume();
            }, T$0.RandomAccessFileTovoid()), {onError: error});
          } catch (e$) {
            let e = dart.getThrown(e$);
            let stackTrace = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              error(e, stackTrace);
            } else
              throw e$;
          }
        }, T$0.ListOfintTovoid()), {onDone: dart.fn(() => {
            completer.complete(this[_file]);
          }, T$.VoidTovoid()), onError: error, cancelOnError: true}));
      }, T$0.RandomAccessFileToNull())).catchError(dart.bind(completer, 'completeError'));
      return completer.future;
    }
    close() {
      return this[_openFuture].then(dart.void, dart.fn(openedFile => {
        if (openedFile == null) dart.nullFailed(I[114], 196, 25, "openedFile");
        return openedFile.close();
      }, T$0.RandomAccessFileToFutureOfvoid())).then(T$0.FileN(), dart.fn(_ => this[_file], T$0.voidToFileN()));
    }
  };
  (io._FileStreamConsumer.new = function(file, mode) {
    if (file == null) dart.nullFailed(I[114], 162, 28, "file");
    if (mode == null) dart.nullFailed(I[114], 162, 43, "mode");
    this[_file] = file;
    this[_openFuture] = file.open({mode: mode});
    ;
  }).prototype = io._FileStreamConsumer.prototype;
  (io._FileStreamConsumer.fromStdio = function(fd) {
    if (fd == null) dart.nullFailed(I[114], 166, 37, "fd");
    this[_file] = null;
    this[_openFuture] = T$0.FutureOfRandomAccessFile().value(io._File._openStdioSync(fd));
    ;
  }).prototype = io._FileStreamConsumer.prototype;
  dart.addTypeTests(io._FileStreamConsumer);
  dart.addTypeCaches(io._FileStreamConsumer);
  dart.setMethodSignature(io._FileStreamConsumer, () => ({
    __proto__: dart.getMethods(io._FileStreamConsumer.__proto__),
    addStream: dart.fnType(async.Future$(dart.nullable(io.File)), [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future$(dart.nullable(io.File)), [])
  }));
  dart.setLibraryUri(io._FileStreamConsumer, I[105]);
  dart.setFieldSignature(io._FileStreamConsumer, () => ({
    __proto__: dart.getFields(io._FileStreamConsumer.__proto__),
    [_file]: dart.fieldType(dart.nullable(io.File)),
    [_openFuture]: dart.fieldType(async.Future$(io.RandomAccessFile))
  }));
  var _path$0 = dart.privateName(io, "_File._path");
  var _rawPath$0 = dart.privateName(io, "_File._rawPath");
  var _tryDecode = dart.privateName(io, "_tryDecode");
  io._File = class _File extends io.FileSystemEntity {
    get [_path$]() {
      return this[_path$0];
    }
    set [_path$](value) {
      super[_path$] = value;
    }
    get [_rawPath$]() {
      return this[_rawPath$0];
    }
    set [_rawPath$](value) {
      super[_rawPath$] = value;
    }
    get path() {
      return this[_path$];
    }
    static _namespacePointer() {
      return io._Namespace._namespacePointer;
    }
    static _dispatchWithNamespace(request, data) {
      if (request == null) dart.nullFailed(I[114], 222, 44, "request");
      if (data == null) dart.nullFailed(I[114], 222, 58, "data");
      data[$_set](0, io._File._namespacePointer());
      return io._IOService._dispatch(request, data);
    }
    exists() {
      return io._File._dispatchWithNamespace(0, [null, this[_rawPath$]]).then(core.bool, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot check existence", this.path));
        }
        return T$.FutureOrOfbool().as(response);
      }, T$0.dynamicToFutureOrOfbool()));
    }
    static _exists(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 111, 29, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 111, 50, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._exists"));
    }
    existsSync() {
      let result = io._File._exists(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(result), "Cannot check existence of file", this.path);
      return core.bool.as(result);
    }
    get absolute() {
      return io.File.new(this[_absolutePath]);
    }
    create(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[114], 247, 29, "recursive");
      let result = dart.test(recursive) ? this.parent.create({recursive: true}) : T$.FutureOfNull().value(null);
      return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(1, [null, this[_rawPath$]]), T$0.DirectoryNToFuture())).then(io.File, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot create file", this.path));
        }
        return this;
      }, T$0.dynamicTo_File()));
    }
    static _create(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 116, 29, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 116, 50, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._create"));
    }
    static _createLink(namespace, rawPath, target) {
      if (namespace == null) dart.nullFailed(I[107], 121, 33, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 121, 54, "rawPath");
      if (target == null) dart.nullFailed(I[107], 121, 70, "target");
      dart.throw(new core.UnsupportedError.new("File._createLink"));
    }
    static _linkTarget(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 126, 33, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 126, 54, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._linkTarget"));
    }
    createSync(opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[114], 268, 25, "recursive");
      if (dart.test(recursive)) {
        this.parent.createSync({recursive: true});
      }
      let result = io._File._create(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(result), "Cannot create file", this.path);
    }
    [_delete](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[114], 276, 30, "recursive");
      if (dart.test(recursive)) {
        return io.Directory.new(this.path).delete({recursive: true}).then(io.File, dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[114], 278, 64, "_");
          return this;
        }, T$0.FileSystemEntityTo_File()));
      }
      return io._File._dispatchWithNamespace(2, [null, this[_rawPath$]]).then(io.File, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot delete file", this.path));
        }
        return this;
      }, T$0.dynamicTo_File()));
    }
    static _deleteNative(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 131, 35, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 131, 56, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._deleteNative"));
    }
    static _deleteLinkNative(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 136, 39, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 136, 60, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._deleteLinkNative"));
    }
    [_deleteSync](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[114], 293, 26, "recursive");
      if (dart.test(recursive)) {
        return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
      }
      let result = io._File._deleteNative(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(result), "Cannot delete file", this.path);
    }
    rename(newPath) {
      if (newPath == null) dart.nullFailed(I[114], 301, 30, "newPath");
      return io._File._dispatchWithNamespace(3, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot rename file to '" + dart.str(newPath) + "'", this.path));
        }
        return io.File.new(newPath);
      }, T$0.dynamicToFile()));
    }
    static _rename(namespace, oldPath, newPath) {
      if (namespace == null) dart.nullFailed(I[107], 141, 29, "namespace");
      if (oldPath == null) dart.nullFailed(I[107], 141, 50, "oldPath");
      if (newPath == null) dart.nullFailed(I[107], 141, 66, "newPath");
      dart.throw(new core.UnsupportedError.new("File._rename"));
    }
    static _renameLink(namespace, oldPath, newPath) {
      if (namespace == null) dart.nullFailed(I[107], 146, 33, "namespace");
      if (oldPath == null) dart.nullFailed(I[107], 146, 54, "oldPath");
      if (newPath == null) dart.nullFailed(I[107], 146, 70, "newPath");
      dart.throw(new core.UnsupportedError.new("File._renameLink"));
    }
    renameSync(newPath) {
      if (newPath == null) dart.nullFailed(I[114], 318, 26, "newPath");
      let result = io._File._rename(io._Namespace._namespace, this[_rawPath$], newPath);
      io._File.throwIfError(core.Object.as(result), "Cannot rename file to '" + dart.str(newPath) + "'", this.path);
      return io.File.new(newPath);
    }
    copy(newPath) {
      if (newPath == null) dart.nullFailed(I[114], 324, 28, "newPath");
      return io._File._dispatchWithNamespace(4, [null, this[_rawPath$], newPath]).then(io.File, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot copy file to '" + dart.str(newPath) + "'", this.path));
        }
        return io.File.new(newPath);
      }, T$0.dynamicToFile()));
    }
    static _copy(namespace, oldPath, newPath) {
      if (namespace == null) dart.nullFailed(I[107], 151, 27, "namespace");
      if (oldPath == null) dart.nullFailed(I[107], 151, 48, "oldPath");
      if (newPath == null) dart.nullFailed(I[107], 151, 64, "newPath");
      dart.throw(new core.UnsupportedError.new("File._copy"));
    }
    copySync(newPath) {
      if (newPath == null) dart.nullFailed(I[114], 338, 24, "newPath");
      let result = io._File._copy(io._Namespace._namespace, this[_rawPath$], newPath);
      io._File.throwIfError(core.Object.as(result), "Cannot copy file to '" + dart.str(newPath) + "'", this.path);
      return io.File.new(newPath);
    }
    open(opts) {
      let mode = opts && 'mode' in opts ? opts.mode : C[109] || CT.C109;
      if (mode == null) dart.nullFailed(I[114], 344, 43, "mode");
      if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
        return T$0.FutureOfRandomAccessFile().error(new core.ArgumentError.new("Invalid file mode for this operation"));
      }
      return io._File._dispatchWithNamespace(5, [null, this[_rawPath$], mode[_mode]]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot open file", this.path));
        }
        return new io._RandomAccessFile.new(core.int.as(response), this.path);
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    length() {
      return io._File._dispatchWithNamespace(12, [null, this[_rawPath$]]).then(core.int, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot retrieve length of file", this.path));
        }
        return T$0.FutureOrOfint().as(response);
      }, T$0.dynamicToFutureOrOfint()));
    }
    static _lengthFromPath(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 156, 37, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 156, 58, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._lengthFromPath"));
    }
    lengthSync() {
      let result = io._File._lengthFromPath(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(result), "Cannot retrieve length of file", this.path);
      return core.int.as(result);
    }
    lastAccessed() {
      return io._File._dispatchWithNamespace(13, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot retrieve access time", this.path));
        }
        return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(response));
      }, T$0.dynamicToDateTime()));
    }
    static _lastAccessed(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 166, 35, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 166, 56, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._lastAccessed"));
    }
    lastAccessedSync() {
      let ms = io._File._lastAccessed(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(ms), "Cannot retrieve access time", this.path);
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(ms));
    }
    setLastAccessed(time) {
      if (time == null) dart.nullFailed(I[114], 400, 35, "time");
      let millis = time.millisecondsSinceEpoch;
      return io._File._dispatchWithNamespace(14, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot set access time", this.path));
        }
        return null;
      }, T$.dynamicToNull()));
    }
    static _setLastAccessed(namespace, rawPath, millis) {
      if (namespace == null) dart.nullFailed(I[107], 176, 38, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 176, 59, "rawPath");
      if (millis == null) dart.nullFailed(I[107], 176, 72, "millis");
      dart.throw(new core.UnsupportedError.new("File._setLastAccessed"));
    }
    setLastAccessedSync(time) {
      if (time == null) dart.nullFailed(I[114], 415, 37, "time");
      let millis = time.millisecondsSinceEpoch;
      let result = io._File._setLastAccessed(io._Namespace._namespace, this[_rawPath$], millis);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Failed to set file access time", this.path, result));
      }
    }
    lastModified() {
      return io._File._dispatchWithNamespace(15, [null, this[_rawPath$]]).then(core.DateTime, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot retrieve modification time", this.path));
        }
        return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(response));
      }, T$0.dynamicToDateTime()));
    }
    static _lastModified(namespace, rawPath) {
      if (namespace == null) dart.nullFailed(I[107], 161, 35, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 161, 56, "rawPath");
      dart.throw(new core.UnsupportedError.new("File._lastModified"));
    }
    lastModifiedSync() {
      let ms = io._File._lastModified(io._Namespace._namespace, this[_rawPath$]);
      io._File.throwIfError(core.Object.as(ms), "Cannot retrieve modification time", this.path);
      return new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(ms));
    }
    setLastModified(time) {
      if (time == null) dart.nullFailed(I[114], 443, 35, "time");
      let millis = time.millisecondsSinceEpoch;
      return io._File._dispatchWithNamespace(16, [null, this[_rawPath$], millis]).then(dart.dynamic, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "Cannot set modification time", this.path));
        }
        return null;
      }, T$.dynamicToNull()));
    }
    static _setLastModified(namespace, rawPath, millis) {
      if (namespace == null) dart.nullFailed(I[107], 171, 38, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 171, 59, "rawPath");
      if (millis == null) dart.nullFailed(I[107], 171, 72, "millis");
      dart.throw(new core.UnsupportedError.new("File._setLastModified"));
    }
    setLastModifiedSync(time) {
      if (time == null) dart.nullFailed(I[114], 459, 37, "time");
      let millis = time.millisecondsSinceEpoch;
      let result = io._File._setLastModified(io._Namespace._namespace, this[_rawPath$], millis);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("Failed to set file modification time", this.path, result));
      }
    }
    static _open(namespace, rawPath, mode) {
      if (namespace == null) dart.nullFailed(I[107], 181, 27, "namespace");
      if (rawPath == null) dart.nullFailed(I[107], 181, 48, "rawPath");
      if (mode == null) dart.nullFailed(I[107], 181, 61, "mode");
      dart.throw(new core.UnsupportedError.new("File._open"));
    }
    openSync(opts) {
      let mode = opts && 'mode' in opts ? opts.mode : C[109] || CT.C109;
      if (mode == null) dart.nullFailed(I[114], 470, 39, "mode");
      if (!dart.equals(mode, io.FileMode.read) && !dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
        dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
      }
      let id = io._File._open(io._Namespace._namespace, this[_rawPath$], mode[_mode]);
      io._File.throwIfError(core.Object.as(id), "Cannot open file", this.path);
      return new io._RandomAccessFile.new(core.int.as(id), this[_path$]);
    }
    static _openStdio(fd) {
      if (fd == null) dart.nullFailed(I[107], 186, 29, "fd");
      dart.throw(new core.UnsupportedError.new("File._openStdio"));
    }
    static _openStdioSync(fd) {
      if (fd == null) dart.nullFailed(I[114], 485, 46, "fd");
      let id = io._File._openStdio(fd);
      if (id === 0) {
        dart.throw(new io.FileSystemException.new("Cannot open stdio file for: " + dart.str(fd)));
      }
      return new io._RandomAccessFile.new(id, "");
    }
    openRead(start = null, end = null) {
      return new io._FileStream.new(this.path, start, end);
    }
    openWrite(opts) {
      let mode = opts && 'mode' in opts ? opts.mode : C[110] || CT.C110;
      if (mode == null) dart.nullFailed(I[114], 497, 30, "mode");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 497, 62, "encoding");
      if (!dart.equals(mode, io.FileMode.write) && !dart.equals(mode, io.FileMode.append) && !dart.equals(mode, io.FileMode.writeOnly) && !dart.equals(mode, io.FileMode.writeOnlyAppend)) {
        dart.throw(new core.ArgumentError.new("Invalid file mode for this operation"));
      }
      let consumer = new io._FileStreamConsumer.new(this, mode);
      return io.IOSink.new(consumer, {encoding: encoding});
    }
    readAsBytes() {
      function readDataChunked(file) {
        if (file == null) dart.nullFailed(I[114], 509, 56, "file");
        let builder = _internal.BytesBuilder.new({copy: false});
        let completer = T$0.CompleterOfUint8List().new();
        function read() {
          file.read(65536).then(core.Null, dart.fn(data => {
            if (data == null) dart.nullFailed(I[114], 513, 37, "data");
            if (dart.notNull(data[$length]) > 0) {
              builder.add(data);
              read();
            } else {
              completer.complete(builder.takeBytes());
            }
          }, T$0.Uint8ListToNull()), {onError: dart.bind(completer, 'completeError')});
        }
        dart.fn(read, T$.VoidTovoid());
        read();
        return completer.future;
      }
      dart.fn(readDataChunked, T$0.RandomAccessFileToFutureOfUint8List());
      return this.open().then(typed_data.Uint8List, dart.fn(file => {
        if (file == null) dart.nullFailed(I[114], 527, 25, "file");
        return file.length().then(typed_data.Uint8List, dart.fn(length => {
          if (length == null) dart.nullFailed(I[114], 528, 34, "length");
          if (length === 0) {
            return readDataChunked(file);
          }
          return file.read(length);
        }, T$0.intToFutureOfUint8List())).whenComplete(dart.bind(file, 'close'));
      }, T$0.RandomAccessFileToFutureOfUint8List()));
    }
    readAsBytesSync() {
      let opened = this.openSync();
      try {
        let data = null;
        let length = opened.lengthSync();
        if (length === 0) {
          let builder = _internal.BytesBuilder.new({copy: false});
          do {
            data = opened.readSync(65536);
            if (dart.notNull(data[$length]) > 0) builder.add(data);
          } while (dart.notNull(data[$length]) > 0);
          data = builder.takeBytes();
        } else {
          data = opened.readSync(length);
        }
        return data;
      } finally {
        opened.closeSync();
      }
    }
    [_tryDecode](bytes, encoding) {
      if (bytes == null) dart.nullFailed(I[114], 560, 31, "bytes");
      if (encoding == null) dart.nullFailed(I[114], 560, 47, "encoding");
      try {
        return encoding.decode(bytes);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          dart.throw(new io.FileSystemException.new("Failed to decode data using encoding '" + dart.str(encoding.name) + "'", this.path));
        } else
          throw e;
      }
    }
    readAsString(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 569, 41, "encoding");
      let stack = core.StackTrace.current;
      return this.readAsBytes().then(core.String, dart.fn(bytes => {
        if (bytes == null) dart.nullFailed(I[114], 574, 32, "bytes");
        try {
          return this[_tryDecode](bytes, encoding);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return T$0.FutureOfString().error(e, stack);
          } else
            throw e$;
        }
      }, T$0.Uint8ListToFutureOrOfString()));
    }
    readAsStringSync(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 583, 37, "encoding");
      return this[_tryDecode](this.readAsBytesSync(), encoding);
    }
    readAsLines(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 586, 46, "encoding");
      return this.readAsString({encoding: encoding}).then(T$.ListOfString(), dart.bind(C[118] || CT.C118, 'convert'));
    }
    readAsLinesSync(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 589, 42, "encoding");
      return (C[118] || CT.C118).convert(this.readAsStringSync({encoding: encoding}));
    }
    writeAsBytes(bytes, opts) {
      if (bytes == null) dart.nullFailed(I[114], 592, 39, "bytes");
      let mode = opts && 'mode' in opts ? opts.mode : C[110] || CT.C110;
      if (mode == null) dart.nullFailed(I[114], 593, 17, "mode");
      let flush = opts && 'flush' in opts ? opts.flush : false;
      if (flush == null) dart.nullFailed(I[114], 593, 45, "flush");
      return this.open({mode: mode}).then(io.File, dart.fn(file => {
        if (file == null) dart.nullFailed(I[114], 594, 35, "file");
        return file.writeFrom(bytes, 0, bytes[$length]).then(io.File, dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[114], 595, 65, "_");
          if (dart.test(flush)) return file.flush().then(io.File, dart.fn(_ => {
            if (_ == null) dart.nullFailed(I[114], 596, 46, "_");
            return this;
          }, T$0.RandomAccessFileTo_File()));
          return this;
        }, T$0.RandomAccessFileToFutureOrOfFile())).whenComplete(dart.bind(file, 'close'));
      }, T$0.RandomAccessFileToFutureOfFile()));
    }
    writeAsBytesSync(bytes, opts) {
      if (bytes == null) dart.nullFailed(I[114], 602, 35, "bytes");
      let mode = opts && 'mode' in opts ? opts.mode : C[110] || CT.C110;
      if (mode == null) dart.nullFailed(I[114], 603, 17, "mode");
      let flush = opts && 'flush' in opts ? opts.flush : false;
      if (flush == null) dart.nullFailed(I[114], 603, 45, "flush");
      let opened = this.openSync({mode: mode});
      try {
        opened.writeFromSync(bytes, 0, bytes[$length]);
        if (dart.test(flush)) opened.flushSync();
      } finally {
        opened.closeSync();
      }
    }
    writeAsString(contents, opts) {
      if (contents == null) dart.nullFailed(I[114], 613, 37, "contents");
      let mode = opts && 'mode' in opts ? opts.mode : C[110] || CT.C110;
      if (mode == null) dart.nullFailed(I[114], 614, 17, "mode");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 615, 16, "encoding");
      let flush = opts && 'flush' in opts ? opts.flush : false;
      if (flush == null) dart.nullFailed(I[114], 616, 12, "flush");
      try {
        return this.writeAsBytes(encoding.encode(contents), {mode: mode, flush: flush});
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return T$0.FutureOfFile().error(e);
        } else
          throw e$;
      }
    }
    writeAsStringSync(contents, opts) {
      if (contents == null) dart.nullFailed(I[114], 624, 33, "contents");
      let mode = opts && 'mode' in opts ? opts.mode : C[110] || CT.C110;
      if (mode == null) dart.nullFailed(I[114], 625, 17, "mode");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 626, 16, "encoding");
      let flush = opts && 'flush' in opts ? opts.flush : false;
      if (flush == null) dart.nullFailed(I[114], 627, 12, "flush");
      this.writeAsBytesSync(encoding.encode(contents), {mode: mode, flush: flush});
    }
    toString() {
      return "File: '" + dart.str(this.path) + "'";
    }
    static throwIfError(result, msg, path) {
      if (result == null) dart.nullFailed(I[114], 633, 30, "result");
      if (msg == null) dart.nullFailed(I[114], 633, 45, "msg");
      if (path == null) dart.nullFailed(I[114], 633, 57, "path");
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new(msg, path, result));
      }
    }
    static _checkNotNull(T, t, name) {
      if (name == null) dart.nullFailed(I[114], 640, 41, "name");
      core.ArgumentError.checkNotNull(T, t, name);
      return t;
    }
  };
  (io._File.new = function(path) {
    if (path == null) dart.nullFailed(I[114], 204, 16, "path");
    this[_path$0] = io._File._checkNotNull(core.String, path, "path");
    this[_rawPath$0] = io.FileSystemEntity._toUtf8Array(path);
    ;
  }).prototype = io._File.prototype;
  (io._File.fromRawPath = function(rawPath) {
    if (rawPath == null) dart.nullFailed(I[114], 208, 31, "rawPath");
    this[_rawPath$0] = io.FileSystemEntity._toNullTerminatedUtf8Array(io._File._checkNotNull(typed_data.Uint8List, rawPath, "rawPath"));
    this[_path$0] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
    ;
  }).prototype = io._File.prototype;
  dart.addTypeTests(io._File);
  dart.addTypeCaches(io._File);
  io._File[dart.implements] = () => [io.File];
  dart.setMethodSignature(io._File, () => ({
    __proto__: dart.getMethods(io._File.__proto__),
    exists: dart.fnType(async.Future$(core.bool), []),
    existsSync: dart.fnType(core.bool, []),
    create: dart.fnType(async.Future$(io.File), [], {recursive: core.bool}, {}),
    createSync: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    [_delete]: dart.fnType(async.Future$(io.File), [], {recursive: core.bool}, {}),
    [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    rename: dart.fnType(async.Future$(io.File), [core.String]),
    renameSync: dart.fnType(io.File, [core.String]),
    copy: dart.fnType(async.Future$(io.File), [core.String]),
    copySync: dart.fnType(io.File, [core.String]),
    open: dart.fnType(async.Future$(io.RandomAccessFile), [], {mode: io.FileMode}, {}),
    length: dart.fnType(async.Future$(core.int), []),
    lengthSync: dart.fnType(core.int, []),
    lastAccessed: dart.fnType(async.Future$(core.DateTime), []),
    lastAccessedSync: dart.fnType(core.DateTime, []),
    setLastAccessed: dart.fnType(async.Future, [core.DateTime]),
    setLastAccessedSync: dart.fnType(dart.void, [core.DateTime]),
    lastModified: dart.fnType(async.Future$(core.DateTime), []),
    lastModifiedSync: dart.fnType(core.DateTime, []),
    setLastModified: dart.fnType(async.Future, [core.DateTime]),
    setLastModifiedSync: dart.fnType(dart.void, [core.DateTime]),
    openSync: dart.fnType(io.RandomAccessFile, [], {mode: io.FileMode}, {}),
    openRead: dart.fnType(async.Stream$(core.List$(core.int)), [], [dart.nullable(core.int), dart.nullable(core.int)]),
    openWrite: dart.fnType(io.IOSink, [], {encoding: convert.Encoding, mode: io.FileMode}, {}),
    readAsBytes: dart.fnType(async.Future$(typed_data.Uint8List), []),
    readAsBytesSync: dart.fnType(typed_data.Uint8List, []),
    [_tryDecode]: dart.fnType(core.String, [core.List$(core.int), convert.Encoding]),
    readAsString: dart.fnType(async.Future$(core.String), [], {encoding: convert.Encoding}, {}),
    readAsStringSync: dart.fnType(core.String, [], {encoding: convert.Encoding}, {}),
    readAsLines: dart.fnType(async.Future$(core.List$(core.String)), [], {encoding: convert.Encoding}, {}),
    readAsLinesSync: dart.fnType(core.List$(core.String), [], {encoding: convert.Encoding}, {}),
    writeAsBytes: dart.fnType(async.Future$(io.File), [core.List$(core.int)], {flush: core.bool, mode: io.FileMode}, {}),
    writeAsBytesSync: dart.fnType(dart.void, [core.List$(core.int)], {flush: core.bool, mode: io.FileMode}, {}),
    writeAsString: dart.fnType(async.Future$(io.File), [core.String], {encoding: convert.Encoding, flush: core.bool, mode: io.FileMode}, {}),
    writeAsStringSync: dart.fnType(dart.void, [core.String], {encoding: convert.Encoding, flush: core.bool, mode: io.FileMode}, {})
  }));
  dart.setGetterSignature(io._File, () => ({
    __proto__: dart.getGetters(io._File.__proto__),
    path: core.String,
    absolute: io.File
  }));
  dart.setLibraryUri(io._File, I[105]);
  dart.setFieldSignature(io._File, () => ({
    __proto__: dart.getFields(io._File.__proto__),
    [_path$]: dart.finalFieldType(core.String),
    [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineExtensionMethods(io._File, ['toString']);
  io._RandomAccessFileOps = class _RandomAccessFileOps extends core.Object {
    static new(pointer) {
      if (pointer == null) dart.nullFailed(I[107], 212, 36, "pointer");
      dart.throw(new core.UnsupportedError.new("RandomAccessFile"));
    }
  };
  (io._RandomAccessFileOps[dart.mixinNew] = function() {
  }).prototype = io._RandomAccessFileOps.prototype;
  dart.addTypeTests(io._RandomAccessFileOps);
  dart.addTypeCaches(io._RandomAccessFileOps);
  dart.setLibraryUri(io._RandomAccessFileOps, I[105]);
  var _asyncDispatched = dart.privateName(io, "_asyncDispatched");
  var ___RandomAccessFile__resourceInfo = dart.privateName(io, "_#_RandomAccessFile#_resourceInfo");
  var ___RandomAccessFile__resourceInfo_isSet = dart.privateName(io, "_#_RandomAccessFile#_resourceInfo#isSet");
  var _resourceInfo = dart.privateName(io, "_resourceInfo");
  var _maybeConnectHandler = dart.privateName(io, "_maybeConnectHandler");
  var _maybePerformCleanup = dart.privateName(io, "_maybePerformCleanup");
  var _dispatch = dart.privateName(io, "_dispatch");
  var _checkAvailable = dart.privateName(io, "_checkAvailable");
  var _fileLockValue = dart.privateName(io, "_fileLockValue");
  io._RandomAccessFile = class _RandomAccessFile extends core.Object {
    get [_resourceInfo]() {
      let t199;
      return dart.test(this[___RandomAccessFile__resourceInfo_isSet]) ? (t199 = this[___RandomAccessFile__resourceInfo], t199) : dart.throw(new _internal.LateError.fieldNI("_resourceInfo"));
    }
    set [_resourceInfo](t199) {
      if (t199 == null) dart.nullFailed(I[114], 671, 26, "null");
      this[___RandomAccessFile__resourceInfo_isSet] = true;
      this[___RandomAccessFile__resourceInfo] = t199;
    }
    [_maybePerformCleanup]() {
      if (dart.test(this.closed)) {
        io._FileResourceInfo.fileClosed(this[_resourceInfo]);
      }
    }
    [_maybeConnectHandler]() {
      if (!dart.test(io._RandomAccessFile._connectedResourceHandler)) {
        developer.registerExtension("ext.dart.io.getOpenFiles", C[119] || CT.C119);
        developer.registerExtension("ext.dart.io.getOpenFileById", C[120] || CT.C120);
        io._RandomAccessFile._connectedResourceHandler = true;
      }
    }
    close() {
      return this[_dispatch](7, [null], {markClosed: true}).then(dart.void, dart.fn(result => {
        if (dart.equals(result, -1)) {
          dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
        }
        this.closed = dart.test(this.closed) || dart.equals(result, 0);
        this[_maybePerformCleanup]();
      }, T$.dynamicToNull()));
    }
    closeSync() {
      this[_checkAvailable]();
      let id = this[_ops].close();
      if (id === -1) {
        dart.throw(new io.FileSystemException.new("Cannot close file", this.path));
      }
      this.closed = dart.test(this.closed) || id === 0;
      this[_maybePerformCleanup]();
    }
    readByte() {
      return this[_dispatch](18, [null]).then(core.int, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "readByte failed", this.path));
        }
        this[_resourceInfo].addRead(1);
        return T$0.FutureOrOfint().as(response);
      }, T$0.dynamicToFutureOrOfint()));
    }
    readByteSync() {
      this[_checkAvailable]();
      let result = this[_ops].readByte();
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("readByte failed", this.path, result));
      }
      this[_resourceInfo].addRead(1);
      return core.int.as(result);
    }
    read(bytes) {
      if (bytes == null) dart.nullFailed(I[114], 741, 30, "bytes");
      core.ArgumentError.checkNotNull(core.int, bytes, "bytes");
      return this[_dispatch](20, [null, bytes]).then(typed_data.Uint8List, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "read failed", this.path));
        }
        this[_resourceInfo].addRead(core.int.as(dart.dload(dart.dsend(response, '_get', [1]), 'length')));
        let result = typed_data.Uint8List.as(dart.dsend(response, '_get', [1]));
        return result;
      }, T$0.dynamicToUint8List()));
    }
    readSync(bytes) {
      if (bytes == null) dart.nullFailed(I[114], 754, 26, "bytes");
      core.ArgumentError.checkNotNull(core.int, bytes, "bytes");
      this[_checkAvailable]();
      let result = this[_ops].read(bytes);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("readSync failed", this.path, result));
      }
      this[_resourceInfo].addRead(core.int.as(dart.dload(result, 'length')));
      return typed_data.Uint8List.as(result);
    }
    readInto(buffer, start = 0, end = null) {
      if (buffer == null) dart.nullFailed(I[114], 766, 34, "buffer");
      if (start == null) dart.nullFailed(I[114], 766, 47, "start");
      core.ArgumentError.checkNotNull(T$0.ListOfint(), buffer, "buffer");
      end = core.RangeError.checkValidRange(start, end, buffer[$length]);
      if (end == start) {
        return T$0.FutureOfint().value(0);
      }
      let length = dart.notNull(end) - dart.notNull(start);
      return this[_dispatch](21, [null, length]).then(core.int, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "readInto failed", this.path));
        }
        let read = core.int.as(dart.dsend(response, '_get', [1]));
        let data = T$0.ListOfint().as(dart.dsend(response, '_get', [2]));
        buffer[$setRange](start, dart.notNull(start) + dart.notNull(read), data);
        this[_resourceInfo].addRead(read);
        return read;
      }, T$0.dynamicToint()));
    }
    readIntoSync(buffer, start = 0, end = null) {
      if (buffer == null) dart.nullFailed(I[114], 786, 30, "buffer");
      if (start == null) dart.nullFailed(I[114], 786, 43, "start");
      core.ArgumentError.checkNotNull(T$0.ListOfint(), buffer, "buffer");
      this[_checkAvailable]();
      end = core.RangeError.checkValidRange(start, end, buffer[$length]);
      if (end == start) {
        return 0;
      }
      let result = this[_ops].readInto(buffer, start, end);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("readInto failed", this.path, result));
      }
      this[_resourceInfo].addRead(core.int.as(result));
      return core.int.as(result);
    }
    writeByte(value) {
      if (value == null) dart.nullFailed(I[114], 802, 42, "value");
      core.ArgumentError.checkNotNull(core.int, value, "value");
      return this[_dispatch](19, [null, value]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "writeByte failed", this.path));
        }
        this[_resourceInfo].addWrite(1);
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    writeByteSync(value) {
      if (value == null) dart.nullFailed(I[114], 814, 25, "value");
      this[_checkAvailable]();
      core.ArgumentError.checkNotNull(core.int, value, "value");
      let result = this[_ops].writeByte(value);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("writeByte failed", this.path, result));
      }
      this[_resourceInfo].addWrite(1);
      return core.int.as(result);
    }
    writeFrom(buffer, start = 0, end = null) {
      if (buffer == null) dart.nullFailed(I[114], 826, 48, "buffer");
      if (start == null) dart.nullFailed(I[114], 827, 12, "start");
      core.ArgumentError.checkNotNull(T$0.ListOfint(), buffer, "buffer");
      core.ArgumentError.checkNotNull(core.int, start, "start");
      end = core.RangeError.checkValidRange(start, end, buffer[$length]);
      if (end == start) {
        return T$0.FutureOfRandomAccessFile().value(this);
      }
      let result = null;
      try {
        result = io._ensureFastAndSerializableByteData(buffer, start, end);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return T$0.FutureOfRandomAccessFile().error(e);
        } else
          throw e$;
      }
      let request = core.List.filled(4, null);
      request[$_set](0, null);
      request[$_set](1, result.buffer);
      request[$_set](2, result.start);
      request[$_set](3, dart.notNull(end) - (dart.notNull(start) - dart.notNull(result.start)));
      return this[_dispatch](22, request).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "writeFrom failed", this.path));
        }
        this[_resourceInfo].addWrite(dart.nullCheck(end) - (dart.notNull(start) - dart.notNull(result.start)));
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    writeFromSync(buffer, start = 0, end = null) {
      if (buffer == null) dart.nullFailed(I[114], 856, 32, "buffer");
      if (start == null) dart.nullFailed(I[114], 856, 45, "start");
      this[_checkAvailable]();
      core.ArgumentError.checkNotNull(T$0.ListOfint(), buffer, "buffer");
      core.ArgumentError.checkNotNull(core.int, start, "start");
      end = core.RangeError.checkValidRange(start, end, buffer[$length]);
      if (end == start) {
        return;
      }
      let bufferAndStart = io._ensureFastAndSerializableByteData(buffer, start, end);
      let result = this[_ops].writeFrom(bufferAndStart.buffer, bufferAndStart.start, dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("writeFrom failed", this.path, result));
      }
      this[_resourceInfo].addWrite(dart.notNull(end) - (dart.notNull(start) - dart.notNull(bufferAndStart.start)));
    }
    writeString(string, opts) {
      if (string == null) dart.nullFailed(I[114], 875, 47, "string");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 876, 17, "encoding");
      core.ArgumentError.checkNotNull(convert.Encoding, encoding, "encoding");
      let data = encoding.encode(string);
      return this.writeFrom(data, 0, data[$length]);
    }
    writeStringSync(string, opts) {
      if (string == null) dart.nullFailed(I[114], 883, 31, "string");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[114], 883, 49, "encoding");
      core.ArgumentError.checkNotNull(convert.Encoding, encoding, "encoding");
      let data = encoding.encode(string);
      this.writeFromSync(data, 0, data[$length]);
    }
    position() {
      return this[_dispatch](8, [null]).then(core.int, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "position failed", this.path));
        }
        return T$0.FutureOrOfint().as(response);
      }, T$0.dynamicToFutureOrOfint()));
    }
    positionSync() {
      this[_checkAvailable]();
      let result = this[_ops].position();
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("position failed", this.path, result));
      }
      return core.int.as(result);
    }
    setPosition(position) {
      if (position == null) dart.nullFailed(I[114], 908, 44, "position");
      return this[_dispatch](9, [null, position]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "setPosition failed", this.path));
        }
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    setPositionSync(position) {
      if (position == null) dart.nullFailed(I[114], 918, 28, "position");
      this[_checkAvailable]();
      let result = this[_ops].setPosition(position);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("setPosition failed", this.path, result));
      }
    }
    truncate(length) {
      if (length == null) dart.nullFailed(I[114], 926, 41, "length");
      return this[_dispatch](10, [null, length]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "truncate failed", this.path));
        }
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    truncateSync(length) {
      if (length == null) dart.nullFailed(I[114], 935, 25, "length");
      this[_checkAvailable]();
      let result = this[_ops].truncate(length);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("truncate failed", this.path, result));
      }
    }
    length() {
      return this[_dispatch](11, [null]).then(core.int, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "length failed", this.path));
        }
        return T$0.FutureOrOfint().as(response);
      }, T$0.dynamicToFutureOrOfint()));
    }
    lengthSync() {
      this[_checkAvailable]();
      let result = this[_ops].length();
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("length failed", this.path, result));
      }
      return core.int.as(result);
    }
    flush() {
      return this[_dispatch](17, [null]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "flush failed", this.path));
        }
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    flushSync() {
      this[_checkAvailable]();
      let result = this[_ops].flush();
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("flush failed", this.path, result));
      }
    }
    [_fileLockValue](fl) {
      if (fl == null) dart.nullFailed(I[114], 984, 31, "fl");
      return fl[_type];
    }
    lock(mode = C[115] || CT.C115, start = 0, end = -1) {
      if (mode == null) dart.nullFailed(I[114], 987, 17, "mode");
      if (start == null) dart.nullFailed(I[114], 987, 48, "start");
      if (end == null) dart.nullFailed(I[114], 987, 63, "end");
      core.ArgumentError.checkNotNull(io.FileLock, mode, "mode");
      core.ArgumentError.checkNotNull(core.int, start, "start");
      core.ArgumentError.checkNotNull(core.int, end, "end");
      if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
        dart.throw(new core.ArgumentError.new());
      }
      let lock = this[_fileLockValue](mode);
      return this[_dispatch](30, [null, lock, start, end]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "lock failed", this.path));
        }
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    unlock(start = 0, end = -1) {
      if (start == null) dart.nullFailed(I[114], 1005, 40, "start");
      if (end == null) dart.nullFailed(I[114], 1005, 55, "end");
      core.ArgumentError.checkNotNull(core.int, start, "start");
      core.ArgumentError.checkNotNull(core.int, end, "end");
      if (start == end) {
        dart.throw(new core.ArgumentError.new());
      }
      return this[_dispatch](30, [null, 0, start, end]).then(io.RandomAccessFile, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          dart.throw(io._exceptionFromResponse(response, "unlock failed", this.path));
        }
        return this;
      }, T$0.dynamicTo_RandomAccessFile()));
    }
    lockSync(mode = C[115] || CT.C115, start = 0, end = -1) {
      if (mode == null) dart.nullFailed(I[114], 1022, 17, "mode");
      if (start == null) dart.nullFailed(I[114], 1022, 48, "start");
      if (end == null) dart.nullFailed(I[114], 1022, 63, "end");
      this[_checkAvailable]();
      core.ArgumentError.checkNotNull(io.FileLock, mode, "mode");
      core.ArgumentError.checkNotNull(core.int, start, "start");
      core.ArgumentError.checkNotNull(core.int, end, "end");
      if (dart.notNull(start) < 0 || dart.notNull(end) < -1 || end !== -1 && dart.notNull(start) >= dart.notNull(end)) {
        dart.throw(new core.ArgumentError.new());
      }
      let lock = this[_fileLockValue](mode);
      let result = this[_ops].lock(lock, start, end);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("lock failed", this.path, result));
      }
    }
    unlockSync(start = 0, end = -1) {
      if (start == null) dart.nullFailed(I[114], 1038, 24, "start");
      if (end == null) dart.nullFailed(I[114], 1038, 39, "end");
      this[_checkAvailable]();
      core.ArgumentError.checkNotNull(core.int, start, "start");
      core.ArgumentError.checkNotNull(core.int, end, "end");
      if (start == end) {
        dart.throw(new core.ArgumentError.new());
      }
      let result = this[_ops].lock(0, start, end);
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new("unlock failed", this.path, result));
      }
    }
    [_pointer]() {
      return this[_ops].getPointer();
    }
    [_dispatch](request, data, opts) {
      if (request == null) dart.nullFailed(I[114], 1061, 24, "request");
      if (data == null) dart.nullFailed(I[114], 1061, 38, "data");
      let markClosed = opts && 'markClosed' in opts ? opts.markClosed : false;
      if (markClosed == null) dart.nullFailed(I[114], 1061, 50, "markClosed");
      if (dart.test(this.closed)) {
        return async.Future.error(new io.FileSystemException.new("File closed", this.path));
      }
      if (dart.test(this[_asyncDispatched])) {
        let msg = "An async operation is currently pending";
        return async.Future.error(new io.FileSystemException.new(msg, this.path));
      }
      if (dart.test(markClosed)) {
        this.closed = true;
      }
      this[_asyncDispatched] = true;
      data[$_set](0, this[_pointer]());
      return io._IOService._dispatch(request, data).whenComplete(dart.fn(() => {
        this[_asyncDispatched] = false;
      }, T$.VoidToNull()));
    }
    [_checkAvailable]() {
      if (dart.test(this[_asyncDispatched])) {
        dart.throw(new io.FileSystemException.new("An async operation is currently pending", this.path));
      }
      if (dart.test(this.closed)) {
        dart.throw(new io.FileSystemException.new("File closed", this.path));
      }
    }
  };
  (io._RandomAccessFile.new = function(pointer, path) {
    if (pointer == null) dart.nullFailed(I[114], 674, 25, "pointer");
    if (path == null) dart.nullFailed(I[114], 674, 39, "path");
    this[_asyncDispatched] = false;
    this[___RandomAccessFile__resourceInfo] = null;
    this[___RandomAccessFile__resourceInfo_isSet] = false;
    this.closed = false;
    this.path = path;
    this[_ops] = io._RandomAccessFileOps.new(pointer);
    this[_resourceInfo] = new io._FileResourceInfo.new(this);
    this[_maybeConnectHandler]();
  }).prototype = io._RandomAccessFile.prototype;
  dart.addTypeTests(io._RandomAccessFile);
  dart.addTypeCaches(io._RandomAccessFile);
  io._RandomAccessFile[dart.implements] = () => [io.RandomAccessFile];
  dart.setMethodSignature(io._RandomAccessFile, () => ({
    __proto__: dart.getMethods(io._RandomAccessFile.__proto__),
    [_maybePerformCleanup]: dart.fnType(dart.void, []),
    [_maybeConnectHandler]: dart.fnType(dart.dynamic, []),
    close: dart.fnType(async.Future$(dart.void), []),
    closeSync: dart.fnType(dart.void, []),
    readByte: dart.fnType(async.Future$(core.int), []),
    readByteSync: dart.fnType(core.int, []),
    read: dart.fnType(async.Future$(typed_data.Uint8List), [core.int]),
    readSync: dart.fnType(typed_data.Uint8List, [core.int]),
    readInto: dart.fnType(async.Future$(core.int), [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
    readIntoSync: dart.fnType(core.int, [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
    writeByte: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
    writeByteSync: dart.fnType(core.int, [core.int]),
    writeFrom: dart.fnType(async.Future$(io.RandomAccessFile), [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
    writeFromSync: dart.fnType(dart.void, [core.List$(core.int)], [core.int, dart.nullable(core.int)]),
    writeString: dart.fnType(async.Future$(io.RandomAccessFile), [core.String], {encoding: convert.Encoding}, {}),
    writeStringSync: dart.fnType(dart.void, [core.String], {encoding: convert.Encoding}, {}),
    position: dart.fnType(async.Future$(core.int), []),
    positionSync: dart.fnType(core.int, []),
    setPosition: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
    setPositionSync: dart.fnType(dart.void, [core.int]),
    truncate: dart.fnType(async.Future$(io.RandomAccessFile), [core.int]),
    truncateSync: dart.fnType(dart.void, [core.int]),
    length: dart.fnType(async.Future$(core.int), []),
    lengthSync: dart.fnType(core.int, []),
    flush: dart.fnType(async.Future$(io.RandomAccessFile), []),
    flushSync: dart.fnType(dart.void, []),
    [_fileLockValue]: dart.fnType(core.int, [io.FileLock]),
    lock: dart.fnType(async.Future$(io.RandomAccessFile), [], [io.FileLock, core.int, core.int]),
    unlock: dart.fnType(async.Future$(io.RandomAccessFile), [], [core.int, core.int]),
    lockSync: dart.fnType(dart.void, [], [io.FileLock, core.int, core.int]),
    unlockSync: dart.fnType(dart.void, [], [core.int, core.int]),
    [_pointer]: dart.fnType(core.int, []),
    [_dispatch]: dart.fnType(async.Future, [core.int, core.List], {markClosed: core.bool}, {}),
    [_checkAvailable]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(io._RandomAccessFile, () => ({
    __proto__: dart.getGetters(io._RandomAccessFile.__proto__),
    [_resourceInfo]: io._FileResourceInfo
  }));
  dart.setSetterSignature(io._RandomAccessFile, () => ({
    __proto__: dart.getSetters(io._RandomAccessFile.__proto__),
    [_resourceInfo]: io._FileResourceInfo
  }));
  dart.setLibraryUri(io._RandomAccessFile, I[105]);
  dart.setFieldSignature(io._RandomAccessFile, () => ({
    __proto__: dart.getFields(io._RandomAccessFile.__proto__),
    path: dart.finalFieldType(core.String),
    [_asyncDispatched]: dart.fieldType(core.bool),
    [___RandomAccessFile__resourceInfo]: dart.fieldType(dart.nullable(io._FileResourceInfo)),
    [___RandomAccessFile__resourceInfo_isSet]: dart.fieldType(core.bool),
    [_ops]: dart.fieldType(io._RandomAccessFileOps),
    closed: dart.fieldType(core.bool)
  }));
  dart.defineLazy(io._RandomAccessFile, {
    /*io._RandomAccessFile._connectedResourceHandler*/get _connectedResourceHandler() {
      return false;
    },
    set _connectedResourceHandler(_) {},
    /*io._RandomAccessFile.lockUnlock*/get lockUnlock() {
      return 0;
    }
  }, false);
  var _type$2 = dart.privateName(io, "FileSystemEntityType._type");
  io.FileSystemEntityType = class FileSystemEntityType extends core.Object {
    get [_type]() {
      return this[_type$2];
    }
    set [_type](value) {
      super[_type] = value;
    }
    static _lookup(type) {
      if (type == null) dart.nullFailed(I[111], 39, 43, "type");
      return io.FileSystemEntityType._typeList[$_get](type);
    }
    toString() {
      return (C[121] || CT.C121)[$_get](this[_type]);
    }
  };
  (io.FileSystemEntityType._internal = function(_type) {
    if (_type == null) dart.nullFailed(I[111], 37, 45, "_type");
    this[_type$2] = _type;
    ;
  }).prototype = io.FileSystemEntityType.prototype;
  dart.addTypeTests(io.FileSystemEntityType);
  dart.addTypeCaches(io.FileSystemEntityType);
  dart.setLibraryUri(io.FileSystemEntityType, I[105]);
  dart.setFieldSignature(io.FileSystemEntityType, () => ({
    __proto__: dart.getFields(io.FileSystemEntityType.__proto__),
    [_type]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.FileSystemEntityType, ['toString']);
  dart.defineLazy(io.FileSystemEntityType, {
    /*io.FileSystemEntityType.file*/get file() {
      return C[122] || CT.C122;
    },
    /*io.FileSystemEntityType.FILE*/get FILE() {
      return C[122] || CT.C122;
    },
    /*io.FileSystemEntityType.directory*/get directory() {
      return C[123] || CT.C123;
    },
    /*io.FileSystemEntityType.DIRECTORY*/get DIRECTORY() {
      return C[123] || CT.C123;
    },
    /*io.FileSystemEntityType.link*/get link() {
      return C[124] || CT.C124;
    },
    /*io.FileSystemEntityType.LINK*/get LINK() {
      return C[124] || CT.C124;
    },
    /*io.FileSystemEntityType.notFound*/get notFound() {
      return C[125] || CT.C125;
    },
    /*io.FileSystemEntityType.NOT_FOUND*/get NOT_FOUND() {
      return C[125] || CT.C125;
    },
    /*io.FileSystemEntityType._typeList*/get _typeList() {
      return C[126] || CT.C126;
    }
  }, false);
  var changed$ = dart.privateName(io, "FileStat.changed");
  var modified$ = dart.privateName(io, "FileStat.modified");
  var accessed$ = dart.privateName(io, "FileStat.accessed");
  var type$1 = dart.privateName(io, "FileStat.type");
  var mode$0 = dart.privateName(io, "FileStat.mode");
  var size$ = dart.privateName(io, "FileStat.size");
  io.FileStat = class FileStat extends core.Object {
    get changed() {
      return this[changed$];
    }
    set changed(value) {
      super.changed = value;
    }
    get modified() {
      return this[modified$];
    }
    set modified(value) {
      super.modified = value;
    }
    get accessed() {
      return this[accessed$];
    }
    set accessed(value) {
      super.accessed = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    get mode() {
      return this[mode$0];
    }
    set mode(value) {
      super.mode = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    static _statSync(namespace, path) {
      if (namespace == null) dart.nullFailed(I[107], 84, 31, "namespace");
      if (path == null) dart.nullFailed(I[107], 84, 49, "path");
      dart.throw(new core.UnsupportedError.new("FileStat.stat"));
    }
    static statSync(path) {
      if (path == null) dart.nullFailed(I[111], 99, 35, "path");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileStat._statSyncInternal(path);
      }
      return overrides.statSync(path);
    }
    static _statSyncInternal(path) {
      if (path == null) dart.nullFailed(I[111], 107, 44, "path");
      if (dart.test(io.Platform.isWindows)) {
        path = io.FileSystemEntity._trimTrailingPathSeparators(path);
      }
      let data = io.FileStat._statSync(io._Namespace._namespace, path);
      if (io.OSError.is(data)) return io.FileStat._notFound;
      return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [1]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [2]))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(dart.dsend(data, '_get', [3]))), io.FileSystemEntityType._lookup(core.int.as(dart.dsend(data, '_get', [0]))), core.int.as(dart.dsend(data, '_get', [4])), core.int.as(dart.dsend(data, '_get', [5])));
    }
    static stat(path) {
      if (path == null) dart.nullFailed(I[111], 127, 39, "path");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return io.FileStat._stat(path);
      }
      return overrides.stat(path);
    }
    static _stat(path) {
      if (path == null) dart.nullFailed(I[111], 135, 40, "path");
      if (dart.test(io.Platform.isWindows)) {
        path = io.FileSystemEntity._trimTrailingPathSeparators(path);
      }
      return io._File._dispatchWithNamespace(29, [null, path]).then(io.FileStat, dart.fn(response => {
        if (dart.test(io._isErrorResponse(response))) {
          return io.FileStat._notFound;
        }
        let data = core.List.as(dart.dsend(response, '_get', [1]));
        return new io.FileStat._internal(new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](1))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](2))), new core.DateTime.fromMillisecondsSinceEpoch(core.int.as(data[$_get](3))), io.FileSystemEntityType._lookup(core.int.as(data[$_get](0))), core.int.as(data[$_get](4)), core.int.as(data[$_get](5)));
      }, T$0.dynamicToFileStat()));
    }
    toString() {
      return "FileStat: type " + dart.str(this.type) + "\n          changed " + dart.str(this.changed) + "\n          modified " + dart.str(this.modified) + "\n          accessed " + dart.str(this.accessed) + "\n          mode " + dart.str(this.modeString()) + "\n          size " + dart.str(this.size);
    }
    modeString() {
      let t201;
      let permissions = dart.notNull(this.mode) & 4095;
      let codes = C[127] || CT.C127;
      let result = [];
      if ((permissions & 2048) !== 0) result[$add]("(suid) ");
      if ((permissions & 1024) !== 0) result[$add]("(guid) ");
      if ((permissions & 512) !== 0) result[$add]("(sticky) ");
      t201 = result;
      (() => {
        t201[$add](codes[$_get](permissions >> 6 & 7));
        t201[$add](codes[$_get](permissions >> 3 & 7));
        t201[$add](codes[$_get](permissions & 7));
        return t201;
      })();
      return result[$join]();
    }
  };
  (io.FileStat._internal = function(changed, modified, accessed, type, mode, size) {
    if (changed == null) dart.nullFailed(I[111], 89, 27, "changed");
    if (modified == null) dart.nullFailed(I[111], 89, 41, "modified");
    if (accessed == null) dart.nullFailed(I[111], 89, 56, "accessed");
    if (type == null) dart.nullFailed(I[111], 89, 71, "type");
    if (mode == null) dart.nullFailed(I[111], 90, 12, "mode");
    if (size == null) dart.nullFailed(I[111], 90, 23, "size");
    this[changed$] = changed;
    this[modified$] = modified;
    this[accessed$] = accessed;
    this[type$1] = type;
    this[mode$0] = mode;
    this[size$] = size;
    ;
  }).prototype = io.FileStat.prototype;
  dart.addTypeTests(io.FileStat);
  dart.addTypeCaches(io.FileStat);
  dart.setMethodSignature(io.FileStat, () => ({
    __proto__: dart.getMethods(io.FileStat.__proto__),
    modeString: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(io.FileStat, I[105]);
  dart.setFieldSignature(io.FileStat, () => ({
    __proto__: dart.getFields(io.FileStat.__proto__),
    changed: dart.finalFieldType(core.DateTime),
    modified: dart.finalFieldType(core.DateTime),
    accessed: dart.finalFieldType(core.DateTime),
    type: dart.finalFieldType(io.FileSystemEntityType),
    mode: dart.finalFieldType(core.int),
    size: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.FileStat, ['toString']);
  dart.defineLazy(io.FileStat, {
    /*io.FileStat._type*/get _type() {
      return 0;
    },
    /*io.FileStat._changedTime*/get _changedTime() {
      return 1;
    },
    /*io.FileStat._modifiedTime*/get _modifiedTime() {
      return 2;
    },
    /*io.FileStat._accessedTime*/get _accessedTime() {
      return 3;
    },
    /*io.FileStat._mode*/get _mode() {
      return 4;
    },
    /*io.FileStat._size*/get _size() {
      return 5;
    },
    /*io.FileStat._epoch*/get _epoch() {
      return new core.DateTime.fromMillisecondsSinceEpoch(0, {isUtc: true});
    },
    /*io.FileStat._notFound*/get _notFound() {
      return new io.FileStat._internal(io.FileStat._epoch, io.FileStat._epoch, io.FileStat._epoch, io.FileSystemEntityType.notFound, 0, -1);
    }
  }, false);
  var type$2 = dart.privateName(io, "FileSystemEvent.type");
  var path$0 = dart.privateName(io, "FileSystemEvent.path");
  var isDirectory$ = dart.privateName(io, "FileSystemEvent.isDirectory");
  io.FileSystemEvent = class FileSystemEvent extends core.Object {
    get type() {
      return this[type$2];
    }
    set type(value) {
      super.type = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get isDirectory() {
      return this[isDirectory$];
    }
    set isDirectory(value) {
      super.isDirectory = value;
    }
  };
  (io.FileSystemEvent.__ = function(type, path, isDirectory) {
    if (type == null) dart.nullFailed(I[111], 905, 26, "type");
    if (path == null) dart.nullFailed(I[111], 905, 37, "path");
    if (isDirectory == null) dart.nullFailed(I[111], 905, 48, "isDirectory");
    this[type$2] = type;
    this[path$0] = path;
    this[isDirectory$] = isDirectory;
    ;
  }).prototype = io.FileSystemEvent.prototype;
  dart.addTypeTests(io.FileSystemEvent);
  dart.addTypeCaches(io.FileSystemEvent);
  dart.setLibraryUri(io.FileSystemEvent, I[105]);
  dart.setFieldSignature(io.FileSystemEvent, () => ({
    __proto__: dart.getFields(io.FileSystemEvent.__proto__),
    type: dart.finalFieldType(core.int),
    path: dart.finalFieldType(core.String),
    isDirectory: dart.finalFieldType(core.bool)
  }));
  dart.defineLazy(io.FileSystemEvent, {
    /*io.FileSystemEvent.create*/get create() {
      return 1;
    },
    /*io.FileSystemEvent.CREATE*/get CREATE() {
      return 1;
    },
    /*io.FileSystemEvent.modify*/get modify() {
      return 2;
    },
    /*io.FileSystemEvent.MODIFY*/get MODIFY() {
      return 2;
    },
    /*io.FileSystemEvent.delete*/get delete() {
      return 4;
    },
    /*io.FileSystemEvent.DELETE*/get DELETE() {
      return 4;
    },
    /*io.FileSystemEvent.move*/get move() {
      return 8;
    },
    /*io.FileSystemEvent.MOVE*/get MOVE() {
      return 8;
    },
    /*io.FileSystemEvent.all*/get all() {
      return 15;
    },
    /*io.FileSystemEvent.ALL*/get ALL() {
      return 15;
    },
    /*io.FileSystemEvent._modifyAttributes*/get _modifyAttributes() {
      return 16;
    },
    /*io.FileSystemEvent._deleteSelf*/get _deleteSelf() {
      return 32;
    },
    /*io.FileSystemEvent._isDir*/get _isDir() {
      return 64;
    }
  }, false);
  io.FileSystemCreateEvent = class FileSystemCreateEvent extends io.FileSystemEvent {
    toString() {
      return "FileSystemCreateEvent('" + dart.str(this.path) + "')";
    }
  };
  (io.FileSystemCreateEvent.__ = function(path, isDirectory) {
    io.FileSystemCreateEvent.__proto__.__.call(this, 1, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = io.FileSystemCreateEvent.prototype;
  dart.addTypeTests(io.FileSystemCreateEvent);
  dart.addTypeCaches(io.FileSystemCreateEvent);
  dart.setLibraryUri(io.FileSystemCreateEvent, I[105]);
  dart.defineExtensionMethods(io.FileSystemCreateEvent, ['toString']);
  var contentChanged$ = dart.privateName(io, "FileSystemModifyEvent.contentChanged");
  io.FileSystemModifyEvent = class FileSystemModifyEvent extends io.FileSystemEvent {
    get contentChanged() {
      return this[contentChanged$];
    }
    set contentChanged(value) {
      super.contentChanged = value;
    }
    toString() {
      return "FileSystemModifyEvent('" + dart.str(this.path) + "', contentChanged=" + dart.str(this.contentChanged) + ")";
    }
  };
  (io.FileSystemModifyEvent.__ = function(path, isDirectory, contentChanged) {
    if (contentChanged == null) dart.nullFailed(I[111], 922, 51, "contentChanged");
    this[contentChanged$] = contentChanged;
    io.FileSystemModifyEvent.__proto__.__.call(this, 2, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = io.FileSystemModifyEvent.prototype;
  dart.addTypeTests(io.FileSystemModifyEvent);
  dart.addTypeCaches(io.FileSystemModifyEvent);
  dart.setLibraryUri(io.FileSystemModifyEvent, I[105]);
  dart.setFieldSignature(io.FileSystemModifyEvent, () => ({
    __proto__: dart.getFields(io.FileSystemModifyEvent.__proto__),
    contentChanged: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(io.FileSystemModifyEvent, ['toString']);
  io.FileSystemDeleteEvent = class FileSystemDeleteEvent extends io.FileSystemEvent {
    toString() {
      return "FileSystemDeleteEvent('" + dart.str(this.path) + "')";
    }
  };
  (io.FileSystemDeleteEvent.__ = function(path, isDirectory) {
    io.FileSystemDeleteEvent.__proto__.__.call(this, 4, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = io.FileSystemDeleteEvent.prototype;
  dart.addTypeTests(io.FileSystemDeleteEvent);
  dart.addTypeCaches(io.FileSystemDeleteEvent);
  dart.setLibraryUri(io.FileSystemDeleteEvent, I[105]);
  dart.defineExtensionMethods(io.FileSystemDeleteEvent, ['toString']);
  var destination$ = dart.privateName(io, "FileSystemMoveEvent.destination");
  io.FileSystemMoveEvent = class FileSystemMoveEvent extends io.FileSystemEvent {
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
    toString() {
      let buffer = new core.StringBuffer.new();
      buffer.write("FileSystemMoveEvent('" + dart.str(this.path) + "'");
      if (this.destination != null) buffer.write(", '" + dart.str(this.destination) + "'");
      buffer.write(")");
      return buffer.toString();
    }
  };
  (io.FileSystemMoveEvent.__ = function(path, isDirectory, destination) {
    this[destination$] = destination;
    io.FileSystemMoveEvent.__proto__.__.call(this, 8, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = io.FileSystemMoveEvent.prototype;
  dart.addTypeTests(io.FileSystemMoveEvent);
  dart.addTypeCaches(io.FileSystemMoveEvent);
  dart.setLibraryUri(io.FileSystemMoveEvent, I[105]);
  dart.setFieldSignature(io.FileSystemMoveEvent, () => ({
    __proto__: dart.getFields(io.FileSystemMoveEvent.__proto__),
    destination: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(io.FileSystemMoveEvent, ['toString']);
  io._FileSystemWatcher = class _FileSystemWatcher extends core.Object {
    static _watch(path, events, recursive) {
      if (path == null) dart.nullFailed(I[107], 691, 14, "path");
      if (events == null) dart.nullFailed(I[107], 691, 24, "events");
      if (recursive == null) dart.nullFailed(I[107], 691, 37, "recursive");
      dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.watch"));
    }
    static get isSupported() {
      dart.throw(new core.UnsupportedError.new("_FileSystemWatcher.isSupported"));
    }
  };
  (io._FileSystemWatcher.new = function() {
    ;
  }).prototype = io._FileSystemWatcher.prototype;
  dart.addTypeTests(io._FileSystemWatcher);
  dart.addTypeCaches(io._FileSystemWatcher);
  dart.setLibraryUri(io._FileSystemWatcher, I[105]);
  io._IOResourceInfo = class _IOResourceInfo extends core.Object {
    static get timestamp() {
      return dart.notNull(io._IOResourceInfo._startTime) + (dart.notNull(io._IOResourceInfo._sw.elapsedMicroseconds) / 1000)[$truncate]();
    }
    get referenceValueMap() {
      return new (T$0.IdentityMapOfString$dynamic()).from(["type", "@" + dart.str(this.type), "id", this.id, "name", this.name]);
    }
    static getNextID() {
      let t201;
      t201 = io._IOResourceInfo._count;
      io._IOResourceInfo._count = dart.notNull(t201) + 1;
      return t201;
    }
  };
  (io._IOResourceInfo.new = function(type) {
    if (type == null) dart.nullFailed(I[115], 18, 24, "type");
    this.type = type;
    this.id = io._IOResourceInfo.getNextID();
    ;
  }).prototype = io._IOResourceInfo.prototype;
  dart.addTypeTests(io._IOResourceInfo);
  dart.addTypeCaches(io._IOResourceInfo);
  dart.setGetterSignature(io._IOResourceInfo, () => ({
    __proto__: dart.getGetters(io._IOResourceInfo.__proto__),
    referenceValueMap: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(io._IOResourceInfo, I[105]);
  dart.setFieldSignature(io._IOResourceInfo, () => ({
    __proto__: dart.getFields(io._IOResourceInfo.__proto__),
    type: dart.finalFieldType(core.String),
    id: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(io._IOResourceInfo, {
    /*io._IOResourceInfo._count*/get _count() {
      return 0;
    },
    set _count(_) {},
    /*io._IOResourceInfo._sw*/get _sw() {
      let t201;
      return t201 = new core.Stopwatch.new(), (() => {
        t201.start();
        return t201;
      })();
    },
    /*io._IOResourceInfo._startTime*/get _startTime() {
      return new core.DateTime.now().millisecondsSinceEpoch;
    }
  }, false);
  io._ReadWriteResourceInfo = class _ReadWriteResourceInfo extends io._IOResourceInfo {
    addRead(bytes) {
      if (bytes == null) dart.nullFailed(I[115], 47, 20, "bytes");
      this.readBytes = dart.notNull(this.readBytes) + dart.notNull(bytes);
      this.readCount = dart.notNull(this.readCount) + 1;
      this.lastReadTime = io._IOResourceInfo.timestamp;
    }
    didRead() {
      this.addRead(0);
    }
    addWrite(bytes) {
      if (bytes == null) dart.nullFailed(I[115], 60, 21, "bytes");
      this.writeBytes = dart.notNull(this.writeBytes) + dart.notNull(bytes);
      this.writeCount = dart.notNull(this.writeCount) + 1;
      this.lastWriteTime = io._IOResourceInfo.timestamp;
    }
    get fullValueMap() {
      return new (T$0.IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "readBytes", this.readBytes, "writeBytes", this.writeBytes, "readCount", this.readCount, "writeCount", this.writeCount, "lastReadTime", this.lastReadTime, "lastWriteTime", this.lastWriteTime]);
    }
  };
  (io._ReadWriteResourceInfo.new = function(type) {
    if (type == null) dart.nullFailed(I[115], 66, 33, "type");
    this.readBytes = 0;
    this.writeBytes = 0;
    this.readCount = 0;
    this.writeCount = 0;
    this.lastReadTime = 0;
    this.lastWriteTime = 0;
    io._ReadWriteResourceInfo.__proto__.new.call(this, type);
    ;
  }).prototype = io._ReadWriteResourceInfo.prototype;
  dart.addTypeTests(io._ReadWriteResourceInfo);
  dart.addTypeCaches(io._ReadWriteResourceInfo);
  dart.setMethodSignature(io._ReadWriteResourceInfo, () => ({
    __proto__: dart.getMethods(io._ReadWriteResourceInfo.__proto__),
    addRead: dart.fnType(dart.void, [core.int]),
    didRead: dart.fnType(dart.void, []),
    addWrite: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(io._ReadWriteResourceInfo, () => ({
    __proto__: dart.getGetters(io._ReadWriteResourceInfo.__proto__),
    fullValueMap: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(io._ReadWriteResourceInfo, I[105]);
  dart.setFieldSignature(io._ReadWriteResourceInfo, () => ({
    __proto__: dart.getFields(io._ReadWriteResourceInfo.__proto__),
    readBytes: dart.fieldType(core.int),
    writeBytes: dart.fieldType(core.int),
    readCount: dart.fieldType(core.int),
    writeCount: dart.fieldType(core.int),
    lastReadTime: dart.fieldType(core.int),
    lastWriteTime: dart.fieldType(core.int)
  }));
  io._FileResourceInfo = class _FileResourceInfo extends io._ReadWriteResourceInfo {
    static fileOpened(info) {
      if (info == null) dart.nullFailed(I[115], 99, 39, "info");
      if (!!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, I[115], 100, 12, "!openFiles.containsKey(info.id)");
      io._FileResourceInfo.openFiles[$_set](info.id, info);
    }
    static fileClosed(info) {
      if (info == null) dart.nullFailed(I[115], 104, 39, "info");
      if (!dart.test(io._FileResourceInfo.openFiles[$containsKey](info.id))) dart.assertFailed(null, I[115], 105, 12, "openFiles.containsKey(info.id)");
      io._FileResourceInfo.openFiles[$remove](info.id);
    }
    static getOpenFilesList() {
      return T$0.ListOfMapOfString$dynamic().from(io._FileResourceInfo.openFiles[$values][$map](dart.dynamic, dart.fn(e => {
        if (e == null) dart.nullFailed(I[115], 111, 8, "e");
        return e.referenceValueMap;
      }, T$0._FileResourceInfoToMapOfString$dynamic())));
    }
    static getOpenFiles($function, params) {
      if (!dart.equals($function, "ext.dart.io.getOpenFiles")) dart.assertFailed(null, I[115], 116, 12, "function == 'ext.dart.io.getOpenFiles'");
      let data = new (T$.IdentityMapOfString$Object()).from(["type", "OpenFileList", "files", io._FileResourceInfo.getOpenFilesList()]);
      let jsonValue = convert.json.encode(data);
      return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
    }
    get fileInfoMap() {
      return this.fullValueMap;
    }
    static getOpenFileInfoMapByID($function, params) {
      let id = core.int.parse(core.String.as(dart.nullCheck(dart.dsend(params, '_get', ["id"]))));
      let result = dart.test(io._FileResourceInfo.openFiles[$containsKey](id)) ? dart.nullCheck(io._FileResourceInfo.openFiles[$_get](id)).fileInfoMap : new _js_helper.LinkedMap.new();
      let jsonValue = convert.json.encode(result);
      return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
    }
    get name() {
      return core.String.as(dart.dload(this.file, 'path'));
    }
  };
  (io._FileResourceInfo.new = function(file) {
    this.file = file;
    io._FileResourceInfo.__proto__.new.call(this, "OpenFile");
    io._FileResourceInfo.fileOpened(this);
  }).prototype = io._FileResourceInfo.prototype;
  dart.addTypeTests(io._FileResourceInfo);
  dart.addTypeCaches(io._FileResourceInfo);
  dart.setGetterSignature(io._FileResourceInfo, () => ({
    __proto__: dart.getGetters(io._FileResourceInfo.__proto__),
    fileInfoMap: core.Map$(core.String, dart.dynamic),
    name: core.String
  }));
  dart.setLibraryUri(io._FileResourceInfo, I[105]);
  dart.setFieldSignature(io._FileResourceInfo, () => ({
    __proto__: dart.getFields(io._FileResourceInfo.__proto__),
    file: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineLazy(io._FileResourceInfo, {
    /*io._FileResourceInfo._type*/get _type() {
      return "OpenFile";
    },
    /*io._FileResourceInfo.openFiles*/get openFiles() {
      return new (T$0.IdentityMapOfint$_FileResourceInfo()).new();
    },
    set openFiles(_) {}
  }, false);
  var _arguments$2 = dart.privateName(io, "_arguments");
  var _workingDirectory = dart.privateName(io, "_workingDirectory");
  io._SpawnedProcessResourceInfo = class _SpawnedProcessResourceInfo extends io._IOResourceInfo {
    get name() {
      return core.String.as(dart.dload(this.process, _path$));
    }
    stopped() {
      return io._SpawnedProcessResourceInfo.processStopped(this);
    }
    get fullValueMap() {
      return new (T$0.IdentityMapOfString$dynamic()).from(["type", this.type, "id", this.id, "name", this.name, "pid", dart.dload(this.process, 'pid'), "startedAt", this.startedAt, "arguments", dart.dload(this.process, _arguments$2), "workingDirectory", dart.dload(this.process, _workingDirectory) == null ? "." : dart.dload(this.process, _workingDirectory)]);
    }
    static processStarted(info) {
      if (info == null) dart.nullFailed(I[115], 167, 53, "info");
      if (!!dart.test(io._SpawnedProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, I[115], 168, 12, "!startedProcesses.containsKey(info.id)");
      io._SpawnedProcessResourceInfo.startedProcesses[$_set](info.id, info);
    }
    static processStopped(info) {
      if (info == null) dart.nullFailed(I[115], 172, 53, "info");
      if (!dart.test(io._SpawnedProcessResourceInfo.startedProcesses[$containsKey](info.id))) dart.assertFailed(null, I[115], 173, 12, "startedProcesses.containsKey(info.id)");
      io._SpawnedProcessResourceInfo.startedProcesses[$remove](info.id);
    }
    static getStartedProcessesList() {
      return T$0.ListOfMapOfString$dynamic().from(io._SpawnedProcessResourceInfo.startedProcesses[$values][$map](dart.dynamic, dart.fn(e => {
        if (e == null) dart.nullFailed(I[115], 179, 10, "e");
        return e.referenceValueMap;
      }, T$0._SpawnedProcessResourceInfoToMapOfString$dynamic())));
    }
    static getStartedProcesses($function, params) {
      if ($function == null) dart.nullFailed(I[115], 183, 14, "function");
      if (params == null) dart.nullFailed(I[115], 183, 44, "params");
      if (!($function === "ext.dart.io.getSpawnedProcesses")) dart.assertFailed(null, I[115], 184, 12, "function == 'ext.dart.io.getSpawnedProcesses'");
      let data = new (T$.IdentityMapOfString$Object()).from(["type", "SpawnedProcessList", "processes", io._SpawnedProcessResourceInfo.getStartedProcessesList()]);
      let jsonValue = convert.json.encode(data);
      return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
    }
    static getProcessInfoMapById($function, params) {
      if ($function == null) dart.nullFailed(I[115], 194, 14, "function");
      if (params == null) dart.nullFailed(I[115], 194, 44, "params");
      let id = core.int.parse(dart.nullCheck(params[$_get]("id")));
      let result = dart.test(io._SpawnedProcessResourceInfo.startedProcesses[$containsKey](id)) ? dart.nullCheck(io._SpawnedProcessResourceInfo.startedProcesses[$_get](id)).fullValueMap : new _js_helper.LinkedMap.new();
      let jsonValue = convert.json.encode(result);
      return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(jsonValue));
    }
  };
  (io._SpawnedProcessResourceInfo.new = function(process) {
    this.process = process;
    this.startedAt = io._IOResourceInfo.timestamp;
    io._SpawnedProcessResourceInfo.__proto__.new.call(this, "SpawnedProcess");
    io._SpawnedProcessResourceInfo.processStarted(this);
  }).prototype = io._SpawnedProcessResourceInfo.prototype;
  dart.addTypeTests(io._SpawnedProcessResourceInfo);
  dart.addTypeCaches(io._SpawnedProcessResourceInfo);
  dart.setMethodSignature(io._SpawnedProcessResourceInfo, () => ({
    __proto__: dart.getMethods(io._SpawnedProcessResourceInfo.__proto__),
    stopped: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(io._SpawnedProcessResourceInfo, () => ({
    __proto__: dart.getGetters(io._SpawnedProcessResourceInfo.__proto__),
    name: core.String,
    fullValueMap: core.Map$(core.String, dart.dynamic)
  }));
  dart.setLibraryUri(io._SpawnedProcessResourceInfo, I[105]);
  dart.setFieldSignature(io._SpawnedProcessResourceInfo, () => ({
    __proto__: dart.getFields(io._SpawnedProcessResourceInfo.__proto__),
    process: dart.finalFieldType(dart.dynamic),
    startedAt: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(io._SpawnedProcessResourceInfo, {
    /*io._SpawnedProcessResourceInfo._type*/get _type() {
      return "SpawnedProcess";
    },
    /*io._SpawnedProcessResourceInfo.startedProcesses*/get startedProcesses() {
      return new (T$0.LinkedMapOfint$_SpawnedProcessResourceInfo()).new();
    },
    set startedProcesses(_) {}
  }, false);
  var __IOSink_encoding = dart.privateName(io, "_#IOSink#encoding");
  var __IOSink_encoding_isSet = dart.privateName(io, "_#IOSink#encoding#isSet");
  io.IOSink = class IOSink extends core.Object {
    static new(target, opts) {
      if (target == null) dart.nullFailed(I[116], 23, 44, "target");
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[108] || CT.C108;
      if (encoding == null) dart.nullFailed(I[116], 24, 21, "encoding");
      return new io._IOSinkImpl.new(target, encoding);
    }
    get encoding() {
      let t201;
      return dart.test(this[__IOSink_encoding_isSet]) ? (t201 = this[__IOSink_encoding], t201) : dart.throw(new _internal.LateError.fieldNI("encoding"));
    }
    set encoding(t201) {
      if (t201 == null) dart.nullFailed(I[116], 30, 17, "null");
      this[__IOSink_encoding_isSet] = true;
      this[__IOSink_encoding] = t201;
    }
  };
  (io.IOSink[dart.mixinNew] = function() {
    this[__IOSink_encoding] = null;
    this[__IOSink_encoding_isSet] = false;
  }).prototype = io.IOSink.prototype;
  dart.addTypeTests(io.IOSink);
  dart.addTypeCaches(io.IOSink);
  io.IOSink[dart.implements] = () => [async.StreamSink$(core.List$(core.int)), core.StringSink];
  dart.setGetterSignature(io.IOSink, () => ({
    __proto__: dart.getGetters(io.IOSink.__proto__),
    encoding: convert.Encoding
  }));
  dart.setSetterSignature(io.IOSink, () => ({
    __proto__: dart.getSetters(io.IOSink.__proto__),
    encoding: convert.Encoding
  }));
  dart.setLibraryUri(io.IOSink, I[105]);
  dart.setFieldSignature(io.IOSink, () => ({
    __proto__: dart.getFields(io.IOSink.__proto__),
    [__IOSink_encoding]: dart.fieldType(dart.nullable(convert.Encoding)),
    [__IOSink_encoding_isSet]: dart.fieldType(core.bool)
  }));
  var _doneCompleter = dart.privateName(io, "_doneCompleter");
  var _controllerInstance = dart.privateName(io, "_controllerInstance");
  var _controllerCompleter = dart.privateName(io, "_controllerCompleter");
  var _isClosed$ = dart.privateName(io, "_isClosed");
  var _isBound = dart.privateName(io, "_isBound");
  var _hasError$ = dart.privateName(io, "_hasError");
  var _target$0 = dart.privateName(io, "_target");
  var _closeTarget = dart.privateName(io, "_closeTarget");
  var _completeDoneValue = dart.privateName(io, "_completeDoneValue");
  var _completeDoneError = dart.privateName(io, "_completeDoneError");
  const _is__StreamSinkImpl_default = Symbol('_is__StreamSinkImpl_default');
  io._StreamSinkImpl$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class _StreamSinkImpl extends core.Object {
      add(data) {
        T.as(data);
        if (dart.test(this[_isClosed$])) {
          dart.throw(new core.StateError.new("StreamSink is closed"));
        }
        this[_controller].add(data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[116], 139, 17, "error");
        if (dart.test(this[_isClosed$])) {
          dart.throw(new core.StateError.new("StreamSink is closed"));
        }
        this[_controller].addError(error, stackTrace);
      }
      addStream(stream) {
        let t202;
        StreamOfT().as(stream);
        if (stream == null) dart.nullFailed(I[116], 146, 30, "stream");
        if (dart.test(this[_isBound])) {
          dart.throw(new core.StateError.new("StreamSink is already bound to a stream"));
        }
        if (dart.test(this[_hasError$])) return this.done;
        this[_isBound] = true;
        let future = this[_controllerCompleter] == null ? this[_target$0].addStream(stream) : dart.nullCheck(this[_controllerCompleter]).future.then(dart.dynamic, dart.fn(_ => this[_target$0].addStream(stream), T$.dynamicToFuture()));
        t202 = this[_controllerInstance];
        t202 == null ? null : t202.close();
        return future.whenComplete(dart.fn(() => {
          this[_isBound] = false;
        }, T$.VoidToNull()));
      }
      flush() {
        if (dart.test(this[_isBound])) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (this[_controllerInstance] == null) return async.Future.value(this);
        this[_isBound] = true;
        let future = dart.nullCheck(this[_controllerCompleter]).future;
        dart.nullCheck(this[_controllerInstance]).close();
        return future.whenComplete(dart.fn(() => {
          this[_isBound] = false;
        }, T$.VoidToNull()));
      }
      close() {
        if (dart.test(this[_isBound])) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (!dart.test(this[_isClosed$])) {
          this[_isClosed$] = true;
          if (this[_controllerInstance] != null) {
            dart.nullCheck(this[_controllerInstance]).close();
          } else {
            this[_closeTarget]();
          }
        }
        return this.done;
      }
      [_closeTarget]() {
        this[_target$0].close().then(dart.void, dart.bind(this, _completeDoneValue), {onError: dart.bind(this, _completeDoneError)});
      }
      get done() {
        return this[_doneCompleter].future;
      }
      [_completeDoneValue](value) {
        if (!dart.test(this[_doneCompleter].isCompleted)) {
          this[_doneCompleter].complete(value);
        }
      }
      [_completeDoneError](error, stackTrace) {
        if (!dart.test(this[_doneCompleter].isCompleted)) {
          this[_hasError$] = true;
          this[_doneCompleter].completeError(core.Object.as(error), stackTrace);
        }
      }
      get [_controller]() {
        if (dart.test(this[_isBound])) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        if (dart.test(this[_isClosed$])) {
          dart.throw(new core.StateError.new("StreamSink is closed"));
        }
        if (this[_controllerInstance] == null) {
          this[_controllerInstance] = StreamControllerOfT().new({sync: true});
          this[_controllerCompleter] = async.Completer.new();
          this[_target$0].addStream(this[_controller].stream).then(core.Null, dart.fn(_ => {
            if (dart.test(this[_isBound])) {
              dart.nullCheck(this[_controllerCompleter]).complete(this);
              this[_controllerCompleter] = null;
              this[_controllerInstance] = null;
            } else {
              this[_closeTarget]();
            }
          }, T$.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
              if (dart.test(this[_isBound])) {
                dart.nullCheck(this[_controllerCompleter]).completeError(core.Object.as(error), T$.StackTraceN().as(stackTrace));
                this[_controllerCompleter] = null;
                this[_controllerInstance] = null;
              } else {
                this[_completeDoneError](error, T$.StackTraceN().as(stackTrace));
              }
            }, T$.dynamicAnddynamicToNull())});
        }
        return dart.nullCheck(this[_controllerInstance]);
      }
    }
    (_StreamSinkImpl.new = function(_target) {
      if (_target == null) dart.nullFailed(I[116], 130, 24, "_target");
      this[_doneCompleter] = async.Completer.new();
      this[_controllerInstance] = null;
      this[_controllerCompleter] = null;
      this[_isClosed$] = false;
      this[_isBound] = false;
      this[_hasError$] = false;
      this[_target$0] = _target;
      ;
    }).prototype = _StreamSinkImpl.prototype;
    dart.addTypeTests(_StreamSinkImpl);
    _StreamSinkImpl.prototype[_is__StreamSinkImpl_default] = true;
    dart.addTypeCaches(_StreamSinkImpl);
    _StreamSinkImpl[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(_StreamSinkImpl, () => ({
      __proto__: dart.getMethods(_StreamSinkImpl.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
      flush: dart.fnType(async.Future, []),
      close: dart.fnType(async.Future, []),
      [_closeTarget]: dart.fnType(dart.void, []),
      [_completeDoneValue]: dart.fnType(dart.void, [dart.dynamic]),
      [_completeDoneError]: dart.fnType(dart.void, [dart.dynamic, dart.nullable(core.StackTrace)])
    }));
    dart.setGetterSignature(_StreamSinkImpl, () => ({
      __proto__: dart.getGetters(_StreamSinkImpl.__proto__),
      done: async.Future,
      [_controller]: async.StreamController$(T)
    }));
    dart.setLibraryUri(_StreamSinkImpl, I[105]);
    dart.setFieldSignature(_StreamSinkImpl, () => ({
      __proto__: dart.getFields(_StreamSinkImpl.__proto__),
      [_target$0]: dart.finalFieldType(async.StreamConsumer$(T)),
      [_doneCompleter]: dart.finalFieldType(async.Completer),
      [_controllerInstance]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [_controllerCompleter]: dart.fieldType(dart.nullable(async.Completer)),
      [_isClosed$]: dart.fieldType(core.bool),
      [_isBound]: dart.fieldType(core.bool),
      [_hasError$]: dart.fieldType(core.bool)
    }));
    return _StreamSinkImpl;
  });
  io._StreamSinkImpl = io._StreamSinkImpl$();
  dart.addTypeTests(io._StreamSinkImpl, _is__StreamSinkImpl_default);
  var _encodingMutable = dart.privateName(io, "_encodingMutable");
  var _encoding$ = dart.privateName(io, "_encoding");
  io._IOSinkImpl = class _IOSinkImpl extends io._StreamSinkImpl$(core.List$(core.int)) {
    get encoding() {
      return this[_encoding$];
    }
    set encoding(value) {
      if (value == null) dart.nullFailed(I[116], 259, 30, "value");
      if (!dart.test(this[_encodingMutable])) {
        dart.throw(new core.StateError.new("IOSink encoding is not mutable"));
      }
      this[_encoding$] = value;
    }
    write(obj) {
      let string = dart.str(obj);
      if (string[$isEmpty]) return;
      this.add(this[_encoding$].encode(string));
    }
    writeAll(objects, separator = "") {
      if (objects == null) dart.nullFailed(I[116], 272, 26, "objects");
      if (separator == null) dart.nullFailed(I[116], 272, 43, "separator");
      let iterator = objects[$iterator];
      if (!dart.test(iterator.moveNext())) return;
      if (separator[$isEmpty]) {
        do {
          this.write(iterator.current);
        } while (dart.test(iterator.moveNext()));
      } else {
        this.write(iterator.current);
        while (dart.test(iterator.moveNext())) {
          this.write(separator);
          this.write(iterator.current);
        }
      }
    }
    writeln(object = "") {
      this.write(object);
      this.write("\n");
    }
    writeCharCode(charCode) {
      if (charCode == null) dart.nullFailed(I[116], 293, 26, "charCode");
      this.write(core.String.fromCharCode(charCode));
    }
  };
  (io._IOSinkImpl.new = function(target, _encoding) {
    if (target == null) dart.nullFailed(I[116], 255, 41, "target");
    if (_encoding == null) dart.nullFailed(I[116], 255, 54, "_encoding");
    this[_encodingMutable] = true;
    this[_encoding$] = _encoding;
    io._IOSinkImpl.__proto__.new.call(this, target);
    ;
  }).prototype = io._IOSinkImpl.prototype;
  dart.addTypeTests(io._IOSinkImpl);
  dart.addTypeCaches(io._IOSinkImpl);
  io._IOSinkImpl[dart.implements] = () => [io.IOSink];
  dart.setMethodSignature(io._IOSinkImpl, () => ({
    __proto__: dart.getMethods(io._IOSinkImpl.__proto__),
    write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
    writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)]),
    writeCharCode: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(io._IOSinkImpl, () => ({
    __proto__: dart.getGetters(io._IOSinkImpl.__proto__),
    encoding: convert.Encoding
  }));
  dart.setSetterSignature(io._IOSinkImpl, () => ({
    __proto__: dart.getSetters(io._IOSinkImpl.__proto__),
    encoding: convert.Encoding
  }));
  dart.setLibraryUri(io._IOSinkImpl, I[105]);
  dart.setFieldSignature(io._IOSinkImpl, () => ({
    __proto__: dart.getFields(io._IOSinkImpl.__proto__),
    [_encoding$]: dart.fieldType(convert.Encoding),
    [_encodingMutable]: dart.fieldType(core.bool)
  }));
  io._IOService = class _IOService extends core.Object {
    static _dispatch(request, data) {
      if (request == null) dart.nullFailed(I[107], 704, 31, "request");
      if (data == null) dart.nullFailed(I[107], 704, 45, "data");
      dart.throw(new core.UnsupportedError.new("_IOService._dispatch"));
    }
  };
  (io._IOService.new = function() {
    ;
  }).prototype = io._IOService.prototype;
  dart.addTypeTests(io._IOService);
  dart.addTypeCaches(io._IOService);
  dart.setLibraryUri(io._IOService, I[105]);
  dart.defineLazy(io._IOService, {
    /*io._IOService.fileExists*/get fileExists() {
      return 0;
    },
    /*io._IOService.fileCreate*/get fileCreate() {
      return 1;
    },
    /*io._IOService.fileDelete*/get fileDelete() {
      return 2;
    },
    /*io._IOService.fileRename*/get fileRename() {
      return 3;
    },
    /*io._IOService.fileCopy*/get fileCopy() {
      return 4;
    },
    /*io._IOService.fileOpen*/get fileOpen() {
      return 5;
    },
    /*io._IOService.fileResolveSymbolicLinks*/get fileResolveSymbolicLinks() {
      return 6;
    },
    /*io._IOService.fileClose*/get fileClose() {
      return 7;
    },
    /*io._IOService.filePosition*/get filePosition() {
      return 8;
    },
    /*io._IOService.fileSetPosition*/get fileSetPosition() {
      return 9;
    },
    /*io._IOService.fileTruncate*/get fileTruncate() {
      return 10;
    },
    /*io._IOService.fileLength*/get fileLength() {
      return 11;
    },
    /*io._IOService.fileLengthFromPath*/get fileLengthFromPath() {
      return 12;
    },
    /*io._IOService.fileLastAccessed*/get fileLastAccessed() {
      return 13;
    },
    /*io._IOService.fileSetLastAccessed*/get fileSetLastAccessed() {
      return 14;
    },
    /*io._IOService.fileLastModified*/get fileLastModified() {
      return 15;
    },
    /*io._IOService.fileSetLastModified*/get fileSetLastModified() {
      return 16;
    },
    /*io._IOService.fileFlush*/get fileFlush() {
      return 17;
    },
    /*io._IOService.fileReadByte*/get fileReadByte() {
      return 18;
    },
    /*io._IOService.fileWriteByte*/get fileWriteByte() {
      return 19;
    },
    /*io._IOService.fileRead*/get fileRead() {
      return 20;
    },
    /*io._IOService.fileReadInto*/get fileReadInto() {
      return 21;
    },
    /*io._IOService.fileWriteFrom*/get fileWriteFrom() {
      return 22;
    },
    /*io._IOService.fileCreateLink*/get fileCreateLink() {
      return 23;
    },
    /*io._IOService.fileDeleteLink*/get fileDeleteLink() {
      return 24;
    },
    /*io._IOService.fileRenameLink*/get fileRenameLink() {
      return 25;
    },
    /*io._IOService.fileLinkTarget*/get fileLinkTarget() {
      return 26;
    },
    /*io._IOService.fileType*/get fileType() {
      return 27;
    },
    /*io._IOService.fileIdentical*/get fileIdentical() {
      return 28;
    },
    /*io._IOService.fileStat*/get fileStat() {
      return 29;
    },
    /*io._IOService.fileLock*/get fileLock() {
      return 30;
    },
    /*io._IOService.socketLookup*/get socketLookup() {
      return 31;
    },
    /*io._IOService.socketListInterfaces*/get socketListInterfaces() {
      return 32;
    },
    /*io._IOService.socketReverseLookup*/get socketReverseLookup() {
      return 33;
    },
    /*io._IOService.directoryCreate*/get directoryCreate() {
      return 34;
    },
    /*io._IOService.directoryDelete*/get directoryDelete() {
      return 35;
    },
    /*io._IOService.directoryExists*/get directoryExists() {
      return 36;
    },
    /*io._IOService.directoryCreateTemp*/get directoryCreateTemp() {
      return 37;
    },
    /*io._IOService.directoryListStart*/get directoryListStart() {
      return 38;
    },
    /*io._IOService.directoryListNext*/get directoryListNext() {
      return 39;
    },
    /*io._IOService.directoryListStop*/get directoryListStop() {
      return 40;
    },
    /*io._IOService.directoryRename*/get directoryRename() {
      return 41;
    },
    /*io._IOService.sslProcessFilter*/get sslProcessFilter() {
      return 42;
    }
  }, false);
  io.Link = class Link extends core.Object {
    static new(path) {
      if (path == null) dart.nullFailed(I[117], 12, 23, "path");
      let overrides = io.IOOverrides.current;
      if (overrides == null) {
        return new io._Link.new(path);
      }
      return overrides.createLink(path);
    }
    static fromRawPath(rawPath) {
      if (rawPath == null) dart.nullFailed(I[117], 21, 38, "rawPath");
      return new io._Link.fromRawPath(rawPath);
    }
    static fromUri(uri) {
      if (uri == null) dart.nullFailed(I[117], 33, 28, "uri");
      return io.Link.new(uri.toFilePath());
    }
  };
  (io.Link[dart.mixinNew] = function() {
  }).prototype = io.Link.prototype;
  dart.addTypeTests(io.Link);
  dart.addTypeCaches(io.Link);
  io.Link[dart.implements] = () => [io.FileSystemEntity];
  dart.setLibraryUri(io.Link, I[105]);
  var _path$1 = dart.privateName(io, "_Link._path");
  var _rawPath$1 = dart.privateName(io, "_Link._rawPath");
  var _exceptionFromResponse = dart.privateName(io, "_exceptionFromResponse");
  io._Link = class _Link extends io.FileSystemEntity {
    get [_path$]() {
      return this[_path$1];
    }
    set [_path$](value) {
      super[_path$] = value;
    }
    get [_rawPath$]() {
      return this[_rawPath$1];
    }
    set [_rawPath$](value) {
      super[_rawPath$] = value;
    }
    get path() {
      return this[_path$];
    }
    toString() {
      return "Link: '" + dart.str(this.path) + "'";
    }
    exists() {
      return io.FileSystemEntity._isLinkRaw(this[_rawPath$]);
    }
    existsSync() {
      return io.FileSystemEntity._isLinkRawSync(this[_rawPath$]);
    }
    get absolute() {
      return dart.test(this.isAbsolute) ? this : new io._Link.new(this[_absolutePath]);
    }
    create(target, opts) {
      if (target == null) dart.nullFailed(I[117], 164, 30, "target");
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[117], 164, 44, "recursive");
      let result = dart.test(recursive) ? this.parent.create({recursive: true}) : T$.FutureOfNull().value(null);
      return result.then(dart.dynamic, dart.fn(_ => io._File._dispatchWithNamespace(23, [null, this[_rawPath$], target]), T$0.DirectoryNToFuture())).then(io.Link, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionFromResponse](response, "Cannot create link to target '" + dart.str(target) + "'", this.path));
        }
        return this;
      }, T$0.dynamicTo_Link()));
    }
    createSync(target, opts) {
      if (target == null) dart.nullFailed(I[117], 179, 26, "target");
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[117], 179, 40, "recursive");
      if (dart.test(recursive)) {
        this.parent.createSync({recursive: true});
      }
      let result = io._File._createLink(io._Namespace._namespace, this[_rawPath$], target);
      io._Link.throwIfError(result, "Cannot create link", this.path);
    }
    updateSync(target) {
      if (target == null) dart.nullFailed(I[117], 187, 26, "target");
      this.deleteSync();
      this.createSync(target);
    }
    update(target) {
      if (target == null) dart.nullFailed(I[117], 196, 30, "target");
      return this.delete().then(io.Link, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[117], 201, 33, "_");
        return this.create(target);
      }, T$0.FileSystemEntityToFutureOfLink()));
    }
    [_delete](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[117], 204, 30, "recursive");
      if (dart.test(recursive)) {
        return io.Directory.fromRawPath(this[_rawPath$]).delete({recursive: true}).then(io.Link, dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[117], 208, 18, "_");
          return this;
        }, T$0.FileSystemEntityTo_Link()));
      }
      return io._File._dispatchWithNamespace(24, [null, this[_rawPath$]]).then(io.Link, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionFromResponse](response, "Cannot delete link", this.path));
        }
        return this;
      }, T$0.dynamicTo_Link()));
    }
    [_deleteSync](opts) {
      let recursive = opts && 'recursive' in opts ? opts.recursive : false;
      if (recursive == null) dart.nullFailed(I[117], 219, 26, "recursive");
      if (dart.test(recursive)) {
        return io.Directory.fromRawPath(this[_rawPath$]).deleteSync({recursive: true});
      }
      let result = io._File._deleteLinkNative(io._Namespace._namespace, this[_rawPath$]);
      io._Link.throwIfError(result, "Cannot delete link", this.path);
    }
    rename(newPath) {
      if (newPath == null) dart.nullFailed(I[117], 227, 30, "newPath");
      return io._File._dispatchWithNamespace(25, [null, this[_rawPath$], newPath]).then(io.Link, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionFromResponse](response, "Cannot rename link to '" + dart.str(newPath) + "'", this.path));
        }
        return io.Link.new(newPath);
      }, T$0.dynamicToLink()));
    }
    renameSync(newPath) {
      if (newPath == null) dart.nullFailed(I[117], 238, 26, "newPath");
      let result = io._File._renameLink(io._Namespace._namespace, this[_rawPath$], newPath);
      io._Link.throwIfError(result, "Cannot rename link '" + dart.str(this.path) + "' to '" + dart.str(newPath) + "'");
      return io.Link.new(newPath);
    }
    target() {
      return io._File._dispatchWithNamespace(26, [null, this[_rawPath$]]).then(core.String, dart.fn(response => {
        if (dart.test(this[_isErrorResponse](response))) {
          dart.throw(this[_exceptionFromResponse](response, "Cannot get target of link", this.path));
        }
        return T$0.FutureOrOfString().as(response);
      }, T$0.dynamicToFutureOrOfString()));
    }
    targetSync() {
      let result = io._File._linkTarget(io._Namespace._namespace, this[_rawPath$]);
      io._Link.throwIfError(result, "Cannot read link", this.path);
      return core.String.as(result);
    }
    static throwIfError(result, msg, path = "") {
      if (msg == null) dart.nullFailed(I[117], 261, 46, "msg");
      if (path == null) dart.nullFailed(I[117], 261, 59, "path");
      if (io.OSError.is(result)) {
        dart.throw(new io.FileSystemException.new(msg, path, result));
      }
    }
    [_isErrorResponse](response) {
      return core.List.is(response) && !dart.equals(response[$_get](0), 0);
    }
    [_exceptionFromResponse](response, message, path) {
      if (message == null) dart.nullFailed(I[117], 271, 43, "message");
      if (path == null) dart.nullFailed(I[117], 271, 59, "path");
      if (!dart.test(this[_isErrorResponse](response))) dart.assertFailed(null, I[117], 272, 12, "_isErrorResponse(response)");
      switch (dart.dsend(response, '_get', [0])) {
        case 1:
        {
          return new core.ArgumentError.new();
        }
        case 2:
        {
          let err = new io.OSError.new(core.String.as(dart.dsend(response, '_get', [2])), core.int.as(dart.dsend(response, '_get', [1])));
          return new io.FileSystemException.new(message, path, err);
        }
        default:
        {
          return core.Exception.new("Unknown error");
        }
      }
    }
  };
  (io._Link.new = function(path) {
    if (path == null) dart.nullFailed(I[117], 146, 16, "path");
    this[_path$1] = path;
    this[_rawPath$1] = io.FileSystemEntity._toUtf8Array(path);
    ;
  }).prototype = io._Link.prototype;
  (io._Link.fromRawPath = function(rawPath) {
    if (rawPath == null) dart.nullFailed(I[117], 150, 31, "rawPath");
    this[_rawPath$1] = io.FileSystemEntity._toNullTerminatedUtf8Array(rawPath);
    this[_path$1] = io.FileSystemEntity._toStringFromUtf8Array(rawPath);
    ;
  }).prototype = io._Link.prototype;
  dart.addTypeTests(io._Link);
  dart.addTypeCaches(io._Link);
  io._Link[dart.implements] = () => [io.Link];
  dart.setMethodSignature(io._Link, () => ({
    __proto__: dart.getMethods(io._Link.__proto__),
    exists: dart.fnType(async.Future$(core.bool), []),
    existsSync: dart.fnType(core.bool, []),
    create: dart.fnType(async.Future$(io.Link), [core.String], {recursive: core.bool}, {}),
    createSync: dart.fnType(dart.void, [core.String], {recursive: core.bool}, {}),
    updateSync: dart.fnType(dart.void, [core.String]),
    update: dart.fnType(async.Future$(io.Link), [core.String]),
    [_delete]: dart.fnType(async.Future$(io.Link), [], {recursive: core.bool}, {}),
    [_deleteSync]: dart.fnType(dart.void, [], {recursive: core.bool}, {}),
    rename: dart.fnType(async.Future$(io.Link), [core.String]),
    renameSync: dart.fnType(io.Link, [core.String]),
    target: dart.fnType(async.Future$(core.String), []),
    targetSync: dart.fnType(core.String, []),
    [_isErrorResponse]: dart.fnType(core.bool, [dart.dynamic]),
    [_exceptionFromResponse]: dart.fnType(dart.dynamic, [dart.dynamic, core.String, core.String])
  }));
  dart.setGetterSignature(io._Link, () => ({
    __proto__: dart.getGetters(io._Link.__proto__),
    path: core.String,
    absolute: io.Link
  }));
  dart.setLibraryUri(io._Link, I[105]);
  dart.setFieldSignature(io._Link, () => ({
    __proto__: dart.getFields(io._Link.__proto__),
    [_path$]: dart.finalFieldType(core.String),
    [_rawPath$]: dart.finalFieldType(typed_data.Uint8List)
  }));
  dart.defineExtensionMethods(io._Link, ['toString']);
  io._Namespace = class _Namespace extends core.Object {
    static get _namespace() {
      dart.throw(new core.UnsupportedError.new("_Namespace"));
    }
    static get _namespacePointer() {
      dart.throw(new core.UnsupportedError.new("_Namespace"));
    }
    static _setupNamespace(namespace) {
      dart.throw(new core.UnsupportedError.new("_Namespace"));
    }
  };
  (io._Namespace.new = function() {
    ;
  }).prototype = io._Namespace.prototype;
  dart.addTypeTests(io._Namespace);
  dart.addTypeCaches(io._Namespace);
  dart.setLibraryUri(io._Namespace, I[105]);
  io._DomainNetworkPolicy = class _DomainNetworkPolicy extends core.Object {
    matchScore(host) {
      if (host == null) dart.nullFailed(I[118], 100, 25, "host");
      let domainLength = this.domain.length;
      let hostLength = host.length;
      let lengthDelta = hostLength - domainLength;
      if (host[$endsWith](this.domain) && (lengthDelta === 0 || dart.test(this.includesSubDomains) && host[$codeUnitAt](lengthDelta - 1) === 46)) {
        return domainLength * 2 + (dart.test(this.includesSubDomains) ? 0 : 1);
      }
      return -1;
    }
    checkConflict(existingPolicies) {
      if (existingPolicies == null) dart.nullFailed(I[118], 118, 49, "existingPolicies");
      for (let existingPolicy of existingPolicies) {
        if (this.includesSubDomains == existingPolicy.includesSubDomains && this.domain == existingPolicy.domain) {
          if (this.allowInsecureConnections == existingPolicy.allowInsecureConnections) {
            return false;
          }
          dart.throw(new core.StateError.new("Contradiction in the domain security policies: " + "'" + dart.str(this) + "' contradicts '" + dart.str(existingPolicy) + "'"));
        }
      }
      return true;
    }
    toString() {
      let subDomainPrefix = dart.test(this.includesSubDomains) ? "*." : "";
      let insecureConnectionPermission = dart.test(this.allowInsecureConnections) ? "Allows" : "Disallows";
      return subDomainPrefix + dart.str(this.domain) + ": " + insecureConnectionPermission + " insecure connections";
    }
  };
  (io._DomainNetworkPolicy.new = function(domain, opts) {
    if (domain == null) dart.nullFailed(I[118], 81, 29, "domain");
    let includesSubDomains = opts && 'includesSubDomains' in opts ? opts.includesSubDomains : false;
    if (includesSubDomains == null) dart.nullFailed(I[118], 82, 13, "includesSubDomains");
    let allowInsecureConnections = opts && 'allowInsecureConnections' in opts ? opts.allowInsecureConnections : false;
    if (allowInsecureConnections == null) dart.nullFailed(I[118], 83, 12, "allowInsecureConnections");
    this.domain = domain;
    this.includesSubDomains = includesSubDomains;
    this.allowInsecureConnections = allowInsecureConnections;
    if (this.domain.length > 255 || !dart.test(io._DomainNetworkPolicy._domainMatcher.hasMatch(this.domain))) {
      dart.throw(new core.ArgumentError.value(this.domain, "domain", "Invalid domain name"));
    }
  }).prototype = io._DomainNetworkPolicy.prototype;
  dart.addTypeTests(io._DomainNetworkPolicy);
  dart.addTypeCaches(io._DomainNetworkPolicy);
  dart.setMethodSignature(io._DomainNetworkPolicy, () => ({
    __proto__: dart.getMethods(io._DomainNetworkPolicy.__proto__),
    matchScore: dart.fnType(core.int, [core.String]),
    checkConflict: dart.fnType(core.bool, [core.List$(io._DomainNetworkPolicy)])
  }));
  dart.setLibraryUri(io._DomainNetworkPolicy, I[105]);
  dart.setFieldSignature(io._DomainNetworkPolicy, () => ({
    __proto__: dart.getFields(io._DomainNetworkPolicy.__proto__),
    domain: dart.finalFieldType(core.String),
    allowInsecureConnections: dart.finalFieldType(core.bool),
    includesSubDomains: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(io._DomainNetworkPolicy, ['toString']);
  dart.defineLazy(io._DomainNetworkPolicy, {
    /*io._DomainNetworkPolicy._domainMatcher*/get _domainMatcher() {
      return core.RegExp.new("^(?:[a-z\\d-]{1,63}\\.)+[a-z][a-z\\d-]{0,62}$", {caseSensitive: false});
    }
  }, false);
  io._NetworkProfiling = class _NetworkProfiling extends core.Object {
    static _registerServiceExtension() {
      developer.registerExtension(io._NetworkProfiling._kGetHttpEnableTimelineLogging, C[128] || CT.C128);
      developer.registerExtension(io._NetworkProfiling._kSetHttpEnableTimelineLogging, C[128] || CT.C128);
      developer.registerExtension(io._NetworkProfiling._kHttpEnableTimelineLogging, C[128] || CT.C128);
      developer.registerExtension("ext.dart.io.getSocketProfile", C[128] || CT.C128);
      developer.registerExtension(io._NetworkProfiling._kStartSocketProfilingRPC, C[128] || CT.C128);
      developer.registerExtension(io._NetworkProfiling._kPauseSocketProfilingRPC, C[128] || CT.C128);
      developer.registerExtension(io._NetworkProfiling._kSocketProfilingEnabledRPC, C[128] || CT.C128);
      developer.registerExtension("ext.dart.io.clearSocketProfile", C[128] || CT.C128);
      developer.registerExtension("ext.dart.io.getVersion", C[128] || CT.C128);
    }
    static _serviceExtensionHandler(method, parameters) {
      if (method == null) dart.nullFailed(I[119], 54, 14, "method");
      if (parameters == null) dart.nullFailed(I[119], 54, 42, "parameters");
      try {
        let responseJson = null;
        switch (method) {
          case "ext.dart.io.getHttpEnableTimelineLogging":
          {
            responseJson = io._getHttpEnableTimelineLogging();
            break;
          }
          case "ext.dart.io.setHttpEnableTimelineLogging":
          {
            responseJson = io._setHttpEnableTimelineLogging(parameters);
            break;
          }
          case "ext.dart.io.httpEnableTimelineLogging":
          {
            if (dart.test(parameters[$containsKey]("enabled")) || dart.test(parameters[$containsKey]("enable"))) {
              if (!(1 === 1)) dart.assertFailed("'enable' is deprecated and should be removed (See #43638)", I[119], 69, 20, "_versionMajor == 1");
              if (dart.test(parameters[$containsKey]("enabled"))) {
                parameters[$_set]("enable", dart.nullCheck(parameters[$_get]("enabled")));
              }
              io._setHttpEnableTimelineLogging(parameters);
            }
            responseJson = io._getHttpEnableTimelineLogging();
            break;
          }
          case "ext.dart.io.getSocketProfile":
          {
            responseJson = io._SocketProfile.toJson();
            break;
          }
          case "ext.dart.io.socketProfilingEnabled":
          {
            responseJson = io._socketProfilingEnabled(parameters);
            break;
          }
          case "ext.dart.io.startSocketProfiling":
          {
            responseJson = io._SocketProfile.start();
            break;
          }
          case "ext.dart.io.pauseSocketProfiling":
          {
            responseJson = io._SocketProfile.pause();
            break;
          }
          case "ext.dart.io.clearSocketProfile":
          {
            responseJson = io._SocketProfile.clear();
            break;
          }
          case "ext.dart.io.getVersion":
          {
            responseJson = io._NetworkProfiling.getVersion();
            break;
          }
          default:
          {
            return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.error(-32000, "Method " + dart.str(method) + " does not exist"));
          }
        }
        return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result(responseJson));
      } catch (e) {
        let errorMessage = dart.getThrown(e);
        return T$0.FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.error(-32602, core.String.as(errorMessage)));
      }
    }
    static getVersion() {
      return convert.json.encode(new (T$.IdentityMapOfString$Object()).from(["type", "Version", "major", 1, "minor", 5]));
    }
  };
  (io._NetworkProfiling.new = function() {
    ;
  }).prototype = io._NetworkProfiling.prototype;
  dart.addTypeTests(io._NetworkProfiling);
  dart.addTypeCaches(io._NetworkProfiling);
  dart.setLibraryUri(io._NetworkProfiling, I[105]);
  dart.defineLazy(io._NetworkProfiling, {
    /*io._NetworkProfiling._kGetHttpEnableTimelineLogging*/get _kGetHttpEnableTimelineLogging() {
      return "ext.dart.io.getHttpEnableTimelineLogging";
    },
    /*io._NetworkProfiling._kSetHttpEnableTimelineLogging*/get _kSetHttpEnableTimelineLogging() {
      return "ext.dart.io.setHttpEnableTimelineLogging";
    },
    /*io._NetworkProfiling._kHttpEnableTimelineLogging*/get _kHttpEnableTimelineLogging() {
      return "ext.dart.io.httpEnableTimelineLogging";
    },
    /*io._NetworkProfiling._kClearSocketProfileRPC*/get _kClearSocketProfileRPC() {
      return "ext.dart.io.clearSocketProfile";
    },
    /*io._NetworkProfiling._kGetSocketProfileRPC*/get _kGetSocketProfileRPC() {
      return "ext.dart.io.getSocketProfile";
    },
    /*io._NetworkProfiling._kSocketProfilingEnabledRPC*/get _kSocketProfilingEnabledRPC() {
      return "ext.dart.io.socketProfilingEnabled";
    },
    /*io._NetworkProfiling._kPauseSocketProfilingRPC*/get _kPauseSocketProfilingRPC() {
      return "ext.dart.io.pauseSocketProfiling";
    },
    /*io._NetworkProfiling._kStartSocketProfilingRPC*/get _kStartSocketProfilingRPC() {
      return "ext.dart.io.startSocketProfiling";
    },
    /*io._NetworkProfiling._kGetVersionRPC*/get _kGetVersionRPC() {
      return "ext.dart.io.getVersion";
    }
  }, false);
  var _name$4 = dart.privateName(io, "_name");
  io._SocketProfile = class _SocketProfile extends core.Object {
    static set enableSocketProfiling(enabled) {
      if (enabled == null) dart.nullFailed(I[119], 159, 41, "enabled");
      if (enabled != io._SocketProfile._enableSocketProfiling) {
        developer.postEvent("SocketProfilingStateChange", new _js_helper.LinkedMap.from(["isolateId", developer.Service.getIsolateID(isolate$.Isolate.current), "enabled", enabled]));
        io._SocketProfile._enableSocketProfiling = enabled;
      }
    }
    static get enableSocketProfiling() {
      return io._SocketProfile._enableSocketProfiling;
    }
    static toJson() {
      return convert.json.encode(new (T$.IdentityMapOfString$Object()).from(["type", "SocketProfile", "sockets", io._SocketProfile._idToSocketStatistic[$values][$map](T$0.MapOfString$dynamic(), dart.fn(f => {
          if (f == null) dart.nullFailed(I[119], 176, 53, "f");
          return f.toMap();
        }, T$0._SocketStatisticToMapOfString$dynamic()))[$toList]()]));
    }
    static collectNewSocket(id, type, addr, port) {
      if (id == null) dart.nullFailed(I[119], 180, 11, "id");
      if (type == null) dart.nullFailed(I[119], 180, 22, "type");
      if (addr == null) dart.nullFailed(I[119], 180, 44, "addr");
      if (port == null) dart.nullFailed(I[119], 180, 54, "port");
      io._SocketProfile.collectStatistic(id, io._SocketProfileType.startTime);
      io._SocketProfile.collectStatistic(id, io._SocketProfileType.socketType, type);
      io._SocketProfile.collectStatistic(id, io._SocketProfileType.address, addr);
      io._SocketProfile.collectStatistic(id, io._SocketProfileType.port, port);
    }
    static collectStatistic(id, type, object = null) {
      let t206, t205, t204, t203, t203$, t203$0;
      if (id == null) dart.nullFailed(I[119], 187, 36, "id");
      if (type == null) dart.nullFailed(I[119], 187, 59, "type");
      if (!dart.test(io._SocketProfile._enableSocketProfiling)) {
        return;
      }
      if (!dart.test(io._SocketProfile._idToSocketStatistic[$containsKey](id)) && type != io._SocketProfileType.startTime) return;
      let stats = (t203 = io._SocketProfile._idToSocketStatistic, t204 = id, t205 = t203[$_get](t204), t205 == null ? (t206 = new io._SocketStatistic.new(id), t203[$_set](t204, t206), t206) : t205);
      switch (type) {
        case C[129] || CT.C129:
        {
          stats.startTime = developer.Timeline.now;
          break;
        }
        case C[130] || CT.C130:
        {
          stats.endTime = developer.Timeline.now;
          break;
        }
        case C[131] || CT.C131:
        {
          if (!io.InternetAddress.is(object)) dart.assertFailed(null, I[119], 204, 16, "object is InternetAddress");
          stats.address = dart.toString(io.InternetAddress.as(object));
          break;
        }
        case C[132] || CT.C132:
        {
          if (!core.int.is(object)) dart.assertFailed(null, I[119], 208, 16, "object is int");
          stats.port = T$.intN().as(object);
          break;
        }
        case C[133] || CT.C133:
        {
          if (!(typeof object == 'string')) dart.assertFailed(null, I[119], 212, 16, "object is String");
          stats.socketType = T$.StringN().as(object);
          break;
        }
        case C[134] || CT.C134:
        {
          if (object == null) return;
          t203$ = stats;
          t203$.readBytes = dart.notNull(t203$.readBytes) + dart.notNull(core.int.as(object));
          stats.lastReadTime = developer.Timeline.now;
          break;
        }
        case C[135] || CT.C135:
        {
          if (object == null) return;
          t203$0 = stats;
          t203$0.writeBytes = dart.notNull(t203$0.writeBytes) + dart.notNull(core.int.as(object));
          stats.lastWriteTime = developer.Timeline.now;
          break;
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("type " + dart.str(type) + " does not exist"));
          break;
        }
      }
    }
    static start() {
      io._SocketProfile.enableSocketProfiling = true;
      return io._success();
    }
    static pause() {
      io._SocketProfile.enableSocketProfiling = false;
      return io._success();
    }
    static clear() {
      io._SocketProfile._idToSocketStatistic[$clear]();
      return io._success();
    }
  };
  (io._SocketProfile.new = function() {
    ;
  }).prototype = io._SocketProfile.prototype;
  dart.addTypeTests(io._SocketProfile);
  dart.addTypeCaches(io._SocketProfile);
  dart.setLibraryUri(io._SocketProfile, I[105]);
  dart.defineLazy(io._SocketProfile, {
    /*io._SocketProfile._kType*/get _kType() {
      return "SocketProfile";
    },
    /*io._SocketProfile._enableSocketProfiling*/get _enableSocketProfiling() {
      return false;
    },
    set _enableSocketProfiling(_) {},
    /*io._SocketProfile._idToSocketStatistic*/get _idToSocketStatistic() {
      return new (T$0.IdentityMapOfint$_SocketStatistic()).new();
    },
    set _idToSocketStatistic(_) {}
  }, false);
  io._SocketProfileType = class _SocketProfileType extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (io._SocketProfileType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[119], 250, 6, "index");
    if (_name == null) dart.nullFailed(I[119], 250, 6, "_name");
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = io._SocketProfileType.prototype;
  dart.addTypeTests(io._SocketProfileType);
  dart.addTypeCaches(io._SocketProfileType);
  dart.setLibraryUri(io._SocketProfileType, I[105]);
  dart.setFieldSignature(io._SocketProfileType, () => ({
    __proto__: dart.getFields(io._SocketProfileType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(io._SocketProfileType, ['toString']);
  io._SocketProfileType.startTime = C[129] || CT.C129;
  io._SocketProfileType.endTime = C[130] || CT.C130;
  io._SocketProfileType.address = C[131] || CT.C131;
  io._SocketProfileType.port = C[132] || CT.C132;
  io._SocketProfileType.socketType = C[133] || CT.C133;
  io._SocketProfileType.readBytes = C[134] || CT.C134;
  io._SocketProfileType.writeBytes = C[135] || CT.C135;
  io._SocketProfileType.values = C[136] || CT.C136;
  var _setIfNotNull = dart.privateName(io, "_setIfNotNull");
  io._SocketStatistic = class _SocketStatistic extends core.Object {
    toMap() {
      let map = new (T$0.IdentityMapOfString$dynamic()).from(["id", this.id]);
      this[_setIfNotNull](map, "startTime", this.startTime);
      this[_setIfNotNull](map, "endTime", this.endTime);
      this[_setIfNotNull](map, "address", this.address);
      this[_setIfNotNull](map, "port", this.port);
      this[_setIfNotNull](map, "socketType", this.socketType);
      this[_setIfNotNull](map, "readBytes", this.readBytes);
      this[_setIfNotNull](map, "writeBytes", this.writeBytes);
      this[_setIfNotNull](map, "lastWriteTime", this.lastWriteTime);
      this[_setIfNotNull](map, "lastReadTime", this.lastReadTime);
      return map;
    }
    [_setIfNotNull](json, key, value) {
      if (json == null) dart.nullFailed(I[119], 291, 43, "json");
      if (key == null) dart.nullFailed(I[119], 291, 56, "key");
      if (value == null) return;
      json[$_set](key, value);
    }
  };
  (io._SocketStatistic.new = function(id) {
    if (id == null) dart.nullFailed(I[119], 273, 25, "id");
    this.startTime = null;
    this.endTime = null;
    this.address = null;
    this.port = null;
    this.socketType = null;
    this.readBytes = 0;
    this.writeBytes = 0;
    this.lastWriteTime = null;
    this.lastReadTime = null;
    this.id = id;
    ;
  }).prototype = io._SocketStatistic.prototype;
  dart.addTypeTests(io._SocketStatistic);
  dart.addTypeCaches(io._SocketStatistic);
  dart.setMethodSignature(io._SocketStatistic, () => ({
    __proto__: dart.getMethods(io._SocketStatistic.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    [_setIfNotNull]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic), core.String, dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(io._SocketStatistic, I[105]);
  dart.setFieldSignature(io._SocketStatistic, () => ({
    __proto__: dart.getFields(io._SocketStatistic.__proto__),
    id: dart.finalFieldType(core.int),
    startTime: dart.fieldType(dart.nullable(core.int)),
    endTime: dart.fieldType(dart.nullable(core.int)),
    address: dart.fieldType(dart.nullable(core.String)),
    port: dart.fieldType(dart.nullable(core.int)),
    socketType: dart.fieldType(dart.nullable(core.String)),
    readBytes: dart.fieldType(core.int),
    writeBytes: dart.fieldType(core.int),
    lastWriteTime: dart.fieldType(dart.nullable(core.int)),
    lastReadTime: dart.fieldType(dart.nullable(core.int))
  }));
  io.IOOverrides = class IOOverrides extends core.Object {
    static get current() {
      let t203;
      return T$0.IOOverridesN().as((t203 = async.Zone.current._get(io._ioOverridesToken), t203 == null ? io.IOOverrides._global : t203));
    }
    static set global(overrides) {
      io.IOOverrides._global = overrides;
    }
    static runZoned(R, body, opts) {
      if (body == null) dart.nullFailed(I[120], 54, 26, "body");
      let createDirectory = opts && 'createDirectory' in opts ? opts.createDirectory : null;
      let getCurrentDirectory = opts && 'getCurrentDirectory' in opts ? opts.getCurrentDirectory : null;
      let setCurrentDirectory = opts && 'setCurrentDirectory' in opts ? opts.setCurrentDirectory : null;
      let getSystemTempDirectory = opts && 'getSystemTempDirectory' in opts ? opts.getSystemTempDirectory : null;
      let createFile = opts && 'createFile' in opts ? opts.createFile : null;
      let stat = opts && 'stat' in opts ? opts.stat : null;
      let statSync = opts && 'statSync' in opts ? opts.statSync : null;
      let fseIdentical = opts && 'fseIdentical' in opts ? opts.fseIdentical : null;
      let fseIdenticalSync = opts && 'fseIdenticalSync' in opts ? opts.fseIdenticalSync : null;
      let fseGetType = opts && 'fseGetType' in opts ? opts.fseGetType : null;
      let fseGetTypeSync = opts && 'fseGetTypeSync' in opts ? opts.fseGetTypeSync : null;
      let fsWatch = opts && 'fsWatch' in opts ? opts.fsWatch : null;
      let fsWatchIsSupported = opts && 'fsWatchIsSupported' in opts ? opts.fsWatchIsSupported : null;
      let createLink = opts && 'createLink' in opts ? opts.createLink : null;
      let socketConnect = opts && 'socketConnect' in opts ? opts.socketConnect : null;
      let socketStartConnect = opts && 'socketStartConnect' in opts ? opts.socketStartConnect : null;
      let serverSocketBind = opts && 'serverSocketBind' in opts ? opts.serverSocketBind : null;
      let overrides = new io._IOOverridesScope.new(createDirectory, getCurrentDirectory, setCurrentDirectory, getSystemTempDirectory, createFile, stat, statSync, fseIdentical, fseIdenticalSync, fseGetType, fseGetTypeSync, fsWatch, fsWatchIsSupported, createLink, socketConnect, socketStartConnect, serverSocketBind);
      return io._asyncRunZoned(R, body, {zoneValues: new (T$0.LinkedMapOfObjectN$ObjectN()).from([io._ioOverridesToken, overrides])});
    }
    static runWithIOOverrides(R, body, overrides) {
      if (body == null) dart.nullFailed(I[120], 135, 36, "body");
      if (overrides == null) dart.nullFailed(I[120], 135, 56, "overrides");
      return io._asyncRunZoned(R, body, {zoneValues: new (T$0.LinkedMapOfObjectN$ObjectN()).from([io._ioOverridesToken, overrides])});
    }
    createDirectory(path) {
      if (path == null) dart.nullFailed(I[120], 145, 36, "path");
      return new io._Directory.new(path);
    }
    getCurrentDirectory() {
      return io._Directory.current;
    }
    setCurrentDirectory(path) {
      if (path == null) dart.nullFailed(I[120], 157, 35, "path");
      io._Directory.current = path;
    }
    getSystemTempDirectory() {
      return io._Directory.systemTemp;
    }
    createFile(path) {
      if (path == null) dart.nullFailed(I[120], 173, 26, "path");
      return new io._File.new(path);
    }
    stat(path) {
      if (path == null) dart.nullFailed(I[120], 181, 32, "path");
      return io.FileStat._stat(path);
    }
    statSync(path) {
      if (path == null) dart.nullFailed(I[120], 189, 28, "path");
      return io.FileStat._statSyncInternal(path);
    }
    fseIdentical(path1, path2) {
      if (path1 == null) dart.nullFailed(I[120], 200, 36, "path1");
      if (path2 == null) dart.nullFailed(I[120], 200, 50, "path2");
      return io.FileSystemEntity._identical(path1, path2);
    }
    fseIdenticalSync(path1, path2) {
      if (path1 == null) dart.nullFailed(I[120], 209, 32, "path1");
      if (path2 == null) dart.nullFailed(I[120], 209, 46, "path2");
      return io.FileSystemEntity._identicalSync(path1, path2);
    }
    fseGetType(path, followLinks) {
      if (path == null) dart.nullFailed(I[120], 217, 50, "path");
      if (followLinks == null) dart.nullFailed(I[120], 217, 61, "followLinks");
      return io.FileSystemEntity._getTypeRequest(convert.utf8.encoder.convert(path), followLinks);
    }
    fseGetTypeSync(path, followLinks) {
      if (path == null) dart.nullFailed(I[120], 226, 46, "path");
      if (followLinks == null) dart.nullFailed(I[120], 226, 57, "followLinks");
      return io.FileSystemEntity._getTypeSyncHelper(convert.utf8.encoder.convert(path), followLinks);
    }
    fsWatch(path, events, recursive) {
      if (path == null) dart.nullFailed(I[120], 237, 42, "path");
      if (events == null) dart.nullFailed(I[120], 237, 52, "events");
      if (recursive == null) dart.nullFailed(I[120], 237, 65, "recursive");
      return io._FileSystemWatcher._watch(path, events, recursive);
    }
    fsWatchIsSupported() {
      return io._FileSystemWatcher.isSupported;
    }
    createLink(path) {
      if (path == null) dart.nullFailed(I[120], 253, 26, "path");
      return new io._Link.new(path);
    }
    socketConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[120], 261, 42, "port");
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return io.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    socketStartConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[120], 272, 63, "port");
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      return io.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
    }
    serverSocketBind(address, port, opts) {
      if (port == null) dart.nullFailed(I[120], 284, 54, "port");
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      if (backlog == null) dart.nullFailed(I[120], 285, 12, "backlog");
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      if (v6Only == null) dart.nullFailed(I[120], 285, 30, "v6Only");
      let shared = opts && 'shared' in opts ? opts.shared : false;
      if (shared == null) dart.nullFailed(I[120], 285, 51, "shared");
      return io.ServerSocket._bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
  };
  (io.IOOverrides.new = function() {
    ;
  }).prototype = io.IOOverrides.prototype;
  dart.addTypeTests(io.IOOverrides);
  dart.addTypeCaches(io.IOOverrides);
  dart.setMethodSignature(io.IOOverrides, () => ({
    __proto__: dart.getMethods(io.IOOverrides.__proto__),
    createDirectory: dart.fnType(io.Directory, [core.String]),
    getCurrentDirectory: dart.fnType(io.Directory, []),
    setCurrentDirectory: dart.fnType(dart.void, [core.String]),
    getSystemTempDirectory: dart.fnType(io.Directory, []),
    createFile: dart.fnType(io.File, [core.String]),
    stat: dart.fnType(async.Future$(io.FileStat), [core.String]),
    statSync: dart.fnType(io.FileStat, [core.String]),
    fseIdentical: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    fseIdenticalSync: dart.fnType(core.bool, [core.String, core.String]),
    fseGetType: dart.fnType(async.Future$(io.FileSystemEntityType), [core.String, core.bool]),
    fseGetTypeSync: dart.fnType(io.FileSystemEntityType, [core.String, core.bool]),
    fsWatch: dart.fnType(async.Stream$(io.FileSystemEvent), [core.String, core.int, core.bool]),
    fsWatchIsSupported: dart.fnType(core.bool, []),
    createLink: dart.fnType(io.Link, [core.String]),
    socketConnect: dart.fnType(async.Future$(io.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}),
    socketStartConnect: dart.fnType(async.Future$(io.ConnectionTask$(io.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}),
    serverSocketBind: dart.fnType(async.Future$(io.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {})
  }));
  dart.setLibraryUri(io.IOOverrides, I[105]);
  dart.defineLazy(io.IOOverrides, {
    /*io.IOOverrides._global*/get _global() {
      return null;
    },
    set _global(_) {}
  }, false);
  var _previous$4 = dart.privateName(io, "_previous");
  var _createDirectory$ = dart.privateName(io, "_createDirectory");
  var _getCurrentDirectory$ = dart.privateName(io, "_getCurrentDirectory");
  var _setCurrentDirectory$ = dart.privateName(io, "_setCurrentDirectory");
  var _getSystemTempDirectory$ = dart.privateName(io, "_getSystemTempDirectory");
  var _createFile$ = dart.privateName(io, "_createFile");
  var _stat$ = dart.privateName(io, "_stat");
  var _statSync$ = dart.privateName(io, "_statSync");
  var _fseIdentical$ = dart.privateName(io, "_fseIdentical");
  var _fseIdenticalSync$ = dart.privateName(io, "_fseIdenticalSync");
  var _fseGetType$ = dart.privateName(io, "_fseGetType");
  var _fseGetTypeSync$ = dart.privateName(io, "_fseGetTypeSync");
  var _fsWatch$ = dart.privateName(io, "_fsWatch");
  var _fsWatchIsSupported$ = dart.privateName(io, "_fsWatchIsSupported");
  var _createLink$ = dart.privateName(io, "_createLink");
  var _socketConnect$ = dart.privateName(io, "_socketConnect");
  var _socketStartConnect$ = dart.privateName(io, "_socketStartConnect");
  var _serverSocketBind$ = dart.privateName(io, "_serverSocketBind");
  io._IOOverridesScope = class _IOOverridesScope extends io.IOOverrides {
    createDirectory(path) {
      if (path == null) dart.nullFailed(I[120], 367, 36, "path");
      if (this[_createDirectory$] != null) return dart.nullCheck(this[_createDirectory$])(path);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createDirectory(path);
      return super.createDirectory(path);
    }
    getCurrentDirectory() {
      if (this[_getCurrentDirectory$] != null) return dart.nullCheck(this[_getCurrentDirectory$])();
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).getCurrentDirectory();
      return super.getCurrentDirectory();
    }
    setCurrentDirectory(path) {
      if (path == null) dart.nullFailed(I[120], 381, 35, "path");
      if (this[_setCurrentDirectory$] != null)
        dart.nullCheck(this[_setCurrentDirectory$])(path);
      else if (this[_previous$4] != null)
        dart.nullCheck(this[_previous$4]).setCurrentDirectory(path);
      else
        super.setCurrentDirectory(path);
    }
    getSystemTempDirectory() {
      if (this[_getSystemTempDirectory$] != null) return dart.nullCheck(this[_getSystemTempDirectory$])();
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).getSystemTempDirectory();
      return super.getSystemTempDirectory();
    }
    createFile(path) {
      if (path == null) dart.nullFailed(I[120], 399, 26, "path");
      if (this[_createFile$] != null) return dart.nullCheck(this[_createFile$])(path);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createFile(path);
      return super.createFile(path);
    }
    stat(path) {
      if (path == null) dart.nullFailed(I[120], 407, 32, "path");
      if (this[_stat$] != null) return dart.nullCheck(this[_stat$])(path);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).stat(path);
      return super.stat(path);
    }
    statSync(path) {
      if (path == null) dart.nullFailed(I[120], 414, 28, "path");
      if (this[_stat$] != null) return dart.nullCheck(this[_statSync$])(path);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).statSync(path);
      return super.statSync(path);
    }
    fseIdentical(path1, path2) {
      if (path1 == null) dart.nullFailed(I[120], 422, 36, "path1");
      if (path2 == null) dart.nullFailed(I[120], 422, 50, "path2");
      if (this[_fseIdentical$] != null) return dart.nullCheck(this[_fseIdentical$])(path1, path2);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseIdentical(path1, path2);
      return super.fseIdentical(path1, path2);
    }
    fseIdenticalSync(path1, path2) {
      if (path1 == null) dart.nullFailed(I[120], 429, 32, "path1");
      if (path2 == null) dart.nullFailed(I[120], 429, 46, "path2");
      if (this[_fseIdenticalSync$] != null) return dart.nullCheck(this[_fseIdenticalSync$])(path1, path2);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseIdenticalSync(path1, path2);
      return super.fseIdenticalSync(path1, path2);
    }
    fseGetType(path, followLinks) {
      if (path == null) dart.nullFailed(I[120], 436, 50, "path");
      if (followLinks == null) dart.nullFailed(I[120], 436, 61, "followLinks");
      if (this[_fseGetType$] != null) return dart.nullCheck(this[_fseGetType$])(path, followLinks);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseGetType(path, followLinks);
      return super.fseGetType(path, followLinks);
    }
    fseGetTypeSync(path, followLinks) {
      if (path == null) dart.nullFailed(I[120], 443, 46, "path");
      if (followLinks == null) dart.nullFailed(I[120], 443, 57, "followLinks");
      if (this[_fseGetTypeSync$] != null) return dart.nullCheck(this[_fseGetTypeSync$])(path, followLinks);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fseGetTypeSync(path, followLinks);
      return super.fseGetTypeSync(path, followLinks);
    }
    fsWatch(path, events, recursive) {
      if (path == null) dart.nullFailed(I[120], 451, 42, "path");
      if (events == null) dart.nullFailed(I[120], 451, 52, "events");
      if (recursive == null) dart.nullFailed(I[120], 451, 65, "recursive");
      if (this[_fsWatch$] != null) return dart.nullCheck(this[_fsWatch$])(path, events, recursive);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fsWatch(path, events, recursive);
      return super.fsWatch(path, events, recursive);
    }
    fsWatchIsSupported() {
      if (this[_fsWatchIsSupported$] != null) return dart.nullCheck(this[_fsWatchIsSupported$])();
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).fsWatchIsSupported();
      return super.fsWatchIsSupported();
    }
    createLink(path) {
      if (path == null) dart.nullFailed(I[120], 466, 26, "path");
      if (this[_createLink$] != null) return dart.nullCheck(this[_createLink$])(path);
      if (this[_previous$4] != null) return dart.nullCheck(this[_previous$4]).createLink(path);
      return super.createLink(path);
    }
    socketConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[120], 474, 42, "port");
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      if (this[_socketConnect$] != null) {
        return dart.nullCheck(this[_socketConnect$])(host, port, {sourceAddress: sourceAddress, timeout: timeout});
      }
      if (this[_previous$4] != null) {
        return dart.nullCheck(this[_previous$4]).socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
      }
      return super.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    socketStartConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[120], 489, 63, "port");
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      if (this[_socketStartConnect$] != null) {
        return dart.nullCheck(this[_socketStartConnect$])(host, port, {sourceAddress: sourceAddress});
      }
      if (this[_previous$4] != null) {
        return dart.nullCheck(this[_previous$4]).socketStartConnect(host, port, {sourceAddress: sourceAddress});
      }
      return super.socketStartConnect(host, port, {sourceAddress: sourceAddress});
    }
    serverSocketBind(address, port, opts) {
      if (port == null) dart.nullFailed(I[120], 504, 54, "port");
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      if (backlog == null) dart.nullFailed(I[120], 505, 12, "backlog");
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      if (v6Only == null) dart.nullFailed(I[120], 505, 30, "v6Only");
      let shared = opts && 'shared' in opts ? opts.shared : false;
      if (shared == null) dart.nullFailed(I[120], 505, 51, "shared");
      if (this[_serverSocketBind$] != null) {
        return dart.nullCheck(this[_serverSocketBind$])(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
      }
      if (this[_previous$4] != null) {
        return dart.nullCheck(this[_previous$4]).serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
      }
      return super.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
  };
  (io._IOOverridesScope.new = function(_createDirectory, _getCurrentDirectory, _setCurrentDirectory, _getSystemTempDirectory, _createFile, _stat, _statSync, _fseIdentical, _fseIdenticalSync, _fseGetType, _fseGetTypeSync, _fsWatch, _fsWatchIsSupported, _createLink, _socketConnect, _socketStartConnect, _serverSocketBind) {
    this[_previous$4] = io.IOOverrides.current;
    this[_createDirectory$] = _createDirectory;
    this[_getCurrentDirectory$] = _getCurrentDirectory;
    this[_setCurrentDirectory$] = _setCurrentDirectory;
    this[_getSystemTempDirectory$] = _getSystemTempDirectory;
    this[_createFile$] = _createFile;
    this[_stat$] = _stat;
    this[_statSync$] = _statSync;
    this[_fseIdentical$] = _fseIdentical;
    this[_fseIdenticalSync$] = _fseIdenticalSync;
    this[_fseGetType$] = _fseGetType;
    this[_fseGetTypeSync$] = _fseGetTypeSync;
    this[_fsWatch$] = _fsWatch;
    this[_fsWatchIsSupported$] = _fsWatchIsSupported;
    this[_createLink$] = _createLink;
    this[_socketConnect$] = _socketConnect;
    this[_socketStartConnect$] = _socketStartConnect;
    this[_serverSocketBind$] = _serverSocketBind;
    ;
  }).prototype = io._IOOverridesScope.prototype;
  dart.addTypeTests(io._IOOverridesScope);
  dart.addTypeCaches(io._IOOverridesScope);
  dart.setLibraryUri(io._IOOverridesScope, I[105]);
  dart.setFieldSignature(io._IOOverridesScope, () => ({
    __proto__: dart.getFields(io._IOOverridesScope.__proto__),
    [_previous$4]: dart.finalFieldType(dart.nullable(io.IOOverrides)),
    [_createDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, [core.String]))),
    [_getCurrentDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, []))),
    [_setCurrentDirectory$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    [_getSystemTempDirectory$]: dart.fieldType(dart.nullable(dart.fnType(io.Directory, []))),
    [_createFile$]: dart.fieldType(dart.nullable(dart.fnType(io.File, [core.String]))),
    [_stat$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.FileStat), [core.String]))),
    [_statSync$]: dart.fieldType(dart.nullable(dart.fnType(io.FileStat, [core.String]))),
    [_fseIdentical$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(core.bool), [core.String, core.String]))),
    [_fseIdenticalSync$]: dart.fieldType(dart.nullable(dart.fnType(core.bool, [core.String, core.String]))),
    [_fseGetType$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.FileSystemEntityType), [core.String, core.bool]))),
    [_fseGetTypeSync$]: dart.fieldType(dart.nullable(dart.fnType(io.FileSystemEntityType, [core.String, core.bool]))),
    [_fsWatch$]: dart.fieldType(dart.nullable(dart.fnType(async.Stream$(io.FileSystemEvent), [core.String, core.int, core.bool]))),
    [_fsWatchIsSupported$]: dart.fieldType(dart.nullable(dart.fnType(core.bool, []))),
    [_createLink$]: dart.fieldType(dart.nullable(dart.fnType(io.Link, [core.String]))),
    [_socketConnect$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}))),
    [_socketStartConnect$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.ConnectionTask$(io.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}))),
    [_serverSocketBind$]: dart.fieldType(dart.nullable(dart.fnType(async.Future$(io.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {})))
  }));
  io.Platform = class Platform extends core.Object {
    static get numberOfProcessors() {
      return io.Platform._numberOfProcessors;
    }
    static get pathSeparator() {
      return io.Platform._pathSeparator;
    }
    static get localeName() {
      return io._Platform.localeName();
    }
    static get operatingSystem() {
      return io.Platform._operatingSystem;
    }
    static get operatingSystemVersion() {
      return io.Platform._operatingSystemVersion;
    }
    static get localHostname() {
      return io.Platform._localHostname;
    }
    static get environment() {
      return io._Platform.environment;
    }
    static get executable() {
      return io._Platform.executable;
    }
    static get resolvedExecutable() {
      return io._Platform.resolvedExecutable;
    }
    static get script() {
      return io._Platform.script;
    }
    static get executableArguments() {
      return io._Platform.executableArguments;
    }
    static get packageRoot() {
      return null;
    }
    static get packageConfig() {
      return io._Platform.packageConfig;
    }
    static get version() {
      return io.Platform._version;
    }
  };
  (io.Platform.new = function() {
    ;
  }).prototype = io.Platform.prototype;
  dart.addTypeTests(io.Platform);
  dart.addTypeCaches(io.Platform);
  dart.setLibraryUri(io.Platform, I[105]);
  dart.defineLazy(io.Platform, {
    /*io.Platform._numberOfProcessors*/get _numberOfProcessors() {
      return io._Platform.numberOfProcessors;
    },
    /*io.Platform._pathSeparator*/get _pathSeparator() {
      return io._Platform.pathSeparator;
    },
    /*io.Platform._operatingSystem*/get _operatingSystem() {
      return io._Platform.operatingSystem;
    },
    /*io.Platform._operatingSystemVersion*/get _operatingSystemVersion() {
      return io._Platform.operatingSystemVersion;
    },
    /*io.Platform._localHostname*/get _localHostname() {
      return io._Platform.localHostname;
    },
    /*io.Platform._version*/get _version() {
      return io._Platform.version;
    },
    /*io.Platform.isLinux*/get isLinux() {
      return io.Platform._operatingSystem === "linux";
    },
    /*io.Platform.isMacOS*/get isMacOS() {
      return io.Platform._operatingSystem === "macos";
    },
    /*io.Platform.isWindows*/get isWindows() {
      return io.Platform._operatingSystem === "windows";
    },
    /*io.Platform.isAndroid*/get isAndroid() {
      return io.Platform._operatingSystem === "android";
    },
    /*io.Platform.isIOS*/get isIOS() {
      return io.Platform._operatingSystem === "ios";
    },
    /*io.Platform.isFuchsia*/get isFuchsia() {
      return io.Platform._operatingSystem === "fuchsia";
    }
  }, false);
  io._Platform = class _Platform extends core.Object {
    static _packageRoot() {
      dart.throw(new core.UnsupportedError.new("Platform._packageRoot"));
    }
    static _numberOfProcessors() {
      dart.throw(new core.UnsupportedError.new("Platform._numberOfProcessors"));
    }
    static _pathSeparator() {
      dart.throw(new core.UnsupportedError.new("Platform._pathSeparator"));
    }
    static _operatingSystem() {
      dart.throw(new core.UnsupportedError.new("Platform._operatingSystem"));
    }
    static _operatingSystemVersion() {
      dart.throw(new core.UnsupportedError.new("Platform._operatingSystemVersion"));
    }
    static _localHostname() {
      dart.throw(new core.UnsupportedError.new("Platform._localHostname"));
    }
    static _executable() {
      dart.throw(new core.UnsupportedError.new("Platform._executable"));
    }
    static _resolvedExecutable() {
      dart.throw(new core.UnsupportedError.new("Platform._resolvedExecutable"));
    }
    static _environment() {
      dart.throw(new core.UnsupportedError.new("Platform._environment"));
    }
    static _executableArguments() {
      dart.throw(new core.UnsupportedError.new("Platform._executableArguments"));
    }
    static _packageConfig() {
      dart.throw(new core.UnsupportedError.new("Platform._packageConfig"));
    }
    static _version() {
      dart.throw(new core.UnsupportedError.new("Platform._version"));
    }
    static _localeName() {
      dart.throw(new core.UnsupportedError.new("Platform._localeName"));
    }
    static _script() {
      dart.throw(new core.UnsupportedError.new("Platform._script"));
    }
    static localeName() {
      let result = io._Platform._localeClosure == null ? io._Platform._localeName() : dart.nullCheck(io._Platform._localeClosure)();
      if (io.OSError.is(result)) {
        dart.throw(result);
      }
      return result;
    }
    static get numberOfProcessors() {
      return io._Platform._numberOfProcessors();
    }
    static get pathSeparator() {
      return io._Platform._pathSeparator();
    }
    static get operatingSystem() {
      return io._Platform._operatingSystem();
    }
    static get script() {
      return io._Platform._script();
    }
    static get operatingSystemVersion() {
      if (io._Platform._cachedOSVersion == null) {
        let result = io._Platform._operatingSystemVersion();
        if (io.OSError.is(result)) {
          dart.throw(result);
        }
        io._Platform._cachedOSVersion = T$.StringN().as(result);
      }
      return dart.nullCheck(io._Platform._cachedOSVersion);
    }
    static get localHostname() {
      let result = io._Platform._localHostname();
      if (io.OSError.is(result)) {
        dart.throw(result);
      }
      return core.String.as(result);
    }
    static get executableArguments() {
      return io._Platform._executableArguments();
    }
    static get environment() {
      if (io._Platform._environmentCache == null) {
        let env = io._Platform._environment();
        if (!io.OSError.is(env)) {
          let isWindows = io._Platform.operatingSystem === "windows";
          let result = isWindows ? new (T$0._CaseInsensitiveStringMapOfString()).new() : new (T$0.LinkedMapOfString$String()).new();
          for (let str of core.Iterable.as(env)) {
            if (str == null) {
              continue;
            }
            let equalsIndex = dart.dsend(str, 'indexOf', ["="]);
            if (dart.dtest(dart.dsend(equalsIndex, '>', [0]))) {
              result[$_set](core.String.as(dart.dsend(str, 'substring', [0, equalsIndex])), core.String.as(dart.dsend(str, 'substring', [dart.dsend(equalsIndex, '+', [1])])));
            }
          }
          io._Platform._environmentCache = new (T$0.UnmodifiableMapViewOfString$String()).new(result);
        } else {
          io._Platform._environmentCache = env;
        }
      }
      if (io.OSError.is(io._Platform._environmentCache)) {
        dart.throw(io._Platform._environmentCache);
      } else {
        return T$0.MapOfString$String().as(dart.nullCheck(io._Platform._environmentCache));
      }
    }
    static get version() {
      return io._Platform._version();
    }
  };
  (io._Platform.new = function() {
    ;
  }).prototype = io._Platform.prototype;
  dart.addTypeTests(io._Platform);
  dart.addTypeCaches(io._Platform);
  dart.setLibraryUri(io._Platform, I[105]);
  dart.defineLazy(io._Platform, {
    /*io._Platform.executable*/get executable() {
      return core.String.as(io._Platform._executable());
    },
    set executable(_) {},
    /*io._Platform.resolvedExecutable*/get resolvedExecutable() {
      return core.String.as(io._Platform._resolvedExecutable());
    },
    set resolvedExecutable(_) {},
    /*io._Platform.packageConfig*/get packageConfig() {
      return io._Platform._packageConfig();
    },
    set packageConfig(_) {},
    /*io._Platform._localeClosure*/get _localeClosure() {
      return null;
    },
    set _localeClosure(_) {},
    /*io._Platform._environmentCache*/get _environmentCache() {
      return null;
    },
    set _environmentCache(_) {},
    /*io._Platform._cachedOSVersion*/get _cachedOSVersion() {
      return null;
    },
    set _cachedOSVersion(_) {}
  }, false);
  var _map$10 = dart.privateName(io, "_map");
  const _is__CaseInsensitiveStringMap_default = Symbol('_is__CaseInsensitiveStringMap_default');
  io._CaseInsensitiveStringMap$ = dart.generic(V => {
    var LinkedMapOfString$V = () => (LinkedMapOfString$V = dart.constFn(_js_helper.LinkedMap$(core.String, V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var MapOfString$V = () => (MapOfString$V = dart.constFn(core.Map$(core.String, V)))();
    var StringAndVTovoid = () => (StringAndVTovoid = dart.constFn(dart.fnType(dart.void, [core.String, V])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    var StringAndVToV = () => (StringAndVToV = dart.constFn(dart.fnType(V, [core.String, V])))();
    class _CaseInsensitiveStringMap extends collection.MapBase$(core.String, V) {
      containsKey(key) {
        return typeof key == 'string' && dart.test(this[_map$10][$containsKey](key[$toUpperCase]()));
      }
      containsValue(value) {
        return this[_map$10][$containsValue](value);
      }
      _get(key) {
        return typeof key == 'string' ? this[_map$10][$_get](key[$toUpperCase]()) : null;
      }
      _set(key, value$) {
        let value = value$;
        core.String.as(key);
        if (key == null) dart.nullFailed(I[121], 129, 28, "key");
        V.as(value);
        this[_map$10][$_set](key[$toUpperCase](), value);
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        core.String.as(key);
        if (key == null) dart.nullFailed(I[121], 133, 24, "key");
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(I[121], 133, 31, "ifAbsent");
        return this[_map$10][$putIfAbsent](key[$toUpperCase](), ifAbsent);
      }
      addAll(other) {
        MapOfString$V().as(other);
        if (other == null) dart.nullFailed(I[121], 137, 30, "other");
        other[$forEach](dart.fn((key, value) => {
          let t204, t203;
          if (key == null) dart.nullFailed(I[121], 138, 20, "key");
          t203 = key[$toUpperCase]();
          t204 = value;
          this._set(t203, t204);
          return t204;
        }, StringAndVTovoid()));
      }
      remove(key) {
        return typeof key == 'string' ? this[_map$10][$remove](key[$toUpperCase]()) : null;
      }
      clear() {
        this[_map$10][$clear]();
      }
      forEach(f) {
        if (f == null) dart.nullFailed(I[121], 148, 21, "f");
        this[_map$10][$forEach](f);
      }
      get keys() {
        return this[_map$10][$keys];
      }
      get values() {
        return this[_map$10][$values];
      }
      get length() {
        return this[_map$10][$length];
      }
      get isEmpty() {
        return this[_map$10][$isEmpty];
      }
      get isNotEmpty() {
        return this[_map$10][$isNotEmpty];
      }
      get entries() {
        return this[_map$10][$entries];
      }
      map(K2, V2, transform) {
        if (transform == null) dart.nullFailed(I[121], 160, 44, "transform");
        return this[_map$10][$map](K2, V2, transform);
      }
      update(key, update, opts) {
        core.String.as(key);
        if (key == null) dart.nullFailed(I[121], 163, 19, "key");
        VToV().as(update);
        if (update == null) dart.nullFailed(I[121], 163, 26, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return this[_map$10][$update](key[$toUpperCase](), update, {ifAbsent: ifAbsent});
      }
      updateAll(update) {
        StringAndVToV().as(update);
        if (update == null) dart.nullFailed(I[121], 166, 20, "update");
        this[_map$10][$updateAll](update);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[121], 170, 25, "test");
        this[_map$10][$removeWhere](test);
      }
      toString() {
        return dart.toString(this[_map$10]);
      }
    }
    (_CaseInsensitiveStringMap.new = function() {
      this[_map$10] = new (LinkedMapOfString$V()).new();
      ;
    }).prototype = _CaseInsensitiveStringMap.prototype;
    dart.addTypeTests(_CaseInsensitiveStringMap);
    _CaseInsensitiveStringMap.prototype[_is__CaseInsensitiveStringMap_default] = true;
    dart.addTypeCaches(_CaseInsensitiveStringMap);
    dart.setMethodSignature(_CaseInsensitiveStringMap, () => ({
      __proto__: dart.getMethods(_CaseInsensitiveStringMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [core.String, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [core.String, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_CaseInsensitiveStringMap, () => ({
      __proto__: dart.getGetters(_CaseInsensitiveStringMap.__proto__),
      keys: core.Iterable$(core.String),
      [$keys]: core.Iterable$(core.String)
    }));
    dart.setLibraryUri(_CaseInsensitiveStringMap, I[105]);
    dart.setFieldSignature(_CaseInsensitiveStringMap, () => ({
      __proto__: dart.getFields(_CaseInsensitiveStringMap.__proto__),
      [_map$10]: dart.finalFieldType(core.Map$(core.String, V))
    }));
    dart.defineExtensionMethods(_CaseInsensitiveStringMap, [
      'containsKey',
      'containsValue',
      '_get',
      '_set',
      'putIfAbsent',
      'addAll',
      'remove',
      'clear',
      'forEach',
      'map',
      'update',
      'updateAll',
      'removeWhere',
      'toString'
    ]);
    dart.defineExtensionAccessors(_CaseInsensitiveStringMap, [
      'keys',
      'values',
      'length',
      'isEmpty',
      'isNotEmpty',
      'entries'
    ]);
    return _CaseInsensitiveStringMap;
  });
  io._CaseInsensitiveStringMap = io._CaseInsensitiveStringMap$();
  dart.addTypeTests(io._CaseInsensitiveStringMap, _is__CaseInsensitiveStringMap_default);
  io._ProcessUtils = class _ProcessUtils extends core.Object {
    static _exit(status) {
      if (status == null) dart.nullFailed(I[107], 306, 26, "status");
      dart.throw(new core.UnsupportedError.new("ProcessUtils._exit"));
    }
    static _setExitCode(status) {
      if (status == null) dart.nullFailed(I[107], 311, 32, "status");
      dart.throw(new core.UnsupportedError.new("ProcessUtils._setExitCode"));
    }
    static _getExitCode() {
      dart.throw(new core.UnsupportedError.new("ProcessUtils._getExitCode"));
    }
    static _sleep(millis) {
      if (millis == null) dart.nullFailed(I[107], 321, 26, "millis");
      dart.throw(new core.UnsupportedError.new("ProcessUtils._sleep"));
    }
    static _pid(process) {
      dart.throw(new core.UnsupportedError.new("ProcessUtils._pid"));
    }
    static _watchSignal(signal) {
      if (signal == null) dart.nullFailed(I[107], 331, 59, "signal");
      dart.throw(new core.UnsupportedError.new("ProcessUtils._watchSignal"));
    }
  };
  (io._ProcessUtils.new = function() {
    ;
  }).prototype = io._ProcessUtils.prototype;
  dart.addTypeTests(io._ProcessUtils);
  dart.addTypeCaches(io._ProcessUtils);
  dart.setLibraryUri(io._ProcessUtils, I[105]);
  io.ProcessInfo = class ProcessInfo extends core.Object {
    static get currentRss() {
      dart.throw(new core.UnsupportedError.new("ProcessInfo.currentRss"));
    }
    static get maxRss() {
      dart.throw(new core.UnsupportedError.new("ProcessInfo.maxRss"));
    }
  };
  (io.ProcessInfo.new = function() {
    ;
  }).prototype = io.ProcessInfo.prototype;
  dart.addTypeTests(io.ProcessInfo);
  dart.addTypeCaches(io.ProcessInfo);
  dart.setLibraryUri(io.ProcessInfo, I[105]);
  var _mode$0 = dart.privateName(io, "ProcessStartMode._mode");
  io.ProcessStartMode = class ProcessStartMode extends core.Object {
    get [_mode]() {
      return this[_mode$0];
    }
    set [_mode](value) {
      super[_mode] = value;
    }
    static get values() {
      return C[137] || CT.C137;
    }
    toString() {
      return (C[142] || CT.C142)[$_get](this[_mode]);
    }
  };
  (io.ProcessStartMode._internal = function(_mode) {
    if (_mode == null) dart.nullFailed(I[122], 156, 41, "_mode");
    this[_mode$0] = _mode;
    ;
  }).prototype = io.ProcessStartMode.prototype;
  dart.addTypeTests(io.ProcessStartMode);
  dart.addTypeCaches(io.ProcessStartMode);
  dart.setLibraryUri(io.ProcessStartMode, I[105]);
  dart.setFieldSignature(io.ProcessStartMode, () => ({
    __proto__: dart.getFields(io.ProcessStartMode.__proto__),
    [_mode]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.ProcessStartMode, ['toString']);
  dart.defineLazy(io.ProcessStartMode, {
    /*io.ProcessStartMode.normal*/get normal() {
      return C[138] || CT.C138;
    },
    /*io.ProcessStartMode.NORMAL*/get NORMAL() {
      return C[138] || CT.C138;
    },
    /*io.ProcessStartMode.inheritStdio*/get inheritStdio() {
      return C[139] || CT.C139;
    },
    /*io.ProcessStartMode.INHERIT_STDIO*/get INHERIT_STDIO() {
      return C[139] || CT.C139;
    },
    /*io.ProcessStartMode.detached*/get detached() {
      return C[140] || CT.C140;
    },
    /*io.ProcessStartMode.DETACHED*/get DETACHED() {
      return C[140] || CT.C140;
    },
    /*io.ProcessStartMode.detachedWithStdio*/get detachedWithStdio() {
      return C[141] || CT.C141;
    },
    /*io.ProcessStartMode.DETACHED_WITH_STDIO*/get DETACHED_WITH_STDIO() {
      return C[141] || CT.C141;
    }
  }, false);
  var ProcessSignal__name = dart.privateName(io, "ProcessSignal._name");
  var ProcessSignal__signalNumber = dart.privateName(io, "ProcessSignal._signalNumber");
  io.Process = class Process extends core.Object {
    static start(executable, $arguments, opts) {
      if (executable == null) dart.nullFailed(I[107], 352, 39, "executable");
      if ($arguments == null) dart.nullFailed(I[107], 352, 64, "arguments");
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      if (includeParentEnvironment == null) dart.nullFailed(I[107], 355, 12, "includeParentEnvironment");
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      if (runInShell == null) dart.nullFailed(I[107], 356, 12, "runInShell");
      let mode = opts && 'mode' in opts ? opts.mode : C[138] || CT.C138;
      if (mode == null) dart.nullFailed(I[107], 357, 24, "mode");
      dart.throw(new core.UnsupportedError.new("Process.start"));
    }
    static run(executable, $arguments, opts) {
      if (executable == null) dart.nullFailed(I[107], 362, 43, "executable");
      if ($arguments == null) dart.nullFailed(I[107], 362, 68, "arguments");
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      if (includeParentEnvironment == null) dart.nullFailed(I[107], 365, 12, "includeParentEnvironment");
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      if (runInShell == null) dart.nullFailed(I[107], 366, 12, "runInShell");
      let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C[143] || CT.C143;
      if (stdoutEncoding == null) dart.nullFailed(I[107], 367, 16, "stdoutEncoding");
      let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C[143] || CT.C143;
      if (stderrEncoding == null) dart.nullFailed(I[107], 368, 16, "stderrEncoding");
      dart.throw(new core.UnsupportedError.new("Process.run"));
    }
    static runSync(executable, $arguments, opts) {
      if (executable == null) dart.nullFailed(I[107], 373, 39, "executable");
      if ($arguments == null) dart.nullFailed(I[107], 373, 64, "arguments");
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      if (includeParentEnvironment == null) dart.nullFailed(I[107], 376, 12, "includeParentEnvironment");
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      if (runInShell == null) dart.nullFailed(I[107], 377, 12, "runInShell");
      let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C[143] || CT.C143;
      if (stdoutEncoding == null) dart.nullFailed(I[107], 378, 16, "stdoutEncoding");
      let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C[143] || CT.C143;
      if (stderrEncoding == null) dart.nullFailed(I[107], 379, 16, "stderrEncoding");
      dart.throw(new core.UnsupportedError.new("Process.runSync"));
    }
    static killPid(pid, signal = C[144] || CT.C144) {
      if (pid == null) dart.nullFailed(I[107], 384, 27, "pid");
      if (signal == null) dart.nullFailed(I[107], 384, 47, "signal");
      dart.throw(new core.UnsupportedError.new("Process.killPid"));
    }
  };
  (io.Process.new = function() {
    ;
  }).prototype = io.Process.prototype;
  dart.addTypeTests(io.Process);
  dart.addTypeCaches(io.Process);
  dart.setLibraryUri(io.Process, I[105]);
  var exitCode$ = dart.privateName(io, "ProcessResult.exitCode");
  var stdout$ = dart.privateName(io, "ProcessResult.stdout");
  var stderr$ = dart.privateName(io, "ProcessResult.stderr");
  var pid$ = dart.privateName(io, "ProcessResult.pid");
  io.ProcessResult = class ProcessResult extends core.Object {
    get exitCode() {
      return this[exitCode$];
    }
    set exitCode(value) {
      super.exitCode = value;
    }
    get stdout() {
      return this[stdout$];
    }
    set stdout(value) {
      super.stdout = value;
    }
    get stderr() {
      return this[stderr$];
    }
    set stderr(value) {
      super.stderr = value;
    }
    get pid() {
      return this[pid$];
    }
    set pid(value) {
      super.pid = value;
    }
  };
  (io.ProcessResult.new = function(pid, exitCode, stdout, stderr) {
    if (pid == null) dart.nullFailed(I[122], 469, 22, "pid");
    if (exitCode == null) dart.nullFailed(I[122], 469, 32, "exitCode");
    this[pid$] = pid;
    this[exitCode$] = exitCode;
    this[stdout$] = stdout;
    this[stderr$] = stderr;
    ;
  }).prototype = io.ProcessResult.prototype;
  dart.addTypeTests(io.ProcessResult);
  dart.addTypeCaches(io.ProcessResult);
  dart.setLibraryUri(io.ProcessResult, I[105]);
  dart.setFieldSignature(io.ProcessResult, () => ({
    __proto__: dart.getFields(io.ProcessResult.__proto__),
    exitCode: dart.finalFieldType(core.int),
    stdout: dart.finalFieldType(dart.dynamic),
    stderr: dart.finalFieldType(dart.dynamic),
    pid: dart.finalFieldType(core.int)
  }));
  var _signalNumber = dart.privateName(io, "_signalNumber");
  const _signalNumber$ = ProcessSignal__signalNumber;
  const _name$5 = ProcessSignal__name;
  io.ProcessSignal = class ProcessSignal extends core.Object {
    get [_signalNumber]() {
      return this[_signalNumber$];
    }
    set [_signalNumber](value) {
      super[_signalNumber] = value;
    }
    get [_name$4]() {
      return this[_name$5];
    }
    set [_name$4](value) {
      super[_name$4] = value;
    }
    toString() {
      return this[_name$4];
    }
    watch() {
      return io._ProcessUtils._watchSignal(this);
    }
  };
  (io.ProcessSignal.__ = function(_signalNumber, _name) {
    if (_signalNumber == null) dart.nullFailed(I[122], 571, 30, "_signalNumber");
    if (_name == null) dart.nullFailed(I[122], 571, 50, "_name");
    this[_signalNumber$] = _signalNumber;
    this[_name$5] = _name;
    ;
  }).prototype = io.ProcessSignal.prototype;
  dart.addTypeTests(io.ProcessSignal);
  dart.addTypeCaches(io.ProcessSignal);
  dart.setMethodSignature(io.ProcessSignal, () => ({
    __proto__: dart.getMethods(io.ProcessSignal.__proto__),
    watch: dart.fnType(async.Stream$(io.ProcessSignal), [])
  }));
  dart.setLibraryUri(io.ProcessSignal, I[105]);
  dart.setFieldSignature(io.ProcessSignal, () => ({
    __proto__: dart.getFields(io.ProcessSignal.__proto__),
    [_signalNumber]: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(io.ProcessSignal, ['toString']);
  dart.defineLazy(io.ProcessSignal, {
    /*io.ProcessSignal.sighup*/get sighup() {
      return C[145] || CT.C145;
    },
    /*io.ProcessSignal.sigint*/get sigint() {
      return C[146] || CT.C146;
    },
    /*io.ProcessSignal.sigquit*/get sigquit() {
      return C[147] || CT.C147;
    },
    /*io.ProcessSignal.sigill*/get sigill() {
      return C[148] || CT.C148;
    },
    /*io.ProcessSignal.sigtrap*/get sigtrap() {
      return C[149] || CT.C149;
    },
    /*io.ProcessSignal.sigabrt*/get sigabrt() {
      return C[150] || CT.C150;
    },
    /*io.ProcessSignal.sigbus*/get sigbus() {
      return C[151] || CT.C151;
    },
    /*io.ProcessSignal.sigfpe*/get sigfpe() {
      return C[152] || CT.C152;
    },
    /*io.ProcessSignal.sigkill*/get sigkill() {
      return C[153] || CT.C153;
    },
    /*io.ProcessSignal.sigusr1*/get sigusr1() {
      return C[154] || CT.C154;
    },
    /*io.ProcessSignal.sigsegv*/get sigsegv() {
      return C[155] || CT.C155;
    },
    /*io.ProcessSignal.sigusr2*/get sigusr2() {
      return C[156] || CT.C156;
    },
    /*io.ProcessSignal.sigpipe*/get sigpipe() {
      return C[157] || CT.C157;
    },
    /*io.ProcessSignal.sigalrm*/get sigalrm() {
      return C[158] || CT.C158;
    },
    /*io.ProcessSignal.sigterm*/get sigterm() {
      return C[144] || CT.C144;
    },
    /*io.ProcessSignal.sigchld*/get sigchld() {
      return C[159] || CT.C159;
    },
    /*io.ProcessSignal.sigcont*/get sigcont() {
      return C[160] || CT.C160;
    },
    /*io.ProcessSignal.sigstop*/get sigstop() {
      return C[161] || CT.C161;
    },
    /*io.ProcessSignal.sigtstp*/get sigtstp() {
      return C[162] || CT.C162;
    },
    /*io.ProcessSignal.sigttin*/get sigttin() {
      return C[163] || CT.C163;
    },
    /*io.ProcessSignal.sigttou*/get sigttou() {
      return C[164] || CT.C164;
    },
    /*io.ProcessSignal.sigurg*/get sigurg() {
      return C[165] || CT.C165;
    },
    /*io.ProcessSignal.sigxcpu*/get sigxcpu() {
      return C[166] || CT.C166;
    },
    /*io.ProcessSignal.sigxfsz*/get sigxfsz() {
      return C[167] || CT.C167;
    },
    /*io.ProcessSignal.sigvtalrm*/get sigvtalrm() {
      return C[168] || CT.C168;
    },
    /*io.ProcessSignal.sigprof*/get sigprof() {
      return C[169] || CT.C169;
    },
    /*io.ProcessSignal.sigwinch*/get sigwinch() {
      return C[170] || CT.C170;
    },
    /*io.ProcessSignal.sigpoll*/get sigpoll() {
      return C[171] || CT.C171;
    },
    /*io.ProcessSignal.sigsys*/get sigsys() {
      return C[172] || CT.C172;
    },
    /*io.ProcessSignal.SIGHUP*/get SIGHUP() {
      return C[145] || CT.C145;
    },
    /*io.ProcessSignal.SIGINT*/get SIGINT() {
      return C[146] || CT.C146;
    },
    /*io.ProcessSignal.SIGQUIT*/get SIGQUIT() {
      return C[147] || CT.C147;
    },
    /*io.ProcessSignal.SIGILL*/get SIGILL() {
      return C[148] || CT.C148;
    },
    /*io.ProcessSignal.SIGTRAP*/get SIGTRAP() {
      return C[149] || CT.C149;
    },
    /*io.ProcessSignal.SIGABRT*/get SIGABRT() {
      return C[150] || CT.C150;
    },
    /*io.ProcessSignal.SIGBUS*/get SIGBUS() {
      return C[151] || CT.C151;
    },
    /*io.ProcessSignal.SIGFPE*/get SIGFPE() {
      return C[152] || CT.C152;
    },
    /*io.ProcessSignal.SIGKILL*/get SIGKILL() {
      return C[153] || CT.C153;
    },
    /*io.ProcessSignal.SIGUSR1*/get SIGUSR1() {
      return C[154] || CT.C154;
    },
    /*io.ProcessSignal.SIGSEGV*/get SIGSEGV() {
      return C[155] || CT.C155;
    },
    /*io.ProcessSignal.SIGUSR2*/get SIGUSR2() {
      return C[156] || CT.C156;
    },
    /*io.ProcessSignal.SIGPIPE*/get SIGPIPE() {
      return C[157] || CT.C157;
    },
    /*io.ProcessSignal.SIGALRM*/get SIGALRM() {
      return C[158] || CT.C158;
    },
    /*io.ProcessSignal.SIGTERM*/get SIGTERM() {
      return C[144] || CT.C144;
    },
    /*io.ProcessSignal.SIGCHLD*/get SIGCHLD() {
      return C[159] || CT.C159;
    },
    /*io.ProcessSignal.SIGCONT*/get SIGCONT() {
      return C[160] || CT.C160;
    },
    /*io.ProcessSignal.SIGSTOP*/get SIGSTOP() {
      return C[161] || CT.C161;
    },
    /*io.ProcessSignal.SIGTSTP*/get SIGTSTP() {
      return C[162] || CT.C162;
    },
    /*io.ProcessSignal.SIGTTIN*/get SIGTTIN() {
      return C[163] || CT.C163;
    },
    /*io.ProcessSignal.SIGTTOU*/get SIGTTOU() {
      return C[164] || CT.C164;
    },
    /*io.ProcessSignal.SIGURG*/get SIGURG() {
      return C[165] || CT.C165;
    },
    /*io.ProcessSignal.SIGXCPU*/get SIGXCPU() {
      return C[166] || CT.C166;
    },
    /*io.ProcessSignal.SIGXFSZ*/get SIGXFSZ() {
      return C[167] || CT.C167;
    },
    /*io.ProcessSignal.SIGVTALRM*/get SIGVTALRM() {
      return C[168] || CT.C168;
    },
    /*io.ProcessSignal.SIGPROF*/get SIGPROF() {
      return C[169] || CT.C169;
    },
    /*io.ProcessSignal.SIGWINCH*/get SIGWINCH() {
      return C[170] || CT.C170;
    },
    /*io.ProcessSignal.SIGPOLL*/get SIGPOLL() {
      return C[171] || CT.C171;
    },
    /*io.ProcessSignal.SIGSYS*/get SIGSYS() {
      return C[172] || CT.C172;
    }
  }, false);
  var message$4 = dart.privateName(io, "SignalException.message");
  var osError$0 = dart.privateName(io, "SignalException.osError");
  io.SignalException = class SignalException extends core.Object {
    get message() {
      return this[message$4];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$0];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      let msg = "";
      if (this.osError != null) {
        msg = ", osError: " + dart.str(this.osError);
      }
      return "SignalException: " + dart.str(this.message) + msg;
    }
  };
  (io.SignalException.new = function(message, osError = null) {
    if (message == null) dart.nullFailed(I[122], 597, 30, "message");
    this[message$4] = message;
    this[osError$0] = osError;
    ;
  }).prototype = io.SignalException.prototype;
  dart.addTypeTests(io.SignalException);
  dart.addTypeCaches(io.SignalException);
  io.SignalException[dart.implements] = () => [io.IOException];
  dart.setLibraryUri(io.SignalException, I[105]);
  dart.setFieldSignature(io.SignalException, () => ({
    __proto__: dart.getFields(io.SignalException.__proto__),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(io.SignalException, ['toString']);
  var executable$ = dart.privateName(io, "ProcessException.executable");
  var $arguments$ = dart.privateName(io, "ProcessException.arguments");
  var message$5 = dart.privateName(io, "ProcessException.message");
  var errorCode$1 = dart.privateName(io, "ProcessException.errorCode");
  io.ProcessException = class ProcessException extends core.Object {
    get executable() {
      return this[executable$];
    }
    set executable(value) {
      super.executable = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    get message() {
      return this[message$5];
    }
    set message(value) {
      super.message = value;
    }
    get errorCode() {
      return this[errorCode$1];
    }
    set errorCode(value) {
      super.errorCode = value;
    }
    toString() {
      let args = this.arguments[$join](" ");
      return "ProcessException: " + dart.str(this.message) + "\n  Command: " + dart.str(this.executable) + " " + dart.str(args);
    }
  };
  (io.ProcessException.new = function(executable, $arguments, message = "", errorCode = 0) {
    if (executable == null) dart.nullFailed(I[122], 625, 31, "executable");
    if ($arguments == null) dart.nullFailed(I[122], 625, 48, "arguments");
    if (message == null) dart.nullFailed(I[122], 626, 13, "message");
    if (errorCode == null) dart.nullFailed(I[122], 626, 32, "errorCode");
    this[executable$] = executable;
    this[$arguments$] = $arguments;
    this[message$5] = message;
    this[errorCode$1] = errorCode;
    ;
  }).prototype = io.ProcessException.prototype;
  dart.addTypeTests(io.ProcessException);
  dart.addTypeCaches(io.ProcessException);
  io.ProcessException[dart.implements] = () => [io.IOException];
  dart.setLibraryUri(io.ProcessException, I[105]);
  dart.setFieldSignature(io.ProcessException, () => ({
    __proto__: dart.getFields(io.ProcessException.__proto__),
    executable: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(core.List$(core.String)),
    message: dart.finalFieldType(core.String),
    errorCode: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.ProcessException, ['toString']);
  var _socket$ = dart.privateName(io, "_socket");
  var _owner = dart.privateName(io, "_owner");
  var _onCancel$ = dart.privateName(io, "_onCancel");
  var _detachRaw = dart.privateName(io, "_detachRaw");
  io.SecureSocket = class SecureSocket extends core.Object {
    static connect(host, port, opts) {
      if (port == null) dart.nullFailed(I[124], 40, 49, "port");
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return io.RawSecureSocket.connect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols, timeout: timeout}).then(io.SecureSocket, dart.fn(rawSocket => {
        if (rawSocket == null) dart.nullFailed(I[124], 50, 16, "rawSocket");
        return io.SecureSocket.__(rawSocket);
      }, T$0.RawSecureSocketToSecureSocket()));
    }
    static startConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[124], 56, 70, "port");
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return io.RawSecureSocket.startConnect(host, port, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}).then(T$0.ConnectionTaskOfSecureSocket(), dart.fn(rawState => {
        if (rawState == null) dart.nullFailed(I[124], 64, 16, "rawState");
        let socket = rawState.socket.then(io.SecureSocket, dart.fn(rawSocket => {
          if (rawSocket == null) dart.nullFailed(I[124], 66, 33, "rawSocket");
          return io.SecureSocket.__(rawSocket);
        }, T$0.RawSecureSocketToSecureSocket()));
        return new (T$0.ConnectionTaskOfSecureSocket()).__(socket, rawState[_onCancel$]);
      }, T$0.ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket()));
    }
    static secure(socket, opts) {
      if (socket == null) dart.nullFailed(I[124], 103, 45, "socket");
      let host = opts && 'host' in opts ? opts.host : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secure(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), {subscription: T$0.StreamSubscriptionNOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), host: host, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols}), T$0.dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => {
        if (raw == null) dart.nullFailed(I[124], 116, 28, "raw");
        return io.SecureSocket.__(raw);
      }, T$0.RawSecureSocketToSecureSocket()));
    }
    static secureServer(socket, context, opts) {
      if (socket == null) dart.nullFailed(I[124], 140, 14, "socket");
      let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[124], 142, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[124], 143, 12, "requireClientCertificate");
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(io.RawSecureSocket, dart.fn(detachedRaw => io.RawSecureSocket.secureServer(io.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), context, {subscription: T$0.StreamSubscriptionNOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols}), T$0.dynamicToFutureOfRawSecureSocket())).then(io.SecureSocket, dart.fn(raw => {
        if (raw == null) dart.nullFailed(I[124], 153, 28, "raw");
        return io.SecureSocket.__(raw);
      }, T$0.RawSecureSocketToSecureSocket()));
    }
  };
  (io.SecureSocket[dart.mixinNew] = function() {
  }).prototype = io.SecureSocket.prototype;
  dart.addTypeTests(io.SecureSocket);
  dart.addTypeCaches(io.SecureSocket);
  io.SecureSocket[dart.implements] = () => [io.Socket];
  dart.setLibraryUri(io.SecureSocket, I[105]);
  io.SecureServerSocket = class SecureServerSocket extends async.Stream$(io.SecureSocket) {
    static bind(address, port, context, opts) {
      if (port == null) dart.nullFailed(I[123], 66, 20, "port");
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      if (backlog == null) dart.nullFailed(I[123], 67, 12, "backlog");
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      if (v6Only == null) dart.nullFailed(I[123], 68, 12, "v6Only");
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[123], 69, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[123], 70, 12, "requireClientCertificate");
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      if (shared == null) dart.nullFailed(I[123], 72, 12, "shared");
      return io.RawSecureServerSocket.bind(address, port, context, {backlog: backlog, v6Only: v6Only, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols, shared: shared}).then(io.SecureServerSocket, dart.fn(serverSocket => {
        if (serverSocket == null) dart.nullFailed(I[123], 80, 16, "serverSocket");
        return new io.SecureServerSocket.__(serverSocket);
      }, T$0.RawSecureServerSocketToSecureServerSocket()));
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_socket$].map(io.SecureSocket, dart.fn(rawSocket => {
        if (rawSocket == null) dart.nullFailed(I[123], 85, 25, "rawSocket");
        return io.SecureSocket.__(rawSocket);
      }, T$0.RawSecureSocketToSecureSocket())).listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get port() {
      return this[_socket$].port;
    }
    get address() {
      return this[_socket$].address;
    }
    close() {
      return this[_socket$].close().then(io.SecureServerSocket, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[123], 102, 63, "_");
        return this;
      }, T$0.RawSecureServerSocketToSecureServerSocket()));
    }
    set [_owner](owner) {
      this[_socket$][_owner] = owner;
    }
  };
  (io.SecureServerSocket.__ = function(_socket) {
    if (_socket == null) dart.nullFailed(I[123], 13, 29, "_socket");
    this[_socket$] = _socket;
    io.SecureServerSocket.__proto__.new.call(this);
    ;
  }).prototype = io.SecureServerSocket.prototype;
  dart.addTypeTests(io.SecureServerSocket);
  dart.addTypeCaches(io.SecureServerSocket);
  dart.setMethodSignature(io.SecureServerSocket, () => ({
    __proto__: dart.getMethods(io.SecureServerSocket.__proto__),
    listen: dart.fnType(async.StreamSubscription$(io.SecureSocket), [dart.nullable(dart.fnType(dart.void, [io.SecureSocket]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    close: dart.fnType(async.Future$(io.SecureServerSocket), [])
  }));
  dart.setGetterSignature(io.SecureServerSocket, () => ({
    __proto__: dart.getGetters(io.SecureServerSocket.__proto__),
    port: core.int,
    address: io.InternetAddress
  }));
  dart.setSetterSignature(io.SecureServerSocket, () => ({
    __proto__: dart.getSetters(io.SecureServerSocket.__proto__),
    [_owner]: dart.dynamic
  }));
  dart.setLibraryUri(io.SecureServerSocket, I[105]);
  dart.setFieldSignature(io.SecureServerSocket, () => ({
    __proto__: dart.getFields(io.SecureServerSocket.__proto__),
    [_socket$]: dart.finalFieldType(io.RawSecureServerSocket)
  }));
  var requestClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requestClientCertificate");
  var requireClientCertificate$ = dart.privateName(io, "RawSecureServerSocket.requireClientCertificate");
  var supportedProtocols$ = dart.privateName(io, "RawSecureServerSocket.supportedProtocols");
  var __RawSecureServerSocket__controller = dart.privateName(io, "_#RawSecureServerSocket#_controller");
  var __RawSecureServerSocket__controller_isSet = dart.privateName(io, "_#RawSecureServerSocket#_controller#isSet");
  var _subscription$ = dart.privateName(io, "_subscription");
  var _context$ = dart.privateName(io, "_context");
  var _onSubscriptionStateChange = dart.privateName(io, "_onSubscriptionStateChange");
  var _onPauseStateChange = dart.privateName(io, "_onPauseStateChange");
  var _onData$0 = dart.privateName(io, "_onData");
  io.RawSecureSocket = class RawSecureSocket extends core.Object {
    static connect(host, port, opts) {
      if (port == null) dart.nullFailed(I[124], 216, 52, "port");
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      io._RawSecureSocket._verifyFields(host, port, false, false);
      return io.RawSocket.connect(host, port, {timeout: timeout}).then(io.RawSecureSocket, dart.fn(socket => {
        if (socket == null) dart.nullFailed(I[124], 222, 66, "socket");
        return io.RawSecureSocket.secure(socket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
      }, T$0.RawSocketToFutureOfRawSecureSocket()));
    }
    static startConnect(host, port, opts) {
      if (port == null) dart.nullFailed(I[124], 233, 73, "port");
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return io.RawSocket.startConnect(host, port).then(T$0.ConnectionTaskOfRawSecureSocket(), dart.fn(rawState => {
        if (rawState == null) dart.nullFailed(I[124], 238, 42, "rawState");
        let socket = rawState.socket.then(io.RawSecureSocket, dart.fn(rawSocket => {
          if (rawSocket == null) dart.nullFailed(I[124], 239, 62, "rawSocket");
          return io.RawSecureSocket.secure(rawSocket, {context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
        }, T$0.RawSocketToFutureOfRawSecureSocket()));
        return new (T$0.ConnectionTaskOfRawSecureSocket()).__(socket, rawState[_onCancel$]);
      }, T$0.ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket()));
    }
    static secure(socket, opts) {
      if (socket == null) dart.nullFailed(I[124], 281, 51, "socket");
      let subscription = opts && 'subscription' in opts ? opts.subscription : null;
      let host = opts && 'host' in opts ? opts.host : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      socket.readEventsEnabled = false;
      socket.writeEventsEnabled = false;
      return io._RawSecureSocket.connect(host != null ? host : socket.address.host, socket.port, false, socket, {subscription: subscription, context: context, onBadCertificate: onBadCertificate, supportedProtocols: supportedProtocols});
    }
    static secureServer(socket, context, opts) {
      if (socket == null) dart.nullFailed(I[124], 320, 17, "socket");
      let subscription = opts && 'subscription' in opts ? opts.subscription : null;
      let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[124], 323, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[124], 324, 12, "requireClientCertificate");
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      socket.readEventsEnabled = false;
      socket.writeEventsEnabled = false;
      return io._RawSecureSocket.connect(socket.address, socket.remotePort, true, socket, {context: context, subscription: subscription, bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols});
    }
  };
  (io.RawSecureSocket.new = function() {
    ;
  }).prototype = io.RawSecureSocket.prototype;
  dart.addTypeTests(io.RawSecureSocket);
  dart.addTypeCaches(io.RawSecureSocket);
  io.RawSecureSocket[dart.implements] = () => [io.RawSocket];
  dart.setLibraryUri(io.RawSecureSocket, I[105]);
  io.RawSecureServerSocket = class RawSecureServerSocket extends async.Stream$(io.RawSecureSocket) {
    get requestClientCertificate() {
      return this[requestClientCertificate$];
    }
    set requestClientCertificate(value) {
      super.requestClientCertificate = value;
    }
    get requireClientCertificate() {
      return this[requireClientCertificate$];
    }
    set requireClientCertificate(value) {
      super.requireClientCertificate = value;
    }
    get supportedProtocols() {
      return this[supportedProtocols$];
    }
    set supportedProtocols(value) {
      super.supportedProtocols = value;
    }
    get [_controller]() {
      let t203;
      return dart.test(this[__RawSecureServerSocket__controller_isSet]) ? (t203 = this[__RawSecureServerSocket__controller], t203) : dart.throw(new _internal.LateError.fieldNI("_controller"));
    }
    set [_controller](t203) {
      if (t203 == null) dart.nullFailed(I[123], 114, 42, "null");
      this[__RawSecureServerSocket__controller_isSet] = true;
      this[__RawSecureServerSocket__controller] = t203;
    }
    static bind(address, port, context, opts) {
      if (port == null) dart.nullFailed(I[123], 186, 20, "port");
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      if (backlog == null) dart.nullFailed(I[123], 187, 12, "backlog");
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      if (v6Only == null) dart.nullFailed(I[123], 188, 12, "v6Only");
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[123], 189, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[123], 190, 12, "requireClientCertificate");
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      if (shared == null) dart.nullFailed(I[123], 192, 12, "shared");
      return io.RawServerSocket.bind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared}).then(io.RawSecureServerSocket, dart.fn(serverSocket => {
        if (serverSocket == null) dart.nullFailed(I[123], 195, 16, "serverSocket");
        return new io.RawSecureServerSocket.__(serverSocket, context, requestClientCertificate, requireClientCertificate, supportedProtocols);
      }, T$0.RawServerSocketToRawSecureServerSocket()));
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get port() {
      return this[_socket$].port;
    }
    get address() {
      return this[_socket$].address;
    }
    close() {
      this[_closed] = true;
      return this[_socket$].close().then(io.RawSecureServerSocket, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[123], 221, 34, "_");
        return this;
      }, T$0.RawServerSocketToRawSecureServerSocket()));
    }
    [_onData$0](connection) {
      if (connection == null) dart.nullFailed(I[123], 224, 26, "connection");
      let remotePort = null;
      try {
        remotePort = connection.remotePort;
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return;
        } else
          throw e$;
      }
      io._RawSecureSocket.connect(connection.address, core.int.as(remotePort), true, connection, {context: this[_context$], requestClientCertificate: this.requestClientCertificate, requireClientCertificate: this.requireClientCertificate, supportedProtocols: this.supportedProtocols}).then(core.Null, dart.fn(secureConnection => {
        if (secureConnection == null) dart.nullFailed(I[123], 238, 32, "secureConnection");
        if (dart.test(this[_closed])) {
          secureConnection.close();
        } else {
          this[_controller].add(secureConnection);
        }
      }, T$0.RawSecureSocketToNull())).catchError(dart.fn((e, s) => {
        if (!dart.test(this[_closed])) {
          this[_controller].addError(core.Object.as(e), T$.StackTraceN().as(s));
        }
      }, T$.dynamicAnddynamicToNull()));
    }
    [_onPauseStateChange]() {
      if (dart.test(this[_controller].isPaused)) {
        dart.nullCheck(this[_subscription$]).pause();
      } else {
        dart.nullCheck(this[_subscription$]).resume();
      }
    }
    [_onSubscriptionStateChange]() {
      if (dart.test(this[_controller].hasListener)) {
        this[_subscription$] = this[_socket$].listen(dart.bind(this, _onData$0), {onError: dart.bind(this[_controller], 'addError'), onDone: dart.bind(this[_controller], 'close')});
      } else {
        this.close();
      }
    }
    set [_owner](owner) {
      dart.dput(this[_socket$], _owner, owner);
    }
  };
  (io.RawSecureServerSocket.__ = function(_socket, _context, requestClientCertificate, requireClientCertificate, supportedProtocols) {
    if (_socket == null) dart.nullFailed(I[123], 123, 12, "_socket");
    if (requestClientCertificate == null) dart.nullFailed(I[123], 125, 12, "requestClientCertificate");
    if (requireClientCertificate == null) dart.nullFailed(I[123], 126, 12, "requireClientCertificate");
    this[__RawSecureServerSocket__controller] = null;
    this[__RawSecureServerSocket__controller_isSet] = false;
    this[_subscription$] = null;
    this[_closed] = false;
    this[_socket$] = _socket;
    this[_context$] = _context;
    this[requestClientCertificate$] = requestClientCertificate;
    this[requireClientCertificate$] = requireClientCertificate;
    this[supportedProtocols$] = supportedProtocols;
    io.RawSecureServerSocket.__proto__.new.call(this);
    this[_controller] = T$0.StreamControllerOfRawSecureSocket().new({sync: true, onListen: dart.bind(this, _onSubscriptionStateChange), onPause: dart.bind(this, _onPauseStateChange), onResume: dart.bind(this, _onPauseStateChange), onCancel: dart.bind(this, _onSubscriptionStateChange)});
  }).prototype = io.RawSecureServerSocket.prototype;
  dart.addTypeTests(io.RawSecureServerSocket);
  dart.addTypeCaches(io.RawSecureServerSocket);
  dart.setMethodSignature(io.RawSecureServerSocket, () => ({
    __proto__: dart.getMethods(io.RawSecureServerSocket.__proto__),
    listen: dart.fnType(async.StreamSubscription$(io.RawSecureSocket), [dart.nullable(dart.fnType(dart.void, [io.RawSecureSocket]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    close: dart.fnType(async.Future$(io.RawSecureServerSocket), []),
    [_onData$0]: dart.fnType(dart.void, [io.RawSocket]),
    [_onPauseStateChange]: dart.fnType(dart.void, []),
    [_onSubscriptionStateChange]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(io.RawSecureServerSocket, () => ({
    __proto__: dart.getGetters(io.RawSecureServerSocket.__proto__),
    [_controller]: async.StreamController$(io.RawSecureSocket),
    port: core.int,
    address: io.InternetAddress
  }));
  dart.setSetterSignature(io.RawSecureServerSocket, () => ({
    __proto__: dart.getSetters(io.RawSecureServerSocket.__proto__),
    [_controller]: async.StreamController$(io.RawSecureSocket),
    [_owner]: dart.dynamic
  }));
  dart.setLibraryUri(io.RawSecureServerSocket, I[105]);
  dart.setFieldSignature(io.RawSecureServerSocket, () => ({
    __proto__: dart.getFields(io.RawSecureServerSocket.__proto__),
    [_socket$]: dart.finalFieldType(io.RawServerSocket),
    [__RawSecureServerSocket__controller]: dart.fieldType(dart.nullable(async.StreamController$(io.RawSecureSocket))),
    [__RawSecureServerSocket__controller_isSet]: dart.fieldType(core.bool),
    [_subscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(io.RawSocket))),
    [_context$]: dart.finalFieldType(dart.nullable(io.SecurityContext)),
    requestClientCertificate: dart.finalFieldType(core.bool),
    requireClientCertificate: dart.finalFieldType(core.bool),
    supportedProtocols: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    [_closed]: dart.fieldType(core.bool)
  }));
  io.X509Certificate = class X509Certificate extends core.Object {};
  (io.X509Certificate[dart.mixinNew] = function() {
  }).prototype = io.X509Certificate.prototype;
  dart.addTypeTests(io.X509Certificate);
  dart.addTypeCaches(io.X509Certificate);
  dart.setLibraryUri(io.X509Certificate, I[105]);
  io._FilterStatus = class _FilterStatus extends core.Object {};
  (io._FilterStatus.new = function() {
    this.progress = false;
    this.readEmpty = true;
    this.writeEmpty = true;
    this.readPlaintextNoLongerEmpty = false;
    this.writePlaintextNoLongerFull = false;
    this.readEncryptedNoLongerFull = false;
    this.writeEncryptedNoLongerEmpty = false;
    ;
  }).prototype = io._FilterStatus.prototype;
  dart.addTypeTests(io._FilterStatus);
  dart.addTypeCaches(io._FilterStatus);
  dart.setLibraryUri(io._FilterStatus, I[105]);
  dart.setFieldSignature(io._FilterStatus, () => ({
    __proto__: dart.getFields(io._FilterStatus.__proto__),
    progress: dart.fieldType(core.bool),
    readEmpty: dart.fieldType(core.bool),
    writeEmpty: dart.fieldType(core.bool),
    readPlaintextNoLongerEmpty: dart.fieldType(core.bool),
    writePlaintextNoLongerFull: dart.fieldType(core.bool),
    readEncryptedNoLongerFull: dart.fieldType(core.bool),
    writeEncryptedNoLongerEmpty: dart.fieldType(core.bool)
  }));
  var _handshakeComplete = dart.privateName(io, "_handshakeComplete");
  var ___RawSecureSocket__socketSubscription = dart.privateName(io, "_#_RawSecureSocket#_socketSubscription");
  var ___RawSecureSocket__socketSubscription_isSet = dart.privateName(io, "_#_RawSecureSocket#_socketSubscription#isSet");
  var _bufferedDataIndex = dart.privateName(io, "_bufferedDataIndex");
  var _status = dart.privateName(io, "_status");
  var _writeEventsEnabled = dart.privateName(io, "_writeEventsEnabled");
  var _readEventsEnabled = dart.privateName(io, "_readEventsEnabled");
  var _pauseCount = dart.privateName(io, "_pauseCount");
  var _pendingReadEvent = dart.privateName(io, "_pendingReadEvent");
  var _socketClosedRead = dart.privateName(io, "_socketClosedRead");
  var _socketClosedWrite = dart.privateName(io, "_socketClosedWrite");
  var _closedRead = dart.privateName(io, "_closedRead");
  var _closedWrite = dart.privateName(io, "_closedWrite");
  var _filterStatus = dart.privateName(io, "_filterStatus");
  var _connectPending = dart.privateName(io, "_connectPending");
  var _filterPending = dart.privateName(io, "_filterPending");
  var _filterActive = dart.privateName(io, "_filterActive");
  var _secureFilter = dart.privateName(io, "_secureFilter");
  var _selectedProtocol = dart.privateName(io, "_selectedProtocol");
  var _bufferedData$ = dart.privateName(io, "_bufferedData");
  var _secureHandshakeCompleteHandler = dart.privateName(io, "_secureHandshakeCompleteHandler");
  var _onBadCertificateWrapper = dart.privateName(io, "_onBadCertificateWrapper");
  var _socketSubscription = dart.privateName(io, "_socketSubscription");
  var _eventDispatcher = dart.privateName(io, "_eventDispatcher");
  var _reportError = dart.privateName(io, "_reportError");
  var _doneHandler = dart.privateName(io, "_doneHandler");
  var _secureHandshake = dart.privateName(io, "_secureHandshake");
  var _sendWriteEvent = dart.privateName(io, "_sendWriteEvent");
  var _completeCloseCompleter = dart.privateName(io, "_completeCloseCompleter");
  var _close$ = dart.privateName(io, "_close");
  var _scheduleReadEvent = dart.privateName(io, "_scheduleReadEvent");
  var _scheduleFilter = dart.privateName(io, "_scheduleFilter");
  var _readHandler = dart.privateName(io, "_readHandler");
  var _writeHandler = dart.privateName(io, "_writeHandler");
  var _closeHandler = dart.privateName(io, "_closeHandler");
  var _readSocket = dart.privateName(io, "_readSocket");
  var _writeSocket = dart.privateName(io, "_writeSocket");
  var _tryFilter = dart.privateName(io, "_tryFilter");
  var _pushAllFilterStages = dart.privateName(io, "_pushAllFilterStages");
  var _readSocketOrBufferedData = dart.privateName(io, "_readSocketOrBufferedData");
  var _sendReadEvent = dart.privateName(io, "_sendReadEvent");
  var _value$ = dart.privateName(io, "RawSocketEvent._value");
  var _value$0 = dart.privateName(io, "_value");
  io.RawSocketEvent = class RawSocketEvent extends core.Object {
    get [_value$0]() {
      return this[_value$];
    }
    set [_value$0](value) {
      super[_value$0] = value;
    }
    toString() {
      return (C[173] || CT.C173)[$_get](this[_value$0]);
    }
  };
  (io.RawSocketEvent.__ = function(_value) {
    if (_value == null) dart.nullFailed(I[125], 518, 31, "_value");
    this[_value$] = _value;
    ;
  }).prototype = io.RawSocketEvent.prototype;
  dart.addTypeTests(io.RawSocketEvent);
  dart.addTypeCaches(io.RawSocketEvent);
  dart.setLibraryUri(io.RawSocketEvent, I[105]);
  dart.setFieldSignature(io.RawSocketEvent, () => ({
    __proto__: dart.getFields(io.RawSocketEvent.__proto__),
    [_value$0]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(io.RawSocketEvent, ['toString']);
  dart.defineLazy(io.RawSocketEvent, {
    /*io.RawSocketEvent.read*/get read() {
      return C[174] || CT.C174;
    },
    /*io.RawSocketEvent.write*/get write() {
      return C[175] || CT.C175;
    },
    /*io.RawSocketEvent.readClosed*/get readClosed() {
      return C[176] || CT.C176;
    },
    /*io.RawSocketEvent.closed*/get closed() {
      return C[177] || CT.C177;
    },
    /*io.RawSocketEvent.READ*/get READ() {
      return C[174] || CT.C174;
    },
    /*io.RawSocketEvent.WRITE*/get WRITE() {
      return C[175] || CT.C175;
    },
    /*io.RawSocketEvent.READ_CLOSED*/get READ_CLOSED() {
      return C[176] || CT.C176;
    },
    /*io.RawSocketEvent.CLOSED*/get CLOSED() {
      return C[177] || CT.C177;
    }
  }, false);
  io._RawSecureSocket = class _RawSecureSocket extends async.Stream$(io.RawSocketEvent) {
    static _isBufferEncrypted(identifier) {
      if (identifier == null) dart.nullFailed(I[124], 414, 38, "identifier");
      return dart.notNull(identifier) >= 2;
    }
    get [_socketSubscription]() {
      let t206;
      return dart.test(this[___RawSecureSocket__socketSubscription_isSet]) ? (t206 = this[___RawSecureSocket__socketSubscription], t206) : dart.throw(new _internal.LateError.fieldNI("_socketSubscription"));
    }
    set [_socketSubscription](t206) {
      if (t206 == null) dart.nullFailed(I[124], 421, 49, "null");
      if (dart.test(this[___RawSecureSocket__socketSubscription_isSet]))
        dart.throw(new _internal.LateError.fieldAI("_socketSubscription"));
      else {
        this[___RawSecureSocket__socketSubscription_isSet] = true;
        this[___RawSecureSocket__socketSubscription] = t206;
      }
    }
    static connect(host, requestedPort, isServer, socket, opts) {
      let t207;
      if (requestedPort == null) dart.nullFailed(I[124], 452, 11, "requestedPort");
      if (isServer == null) dart.nullFailed(I[124], 453, 12, "isServer");
      if (socket == null) dart.nullFailed(I[124], 454, 17, "socket");
      let context = opts && 'context' in opts ? opts.context : null;
      let subscription = opts && 'subscription' in opts ? opts.subscription : null;
      let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[124], 458, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[124], 459, 12, "requireClientCertificate");
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      io._RawSecureSocket._verifyFields(host, requestedPort, requestClientCertificate, requireClientCertificate);
      if (io.InternetAddress.is(host)) host = host.host;
      let address = socket.address;
      if (host != null) {
        address = io.InternetAddress._cloneWithNewHost(address, core.String.as(host));
      }
      return new io._RawSecureSocket.new(address, requestedPort, isServer, (t207 = context, t207 == null ? io.SecurityContext.defaultContext : t207), socket, subscription, bufferedData, requestClientCertificate, requireClientCertificate, onBadCertificate, supportedProtocols)[_handshakeComplete].future;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      this[_sendWriteEvent]();
      return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    static _verifyFields(host, requestedPort, requestClientCertificate, requireClientCertificate) {
      if (requestedPort == null) dart.nullFailed(I[124], 558, 39, "requestedPort");
      if (requestClientCertificate == null) dart.nullFailed(I[124], 559, 12, "requestClientCertificate");
      if (requireClientCertificate == null) dart.nullFailed(I[124], 559, 43, "requireClientCertificate");
      if (!(typeof host == 'string') && !io.InternetAddress.is(host)) {
        dart.throw(new core.ArgumentError.new("host is not a String or an InternetAddress"));
      }
      core.ArgumentError.checkNotNull(core.int, requestedPort, "requestedPort");
      if (dart.notNull(requestedPort) < 0 || dart.notNull(requestedPort) > 65535) {
        dart.throw(new core.ArgumentError.new("requestedPort is not in the range 0..65535"));
      }
      core.ArgumentError.checkNotNull(core.bool, requestClientCertificate, "requestClientCertificate");
      core.ArgumentError.checkNotNull(core.bool, requireClientCertificate, "requireClientCertificate");
    }
    get port() {
      return this[_socket$].port;
    }
    get remoteAddress() {
      return this[_socket$].remoteAddress;
    }
    get remotePort() {
      return this[_socket$].remotePort;
    }
    set [_owner](owner) {
      dart.dput(this[_socket$], _owner, owner);
    }
    available() {
      return this[_status] !== 202 ? 0 : dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).length;
    }
    close() {
      this.shutdown(io.SocketDirection.both);
      return this[_closeCompleter].future;
    }
    [_completeCloseCompleter](dummy = null) {
      if (!dart.test(this[_closeCompleter].isCompleted)) this[_closeCompleter].complete(this);
    }
    [_close$]() {
      this[_closedWrite] = true;
      this[_closedRead] = true;
      this[_socket$].close().then(dart.void, dart.bind(this, _completeCloseCompleter));
      this[_socketClosedWrite] = true;
      this[_socketClosedRead] = true;
      if (!dart.test(this[_filterActive]) && this[_secureFilter] != null) {
        dart.nullCheck(this[_secureFilter]).destroy();
        this[_secureFilter] = null;
      }
      if (this[_socketSubscription] != null) {
        this[_socketSubscription].cancel();
      }
      this[_controller].close();
      this[_status] = 203;
    }
    shutdown(direction) {
      if (direction == null) dart.nullFailed(I[124], 617, 33, "direction");
      if (dart.equals(direction, io.SocketDirection.send) || dart.equals(direction, io.SocketDirection.both)) {
        this[_closedWrite] = true;
        if (dart.test(this[_filterStatus].writeEmpty)) {
          this[_socket$].shutdown(io.SocketDirection.send);
          this[_socketClosedWrite] = true;
          if (dart.test(this[_closedRead])) {
            this[_close$]();
          }
        }
      }
      if (dart.equals(direction, io.SocketDirection.receive) || dart.equals(direction, io.SocketDirection.both)) {
        this[_closedRead] = true;
        this[_socketClosedRead] = true;
        this[_socket$].shutdown(io.SocketDirection.receive);
        if (dart.test(this[_socketClosedWrite])) {
          this[_close$]();
        }
      }
    }
    get writeEventsEnabled() {
      return this[_writeEventsEnabled];
    }
    set writeEventsEnabled(value) {
      if (value == null) dart.nullFailed(I[124], 642, 36, "value");
      this[_writeEventsEnabled] = value;
      if (dart.test(value)) {
        async.Timer.run(dart.fn(() => this[_sendWriteEvent](), T$.VoidTovoid()));
      }
    }
    get readEventsEnabled() {
      return this[_readEventsEnabled];
    }
    set readEventsEnabled(value) {
      if (value == null) dart.nullFailed(I[124], 651, 35, "value");
      this[_readEventsEnabled] = value;
      this[_scheduleReadEvent]();
    }
    read(length = null) {
      if (length != null && dart.notNull(length) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid length parameter in SecureSocket.read (length: " + dart.str(length) + ")"));
      }
      if (dart.test(this[_closedRead])) {
        dart.throw(new io.SocketException.new("Reading from a closed socket"));
      }
      if (this[_status] !== 202) {
        return null;
      }
      let result = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](0).read(length);
      this[_scheduleFilter]();
      return result;
    }
    static _fixOffset(offset) {
      let t207;
      t207 = offset;
      return t207 == null ? 0 : t207;
    }
    write(data, offset = 0, bytes = null) {
      if (data == null) dart.nullFailed(I[124], 675, 23, "data");
      if (offset == null) dart.nullFailed(I[124], 675, 34, "offset");
      if (bytes != null && dart.notNull(bytes) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid bytes parameter in SecureSocket.read (bytes: " + dart.str(bytes) + ")"));
      }
      offset = io._RawSecureSocket._fixOffset(offset);
      if (dart.notNull(offset) < 0) {
        dart.throw(new core.ArgumentError.new("Invalid offset parameter in SecureSocket.read (offset: " + dart.str(offset) + ")"));
      }
      if (dart.test(this[_closedWrite])) {
        this[_controller].addError(new io.SocketException.new("Writing to a closed socket"));
        return 0;
      }
      if (this[_status] !== 202) return 0;
      bytes == null ? bytes = dart.notNull(data[$length]) - dart.notNull(offset) : null;
      let written = dart.nullCheck(dart.nullCheck(this[_secureFilter]).buffers)[$_get](1).write(data, offset, bytes);
      if (dart.notNull(written) > 0) {
        this[_filterStatus].writeEmpty = false;
      }
      this[_scheduleFilter]();
      return written;
    }
    get peerCertificate() {
      return dart.nullCheck(this[_secureFilter]).peerCertificate;
    }
    get selectedProtocol() {
      return this[_selectedProtocol];
    }
    [_onBadCertificateWrapper](certificate) {
      if (certificate == null) dart.nullFailed(I[124], 706, 49, "certificate");
      if (this.onBadCertificate == null) return false;
      return dart.nullCheck(this.onBadCertificate)(certificate);
    }
    setOption(option, enabled) {
      if (option == null) dart.nullFailed(I[124], 711, 31, "option");
      if (enabled == null) dart.nullFailed(I[124], 711, 44, "enabled");
      return this[_socket$].setOption(option, enabled);
    }
    getRawOption(option) {
      if (option == null) dart.nullFailed(I[124], 715, 42, "option");
      return this[_socket$].getRawOption(option);
    }
    setRawOption(option) {
      if (option == null) dart.nullFailed(I[124], 719, 37, "option");
      this[_socket$].setRawOption(option);
    }
    [_eventDispatcher](event) {
      if (event == null) dart.nullFailed(I[124], 723, 40, "event");
      try {
        if (dart.equals(event, io.RawSocketEvent.read)) {
          this[_readHandler]();
        } else if (dart.equals(event, io.RawSocketEvent.write)) {
          this[_writeHandler]();
        } else if (dart.equals(event, io.RawSocketEvent.readClosed)) {
          this[_closeHandler]();
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let stackTrace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_reportError](e, stackTrace);
        } else
          throw e$;
      }
    }
    [_readHandler]() {
      this[_readSocket]();
      this[_scheduleFilter]();
    }
    [_writeHandler]() {
      this[_writeSocket]();
      this[_scheduleFilter]();
    }
    [_doneHandler]() {
      if (dart.test(this[_filterStatus].readEmpty)) {
        this[_close$]();
      }
    }
    [_reportError](e, stackTrace = null) {
      if (this[_status] === 203) {
        return;
      } else if (dart.test(this[_connectPending])) {
        this[_handshakeComplete].completeError(core.Object.as(e), stackTrace);
      } else {
        this[_controller].addError(core.Object.as(e), stackTrace);
      }
      this[_close$]();
    }
    [_closeHandler]() {
      return async.async(dart.void, (function* _closeHandler() {
        if (this[_status] === 202) {
          if (dart.test(this[_closedRead])) return;
          this[_socketClosedRead] = true;
          if (dart.test(this[_filterStatus].readEmpty)) {
            this[_closedRead] = true;
            this[_controller].add(io.RawSocketEvent.readClosed);
            if (dart.test(this[_socketClosedWrite])) {
              this[_close$]();
            }
          } else {
            yield this[_scheduleFilter]();
          }
        } else if (this[_status] === 201) {
          this[_socketClosedRead] = true;
          if (dart.test(this[_filterStatus].readEmpty)) {
            this[_reportError](new io.HandshakeException.new("Connection terminated during handshake"), null);
          } else {
            yield this[_secureHandshake]();
          }
        }
      }).bind(this));
    }
    [_secureHandshake]() {
      return async.async(dart.void, (function* _secureHandshake$() {
        try {
          let needRetryHandshake = (yield dart.nullCheck(this[_secureFilter]).handshake());
          if (dart.test(needRetryHandshake)) {
            yield this[_secureHandshake]();
          } else {
            this[_filterStatus].writeEmpty = false;
            this[_readSocket]();
            this[_writeSocket]();
            yield this[_scheduleFilter]();
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stackTrace = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[_reportError](e, stackTrace);
          } else
            throw e$;
        }
      }).bind(this));
    }
    renegotiate(opts) {
      let useSessionCache = opts && 'useSessionCache' in opts ? opts.useSessionCache : true;
      if (useSessionCache == null) dart.nullFailed(I[124], 810, 13, "useSessionCache");
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      if (requestClientCertificate == null) dart.nullFailed(I[124], 811, 12, "requestClientCertificate");
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      if (requireClientCertificate == null) dart.nullFailed(I[124], 812, 12, "requireClientCertificate");
      if (this[_status] !== 202) {
        dart.throw(new io.HandshakeException.new("Called renegotiate on a non-connected socket"));
      }
      dart.nullCheck(this[_secureFilter]).renegotiate(useSessionCache, requestClientCertificate, requireClientCertificate);
      this[_status] = 201;
      this[_filterStatus].writeEmpty = false;
      this[_scheduleFilter]();
    }
    [_secureHandshakeCompleteHandler]() {
      this[_status] = 202;
      if (dart.test(this[_connectPending])) {
        this[_connectPending] = false;
        try {
          this[_selectedProtocol] = dart.nullCheck(this[_secureFilter]).selectedProtocol();
          async.Timer.run(dart.fn(() => this[_handshakeComplete].complete(this), T$.VoidTovoid()));
        } catch (e) {
          let error = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(error)) {
            this[_handshakeComplete].completeError(error, stack);
          } else
            throw e;
        }
      }
    }
    [_onPauseStateChange]() {
      if (dart.test(this[_controller].isPaused)) {
        this[_pauseCount] = dart.notNull(this[_pauseCount]) + 1;
      } else {
        this[_pauseCount] = dart.notNull(this[_pauseCount]) - 1;
        if (this[_pauseCount] === 0) {
          this[_scheduleReadEvent]();
          this[_sendWriteEvent]();
        }
      }
      if (!dart.test(this[_socketClosedRead]) || !dart.test(this[_socketClosedWrite])) {
        if (dart.test(this[_controller].isPaused)) {
          this[_socketSubscription].pause();
        } else {
          this[_socketSubscription].resume();
        }
      }
    }
    [_onSubscriptionStateChange]() {
      if (dart.test(this[_controller].hasListener)) {
      }
    }
    [_scheduleFilter]() {
      this[_filterPending] = true;
      return this[_tryFilter]();
    }
    [_tryFilter]() {
      return async.async(dart.void, (function* _tryFilter() {
        try {
          while (true) {
            if (this[_status] === 203) {
              return;
            }
            if (!dart.test(this[_filterPending]) || dart.test(this[_filterActive])) {
              return;
            }
            this[_filterActive] = true;
            this[_filterPending] = false;
            this[_filterStatus] = (yield this[_pushAllFilterStages]());
            this[_filterActive] = false;
            if (this[_status] === 203) {
              dart.nullCheck(this[_secureFilter]).destroy();
              this[_secureFilter] = null;
              return;
            }
            this[_socket$].readEventsEnabled = true;
            if (dart.test(this[_filterStatus].writeEmpty) && dart.test(this[_closedWrite]) && !dart.test(this[_socketClosedWrite])) {
              this.shutdown(io.SocketDirection.send);
              if (this[_status] === 203) {
                return;
              }
            }
            if (dart.test(this[_filterStatus].readEmpty) && dart.test(this[_socketClosedRead]) && !dart.test(this[_closedRead])) {
              if (this[_status] === 201) {
                dart.nullCheck(this[_secureFilter]).handshake();
                if (this[_status] === 201) {
                  dart.throw(new io.HandshakeException.new("Connection terminated during handshake"));
                }
              }
              this[_closeHandler]();
            }
            if (this[_status] === 203) {
              return;
            }
            if (dart.test(this[_filterStatus].progress)) {
              this[_filterPending] = true;
              if (dart.test(this[_filterStatus].writeEncryptedNoLongerEmpty)) {
                this[_writeSocket]();
              }
              if (dart.test(this[_filterStatus].writePlaintextNoLongerFull)) {
                this[_sendWriteEvent]();
              }
              if (dart.test(this[_filterStatus].readEncryptedNoLongerFull)) {
                this[_readSocket]();
              }
              if (dart.test(this[_filterStatus].readPlaintextNoLongerEmpty)) {
                this[_scheduleReadEvent]();
              }
              if (this[_status] === 201) {
                yield this[_secureHandshake]();
              }
            }
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let st = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[_reportError](e, st);
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_readSocketOrBufferedData](bytes) {
      if (bytes == null) dart.nullFailed(I[124], 933, 44, "bytes");
      let bufferedData = this[_bufferedData$];
      if (bufferedData != null) {
        if (dart.notNull(bytes) > dart.notNull(bufferedData[$length]) - dart.notNull(this[_bufferedDataIndex])) {
          bytes = dart.notNull(bufferedData[$length]) - dart.notNull(this[_bufferedDataIndex]);
        }
        let result = bufferedData[$sublist](this[_bufferedDataIndex], dart.notNull(t